
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb0  08008bb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb8  08008bb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000070  08008c38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  08008c38  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b638  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005066  00000000  00000000  0004b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002070  00000000  00000000  00050740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea0  00000000  00000000  000527b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002add0  00000000  00000000  00054650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c43  00000000  00000000  0007f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb3fc  00000000  00000000  000a9063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019445f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef0  00000000  00000000  001944b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008b38 	.word	0x08008b38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08008b38 	.word	0x08008b38

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN6ButtonC1Ev>:
 */

#include "Button.h"


Button::Button()
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <_ZN6ButtonC1Ev+0x1c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
{
}
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	08008b58 	.word	0x08008b58

08000528 <_ZN6ButtonD1Ev>:

Button::~Button()
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <_ZN6ButtonD1Ev+0x1c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
{
}
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	08008b58 	.word	0x08008b58

08000548 <_ZN6ButtonD0Ev>:
Button::~Button()
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
}
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffe9 	bl	8000528 <_ZN6ButtonD1Ev>
 8000556:	2110      	movs	r1, #16
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f008 f93f 	bl	80087dc <_ZdlPvj>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f004 f835 	bl	8004614 <HAL_GPIO_WritePin>
	};
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <_ZN9ShiftRegsC1Ev+0x2c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3308      	adds	r3, #8
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffce 	bl	8000568 <_ZN3PinC1Ev>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3310      	adds	r3, #16
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffc9 	bl	8000568 <_ZN3PinC1Ev>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08008b78 	.word	0x08008b78

080005e4 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	3308      	adds	r3, #8
 80005fc:	3208      	adds	r2, #8
 80005fe:	6811      	ldr	r1, [r2, #0]
 8000600:	6019      	str	r1, [r3, #0]
 8000602:	8891      	ldrh	r1, [r2, #4]
 8000604:	7992      	ldrb	r2, [r2, #6]
 8000606:	8099      	strh	r1, [r3, #4]
 8000608:	719a      	strb	r2, [r3, #6]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	3310      	adds	r3, #16
 8000610:	3210      	adds	r2, #16
 8000612:	6811      	ldr	r1, [r2, #0]
 8000614:	6019      	str	r1, [r3, #0]
 8000616:	8891      	ldrh	r1, [r2, #4]
 8000618:	7992      	ldrb	r2, [r2, #6]
 800061a:	8099      	strh	r1, [r3, #4]
 800061c:	719a      	strb	r2, [r3, #6]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	8b1a      	ldrh	r2, [r3, #24]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	831a      	strh	r2, [r3, #24]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	61da      	str	r2, [r3, #28]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	6a1a      	ldr	r2, [r3, #32]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	621a      	str	r2, [r3, #32]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Init>:
		TIM_HandleTypeDef    *in_htim3,
		UART_HandleTypeDef   *in_huart1,
		UART_HandleTypeDef   *in_huart2,
		UART_HandleTypeDef   *in_huart3
	)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af02      	add	r7, sp, #8
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	4931      	ldr	r1, [pc, #196]	; (8000720 <Init+0xdc>)
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff8e 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066a:	492d      	ldr	r1, [pc, #180]	; (8000720 <Init+0xdc>)
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff86 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>

	currentADCHandle = in_hadc1;
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <Init+0xe0>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6013      	str	r3, [r2, #0]
	currentADCMemHandle = in_hdma_adc1;
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <Init+0xe4>)
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	6013      	str	r3, [r2, #0]
	stripI2cHandle = in_hfmpi2c1;
 800067e:	4a2b      	ldr	r2, [pc, #172]	; (800072c <Init+0xe8>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <Init+0xec>)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	6013      	str	r3, [r2, #0]
	i2cHandle = in_hi2c1;
 800068a:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <Init+0xf0>)
 800068c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800068e:	6013      	str	r3, [r2, #0]
	audioHandle = in_hi2s3;
 8000690:	4a29      	ldr	r2, [pc, #164]	; (8000738 <Init+0xf4>)
 8000692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000694:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = in_hdma_spi3_rx;
 8000696:	4a29      	ldr	r2, [pc, #164]	; (800073c <Init+0xf8>)
 8000698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800069a:	6013      	str	r3, [r2, #0]
	rtcHandle = in_hrtc;
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <Init+0xfc>)
 800069e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a0:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <Init+0x100>)
 80006a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006a6:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <Init+0x104>)
 80006aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ac:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 80006ae:	4a27      	ldr	r2, [pc, #156]	; (800074c <Init+0x108>)
 80006b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b2:	6013      	str	r3, [r2, #0]
	pwm2Handle = in_htim2;
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <Init+0x10c>)
 80006b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006b8:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 80006ba:	4a26      	ldr	r2, [pc, #152]	; (8000754 <Init+0x110>)
 80006bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006be:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <Init+0x114>)
 80006c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006c4:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <Init+0x118>)
 80006c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006cc:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 80006ce:	4a24      	ldr	r2, [pc, #144]	; (8000760 <Init+0x11c>)
 80006d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006d4:	6013      	str	r3, [r2, #0]

//	screen.Startup(screenHandle);
	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <Init+0x104>)
 80006d8:	681d      	ldr	r5, [r3, #0]
 80006da:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80006de:	466a      	mov	r2, sp
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	cb0c      	ldmia	r3, {r2, r3}
 80006f2:	4629      	mov	r1, r5
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f965 	bl	80009c4 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <Init+0x120>)
 8000702:	f7ff ff6f 	bl	80005e4 <_ZN9ShiftRegsaSERKS_>
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f99c 	bl	8000a48 <_ZN9ShiftRegsD1Ev>

	shiftReg.Init();
 8000710:	4814      	ldr	r0, [pc, #80]	; (8000764 <Init+0x120>)
 8000712:	f000 f9c1 	bl	8000a98 <_ZN9ShiftRegs4InitEv>
}
 8000716:	bf00      	nop
 8000718:	3748      	adds	r7, #72	; 0x48
 800071a:	46bd      	mov	sp, r7
 800071c:	bdb0      	pop	{r4, r5, r7, pc}
 800071e:	bf00      	nop
 8000720:	40020c00 	.word	0x40020c00
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000090 	.word	0x20000090
 800072c:	20000094 	.word	0x20000094
 8000730:	20000098 	.word	0x20000098
 8000734:	2000009c 	.word	0x2000009c
 8000738:	200000a0 	.word	0x200000a0
 800073c:	200000a4 	.word	0x200000a4
 8000740:	200000a8 	.word	0x200000a8
 8000744:	200000ac 	.word	0x200000ac
 8000748:	200000b0 	.word	0x200000b0
 800074c:	200000b4 	.word	0x200000b4
 8000750:	200000b8 	.word	0x200000b8
 8000754:	200000bc 	.word	0x200000bc
 8000758:	200000c0 	.word	0x200000c0
 800075c:	200000c4 	.word	0x200000c4
 8000760:	200000c8 	.word	0x200000c8
 8000764:	200000cc 	.word	0x200000cc

08000768 <InitTest>:

void InitTest()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	shiftReg.IndicatorTest();
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <InitTest+0x10>)
 800076e:	f000 f9a5 	bl	8000abc <_ZN9ShiftRegs13IndicatorTestEv>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000cc 	.word	0x200000cc

0800077c <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, 0);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <Main+0x30>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 800078a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078e:	f001 ff6f 	bl	8002670 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, UINT32_MAX / 2);
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <Main+0x30>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f001 ff65 	bl	8002670 <HAL_Delay>
//		Screen Nav Testing

//
//	ReadCurrent();
//	shiftReg.Update();
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000b8 	.word	0x200000b8

080007b0 <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_UP_IND);
 80007b4:	2103      	movs	r1, #3
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <MenuUpInterruptCallback+0x10>)
 80007b8:	f000 f9d3 	bl	8000b62 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000cc 	.word	0x200000cc

080007c4 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_DOWN_IND);
 80007c8:	2102      	movs	r1, #2
 80007ca:	4802      	ldr	r0, [pc, #8]	; (80007d4 <MenuDownInterruptCallback+0x10>)
 80007cc:	f000 f9c9 	bl	8000b62 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000cc 	.word	0x200000cc

080007d8 <MenuRightInterruptCallback>:
//void MenuLeftInterruptCallback()
//{
//
//}
void MenuRightInterruptCallback()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_RIGHT_IND);
 80007dc:	2105      	movs	r1, #5
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <MenuRightInterruptCallback+0x10>)
 80007e0:	f000 f9bf 	bl	8000b62 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000cc 	.word	0x200000cc

080007ec <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 80007f0:	2108      	movs	r1, #8
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <MenuActInterruptCallback+0x10>)
 80007f4:	f000 f9b5 	bl	8000b62 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000cc 	.word	0x200000cc

08000800 <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	relayState = relayState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MenuBackInterruptCallback+0x38>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MenuBackInterruptCallback+0x38>)
 8000816:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin, relayState);
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MenuBackInterruptCallback+0x38>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	2101      	movs	r1, #1
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <MenuBackInterruptCallback+0x3c>)
 8000822:	f003 fef7 	bl	8004614 <HAL_GPIO_WritePin>
	shiftReg.SetValue((uint8_t)relayState, MENU_BACK_IND);
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <MenuBackInterruptCallback+0x38>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MenuBackInterruptCallback+0x40>)
 8000830:	f000 f96a 	bl	8000b08 <_ZN9ShiftRegs8SetValueEhj>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000134 	.word	0x20000134
 800083c:	40020c00 	.word	0x40020c00
 8000840:	200000cc 	.word	0x200000cc

08000844 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <_Z41__static_initialization_and_destruction_0ii>:
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d113      	bne.n	8000898 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000876:	4293      	cmp	r3, r2
 8000878:	d10e      	bne.n	8000898 <_Z41__static_initialization_and_destruction_0ii+0x38>
ShiftRegs shiftReg;
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800087c:	f7ff fe9a 	bl	80005b4 <_ZN9ShiftRegsC1Ev>
Nextion screen = Nextion();
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000882:	f000 f83f 	bl	8000904 <_ZN7NextionC1Ev>
Button menuUp = Button();
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000888:	f7ff fe3e 	bl	8000508 <_ZN6ButtonC1Ev>
Button menuDown = Button();
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800088e:	f7ff fe3b 	bl	8000508 <_ZN6ButtonC1Ev>
StripCurrent stripCurr = StripCurrent();
 8000892:	4813      	ldr	r0, [pc, #76]	; (80008e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000894:	f000 f9ca 	bl	8000c2c <_ZN12StripCurrentC1Ev>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d113      	bne.n	80008c6 <_Z41__static_initialization_and_destruction_0ii+0x66>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d10e      	bne.n	80008c6 <_Z41__static_initialization_and_destruction_0ii+0x66>
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80008aa:	f000 f9cf 	bl	8000c4c <_ZN12StripCurrentD1Ev>
Button menuDown = Button();
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80008b0:	f7ff fe3a 	bl	8000528 <_ZN6ButtonD1Ev>
Button menuUp = Button();
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80008b6:	f7ff fe37 	bl	8000528 <_ZN6ButtonD1Ev>
Nextion screen = Nextion();
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80008bc:	f000 f848 	bl	8000950 <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80008c2:	f000 f8c1 	bl	8000a48 <_ZN9ShiftRegsD1Ev>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000cc 	.word	0x200000cc
 80008d4:	200000f0 	.word	0x200000f0
 80008d8:	20000108 	.word	0x20000108
 80008dc:	20000118 	.word	0x20000118
 80008e0:	20000128 	.word	0x20000128

080008e4 <_GLOBAL__sub_I_currentADCHandle>:
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ffb7 	bl	8000860 <_Z41__static_initialization_and_destruction_0ii>
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_GLOBAL__sub_D_currentADCHandle>:
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ffaf 	bl	8000860 <_Z41__static_initialization_and_destruction_0ii>
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	4a0f      	ldr	r2, [pc, #60]	; (800094c <_ZN7NextionC1Ev+0x48>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8000912:	2010      	movs	r0, #16
 8000914:	f007 ff66 	bl	80087e4 <_Znaj>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8000920:	2008      	movs	r0, #8
 8000922:	f007 ff5f 	bl	80087e4 <_Znaj>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 800092e:	2010      	movs	r0, #16
 8000930:	f007 ff58 	bl	80087e4 <_Znaj>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	611a      	str	r2, [r3, #16]
	this->index = 0;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	719a      	strb	r2, [r3, #6]
}
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	08008b68 	.word	0x08008b68

08000950 <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <_ZN7NextionD1Ev+0x50>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
{
	delete[] cmdBuffer;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d004      	beq.n	8000970 <_ZN7NextionD1Ev+0x20>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	4618      	mov	r0, r3
 800096c:	f007 ff38 	bl	80087e0 <_ZdaPv>
	delete[] recBuffer;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <_ZN7NextionD1Ev+0x32>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4618      	mov	r0, r3
 800097e:	f007 ff2f 	bl	80087e0 <_ZdaPv>
	delete[] buffer;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <_ZN7NextionD1Ev+0x44>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	4618      	mov	r0, r3
 8000990:	f007 ff26 	bl	80087e0 <_ZdaPv>
}
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	08008b68 	.word	0x08008b68

080009a4 <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
}
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffcf 	bl	8000950 <_ZN7NextionD1Ev>
 80009b2:	2118      	movs	r1, #24
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f007 ff11 	bl	80087dc <_ZdlPvj>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	4639      	mov	r1, r7
 80009d0:	e881 000c 	stmia.w	r1, {r2, r3}
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3308      	adds	r3, #8
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fdc2 	bl	8000568 <_ZN3PinC1Ev>
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3310      	adds	r3, #16
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fdbd 	bl	8000568 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3308      	adds	r3, #8
 80009f8:	463a      	mov	r2, r7
 80009fa:	6810      	ldr	r0, [r2, #0]
 80009fc:	6018      	str	r0, [r3, #0]
 80009fe:	8891      	ldrh	r1, [r2, #4]
 8000a00:	7992      	ldrb	r2, [r2, #6]
 8000a02:	8099      	strh	r1, [r3, #4]
 8000a04:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3310      	adds	r3, #16
 8000a0a:	f107 0218 	add.w	r2, r7, #24
 8000a0e:	6810      	ldr	r0, [r2, #0]
 8000a10:	6018      	str	r0, [r3, #0]
 8000a12:	8891      	ldrh	r1, [r2, #4]
 8000a14:	7992      	ldrb	r2, [r2, #6]
 8000a16:	8099      	strh	r1, [r3, #4]
 8000a18:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f007 fee2 	bl	80087e4 <_Znaj>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	4613      	mov	r3, r2
 8000a26:	2100      	movs	r1, #0
 8000a28:	7019      	strb	r1, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	7019      	strb	r1, [r3, #0]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2200      	movs	r2, #0
 8000a38:	831a      	strh	r2, [r3, #24]
}
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08008b78 	.word	0x08008b78

08000a48 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <_ZN9ShiftRegsD1Ev+0x2c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <_ZN9ShiftRegsD1Ev+0x20>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 febc 	bl	80087e0 <_ZdaPv>
}
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08008b78 	.word	0x08008b78

08000a78 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
}
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffe1 	bl	8000a48 <_ZN9ShiftRegsD1Ev>
 8000a86:	2124      	movs	r1, #36	; 0x24
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f007 fea7 	bl	80087dc <_ZdlPvj>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f90e 	bl	8000cc6 <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3310      	adds	r3, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f909 	bl	8000cc6 <_ZN3Pin5ClearEv>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZN9ShiftRegs13IndicatorTestEv>:

void ShiftRegs::IndicatorTest()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 32; ++i) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	dc16      	bgt.n	8000b00 <_ZN9ShiftRegs13IndicatorTestEv+0x44>

		ToggleValue(count);
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 f843 	bl	8000b62 <_ZN9ShiftRegs11ToggleValueEj>
		Update();
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f86d 	bl	8000bbc <_ZN9ShiftRegs6UpdateEv>
		count++;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
		if (count >= 16)
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	d901      	bls.n	8000af2 <_ZN9ShiftRegs13IndicatorTestEv+0x36>
		{
			count = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(50);
 8000af2:	2032      	movs	r0, #50	; 0x32
 8000af4:	f001 fdbc 	bl	8002670 <HAL_Delay>
	for (int i = 0; i < 32; ++i) {
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	e7e5      	b.n	8000acc <_ZN9ShiftRegs13IndicatorTestEv+0x10>
	}
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	460b      	mov	r3, r1
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10d      	bne.n	8000b38 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	8b1b      	ldrh	r3, [r3, #24]
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	2101      	movs	r1, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8000b36:	e00e      	b.n	8000b56 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	8b1b      	ldrh	r3, [r3, #24]
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	2101      	movs	r1, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	831a      	strh	r2, [r3, #24]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f80f 	bl	8000b92 <_ZN9ShiftRegs8GetValueEj>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ffbf 	bl	8000b08 <_ZN9ShiftRegs8SetValueEhj>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	8b1b      	ldrh	r3, [r3, #24]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	fa42 f303 	asr.w	r3, r2, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_ZN9ShiftRegs6UpdateEv>:

void ShiftRegs::Update()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	this->_buffer[0] = this->_number & 0xFF;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	8b1a      	ldrh	r2, [r3, #24]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	701a      	strb	r2, [r3, #0]
	this->_buffer[1] = (this->_number & 0xFF00) >> 8;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	8b1b      	ldrh	r3, [r3, #24]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	701a      	strb	r2, [r3, #0]
	this->OEPin.Write(GPIO_PIN_SET);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3308      	adds	r3, #8
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f84f 	bl	8000c8c <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_SET);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3310      	adds	r3, #16
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f849 	bl	8000c8c <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_SET);
	HAL_SPI_Transmit(this->_spi, this->_buffer, 2, Timeout);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69d8      	ldr	r0, [r3, #28]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a19      	ldr	r1, [r3, #32]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2202      	movs	r2, #2
 8000c08:	f005 ff05 	bl	8006a16 <HAL_SPI_Transmit>
	this->OEPin.Write(GPIO_PIN_RESET);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3308      	adds	r3, #8
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f83a 	bl	8000c8c <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_RESET);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3310      	adds	r3, #16
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f834 	bl	8000c8c <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZN12StripCurrentC1Ev>:
 *      Author: Daxxn
 */

#include <StripCurrent.h>

StripCurrent::StripCurrent()
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <_ZN12StripCurrentC1Ev+0x1c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
{
}
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	08008b88 	.word	0x08008b88

08000c4c <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <_ZN12StripCurrentD1Ev+0x1c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
{
}
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	08008b88 	.word	0x08008b88

08000c6c <_ZN12StripCurrentD0Ev>:
StripCurrent::~StripCurrent()
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
}
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe9 	bl	8000c4c <_ZN12StripCurrentD1Ev>
 8000c7a:	210c      	movs	r1, #12
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f007 fdad 	bl	80087dc <_ZdlPvj>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	8899      	ldrh	r1, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	799b      	ldrb	r3, [r3, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d106      	bne.n	8000cb6 <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf0c      	ite	eq
 8000cae:	2301      	moveq	r3, #1
 8000cb0:	2300      	movne	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	e000      	b.n	8000cb8 <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f003 fcab 	bl	8004614 <HAL_GPIO_WritePin>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	8899      	ldrh	r1, [r3, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f003 fc9a 	bl	8004614 <HAL_GPIO_WritePin>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cf8:	d020      	beq.n	8000d3c <HAL_GPIO_EXTI_Callback+0x54>
 8000cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cfe:	dc31      	bgt.n	8000d64 <HAL_GPIO_EXTI_Callback+0x7c>
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d04:	d01d      	beq.n	8000d42 <HAL_GPIO_EXTI_Callback+0x5a>
 8000d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d0a:	dc2b      	bgt.n	8000d64 <HAL_GPIO_EXTI_Callback+0x7c>
 8000d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d10:	d01a      	beq.n	8000d48 <HAL_GPIO_EXTI_Callback+0x60>
 8000d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d16:	dc25      	bgt.n	8000d64 <HAL_GPIO_EXTI_Callback+0x7c>
 8000d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d1c:	d020      	beq.n	8000d60 <HAL_GPIO_EXTI_Callback+0x78>
 8000d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d22:	dc1f      	bgt.n	8000d64 <HAL_GPIO_EXTI_Callback+0x7c>
 8000d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d28:	d017      	beq.n	8000d5a <HAL_GPIO_EXTI_Callback+0x72>
 8000d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2e:	dc19      	bgt.n	8000d64 <HAL_GPIO_EXTI_Callback+0x7c>
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d00c      	beq.n	8000d4e <HAL_GPIO_EXTI_Callback+0x66>
 8000d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d38:	d00c      	beq.n	8000d54 <HAL_GPIO_EXTI_Callback+0x6c>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 8000d3a:	e013      	b.n	8000d64 <HAL_GPIO_EXTI_Callback+0x7c>
			Enc1TurnInterruptCallback();
 8000d3c:	f7ff fd82 	bl	8000844 <Enc1TurnInterruptCallback>
			break;
 8000d40:	e011      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x7e>
			Enc2TurnInterruptCallback();
 8000d42:	f7ff fd86 	bl	8000852 <Enc2TurnInterruptCallback>
			break;
 8000d46:	e00e      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuUpInterruptCallback();
 8000d48:	f7ff fd32 	bl	80007b0 <MenuUpInterruptCallback>
			break;
 8000d4c:	e00b      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuDownInterruptCallback();
 8000d4e:	f7ff fd39 	bl	80007c4 <MenuDownInterruptCallback>
			break;
 8000d52:	e008      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuRightInterruptCallback();
 8000d54:	f7ff fd40 	bl	80007d8 <MenuRightInterruptCallback>
			break;
 8000d58:	e005      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
 8000d5a:	f7ff fd47 	bl	80007ec <MenuActInterruptCallback>
			break;
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuBackInterruptCallback();
 8000d60:	f7ff fd4e 	bl	8000800 <MenuBackInterruptCallback>
			break;
 8000d64:	bf00      	nop
	}
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f001 fc09 	bl	800258c <HAL_Init>

  /* USER CODE BEGIN Init */
  Init(
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <main+0xd4>)
 8000d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <main+0xd8>)
 8000d80:	930a      	str	r3, [sp, #40]	; 0x28
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <main+0xdc>)
 8000d84:	9309      	str	r3, [sp, #36]	; 0x24
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <main+0xe0>)
 8000d88:	9308      	str	r3, [sp, #32]
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <main+0xe4>)
 8000d8c:	9307      	str	r3, [sp, #28]
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <main+0xe8>)
 8000d90:	9306      	str	r3, [sp, #24]
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <main+0xec>)
 8000d94:	9305      	str	r3, [sp, #20]
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <main+0xf0>)
 8000d98:	9304      	str	r3, [sp, #16]
 8000d9a:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <main+0xf4>)
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <main+0xf8>)
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <main+0xfc>)
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <main+0x100>)
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <main+0x104>)
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <main+0x108>)
 8000dae:	4933      	ldr	r1, [pc, #204]	; (8000e7c <main+0x10c>)
 8000db0:	4833      	ldr	r0, [pc, #204]	; (8000e80 <main+0x110>)
 8000db2:	f7ff fc47 	bl	8000644 <Init>
		  &huart3
  );
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f867 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f000 fc9b 	bl	80016f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dbe:	f000 fc5b 	bl	8001678 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dc2:	f000 f8cd 	bl	8000f60 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000dc6:	f000 fa99 	bl	80012fc <MX_TIM2_Init>
  MX_I2C1_Init();
 8000dca:	f000 f965 	bl	8001098 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000dce:	f000 fb15 	bl	80013fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000dd2:	f000 fbd3 	bl	800157c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dd6:	f000 fbfb 	bl	80015d0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000dda:	f000 fb91 	bl	8001500 <MX_TIM6_Init>
  //MX_RTC_Init();
  MX_I2S3_Init();
 8000dde:	f000 f989 	bl	80010f4 <MX_I2S3_Init>
  //MX_SDIO_SD_Init();
  MX_SPI4_Init();
 8000de2:	f000 f9b5 	bl	8001150 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8000de6:	f000 f91b 	bl	8001020 <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8000dea:	f000 fc1b 	bl	8001624 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000dee:	f000 f9e5 	bl	80011bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, pData, Length);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <main+0xe8>)
 8000df6:	f006 f8bd 	bl	8006f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4815      	ldr	r0, [pc, #84]	; (8000e54 <main+0xe4>)
 8000dfe:	f006 f8b9 	bl	8006f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e02:	2104      	movs	r1, #4
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <main+0xe4>)
 8000e06:	f006 f8b5 	bl	8006f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4810      	ldr	r0, [pc, #64]	; (8000e50 <main+0xe0>)
 8000e0e:	f006 f8b1 	bl	8006f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e12:	210c      	movs	r1, #12
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <main+0xe0>)
 8000e16:	f006 f8ad 	bl	8006f74 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <main+0x114>)
 8000e22:	f003 fbf7 	bl	8004614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <main+0x114>)
 8000e2e:	f003 fbf1 	bl	8004614 <HAL_GPIO_WritePin>

  HAL_ADC_Start(&hadc1);
 8000e32:	4813      	ldr	r0, [pc, #76]	; (8000e80 <main+0x110>)
 8000e34:	f001 fca6 	bl	8002784 <HAL_ADC_Start>

  // For Init tests
  InitTest();
 8000e38:	f7ff fc96 	bl	8000768 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8000e3c:	f7ff fc9e 	bl	800077c <Main>
 8000e40:	e7fc      	b.n	8000e3c <main+0xcc>
 8000e42:	bf00      	nop
 8000e44:	20000648 	.word	0x20000648
 8000e48:	20000604 	.word	0x20000604
 8000e4c:	200005c0 	.word	0x200005c0
 8000e50:	20000530 	.word	0x20000530
 8000e54:	200004e8 	.word	0x200004e8
 8000e58:	200004a0 	.word	0x200004a0
 8000e5c:	20000448 	.word	0x20000448
 8000e60:	200003c4 	.word	0x200003c4
 8000e64:	200003a4 	.word	0x200003a4
 8000e68:	20000344 	.word	0x20000344
 8000e6c:	200002fc 	.word	0x200002fc
 8000e70:	200002a8 	.word	0x200002a8
 8000e74:	20000248 	.word	0x20000248
 8000e78:	200001fc 	.word	0x200001fc
 8000e7c:	2000019c 	.word	0x2000019c
 8000e80:	20000138 	.word	0x20000138
 8000e84:	40020c00 	.word	0x40020c00

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2234      	movs	r2, #52	; 0x34
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f007 fd04 	bl	80088a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <SystemClock_Config+0xd0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <SystemClock_Config+0xd0>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <SystemClock_Config+0xd0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <SystemClock_Config+0xd4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <SystemClock_Config+0xd4>)
 8000ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <SystemClock_Config+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000efc:	2308      	movs	r3, #8
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f00:	2332      	movs	r3, #50	; 0x32
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 ff1d 	bl	8005d54 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f20:	f000 fd04 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	230f      	movs	r3, #15
 8000f26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 f9ba 	bl	80052b8 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f4a:	f000 fcef 	bl	800192c <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f74:	4a28      	ldr	r2, [pc, #160]	; (8001018 <MX_ADC1_Init+0xb8>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <MX_ADC1_Init+0xbc>)
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	4814      	ldr	r0, [pc, #80]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fc2:	f001 fb79 	bl	80026b8 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 fcae 	bl	800192c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000fe2:	f001 fcab 	bl	800293c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fec:	f000 fc9e 	bl	800192c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_ADC1_Init+0xb4>)
 8000ffe:	f001 fc9d 	bl	800293c <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001008:	f000 fc90 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000138 	.word	0x20000138
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <MX_FMPI2C1_Init+0x70>)
 8001028:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x0020081F;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <MX_FMPI2C1_Init+0x74>)
 800102e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 800105c:	f002 fac2 	bl	80035e4 <HAL_FMPI2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 fc61 	bl	800192c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_FMPI2C1_Init+0x6c>)
 800106e:	f003 f8e0 	bl	8004232 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 fc58 	bl	800192c <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 800107c:	2001      	movs	r0, #1
 800107e:	f003 f923 	bl	80042c8 <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 8001082:	2002      	movs	r0, #2
 8001084:	f003 f920 	bl	80042c8 <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001fc 	.word	0x200001fc
 8001090:	40006000 	.word	0x40006000
 8001094:	0020081f 	.word	0x0020081f

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f003 fae9 	bl	80046ac <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 fc24 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002a8 	.word	0x200002a8
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_I2S3_Init+0x54>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <MX_I2S3_Init+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2S3_Init+0x54>)
 8001100:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001104:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_I2S3_Init+0x54>)
 8001108:	2210      	movs	r2, #16
 800110a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2S3_Init+0x54>)
 800110e:	2205      	movs	r2, #5
 8001110:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_I2S3_Init+0x54>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_I2S3_Init+0x54>)
 800111a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800111e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2S3_Init+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_I2S3_Init+0x54>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2S3_Init+0x54>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_I2S3_Init+0x54>)
 8001134:	f003 fbfe 	bl	8004934 <HAL_I2S_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800113e:	f000 fbf5 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200002fc 	.word	0x200002fc
 800114c:	40003c00 	.word	0x40003c00

08001150 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001156:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <MX_SPI4_Init+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_SPI4_Init+0x64>)
 800115c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001160:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_SPI4_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_SPI4_Init+0x64>)
 800117c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001180:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_SPI4_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_SPI4_Init+0x64>)
 800119c:	220a      	movs	r2, #10
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_SPI4_Init+0x64>)
 80011a2:	f005 fbaf 	bl	8006904 <HAL_SPI_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80011ac:	f000 fbbe 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000448 	.word	0x20000448
 80011b8:	40013400 	.word	0x40013400

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 fb55 	bl	80088a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fc:	4a3e      	ldr	r2, [pc, #248]	; (80012f8 <MX_TIM1_Init+0x13c>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <MX_TIM1_Init+0x138>)
 800120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001212:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_TIM1_Init+0x138>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001226:	4833      	ldr	r0, [pc, #204]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001228:	f005 fdfc 	bl	8006e24 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001232:	f000 fb7b 	bl	800192c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482c      	ldr	r0, [pc, #176]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001244:	f006 f982 	bl	800754c <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124e:	f000 fb6d 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001252:	4828      	ldr	r0, [pc, #160]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001254:	f005 fe35 	bl	8006ec2 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800125e:	f000 fb65 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	4820      	ldr	r0, [pc, #128]	; (80012f4 <MX_TIM1_Init+0x138>)
 8001272:	f006 fd75 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800127c:	f000 fb56 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_TIM1_Init+0x138>)
 80012a6:	f006 f88f 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012b0:	f000 fb3c 	bl	800192c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM1_Init+0x138>)
 80012d8:	f006 fdbe 	bl	8007e58 <HAL_TIMEx_ConfigBreakDeadTime>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012e2:	f000 fb23 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM1_Init+0x138>)
 80012e8:	f000 fea4 	bl	8002034 <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3758      	adds	r7, #88	; 0x58
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200004a0 	.word	0x200004a0
 80012f8:	40010000 	.word	0x40010000

080012fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132c:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <MX_TIM2_Init+0xfc>)
 800132e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <MX_TIM2_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <MX_TIM2_Init+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <MX_TIM2_Init+0xfc>)
 8001342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MX_TIM2_Init+0xfc>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <MX_TIM2_Init+0xfc>)
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001354:	4828      	ldr	r0, [pc, #160]	; (80013f8 <MX_TIM2_Init+0xfc>)
 8001356:	f005 fd65 	bl	8006e24 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001360:	f000 fae4 	bl	800192c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	4619      	mov	r1, r3
 8001370:	4821      	ldr	r0, [pc, #132]	; (80013f8 <MX_TIM2_Init+0xfc>)
 8001372:	f006 f8eb 	bl	800754c <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800137c:	f000 fad6 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_TIM2_Init+0xfc>)
 8001382:	f005 fd9e 	bl	8006ec2 <HAL_TIM_PWM_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800138c:	f000 face 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4619      	mov	r1, r3
 800139e:	4816      	ldr	r0, [pc, #88]	; (80013f8 <MX_TIM2_Init+0xfc>)
 80013a0:	f006 fcde 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013aa:	f000 fabf 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ae:	2360      	movs	r3, #96	; 0x60
 80013b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_TIM2_Init+0xfc>)
 80013c6:	f005 ffff 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013d0:	f000 faac 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2204      	movs	r2, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM2_Init+0xfc>)
 80013dc:	f005 fff4 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013e6:	f000 faa1 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM2_Init+0xfc>)
 80013ec:	f000 fe22 	bl	8002034 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3738      	adds	r7, #56	; 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200004e8 	.word	0x200004e8

080013fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <MX_TIM3_Init+0xfc>)
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <MX_TIM3_Init+0x100>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <MX_TIM3_Init+0xfc>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <MX_TIM3_Init+0xfc>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_TIM3_Init+0xfc>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <MX_TIM3_Init+0xfc>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_TIM3_Init+0xfc>)
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001452:	4829      	ldr	r0, [pc, #164]	; (80014f8 <MX_TIM3_Init+0xfc>)
 8001454:	f005 fce6 	bl	8006e24 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800145e:	f000 fa65 	bl	800192c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146c:	4619      	mov	r1, r3
 800146e:	4822      	ldr	r0, [pc, #136]	; (80014f8 <MX_TIM3_Init+0xfc>)
 8001470:	f006 f86c 	bl	800754c <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800147a:	f000 fa57 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800147e:	481e      	ldr	r0, [pc, #120]	; (80014f8 <MX_TIM3_Init+0xfc>)
 8001480:	f005 fd1f 	bl	8006ec2 <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800148a:	f000 fa4f 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	4619      	mov	r1, r3
 800149c:	4816      	ldr	r0, [pc, #88]	; (80014f8 <MX_TIM3_Init+0xfc>)
 800149e:	f006 fc5f 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014a8:	f000 fa40 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ac:	2360      	movs	r3, #96	; 0x60
 80014ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_TIM3_Init+0xfc>)
 80014c4:	f005 ff80 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014ce:	f000 fa2d 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	220c      	movs	r2, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM3_Init+0xfc>)
 80014da:	f005 ff75 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014e4:	f000 fa22 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM3_Init+0xfc>)
 80014ea:	f000 fda3 	bl	8002034 <HAL_TIM_MspPostInit>

}
 80014ee:	bf00      	nop
 80014f0:	3738      	adds	r7, #56	; 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000530 	.word	0x20000530
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_TIM6_Init+0x74>)
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <MX_TIM6_Init+0x78>)
 8001512:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_TIM6_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_TIM6_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_TIM6_Init+0x74>)
 8001522:	22ff      	movs	r2, #255	; 0xff
 8001524:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_TIM6_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_TIM6_Init+0x74>)
 800152e:	f005 fc79 	bl	8006e24 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001538:	f000 f9f8 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800153c:	2108      	movs	r1, #8
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_TIM6_Init+0x74>)
 8001540:	f005 fde0 	bl	8007104 <HAL_TIM_OnePulse_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 800154a:	f000 f9ef 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800154e:	2320      	movs	r3, #32
 8001550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_TIM6_Init+0x74>)
 800155c:	f006 fc00 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 8001566:	f000 f9e1 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000578 	.word	0x20000578
 8001578:	40001000 	.word	0x40001000

0800157c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f006 fcb6 	bl	8007f24 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 f9b5 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200005c0 	.word	0x200005c0
 80015cc:	40011000 	.word	0x40011000

080015d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART2_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001608:	f006 fc8c 	bl	8007f24 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f000 f98b 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000604 	.word	0x20000604
 8001620:	40004400 	.word	0x40004400

08001624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART3_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART3_UART_Init+0x4c>)
 800165c:	f006 fc62 	bl	8007f24 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f961 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000648 	.word	0x20000648
 8001674:	40004800 	.word	0x40004800

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_DMA_Init+0x78>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <MX_DMA_Init+0x78>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_DMA_Init+0x78>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_DMA_Init+0x78>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <MX_DMA_Init+0x78>)
 80016a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_DMA_Init+0x78>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	200b      	movs	r0, #11
 80016bc:	f001 fc41 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016c0:	200b      	movs	r0, #11
 80016c2:	f001 fc5a 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	200c      	movs	r0, #12
 80016cc:	f001 fc39 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016d0:	200c      	movs	r0, #12
 80016d2:	f001 fc52 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2038      	movs	r0, #56	; 0x38
 80016dc:	f001 fc31 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016e0:	2038      	movs	r0, #56	; 0x38
 80016e2:	f001 fc4a 	bl	8002f7a <HAL_NVIC_EnableIRQ>

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b82      	ldr	r3, [pc, #520]	; (8001918 <MX_GPIO_Init+0x224>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a81      	ldr	r2, [pc, #516]	; (8001918 <MX_GPIO_Init+0x224>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <MX_GPIO_Init+0x224>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <MX_GPIO_Init+0x224>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a7a      	ldr	r2, [pc, #488]	; (8001918 <MX_GPIO_Init+0x224>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <MX_GPIO_Init+0x224>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <MX_GPIO_Init+0x224>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a73      	ldr	r2, [pc, #460]	; (8001918 <MX_GPIO_Init+0x224>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b71      	ldr	r3, [pc, #452]	; (8001918 <MX_GPIO_Init+0x224>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <MX_GPIO_Init+0x224>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a6c      	ldr	r2, [pc, #432]	; (8001918 <MX_GPIO_Init+0x224>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <MX_GPIO_Init+0x224>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b66      	ldr	r3, [pc, #408]	; (8001918 <MX_GPIO_Init+0x224>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a65      	ldr	r2, [pc, #404]	; (8001918 <MX_GPIO_Init+0x224>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <MX_GPIO_Init+0x224>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <MX_GPIO_Init+0x224>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <MX_GPIO_Init+0x224>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <MX_GPIO_Init+0x224>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2101      	movs	r1, #1
 80017b6:	4859      	ldr	r0, [pc, #356]	; (800191c <MX_GPIO_Init+0x228>)
 80017b8:	f002 ff2c 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f24e 0101 	movw	r1, #57345	; 0xe001
 80017c2:	4857      	ldr	r0, [pc, #348]	; (8001920 <MX_GPIO_Init+0x22c>)
 80017c4:	f002 ff26 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ce:	4853      	ldr	r0, [pc, #332]	; (800191c <MX_GPIO_Init+0x228>)
 80017d0:	f002 ff20 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin;
 80017d4:	f240 1301 	movw	r3, #257	; 0x101
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	484b      	ldr	r0, [pc, #300]	; (800191c <MX_GPIO_Init+0x228>)
 80017ee:	f002 fd8d 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VDDA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VDDA_PG_Pin|STRIP_PG_Pin;
 80017f2:	230e      	movs	r3, #14
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4845      	ldr	r0, [pc, #276]	; (800191c <MX_GPIO_Init+0x228>)
 8001806:	f002 fd81 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 800180a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001810:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4840      	ldr	r0, [pc, #256]	; (8001924 <MX_GPIO_Init+0x230>)
 8001822:	f002 fd73 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	483b      	ldr	r0, [pc, #236]	; (8001928 <MX_GPIO_Init+0x234>)
 800183c:	f002 fd66 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8001840:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4834      	ldr	r0, [pc, #208]	; (8001928 <MX_GPIO_Init+0x234>)
 8001858:	f002 fd58 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 800185c:	f641 7328 	movw	r3, #7976	; 0x1f28
 8001860:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001862:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	482b      	ldr	r0, [pc, #172]	; (8001920 <MX_GPIO_Init+0x22c>)
 8001874:	f002 fd4a 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 8001878:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	2302      	movs	r3, #2
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_GPIO_Init+0x22c>)
 8001892:	f002 fd3b 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 8001896:	f244 0301 	movw	r3, #16385	; 0x4001
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_GPIO_Init+0x22c>)
 80018b0:	f002 fd2c 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4815      	ldr	r0, [pc, #84]	; (8001920 <MX_GPIO_Init+0x22c>)
 80018ca:	f002 fd1f 	bl	800430c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2007      	movs	r0, #7
 80018d4:	f001 fb35 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018d8:	2007      	movs	r0, #7
 80018da:	f001 fb4e 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2009      	movs	r0, #9
 80018e4:	f001 fb2d 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018e8:	2009      	movs	r0, #9
 80018ea:	f001 fb46 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2017      	movs	r0, #23
 80018f4:	f001 fb25 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018f8:	2017      	movs	r0, #23
 80018fa:	f001 fb3e 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2028      	movs	r0, #40	; 0x28
 8001904:	f001 fb1d 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001908:	2028      	movs	r0, #40	; 0x28
 800190a:	f001 fb36 	bl	8002f7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	; 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40020400 	.word	0x40020400

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 8001934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <Error_Handler+0x1c>)
 800193a:	f002 fe84 	bl	8004646 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800193e:	20c8      	movs	r0, #200	; 0xc8
 8001940:	f000 fe96 	bl	8002670 <HAL_Delay>
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 8001944:	e7f6      	b.n	8001934 <Error_Handler+0x8>
 8001946:	bf00      	nop
 8001948:	40020800 	.word	0x40020800

0800194c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_MspInit+0x58>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_MspInit+0x58>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x58>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_MspInit+0x58>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_MspInit+0x58>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x58>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2005      	movs	r0, #5
 8001990:	f001 fad7 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001994:	2005      	movs	r0, #5
 8001996:	f001 faf0 	bl	8002f7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a49      	ldr	r2, [pc, #292]	; (8001aec <HAL_ADC_MspInit+0x144>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	f040 808c 	bne.w	8001ae4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	4a46      	ldr	r2, [pc, #280]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6453      	str	r3, [r2, #68]	; 0x44
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4a3f      	ldr	r2, [pc, #252]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_ADC_MspInit+0x148>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STRIP1_CURR_Pin|STRIP5_CURR_Pin|STRIP2_CURR_Pin|STRIP6_CURR_Pin;
 8001a3c:	23f0      	movs	r3, #240	; 0xf0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4829      	ldr	r0, [pc, #164]	; (8001af4 <HAL_ADC_MspInit+0x14c>)
 8001a50:	f002 fc5c 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP7_CURR_Pin|STRIP3_CURR_Pin;
 8001a54:	2330      	movs	r3, #48	; 0x30
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4824      	ldr	r0, [pc, #144]	; (8001af8 <HAL_ADC_MspInit+0x150>)
 8001a68:	f002 fc50 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP4_CURR_Pin|STRIP8_CURR_Pin;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481f      	ldr	r0, [pc, #124]	; (8001afc <HAL_ADC_MspInit+0x154>)
 8001a80:	f002 fc44 	bl	800430c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_ADC_MspInit+0x15c>)
 8001a88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001aca:	f001 fa71 	bl	8002fb0 <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001ad4:	f7ff ff2a 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_ADC_MspInit+0x158>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3730      	adds	r7, #48	; 0x30
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020400 	.word	0x40020400
 8001b00:	2000019c 	.word	0x2000019c
 8001b04:	40026410 	.word	0x40026410

08001b08 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b09a      	sub	sp, #104	; 0x68
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	223c      	movs	r2, #60	; 0x3c
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 febb 	bl	80088a4 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_FMPI2C_MspInit+0x168>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	f040 8097 	bne.w	8001c68 <HAL_FMPI2C_MspInit+0x160>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fdd4 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b52:	f7ff feeb 	bl	800192c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a45      	ldr	r2, [pc, #276]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a3e      	ldr	r2, [pc, #248]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4833      	ldr	r0, [pc, #204]	; (8001c78 <HAL_FMPI2C_MspInit+0x170>)
 8001bac:	f002 fbae 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	4619      	mov	r1, r3
 8001bca:	482c      	ldr	r0, [pc, #176]	; (8001c7c <HAL_FMPI2C_MspInit+0x174>)
 8001bcc:	f002 fb9e 	bl	800430c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_FMPI2C_MspInit+0x16c>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_FMPI2C_MspInit+0x17c>)
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001bf4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0c:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 8001c2c:	4814      	ldr	r0, [pc, #80]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c2e:	f001 f9bf 	bl	8002fb0 <HAL_DMA_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_FMPI2C_MspInit+0x134>
    {
      Error_Handler();
 8001c38:	f7ff fe78 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_FMPI2C_MspInit+0x178>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	205f      	movs	r0, #95	; 0x5f
 8001c4e:	f001 f978 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 8001c52:	205f      	movs	r0, #95	; 0x5f
 8001c54:	f001 f991 	bl	8002f7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2060      	movs	r0, #96	; 0x60
 8001c5e:	f001 f970 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 8001c62:	2060      	movs	r0, #96	; 0x60
 8001c64:	f001 f989 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3768      	adds	r7, #104	; 0x68
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40006000 	.word	0x40006000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	20000248 	.word	0x20000248
 8001c84:	40026028 	.word	0x40026028

08001c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_I2C_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12b      	bne.n	8001d02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_I2C_MspInit+0x88>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_I2C_MspInit+0x88>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_I2C_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_I2C_MspInit+0x8c>)
 8001ce2:	f002 fb13 	bl	800430c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_I2C_MspInit+0x88>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_I2C_MspInit+0x88>)
 8001cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_I2C_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020400 	.word	0x40020400

08001d18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b09a      	sub	sp, #104	; 0x68
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d30:	f107 0318 	add.w	r3, r7, #24
 8001d34:	223c      	movs	r2, #60	; 0x3c
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f006 fdb3 	bl	80088a4 <memset>
  if(hi2s->Instance==SPI3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5d      	ldr	r2, [pc, #372]	; (8001eb8 <HAL_I2S_MspInit+0x1a0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	f040 80b2 	bne.w	8001eae <HAL_I2S_MspInit+0x196>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 8001d4a:	2381      	movs	r3, #129	; 0x81
 8001d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001d4e:	2332      	movs	r3, #50	; 0x32
 8001d50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001d52:	2308      	movs	r3, #8
 8001d54:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d66:	f107 0318 	add.w	r3, r7, #24
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fcc2 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8001d76:	f7ff fdd9 	bl	800192c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a47      	ldr	r2, [pc, #284]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a39      	ldr	r2, [pc, #228]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_I2S_MspInit+0x1a4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PD6     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e04:	4619      	mov	r1, r3
 8001e06:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <HAL_I2S_MspInit+0x1a8>)
 8001e08:	f002 fa80 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e10:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e1e:	2306      	movs	r3, #6
 8001e20:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e26:	4619      	mov	r1, r3
 8001e28:	4826      	ldr	r0, [pc, #152]	; (8001ec4 <HAL_I2S_MspInit+0x1ac>)
 8001e2a:	f002 fa6f 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e46:	4619      	mov	r1, r3
 8001e48:	481f      	ldr	r0, [pc, #124]	; (8001ec8 <HAL_I2S_MspInit+0x1b0>)
 8001e4a:	f002 fa5f 	bl	800430c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_I2S_MspInit+0x1b8>)
 8001e52:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e7c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e84:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001e92:	480e      	ldr	r0, [pc, #56]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001e94:	f001 f88c 	bl	8002fb0 <HAL_DMA_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2S_MspInit+0x18a>
    {
      Error_Handler();
 8001e9e:	f7ff fd45 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_I2S_MspInit+0x1b4>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3768      	adds	r7, #104	; 0x68
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40003c00 	.word	0x40003c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	20000344 	.word	0x20000344
 8001ed0:	40026010 	.word	0x40026010

08001ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_SPI_MspInit+0x84>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d12c      	bne.n	8001f50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_SPI_MspInit+0x88>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_SPI_MspInit+0x88>)
 8001f00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_SPI_MspInit+0x88>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_SPI_MspInit+0x88>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <HAL_SPI_MspInit+0x88>)
 8001f1c:	f043 0310 	orr.w	r3, r3, #16
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_SPI_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GRAPH_SDI_Pin|GRAPH_CLK_Pin;
 8001f2e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f40:	2305      	movs	r3, #5
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_SPI_MspInit+0x8c>)
 8001f4c:	f002 f9de 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013400 	.word	0x40013400
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <HAL_TIM_Base_MspInit+0xc0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f92:	e042      	b.n	800201a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a20      	ldr	r2, [pc, #128]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
}
 8001fba:	e02e      	b.n	800201a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_TIM_Base_MspInit+0xc8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	e01a      	b.n	800201a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_TIM_Base_MspInit+0xcc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d115      	bne.n	800201a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_TIM_Base_MspInit+0xc4>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2036      	movs	r0, #54	; 0x36
 8002010:	f000 ff97 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002014:	2036      	movs	r0, #54	; 0x36
 8002016:	f000 ffb0 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40023800 	.word	0x40023800
 800202c:	40000400 	.word	0x40000400
 8002030:	40001000 	.word	0x40001000

08002034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a37      	ldr	r2, [pc, #220]	; (8002130 <HAL_TIM_MspPostInit+0xfc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11f      	bne.n	8002096 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a35      	ldr	r2, [pc, #212]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = AUDIO_SRC_IND_Pin;
 8002072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002084:	2301      	movs	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_SRC_IND_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	482a      	ldr	r0, [pc, #168]	; (8002138 <HAL_TIM_MspPostInit+0x104>)
 8002090:	f002 f93c 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002094:	e047      	b.n	8002126 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d11e      	bne.n	80020de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4a22      	ldr	r2, [pc, #136]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6313      	str	r3, [r2, #48]	; 0x30
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HP_SEL_IND_Pin|XLR_SEL_IND_Pin;
 80020bc:	2303      	movs	r3, #3
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	4818      	ldr	r0, [pc, #96]	; (8002138 <HAL_TIM_MspPostInit+0x104>)
 80020d8:	f002 f918 	bl	800430c <HAL_GPIO_Init>
}
 80020dc:	e023      	b.n	8002126 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_TIM_MspPostInit+0x108>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d11e      	bne.n	8002126 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_TIM_MspPostInit+0x100>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 8002104:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002116:	2302      	movs	r3, #2
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <HAL_TIM_MspPostInit+0x10c>)
 8002122:	f002 f8f3 	bl	800430c <HAL_GPIO_Init>
}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000
 800213c:	40000400 	.word	0x40000400
 8002140:	40020800 	.word	0x40020800

08002144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <HAL_UART_MspInit+0x18c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d12d      	bne.n	80021c2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <HAL_UART_MspInit+0x190>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a59      	ldr	r2, [pc, #356]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_UART_MspInit+0x190>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 800219e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b0:	2307      	movs	r3, #7
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	4847      	ldr	r0, [pc, #284]	; (80022d8 <HAL_UART_MspInit+0x194>)
 80021bc:	f002 f8a6 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021c0:	e082      	b.n	80022c8 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a45      	ldr	r2, [pc, #276]	; (80022dc <HAL_UART_MspInit+0x198>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d12c      	bne.n	8002226 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_UART_MspInit+0x190>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a3f      	ldr	r2, [pc, #252]	; (80022d4 <HAL_UART_MspInit+0x190>)
 80021d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_UART_MspInit+0x190>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_UART_MspInit+0x190>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_UART_MspInit+0x190>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6313      	str	r3, [r2, #48]	; 0x30
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x190>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 8002204:	230c      	movs	r3, #12
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002214:	2307      	movs	r3, #7
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	482e      	ldr	r0, [pc, #184]	; (80022d8 <HAL_UART_MspInit+0x194>)
 8002220:	f002 f874 	bl	800430c <HAL_GPIO_Init>
}
 8002224:	e050      	b.n	80022c8 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_UART_MspInit+0x19c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d14b      	bne.n	80022c8 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_UART_MspInit+0x190>)
 800223a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223e:	6413      	str	r3, [r2, #64]	; 0x40
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_UART_MspInit+0x190>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_UART_MspInit+0x190>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_UART_MspInit+0x190>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6313      	str	r3, [r2, #48]	; 0x30
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_UART_MspInit+0x190>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8002284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002296:	2307      	movs	r3, #7
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	4619      	mov	r1, r3
 80022a0:	4810      	ldr	r0, [pc, #64]	; (80022e4 <HAL_UART_MspInit+0x1a0>)
 80022a2:	f002 f833 	bl	800430c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 80022a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022b8:	2307      	movs	r3, #7
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <HAL_UART_MspInit+0x1a4>)
 80022c4:	f002 f822 	bl	800430c <HAL_GPIO_Init>
}
 80022c8:	bf00      	nop
 80022ca:	3738      	adds	r7, #56	; 0x38
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40011000 	.word	0x40011000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40004400 	.word	0x40004400
 80022e0:	40004800 	.word	0x40004800
 80022e4:	40020400 	.word	0x40020400
 80022e8:	40020800 	.word	0x40020800

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002338:	f000 f97a 	bl	8002630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDIO_CD_Pin);
 8002352:	2002      	movs	r0, #2
 8002354:	f002 f992 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 8002360:	2008      	movs	r0, #8
 8002362:	f002 f98b 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Stream0_IRQHandler+0x10>)
 8002372:	f000 feed 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000344 	.word	0x20000344

08002380 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <DMA1_Stream1_IRQHandler+0x10>)
 8002386:	f000 fee3 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000248 	.word	0x20000248

08002394 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 8002398:	2020      	movs	r0, #32
 800239a:	f002 f96f 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 800239e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023a2:	f002 f96b 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 80023a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023aa:	f002 f967 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 80023b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023ba:	f002 f95f 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 80023be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023c2:	f002 f95b 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 80023c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023ca:	f002 f957 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80023ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023d2:	f002 f953 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 80023d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023da:	f002 f94f 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 80023de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023e2:	f002 f94b 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <RTC_Alarm_IRQHandler+0x10>)
 80023f2:	f003 ff33 	bl	800625c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200003a4 	.word	0x200003a4

08002400 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <SDIO_IRQHandler+0x10>)
 8002406:	f003 ff83 	bl	8006310 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200003c4 	.word	0x200003c4

08002414 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM6_IRQHandler+0x10>)
 800241a:	f004 fecd 	bl	80071b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000578 	.word	0x20000578

08002428 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <DMA2_Stream0_IRQHandler+0x10>)
 800242e:	f000 fe8f 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000019c 	.word	0x2000019c

0800243c <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <FMPI2C1_EV_IRQHandler+0x10>)
 8002442:	f001 f95e 	bl	8003702 <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200001fc 	.word	0x200001fc

08002450 <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <FMPI2C1_ER_IRQHandler+0x10>)
 8002456:	f001 f96e 	bl	8003736 <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200001fc 	.word	0x200001fc

08002464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_kill>:

int _kill(int pid, int sig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800247e:	f006 f9d7 	bl	8008830 <__errno>
 8002482:	4603      	mov	r3, r0
 8002484:	2216      	movs	r2, #22
 8002486:	601a      	str	r2, [r3, #0]
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_exit>:

void _exit (int status)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffe7 	bl	8002474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024a6:	e7fe      	b.n	80024a6 <_exit+0x12>

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f006 f9aa 	bl	8008830 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20040000 	.word	0x20040000
 8002508:	00000400 	.word	0x00000400
 800250c:	2000068c 	.word	0x2000068c
 8002510:	200006a8 	.word	0x200006a8

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480d      	ldr	r0, [pc, #52]	; (8002574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800253e:	490e      	ldr	r1, [pc, #56]	; (8002578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002554:	4c0b      	ldr	r4, [pc, #44]	; (8002584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002562:	f7ff ffd7 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f006 f969 	bl	800883c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7fe fc01 	bl	8000d70 <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002570:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800257c:	08008bc8 	.word	0x08008bc8
  ldr r2, =_sbss
 8002580:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002584:	200006a8 	.word	0x200006a8

08002588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_Init+0x40>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_Init+0x40>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_Init+0x40>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 fcb9 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	200f      	movs	r0, #15
 80025bc:	f000 f808 	bl	80025d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff f9c4 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_InitTick+0x54>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_InitTick+0x58>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fcd1 	bl	8002f96 <HAL_SYSTICK_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00e      	b.n	800261c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d80a      	bhi.n	800261a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f000 fc99 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <HAL_InitTick+0x5c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000000 	.word	0x20000000
 8002628:	20000008 	.word	0x20000008
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008
 8002654:	20000690 	.word	0x20000690

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000690 	.word	0x20000690

08002670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff ffee 	bl	8002658 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d005      	beq.n	8002696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_Delay+0x44>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002696:	bf00      	nop
 8002698:	f7ff ffde 	bl	8002658 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d8f7      	bhi.n	8002698 <HAL_Delay+0x28>
  {
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e04a      	b.n	8002764 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d120      	bne.n	8002718 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_ADC_Init+0xb4>)
 80026da:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_ADC_Init+0xb8>)
 80026e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <HAL_ADC_Init+0xbc>)
 80026e6:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_ADC_Init+0xc0>)
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <HAL_ADC_Init+0xc4>)
 80026f2:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_ADC_Init+0xc8>)
 8002700:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d118      	bne.n	8002756 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fa21 	bl	8002b80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f023 0303 	bic.w	r3, r3, #3
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
 8002754:	e001      	b.n	800275a <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	080028ed 	.word	0x080028ed
 8002770:	08002901 	.word	0x08002901
 8002774:	08002915 	.word	0x08002915
 8002778:	08002929 	.word	0x08002929
 800277c:	08002d79 	.word	0x08002d79
 8002780:	080019a9 	.word	0x080019a9

08002784 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_Start+0x1a>
 800279a:	2302      	movs	r3, #2
 800279c:	e097      	b.n	80028ce <HAL_ADC_Start+0x14a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d018      	beq.n	80027e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027c4:	4b45      	ldr	r3, [pc, #276]	; (80028dc <HAL_ADC_Start+0x158>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a45      	ldr	r2, [pc, #276]	; (80028e0 <HAL_ADC_Start+0x15c>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0c9a      	lsrs	r2, r3, #18
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d15f      	bne.n	80028b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800281e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d106      	bne.n	8002842 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f023 0206 	bic.w	r2, r3, #6
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
 8002840:	e002      	b.n	8002848 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002850:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_ADC_Start+0x160>)
 8002852:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800285c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d129      	bne.n	80028cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	e020      	b.n	80028cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_ADC_Start+0x164>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d11b      	bne.n	80028cc <HAL_ADC_Start+0x148>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d114      	bne.n	80028cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e00b      	b.n	80028cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	40012300 	.word	0x40012300
 80028e8:	40012000 	.word	0x40012000

080028ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1c>
 8002954:	2302      	movs	r3, #2
 8002956:	e105      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x228>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d925      	bls.n	80029b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3b1e      	subs	r3, #30
 800297e:	2207      	movs	r2, #7
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43da      	mvns	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	400a      	ands	r2, r1
 800298c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68d9      	ldr	r1, [r3, #12]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	4603      	mov	r3, r0
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4403      	add	r3, r0
 80029a6:	3b1e      	subs	r3, #30
 80029a8:	409a      	lsls	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	e022      	b.n	80029fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6919      	ldr	r1, [r3, #16]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	2207      	movs	r2, #7
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4403      	add	r3, r0
 80029f0:	409a      	lsls	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d824      	bhi.n	8002a4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	3b05      	subs	r3, #5
 8002a14:	221f      	movs	r2, #31
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	400a      	ands	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b05      	subs	r3, #5
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4a:	e04c      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d824      	bhi.n	8002a9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	3b23      	subs	r3, #35	; 0x23
 8002a66:	221f      	movs	r2, #31
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	400a      	ands	r2, r1
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b23      	subs	r3, #35	; 0x23
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9c:	e023      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b41      	subs	r3, #65	; 0x41
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b41      	subs	r3, #65	; 0x41
 8002ada:	fa00 f203 	lsl.w	r2, r0, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_ADC_ConfigChannel+0x234>)
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_ADC_ConfigChannel+0x238>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1cc>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <HAL_ADC_ConfigChannel+0x238>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d123      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x21e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d003      	beq.n	8002b22 <HAL_ADC_ConfigChannel+0x1e6>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b11      	cmp	r3, #17
 8002b20:	d11b      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d111      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_ADC_ConfigChannel+0x23c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_ADC_ConfigChannel+0x240>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	0c9a      	lsrs	r2, r3, #18
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b4c:	e002      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f9      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40012300 	.word	0x40012300
 8002b74:	40012000 	.word	0x40012000
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	431bde83 	.word	0x431bde83

08002b80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <ADC_Init+0x1f0>)
 8002b8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <ADC_Init+0x1f4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	e00f      	b.n	8002c7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0202 	bic.w	r2, r2, #2
 8002c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7e1b      	ldrb	r3, [r3, #24]
 8002c98:	005a      	lsls	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	035a      	lsls	r2, r3, #13
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e007      	b.n	8002cf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	051a      	lsls	r2, r3, #20
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d36:	025a      	lsls	r2, r3, #9
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6899      	ldr	r1, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	029a      	lsls	r2, r3, #10
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40012300 	.word	0x40012300
 8002d74:	0f000001 	.word	0x0f000001

08002d78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <__NVIC_EnableIRQ+0x38>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff29 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff3e 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff31 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff fb4c 	bl	8002658 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e099      	b.n	8003100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	e00f      	b.n	800300e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7ff fb33 	bl	8002658 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d908      	bls.n	800300e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e078      	b.n	8003100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e8      	bne.n	8002fee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <HAL_DMA_Init+0x158>)
 8003028:	4013      	ands	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b04      	cmp	r3, #4
 8003066:	d107      	bne.n	8003078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	4313      	orrs	r3, r2
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0307 	bic.w	r3, r3, #7
 800308e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d117      	bne.n	80030d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fa19 	bl	80034ec <DMA_CheckFifoParam>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ce:	2301      	movs	r3, #1
 80030d0:	e016      	b.n	8003100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9d0 	bl	8003480 <DMA_CalcBaseAndBitshift>
 80030e0:	4603      	mov	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	223f      	movs	r2, #63	; 0x3f
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	f010803f 	.word	0xf010803f

0800310c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d004      	beq.n	800312a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00c      	b.n	8003144 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2205      	movs	r2, #5
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800315c:	4b8e      	ldr	r3, [pc, #568]	; (8003398 <HAL_DMA_IRQHandler+0x248>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8e      	ldr	r2, [pc, #568]	; (800339c <HAL_DMA_IRQHandler+0x24c>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	2208      	movs	r2, #8
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01a      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0204 	bic.w	r2, r2, #4
 80031a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	2208      	movs	r2, #8
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2201      	movs	r2, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	2201      	movs	r2, #1
 80031e0:	409a      	lsls	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	2204      	movs	r2, #4
 8003216:	409a      	lsls	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2210      	movs	r2, #16
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d043      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03c      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	2210      	movs	r2, #16
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	e01f      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e016      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0208 	bic.w	r2, r2, #8
 80032ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	2220      	movs	r2, #32
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808f 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8087 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2220      	movs	r2, #32
 80032e8:	409a      	lsls	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d136      	bne.n	8003368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0216 	bic.w	r2, r2, #22
 8003308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_DMA_IRQHandler+0x1da>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0208 	bic.w	r2, r2, #8
 8003338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	223f      	movs	r2, #63	; 0x3f
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07e      	beq.n	800345c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
        }
        return;
 8003366:	e079      	b.n	800345c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01d      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	2b00      	cmp	r3, #0
 800338a:	d031      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e02c      	b.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
 8003396:	bf00      	nop
 8003398:	20000000 	.word	0x20000000
 800339c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e01e      	b.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0210 	bic.w	r2, r2, #16
 80033ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d032      	beq.n	800345e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d022      	beq.n	800344a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2205      	movs	r2, #5
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	d307      	bcc.n	8003438 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f2      	bne.n	800341c <HAL_DMA_IRQHandler+0x2cc>
 8003436:	e000      	b.n	800343a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003438:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e000      	b.n	800345e <HAL_DMA_IRQHandler+0x30e>
        return;
 800345c:	bf00      	nop
    }
  }
}
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003472:	b2db      	uxtb	r3, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3b10      	subs	r3, #16
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <DMA_CalcBaseAndBitshift+0x68>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d909      	bls.n	80034c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	659a      	str	r2, [r3, #88]	; 0x58
 80034c0:	e007      	b.n	80034d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	aaaaaaab 	.word	0xaaaaaaab
 80034e8:	08008ba8 	.word	0x08008ba8

080034ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11f      	bne.n	8003546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d856      	bhi.n	80035ba <DMA_CheckFifoParam+0xce>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <DMA_CheckFifoParam+0x28>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003525 	.word	0x08003525
 8003518:	08003537 	.word	0x08003537
 800351c:	08003525 	.word	0x08003525
 8003520:	080035bb 	.word	0x080035bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d046      	beq.n	80035be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003534:	e043      	b.n	80035be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800353e:	d140      	bne.n	80035c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003544:	e03d      	b.n	80035c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	d121      	bne.n	8003594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d837      	bhi.n	80035c6 <DMA_CheckFifoParam+0xda>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <DMA_CheckFifoParam+0x70>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003573 	.word	0x08003573
 8003564:	0800356d 	.word	0x0800356d
 8003568:	08003585 	.word	0x08003585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      break;
 8003570:	e030      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d025      	beq.n	80035ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003582:	e022      	b.n	80035ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800358c:	d11f      	bne.n	80035ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003592:	e01c      	b.n	80035ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d903      	bls.n	80035a2 <DMA_CheckFifoParam+0xb6>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d003      	beq.n	80035a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035a0:	e018      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      break;
 80035a6:	e015      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00e      	beq.n	80035d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	e00b      	b.n	80035d2 <DMA_CheckFifoParam+0xe6>
      break;
 80035ba:	bf00      	nop
 80035bc:	e00a      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035be:	bf00      	nop
 80035c0:	e008      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
 80035c4:	e006      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e004      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
    }
  } 
  
  return status; 
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e081      	b.n	80036fa <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe fa7c 	bl	8001b08 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003634:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003644:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	e006      	b.n	800366c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800366a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d104      	bne.n	800367e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69d9      	ldr	r1, [r3, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
  }
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d010      	beq.n	800377c <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	09db      	lsrs	r3, r3, #7
 800375e:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800377a:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	09db      	lsrs	r3, r3, #7
 800378c:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	f043 0208 	orr.w	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a8:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	0a5b      	lsrs	r3, r3, #9
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	09db      	lsrs	r3, r3, #7
 80037ba:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 030b 	and.w	r3, r3, #11
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 80037e8:	68f9      	ldr	r1, [r7, #12]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fb8a 	bl	8003f04 <FMPI2C_ITError>
  }
}
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
 800382c:	4613      	mov	r3, r2
 800382e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <FMPI2C_Slave_ISR_IT+0x24>
 8003898:	2302      	movs	r3, #2
 800389a:	e0ec      	b.n	8003a76 <FMPI2C_Slave_ISR_IT+0x1fe>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 80038bc:	6939      	ldr	r1, [r7, #16]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f9c0 	bl	8003c44 <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d04d      	beq.n	800396c <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d047      	beq.n	800396c <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d128      	bne.n	8003938 <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b28      	cmp	r3, #40	; 0x28
 80038f0:	d108      	bne.n	8003904 <FMPI2C_Slave_ISR_IT+0x8c>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038f8:	d104      	bne.n	8003904 <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 80038fa:	6939      	ldr	r1, [r7, #16]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 faab 	bl	8003e58 <FMPI2C_ITListenCplt>
 8003902:	e032      	b.n	800396a <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b29      	cmp	r3, #41	; 0x29
 800390e:	d10e      	bne.n	800392e <FMPI2C_Slave_ISR_IT+0xb6>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003916:	d00a      	beq.n	800392e <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fbe6 	bl	80040f2 <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f92d 	bl	8003b86 <FMPI2C_ITSlaveSeqCplt>
 800392c:	e01d      	b.n	800396a <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2210      	movs	r2, #16
 8003934:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 8003936:	e096      	b.n	8003a66 <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2210      	movs	r2, #16
 800393e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <FMPI2C_Slave_ISR_IT+0xe4>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003958:	f040 8085 	bne.w	8003a66 <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	4619      	mov	r1, r3
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 face 	bl	8003f04 <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 8003968:	e07d      	b.n	8003a66 <FMPI2C_Slave_ISR_IT+0x1ee>
 800396a:	e07c      	b.n	8003a66 <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d030      	beq.n	80039da <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02a      	beq.n	80039da <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d14f      	bne.n	8003a6a <FMPI2C_Slave_ISR_IT+0x1f2>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039d0:	d04b      	beq.n	8003a6a <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f8d7 	bl	8003b86 <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 80039d8:	e047      	b.n	8003a6a <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	08db      	lsrs	r3, r3, #3
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	08db      	lsrs	r3, r3, #3
 80039ea:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f842 	bl	8003a7e <FMPI2C_ITAddrCplt>
 80039fa:	e037      	b.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d031      	beq.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02b      	beq.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d018      	beq.n	8003a50 <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a4e:	e00d      	b.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a56:	d002      	beq.n	8003a5e <FMPI2C_Slave_ISR_IT+0x1e6>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f891 	bl	8003b86 <FMPI2C_ITSlaveSeqCplt>
 8003a64:	e002      	b.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 8003a6a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a94:	2b28      	cmp	r3, #40	; 0x28
 8003a96:	d16a      	bne.n	8003b6e <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ab6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ad2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d138      	bne.n	8003b4e <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	09db      	lsrs	r3, r3, #7
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	89bb      	ldrh	r3, [r7, #12]
 8003ae4:	4053      	eors	r3, r2
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f003 0306 	and.w	r3, r3, #6
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d11c      	bne.n	8003b2a <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003af0:	897b      	ldrh	r3, [r7, #10]
 8003af2:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d13b      	bne.n	8003b7e <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8003b1c:	89ba      	ldrh	r2, [r7, #12]
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fe7c 	bl	8003820 <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 8003b28:	e029      	b.n	8003b7e <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8003b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fb1f 	bl	8004176 <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8003b40:	89ba      	ldrh	r2, [r7, #12]
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	4619      	mov	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fe6a 	bl	8003820 <HAL_FMPI2C_AddrCallback>
}
 8003b4c:	e017      	b.n	8003b7e <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8003b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb0f 	bl	8004176 <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8003b60:	89ba      	ldrh	r2, [r7, #12]
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fe5a 	bl	8003820 <HAL_FMPI2C_AddrCallback>
}
 8003b6c:	e007      	b.n	8003b7e <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2208      	movs	r2, #8
 8003b74:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0b9b      	lsrs	r3, r3, #14
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00d      	b.n	8003bd8 <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0bdb      	lsrs	r3, r3, #15
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b29      	cmp	r3, #41	; 0x29
 8003be2:	d112      	bne.n	8003c0a <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2228      	movs	r2, #40	; 0x28
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2221      	movs	r2, #33	; 0x21
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fabe 	bl	8004176 <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fdf8 	bl	80037f8 <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c08:	e017      	b.n	8003c3a <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b2a      	cmp	r3, #42	; 0x2a
 8003c14:	d111      	bne.n	8003c3a <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2228      	movs	r2, #40	; 0x28
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2222      	movs	r2, #34	; 0x22
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 8003c24:	2102      	movs	r1, #2
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 faa5 	bl	8004176 <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff fde9 	bl	800380c <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2220      	movs	r2, #32
 8003c68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b21      	cmp	r3, #33	; 0x21
 8003c6e:	d002      	beq.n	8003c76 <FMPI2C_ITSlaveCplt+0x32>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b29      	cmp	r3, #41	; 0x29
 8003c74:	d108      	bne.n	8003c88 <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 8003c76:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa7b 	bl	8004176 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
 8003c86:	e00d      	b.n	8003ca4 <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b22      	cmp	r3, #34	; 0x22
 8003c8c:	d002      	beq.n	8003c94 <FMPI2C_ITSlaveCplt+0x50>
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b2a      	cmp	r3, #42	; 0x2a
 8003c92:	d107      	bne.n	8003ca4 <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 8003c94:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa6c 	bl	8004176 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2222      	movs	r2, #34	; 0x22
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <FMPI2C_ITSlaveCplt+0x20c>)
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa14 	bl	80040f2 <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	0b9b      	lsrs	r3, r3, #14
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce4:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d020      	beq.n	8003d30 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfc:	e018      	b.n	8003d30 <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	0bdb      	lsrs	r3, r3, #15
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d012      	beq.n	8003d30 <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d18:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d006      	beq.n	8003d30 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	f043 0204 	orr.w	r2, r3, #4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8a7 	bl	8003f04 <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b28      	cmp	r3, #40	; 0x28
 8003dc0:	d141      	bne.n	8003e46 <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8003dc2:	6979      	ldr	r1, [r7, #20]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f847 	bl	8003e58 <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8003dca:	e03c      	b.n	8003e46 <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd4:	d014      	beq.n	8003e00 <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fed5 	bl	8003b86 <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <FMPI2C_ITSlaveCplt+0x210>)
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fd1f 	bl	800383c <HAL_FMPI2C_ListenCpltCallback>
}
 8003dfe:	e022      	b.n	8003e46 <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b22      	cmp	r3, #34	; 0x22
 8003e0a:	d10e      	bne.n	8003e2a <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fcf2 	bl	800380c <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8003e28:	e00d      	b.n	8003e46 <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fcd9 	bl	80037f8 <HAL_FMPI2C_SlaveTxCpltCallback>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	fe00e800 	.word	0xfe00e800
 8003e54:	ffff0000 	.word	0xffff0000

08003e58 <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <FMPI2C_ITListenCplt+0xa8>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d022      	beq.n	8003ed6 <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8003ed6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f94b 	bl	8004176 <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fca3 	bl	800383c <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	ffff0000 	.word	0xffff0000

08003f04 <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <FMPI2C_ITError+0x194>)
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b28      	cmp	r3, #40	; 0x28
 8003f3a:	d005      	beq.n	8003f48 <FMPI2C_ITError+0x44>
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b29      	cmp	r3, #41	; 0x29
 8003f40:	d002      	beq.n	8003f48 <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b2a      	cmp	r3, #42	; 0x2a
 8003f46:	d10b      	bne.n	8003f60 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8003f48:	2103      	movs	r1, #3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f913 	bl	8004176 <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2228      	movs	r2, #40	; 0x28
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a50      	ldr	r2, [pc, #320]	; (800409c <FMPI2C_ITError+0x198>)
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5e:	e011      	b.n	8003f84 <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8003f60:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f906 	bl	8004176 <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b60      	cmp	r3, #96	; 0x60
 8003f74:	d003      	beq.n	8003f7e <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d039      	beq.n	8004006 <FMPI2C_ITError+0x102>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b11      	cmp	r3, #17
 8003f96:	d002      	beq.n	8003f9e <FMPI2C_ITError+0x9a>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b21      	cmp	r3, #33	; 0x21
 8003f9c:	d133      	bne.n	8004006 <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d107      	bne.n	8003fbe <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fa4e 	bl	8003464 <HAL_DMA_GetState>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d017      	beq.n	8003ffe <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <FMPI2C_ITError+0x19c>)
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f892 	bl	800310c <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04d      	beq.n	800408a <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ffc:	e045      	b.n	800408a <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f850 	bl	80040a4 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004004:	e041      	b.n	800408a <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d039      	beq.n	8004082 <FMPI2C_ITError+0x17e>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b12      	cmp	r3, #18
 8004012:	d002      	beq.n	800401a <FMPI2C_ITError+0x116>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b22      	cmp	r3, #34	; 0x22
 8004018:	d133      	bne.n	8004082 <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d107      	bne.n	800403a <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004038:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fa10 	bl	8003464 <HAL_DMA_GetState>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d017      	beq.n	800407a <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <FMPI2C_ITError+0x19c>)
 8004050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f854 	bl	800310c <HAL_DMA_Abort_IT>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004074:	4610      	mov	r0, r2
 8004076:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004078:	e009      	b.n	800408e <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f812 	bl	80040a4 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004080:	e005      	b.n	800408e <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f80e 	bl	80040a4 <FMPI2C_TreatErrorCallback>
  }
}
 8004088:	e002      	b.n	8004090 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 800408e:	bf00      	nop
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	ffff0000 	.word	0xffff0000
 800409c:	08003879 	.word	0x08003879
 80040a0:	0800413b 	.word	0x0800413b

080040a4 <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d10e      	bne.n	80040d6 <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fbc8 	bl	8003864 <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 80040d4:	e009      	b.n	80040ea <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fbb3 	bl	8003850 <HAL_FMPI2C_ErrorCallback>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d103      	bne.n	8004110 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d007      	beq.n	800412e <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	619a      	str	r2, [r3, #24]
  }
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2200      	movs	r2, #0
 8004156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	2200      	movs	r2, #0
 8004166:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff ff9b 	bl	80040a4 <FMPI2C_TreatErrorCallback>
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00f      	beq.n	80041b0 <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004196:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041a4:	2b28      	cmp	r3, #40	; 0x28
 80041a6:	d003      	beq.n	80041b0 <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00f      	beq.n	80041da <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80041c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041ce:	2b28      	cmp	r3, #40	; 0x28
 80041d0:	d003      	beq.n	80041da <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 80041da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da03      	bge.n	80041ea <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d103      	bne.n	80041f8 <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d103      	bne.n	8004206 <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f043 0320 	orr.w	r3, r3, #32
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d103      	bne.n	8004214 <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6819      	ldr	r1, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43da      	mvns	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	400a      	ands	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b20      	cmp	r3, #32
 8004246:	d138      	bne.n	80042ba <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004252:	2302      	movs	r3, #2
 8004254:	e032      	b.n	80042bc <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2224      	movs	r2, #36	; 0x24
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004284:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	6453      	str	r3, [r2, #68]	; 0x44
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 80042ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f0:	4905      	ldr	r1, [pc, #20]	; (8004308 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40023800 	.word	0x40023800
 8004308:	40013800 	.word	0x40013800

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e159      	b.n	80045dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004328:	2201      	movs	r2, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	f040 8148 	bne.w	80045d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d005      	beq.n	800435e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	2b02      	cmp	r3, #2
 800435c:	d130      	bne.n	80043c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2203      	movs	r2, #3
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004394:	2201      	movs	r2, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 0201 	and.w	r2, r3, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d017      	beq.n	80043fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d123      	bne.n	8004450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	08da      	lsrs	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3208      	adds	r2, #8
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	08da      	lsrs	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3208      	adds	r2, #8
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2203      	movs	r2, #3
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a2 	beq.w	80045d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b57      	ldr	r3, [pc, #348]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	4a56      	ldr	r2, [pc, #344]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 800449c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a0:	6453      	str	r3, [r2, #68]	; 0x44
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ae:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_GPIO_Init+0x2ec>)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	3302      	adds	r3, #2
 80044b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	220f      	movs	r2, #15
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a49      	ldr	r2, [pc, #292]	; (80045fc <HAL_GPIO_Init+0x2f0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d019      	beq.n	800450e <HAL_GPIO_Init+0x202>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a48      	ldr	r2, [pc, #288]	; (8004600 <HAL_GPIO_Init+0x2f4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_GPIO_Init+0x1fe>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a47      	ldr	r2, [pc, #284]	; (8004604 <HAL_GPIO_Init+0x2f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00d      	beq.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a46      	ldr	r2, [pc, #280]	; (8004608 <HAL_GPIO_Init+0x2fc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <HAL_GPIO_Init+0x1f6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a45      	ldr	r2, [pc, #276]	; (800460c <HAL_GPIO_Init+0x300>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_GPIO_Init+0x1f2>
 80044fa:	2304      	movs	r3, #4
 80044fc:	e008      	b.n	8004510 <HAL_GPIO_Init+0x204>
 80044fe:	2307      	movs	r3, #7
 8004500:	e006      	b.n	8004510 <HAL_GPIO_Init+0x204>
 8004502:	2303      	movs	r3, #3
 8004504:	e004      	b.n	8004510 <HAL_GPIO_Init+0x204>
 8004506:	2302      	movs	r3, #2
 8004508:	e002      	b.n	8004510 <HAL_GPIO_Init+0x204>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_GPIO_Init+0x204>
 800450e:	2300      	movs	r3, #0
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	f002 0203 	and.w	r2, r2, #3
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	4093      	lsls	r3, r2
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004520:	4935      	ldr	r1, [pc, #212]	; (80045f8 <HAL_GPIO_Init+0x2ec>)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800452e:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_GPIO_Init+0x304>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004552:	4a2f      	ldr	r2, [pc, #188]	; (8004610 <HAL_GPIO_Init+0x304>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_GPIO_Init+0x304>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_GPIO_Init+0x304>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_GPIO_Init+0x304>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a6:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	f67f aea2 	bls.w	8004328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40013c00 	.word	0x40013c00

08004614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004624:	787b      	ldrb	r3, [r7, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004630:	e003      	b.n	800463a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	041a      	lsls	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	041a      	lsls	r2, r3, #16
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43d9      	mvns	r1, r3
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	400b      	ands	r3, r1
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	619a      	str	r2, [r3, #24]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004692:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc fb24 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40013c00 	.word	0x40013c00

080046ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e12b      	b.n	8004916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd fad8 	bl	8001c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004710:	f000 ffc8 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4a81      	ldr	r2, [pc, #516]	; (8004920 <HAL_I2C_Init+0x274>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d807      	bhi.n	8004730 <HAL_I2C_Init+0x84>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a80      	ldr	r2, [pc, #512]	; (8004924 <HAL_I2C_Init+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e006      	b.n	800473e <HAL_I2C_Init+0x92>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a7d      	ldr	r2, [pc, #500]	; (8004928 <HAL_I2C_Init+0x27c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	bf94      	ite	ls
 8004738:	2301      	movls	r3, #1
 800473a:	2300      	movhi	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0e7      	b.n	8004916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a78      	ldr	r2, [pc, #480]	; (800492c <HAL_I2C_Init+0x280>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0c9b      	lsrs	r3, r3, #18
 8004750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a6a      	ldr	r2, [pc, #424]	; (8004920 <HAL_I2C_Init+0x274>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d802      	bhi.n	8004780 <HAL_I2C_Init+0xd4>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3301      	adds	r3, #1
 800477e:	e009      	b.n	8004794 <HAL_I2C_Init+0xe8>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	4a69      	ldr	r2, [pc, #420]	; (8004930 <HAL_I2C_Init+0x284>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	3301      	adds	r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	430b      	orrs	r3, r1
 800479a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	495c      	ldr	r1, [pc, #368]	; (8004920 <HAL_I2C_Init+0x274>)
 80047b0:	428b      	cmp	r3, r1
 80047b2:	d819      	bhi.n	80047e8 <HAL_I2C_Init+0x13c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e59      	subs	r1, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c8:	400b      	ands	r3, r1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_I2C_Init+0x138>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1e59      	subs	r1, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	e051      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e04f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d111      	bne.n	8004814 <HAL_I2C_Init+0x168>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e012      	b.n	800483a <HAL_I2C_Init+0x18e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e58      	subs	r0, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	0099      	lsls	r1, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x196>
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10e      	bne.n	8004868 <HAL_I2C_Init+0x1bc>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e58      	subs	r0, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	440b      	add	r3, r1
 8004858:	fbb0 f3f3 	udiv	r3, r0, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	e00f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e58      	subs	r0, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	0099      	lsls	r1, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	fbb0 f3f3 	udiv	r3, r0, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	6809      	ldr	r1, [r1, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6911      	ldr	r1, [r2, #16]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	000186a0 	.word	0x000186a0
 8004924:	001e847f 	.word	0x001e847f
 8004928:	003d08ff 	.word	0x003d08ff
 800492c:	431bde83 	.word	0x431bde83
 8004930:	10624dd3 	.word	0x10624dd3

08004934 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e154      	b.n	8004bf0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a98      	ldr	r2, [pc, #608]	; (8004bc0 <HAL_I2S_Init+0x28c>)
 800495e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fd f9d9 	bl	8001d18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800497c:	f023 030f 	bic.w	r3, r3, #15
 8004980:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2202      	movs	r2, #2
 8004988:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d06f      	beq.n	8004a72 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800499a:	2310      	movs	r3, #16
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e001      	b.n	80049a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049a0:	2320      	movs	r3, #32
 80049a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d802      	bhi.n	80049b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_I2S_Init+0x290>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_I2S_Init+0x92>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a81      	ldr	r2, [pc, #516]	; (8004bc8 <HAL_I2S_Init+0x294>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d104      	bne.n	80049d0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80049c6:	2001      	movs	r0, #1
 80049c8:	f001 f862 	bl	8005a90 <HAL_RCCEx_GetPeriphCLKFreq>
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	e003      	b.n	80049d8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80049d0:	2002      	movs	r0, #2
 80049d2:	f001 f85d 	bl	8005a90 <HAL_RCCEx_GetPeriphCLKFreq>
 80049d6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d125      	bne.n	8004a2e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	3305      	adds	r3, #5
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e01f      	b.n	8004a4c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	3305      	adds	r3, #5
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e00e      	b.n	8004a4c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	461a      	mov	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	3305      	adds	r3, #5
 8004a4a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4a5f      	ldr	r2, [pc, #380]	; (8004bcc <HAL_I2S_Init+0x298>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e003      	b.n	8004a7a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a72:	2302      	movs	r3, #2
 8004a74:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d902      	bls.n	8004a86 <HAL_I2S_Init+0x152>
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2bff      	cmp	r3, #255	; 0xff
 8004a84:	d907      	bls.n	8004a96 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f043 0210 	orr.w	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e0ac      	b.n	8004bf0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	ea42 0103 	orr.w	r1, r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ab4:	f023 030f 	bic.w	r3, r3, #15
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6851      	ldr	r1, [r2, #4]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6892      	ldr	r2, [r2, #8]
 8004ac0:	4311      	orrs	r1, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68d2      	ldr	r2, [r2, #12]
 8004ac6:	4311      	orrs	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6992      	ldr	r2, [r2, #24]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b30      	cmp	r3, #48	; 0x30
 8004ae0:	d003      	beq.n	8004aea <HAL_I2S_Init+0x1b6>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ae8:	d107      	bne.n	8004afa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d16e      	bne.n	8004be0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <HAL_I2S_Init+0x29c>)
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <HAL_I2S_Init+0x290>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <HAL_I2S_Init+0x1e2>
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <HAL_I2S_Init+0x2a0>)
 8004b14:	e001      	b.n	8004b1a <HAL_I2S_Init+0x1e6>
 8004b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	4928      	ldr	r1, [pc, #160]	; (8004bc4 <HAL_I2S_Init+0x290>)
 8004b22:	428a      	cmp	r2, r1
 8004b24:	d101      	bne.n	8004b2a <HAL_I2S_Init+0x1f6>
 8004b26:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <HAL_I2S_Init+0x2a0>)
 8004b28:	e001      	b.n	8004b2e <HAL_I2S_Init+0x1fa>
 8004b2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b2e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b32:	f023 030f 	bic.w	r3, r3, #15
 8004b36:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <HAL_I2S_Init+0x290>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_I2S_Init+0x212>
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_I2S_Init+0x2a0>)
 8004b44:	e001      	b.n	8004b4a <HAL_I2S_Init+0x216>
 8004b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_I2S_Init+0x290>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_I2S_Init+0x228>
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_I2S_Init+0x2a0>)
 8004b5a:	e001      	b.n	8004b60 <HAL_I2S_Init+0x22c>
 8004b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6c:	d003      	beq.n	8004b76 <HAL_I2S_Init+0x242>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	e001      	b.n	8004b82 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	897b      	ldrh	r3, [r7, #10]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bae:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <HAL_I2S_Init+0x290>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_I2S_Init+0x2a4>
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_I2S_Init+0x2a0>)
 8004bbc:	e00e      	b.n	8004bdc <HAL_I2S_Init+0x2a8>
 8004bbe:	bf00      	nop
 8004bc0:	08004cef 	.word	0x08004cef
 8004bc4:	40003800 	.word	0x40003800
 8004bc8:	40003c00 	.word	0x40003c00
 8004bcc:	cccccccd 	.word	0xcccccccd
 8004bd0:	08004e05 	.word	0x08004e05
 8004bd4:	40003400 	.word	0x40003400
 8004bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bdc:	897a      	ldrh	r2, [r7, #10]
 8004bde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10e      	bne.n	8004c88 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffb8 	bl	8004bf8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10e      	bne.n	8004ce6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cd6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ff93 	bl	8004c0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d13a      	bne.n	8004d80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d109      	bne.n	8004d28 <I2S_IRQHandler+0x3a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d102      	bne.n	8004d28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ffb4 	bl	8004c90 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d126      	bne.n	8004d80 <I2S_IRQHandler+0x92>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d11f      	bne.n	8004d80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ff50 	bl	8004c20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d136      	bne.n	8004dfa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d109      	bne.n	8004daa <I2S_IRQHandler+0xbc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	d102      	bne.n	8004daa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff45 	bl	8004c34 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d122      	bne.n	8004dfa <I2S_IRQHandler+0x10c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d11b      	bne.n	8004dfa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f043 0204 	orr.w	r2, r3, #4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff13 	bl	8004c20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a92      	ldr	r2, [pc, #584]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e1e:	4b92      	ldr	r3, [pc, #584]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e20:	e001      	b.n	8004e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a8b      	ldr	r2, [pc, #556]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e3c:	4b8a      	ldr	r3, [pc, #552]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e3e:	e001      	b.n	8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e50:	d004      	beq.n	8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 8099 	bne.w	8004f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d107      	bne.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f925 	bl	80050c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9c8 	bl	8005220 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d13a      	bne.n	8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d035      	beq.n	8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6e      	ldr	r2, [pc, #440]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004eae:	4b6e      	ldr	r3, [pc, #440]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb0:	e001      	b.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4969      	ldr	r1, [pc, #420]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ebe:	428b      	cmp	r3, r1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ec2:	4b69      	ldr	r3, [pc, #420]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ec4:	e001      	b.n	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ece:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ede:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f043 0202 	orr.w	r2, r3, #2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fe88 	bl	8004c20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	f040 80c3 	bne.w	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80bd 	beq.w	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a49      	ldr	r2, [pc, #292]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f42:	4b49      	ldr	r3, [pc, #292]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f44:	e001      	b.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4944      	ldr	r1, [pc, #272]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f52:	428b      	cmp	r3, r1
 8004f54:	d101      	bne.n	8004f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f56:	4b44      	ldr	r3, [pc, #272]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f58:	e001      	b.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f043 0204 	orr.w	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fe4a 	bl	8004c20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f8c:	e089      	b.n	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d107      	bne.n	8004fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8be 	bl	8005124 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8fd 	bl	80051bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d12f      	bne.n	800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d02a      	beq.n	800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fe4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ff2:	e001      	b.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4919      	ldr	r1, [pc, #100]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005000:	428b      	cmp	r3, r1
 8005002:	d101      	bne.n	8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005004:	4b18      	ldr	r3, [pc, #96]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005006:	e001      	b.n	800500c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800500c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005010:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	f043 0202 	orr.w	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fdfa 	bl	8004c20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d136      	bne.n	80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d031      	beq.n	80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800504c:	e001      	b.n	8005052 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800504e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4902      	ldr	r1, [pc, #8]	; (8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800505a:	428b      	cmp	r3, r1
 800505c:	d106      	bne.n	800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800505e:	4b02      	ldr	r3, [pc, #8]	; (8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005060:	e006      	b.n	8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005062:	bf00      	nop
 8005064:	40003800 	.word	0x40003800
 8005068:	40003400 	.word	0x40003400
 800506c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005070:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005074:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005084:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fdc0 	bl	8004c20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050a0:	e000      	b.n	80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a2:	bf00      	nop
}
 80050a4:	bf00      	nop
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c99      	adds	r1, r3, #2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6251      	str	r1, [r2, #36]	; 0x24
 80050d2:	881a      	ldrh	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d113      	bne.n	800511a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005100:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ffc9 	bl	80050ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c99      	adds	r1, r3, #2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6251      	str	r1, [r2, #36]	; 0x24
 8005136:	8819      	ldrh	r1, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <I2SEx_TxISR_I2SExt+0x90>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <I2SEx_TxISR_I2SExt+0x22>
 8005142:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005144:	e001      	b.n	800514a <I2SEx_TxISR_I2SExt+0x26>
 8005146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514a:	460a      	mov	r2, r1
 800514c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d121      	bne.n	80051aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <I2SEx_TxISR_I2SExt+0x90>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <I2SEx_TxISR_I2SExt+0x50>
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005172:	e001      	b.n	8005178 <I2SEx_TxISR_I2SExt+0x54>
 8005174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	490d      	ldr	r1, [pc, #52]	; (80051b4 <I2SEx_TxISR_I2SExt+0x90>)
 8005180:	428b      	cmp	r3, r1
 8005182:	d101      	bne.n	8005188 <I2SEx_TxISR_I2SExt+0x64>
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005186:	e001      	b.n	800518c <I2SEx_TxISR_I2SExt+0x68>
 8005188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800518c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005190:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff ff81 	bl	80050ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40003800 	.word	0x40003800
 80051b8:	40003400 	.word	0x40003400

080051bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68d8      	ldr	r0, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	1c99      	adds	r1, r3, #2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051d4:	b282      	uxth	r2, r0
 80051d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d113      	bne.n	8005218 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ff4a 	bl	80050ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <I2SEx_RxISR_I2SExt+0x90>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <I2SEx_RxISR_I2SExt+0x16>
 8005232:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <I2SEx_RxISR_I2SExt+0x94>)
 8005234:	e001      	b.n	800523a <I2SEx_RxISR_I2SExt+0x1a>
 8005236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800523a:	68d8      	ldr	r0, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	1c99      	adds	r1, r3, #2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005246:	b282      	uxth	r2, r0
 8005248:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d121      	bne.n	80052a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <I2SEx_RxISR_I2SExt+0x90>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d101      	bne.n	8005270 <I2SEx_RxISR_I2SExt+0x50>
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <I2SEx_RxISR_I2SExt+0x94>)
 800526e:	e001      	b.n	8005274 <I2SEx_RxISR_I2SExt+0x54>
 8005270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	490d      	ldr	r1, [pc, #52]	; (80052b0 <I2SEx_RxISR_I2SExt+0x90>)
 800527c:	428b      	cmp	r3, r1
 800527e:	d101      	bne.n	8005284 <I2SEx_RxISR_I2SExt+0x64>
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <I2SEx_RxISR_I2SExt+0x94>)
 8005282:	e001      	b.n	8005288 <I2SEx_RxISR_I2SExt+0x68>
 8005284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005288:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800528c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff03 	bl	80050ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40003800 	.word	0x40003800
 80052b4:	40003400 	.word	0x40003400

080052b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0cc      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052cc:	4b68      	ldr	r3, [pc, #416]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d90c      	bls.n	80052f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b65      	ldr	r3, [pc, #404]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b63      	ldr	r3, [pc, #396]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0b8      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800530c:	4b59      	ldr	r3, [pc, #356]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4a58      	ldr	r2, [pc, #352]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005324:	4b53      	ldr	r3, [pc, #332]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a52      	ldr	r2, [pc, #328]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800532e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005330:	4b50      	ldr	r3, [pc, #320]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	494d      	ldr	r1, [pc, #308]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	4313      	orrs	r3, r2
 8005340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d044      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	4b47      	ldr	r3, [pc, #284]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d119      	bne.n	8005396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e07f      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d003      	beq.n	8005376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005372:	2b03      	cmp	r3, #3
 8005374:	d107      	bne.n	8005386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005376:	4b3f      	ldr	r3, [pc, #252]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e06f      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005386:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e067      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f023 0203 	bic.w	r2, r3, #3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4934      	ldr	r1, [pc, #208]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053a8:	f7fd f956 	bl	8002658 <HAL_GetTick>
 80053ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b0:	f7fd f952 	bl	8002658 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e04f      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c6:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 020c 	and.w	r2, r3, #12
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d1eb      	bne.n	80053b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d20c      	bcs.n	8005400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e6:	4b22      	ldr	r3, [pc, #136]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e032      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800540c:	4b19      	ldr	r3, [pc, #100]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4916      	ldr	r1, [pc, #88]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800542a:	4b12      	ldr	r3, [pc, #72]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	490e      	ldr	r1, [pc, #56]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800543e:	f000 f821 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005442:	4602      	mov	r2, r0
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	490a      	ldr	r1, [pc, #40]	; (8005478 <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	5ccb      	ldrb	r3, [r1, r3]
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <HAL_RCC_ClockConfig+0x1c4>)
 8005458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCC_ClockConfig+0x1c8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd f8b6 	bl	80025d0 <HAL_InitTick>

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023c00 	.word	0x40023c00
 8005474:	40023800 	.word	0x40023800
 8005478:	08008b90 	.word	0x08008b90
 800547c:	20000000 	.word	0x20000000
 8005480:	20000004 	.word	0x20000004

08005484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b094      	sub	sp, #80	; 0x50
 800548a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	647b      	str	r3, [r7, #68]	; 0x44
 8005490:	2300      	movs	r3, #0
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005494:	2300      	movs	r3, #0
 8005496:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800549c:	4b79      	ldr	r3, [pc, #484]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d00d      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x40>
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	f200 80e1 	bhi.w	8005670 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x34>
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d003      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0x3a>
 80054b6:	e0db      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b73      	ldr	r3, [pc, #460]	; (8005688 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054bc:	e0db      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054be:	4b72      	ldr	r3, [pc, #456]	; (8005688 <HAL_RCC_GetSysClockFreq+0x204>)
 80054c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c2:	e0d8      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c4:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ce:	4b6d      	ldr	r3, [pc, #436]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d063      	beq.n	80055a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b6a      	ldr	r3, [pc, #424]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	2200      	movs	r2, #0
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
 80054f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	f04f 0000 	mov.w	r0, #0
 80054fe:	f04f 0100 	mov.w	r1, #0
 8005502:	0159      	lsls	r1, r3, #5
 8005504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005508:	0150      	lsls	r0, r2, #5
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4621      	mov	r1, r4
 8005510:	1a51      	subs	r1, r2, r1
 8005512:	6139      	str	r1, [r7, #16]
 8005514:	4629      	mov	r1, r5
 8005516:	eb63 0301 	sbc.w	r3, r3, r1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005528:	4659      	mov	r1, fp
 800552a:	018b      	lsls	r3, r1, #6
 800552c:	4651      	mov	r1, sl
 800552e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005532:	4651      	mov	r1, sl
 8005534:	018a      	lsls	r2, r1, #6
 8005536:	4651      	mov	r1, sl
 8005538:	ebb2 0801 	subs.w	r8, r2, r1
 800553c:	4659      	mov	r1, fp
 800553e:	eb63 0901 	sbc.w	r9, r3, r1
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005556:	4690      	mov	r8, r2
 8005558:	4699      	mov	r9, r3
 800555a:	4623      	mov	r3, r4
 800555c:	eb18 0303 	adds.w	r3, r8, r3
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	462b      	mov	r3, r5
 8005564:	eb49 0303 	adc.w	r3, r9, r3
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005576:	4629      	mov	r1, r5
 8005578:	028b      	lsls	r3, r1, #10
 800557a:	4621      	mov	r1, r4
 800557c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005580:	4621      	mov	r1, r4
 8005582:	028a      	lsls	r2, r1, #10
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	2200      	movs	r2, #0
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
 800558e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005594:	f7fa fe36 	bl	8000204 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4613      	mov	r3, r2
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a0:	e058      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b38      	ldr	r3, [pc, #224]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	4611      	mov	r1, r2
 80055ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
 80055b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	f04f 0000 	mov.w	r0, #0
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ce:	0150      	lsls	r0, r2, #5
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4641      	mov	r1, r8
 80055d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055da:	4649      	mov	r1, r9
 80055dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f4:	ebb2 040a 	subs.w	r4, r2, sl
 80055f8:	eb63 050b 	sbc.w	r5, r3, fp
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4643      	mov	r3, r8
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	464b      	mov	r3, r9
 8005618:	eb45 0303 	adc.w	r3, r5, r3
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562a:	4629      	mov	r1, r5
 800562c:	028b      	lsls	r3, r1, #10
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005634:	4621      	mov	r1, r4
 8005636:	028a      	lsls	r2, r1, #10
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563e:	2200      	movs	r2, #0
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	61fa      	str	r2, [r7, #28]
 8005644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005648:	f7fa fddc 	bl	8000204 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800566e:	e002      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetSysClockFreq+0x204>)
 8005672:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005678:	4618      	mov	r0, r3
 800567a:	3750      	adds	r7, #80	; 0x50
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	00f42400 	.word	0x00f42400

0800568c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005690:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005692:	681b      	ldr	r3, [r3, #0]
}
 8005694:	4618      	mov	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000000 	.word	0x20000000

080056a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056a8:	f7ff fff0 	bl	800568c <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0a9b      	lsrs	r3, r3, #10
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4903      	ldr	r1, [pc, #12]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	08008ba0 	.word	0x08008ba0

080056cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d0:	f7ff ffdc 	bl	800568c <HAL_RCC_GetHCLKFreq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	0b5b      	lsrs	r3, r3, #13
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	4903      	ldr	r1, [pc, #12]	; (80056f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e2:	5ccb      	ldrb	r3, [r1, r3]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40023800 	.word	0x40023800
 80056f0:	08008ba0 	.word	0x08008ba0

080056f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005714:	4b87      	ldr	r3, [pc, #540]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800571a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4984      	ldr	r1, [pc, #528]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8005732:	2301      	movs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005742:	4b7c      	ldr	r3, [pc, #496]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005748:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4978      	ldr	r1, [pc, #480]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8083 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	4b6f      	ldr	r3, [pc, #444]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a6e      	ldr	r2, [pc, #440]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
 8005782:	4b6c      	ldr	r3, [pc, #432]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800578e:	4b6a      	ldr	r3, [pc, #424]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a69      	ldr	r2, [pc, #420]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800579a:	f7fc ff5d 	bl	8002658 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fc ff59 	bl	8002658 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e162      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057b4:	4b60      	ldr	r3, [pc, #384]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057c0:	4b5c      	ldr	r3, [pc, #368]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c8:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d028      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057de:	4b55      	ldr	r3, [pc, #340]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057e8:	4b54      	ldr	r3, [pc, #336]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ee:	4b53      	ldr	r3, [pc, #332]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057f4:	4a4f      	ldr	r2, [pc, #316]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057fa:	4b4e      	ldr	r3, [pc, #312]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d114      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005806:	f7fc ff27 	bl	8002658 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc ff23 	bl	8002658 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e12a      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b43      	ldr	r3, [pc, #268]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583c:	d10d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800583e:	4b3d      	ldr	r3, [pc, #244]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	4938      	ldr	r1, [pc, #224]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]
 8005858:	e005      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800585a:	4b36      	ldr	r3, [pc, #216]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4a35      	ldr	r2, [pc, #212]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005860:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005864:	6093      	str	r3, [r2, #8]
 8005866:	4b33      	ldr	r3, [pc, #204]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005872:	4930      	ldr	r1, [pc, #192]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005874:	4313      	orrs	r3, r2
 8005876:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800588c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800589c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	4922      	ldr	r1, [pc, #136]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d011      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058bc:	4b1d      	ldr	r3, [pc, #116]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	491a      	ldr	r1, [pc, #104]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058da:	d101      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	490e      	ldr	r1, [pc, #56]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d004      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	f040 8091 	bne.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005918:	f7fc fe9e 	bl	8002658 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800591e:	e013      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005920:	f7fc fe9a 	bl	8002658 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d90c      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0a3      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	40007000 	.word	0x40007000
 800593c:	42470e40 	.word	0x42470e40
 8005940:	424711e0 	.word	0x424711e0
 8005944:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005948:	4b4e      	ldr	r3, [pc, #312]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005954:	4a4c      	ldr	r2, [pc, #304]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d019      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005998:	d00e      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d019      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d115      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b6:	d110      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	019b      	lsls	r3, r3, #6
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	492c      	ldr	r1, [pc, #176]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	019b      	lsls	r3, r3, #6
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	071b      	lsls	r3, r3, #28
 8005a00:	4920      	ldr	r1, [pc, #128]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a0e:	f7fc fe23 	bl	8002658 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a14:	e008      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a16:	f7fc fe1f 	bl	8002658 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e028      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a28:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f0      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	490d      	ldr	r1, [pc, #52]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a68:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	4904      	ldr	r1, [pc, #16]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	424710d8 	.word	0x424710d8
 8005a8c:	42470068 	.word	0x42470068

08005a90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d004      	beq.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	f000 80a1 	beq.w	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005ab6:	e13f      	b.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005ab8:	4ba3      	ldr	r3, [pc, #652]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005abe:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005aca:	f000 8084 	beq.w	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005ad4:	f200 808c 	bhi.w	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ade:	d04f      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae6:	f200 8083 	bhi.w	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d006      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af6:	d17b      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005af8:	4b94      	ldr	r3, [pc, #592]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005afa:	617b      	str	r3, [r7, #20]
          break;
 8005afc:	e07b      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005afe:	4b92      	ldr	r3, [pc, #584]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0c:	d109      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b0e:	4b8e      	ldr	r3, [pc, #568]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b18:	4a8c      	ldr	r2, [pc, #560]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e019      	b.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b22:	4b89      	ldr	r3, [pc, #548]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b30:	4b85      	ldr	r3, [pc, #532]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b3a:	4a85      	ldr	r2, [pc, #532]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e008      	b.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b44:	4b80      	ldr	r3, [pc, #512]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4e:	4a80      	ldr	r2, [pc, #512]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b56:	4b7c      	ldr	r3, [pc, #496]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	099b      	lsrs	r3, r3, #6
 8005b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b6a:	4b77      	ldr	r3, [pc, #476]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b70:	0f1b      	lsrs	r3, r3, #28
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
          break;
 8005b7e:	e03a      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b80:	4b71      	ldr	r3, [pc, #452]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b8e:	4b6e      	ldr	r3, [pc, #440]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b96:	4a6e      	ldr	r2, [pc, #440]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	e007      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ba0:	4b69      	ldr	r3, [pc, #420]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba8:	4a69      	ldr	r2, [pc, #420]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005bb0:	4b65      	ldr	r3, [pc, #404]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	fb02 f303 	mul.w	r3, r2, r3
 8005bc0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005bc2:	4b61      	ldr	r3, [pc, #388]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	0f1b      	lsrs	r3, r3, #28
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	617b      	str	r3, [r7, #20]
          break;
 8005bd4:	e00f      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bd6:	4b5c      	ldr	r3, [pc, #368]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be2:	d102      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8005be4:	4b5a      	ldr	r3, [pc, #360]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005be6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005be8:	e005      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8005bea:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bec:	617b      	str	r3, [r7, #20]
          break;
 8005bee:	e002      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
          break;
 8005bf4:	bf00      	nop
        }
      }
      break;
 8005bf6:	e09f      	b.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005bf8:	4b53      	ldr	r3, [pc, #332]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfe:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c0a:	f000 8084 	beq.w	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c14:	f200 808c 	bhi.w	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c1e:	d04f      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c26:	f200 8083 	bhi.w	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d006      	beq.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c36:	d17b      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c38:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c3a:	617b      	str	r3, [r7, #20]
          break;
 8005c3c:	e07b      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005c3e:	4b42      	ldr	r3, [pc, #264]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4c:	d109      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c4e:	4b3e      	ldr	r3, [pc, #248]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c58:	4a3c      	ldr	r2, [pc, #240]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	e019      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c62:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c70:	4b35      	ldr	r3, [pc, #212]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c7a:	4a35      	ldr	r2, [pc, #212]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e008      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c84:	4b30      	ldr	r3, [pc, #192]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c8e:	4a30      	ldr	r2, [pc, #192]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c96:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005caa:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb0:	0f1b      	lsrs	r3, r3, #28
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
          break;
 8005cbe:	e03a      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cc0:	4b21      	ldr	r3, [pc, #132]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ccc:	d108      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cce:	4b1e      	ldr	r3, [pc, #120]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e007      	b.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	099b      	lsrs	r3, r3, #6
 8005cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0f1b      	lsrs	r3, r3, #28
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	617b      	str	r3, [r7, #20]
          break;
 8005d14:	e00f      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d22:	d102      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d26:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005d28:	e005      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d2c:	617b      	str	r3, [r7, #20]
          break;
 8005d2e:	e002      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
          break;
 8005d34:	bf00      	nop
        }
      }
      break;
 8005d36:	bf00      	nop
    }
  }
  return frequency;
 8005d38:	697b      	ldr	r3, [r7, #20]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00bb8000 	.word	0x00bb8000
 8005d50:	00f42400 	.word	0x00f42400

08005d54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e273      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d075      	beq.n	8005e5e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d72:	4b88      	ldr	r3, [pc, #544]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d00c      	beq.n	8005d98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7e:	4b85      	ldr	r3, [pc, #532]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d112      	bne.n	8005db0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d8a:	4b82      	ldr	r3, [pc, #520]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d96:	d10b      	bne.n	8005db0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	4b7e      	ldr	r3, [pc, #504]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d05b      	beq.n	8005e5c <HAL_RCC_OscConfig+0x108>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d157      	bne.n	8005e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e24e      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x74>
 8005dba:	4b76      	ldr	r3, [pc, #472]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a75      	ldr	r2, [pc, #468]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e01d      	b.n	8005e04 <HAL_RCC_OscConfig+0xb0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd0:	d10c      	bne.n	8005dec <HAL_RCC_OscConfig+0x98>
 8005dd2:	4b70      	ldr	r3, [pc, #448]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a6f      	ldr	r2, [pc, #444]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b6d      	ldr	r3, [pc, #436]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6c      	ldr	r2, [pc, #432]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e00b      	b.n	8005e04 <HAL_RCC_OscConfig+0xb0>
 8005dec:	4b69      	ldr	r3, [pc, #420]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a68      	ldr	r2, [pc, #416]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b66      	ldr	r3, [pc, #408]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a65      	ldr	r2, [pc, #404]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fc fc24 	bl	8002658 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e14:	f7fc fc20 	bl	8002658 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	; 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e213      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0xc0>
 8005e32:	e014      	b.n	8005e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fc fc10 	bl	8002658 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7fc fc0c 	bl	8002658 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	; 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e1ff      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4e:	4b51      	ldr	r3, [pc, #324]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0xe8>
 8005e5a:	e000      	b.n	8005e5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d063      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e6a:	4b4a      	ldr	r3, [pc, #296]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e76:	4b47      	ldr	r3, [pc, #284]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d11c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e82:	4b44      	ldr	r3, [pc, #272]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d116      	bne.n	8005ebc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8e:	4b41      	ldr	r3, [pc, #260]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x152>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e1d3      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea6:	4b3b      	ldr	r3, [pc, #236]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4937      	ldr	r1, [pc, #220]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eba:	e03a      	b.n	8005f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d020      	beq.n	8005f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ec4:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <HAL_RCC_OscConfig+0x244>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7fc fbc5 	bl	8002658 <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed2:	f7fc fbc1 	bl	8002658 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1b4      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	4925      	ldr	r1, [pc, #148]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]
 8005f04:	e015      	b.n	8005f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <HAL_RCC_OscConfig+0x244>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fc fba4 	bl	8002658 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f14:	f7fc fba0 	bl	8002658 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e193      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d036      	beq.n	8005fac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f46:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <HAL_RCC_OscConfig+0x248>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4c:	f7fc fb84 	bl	8002658 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f54:	f7fc fb80 	bl	8002658 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e173      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x200>
 8005f72:	e01b      	b.n	8005fac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <HAL_RCC_OscConfig+0x248>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7a:	f7fc fb6d 	bl	8002658 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f80:	e00e      	b.n	8005fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f82:	f7fc fb69 	bl	8002658 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d907      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e15c      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
 8005f94:	40023800 	.word	0x40023800
 8005f98:	42470000 	.word	0x42470000
 8005f9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa0:	4b8a      	ldr	r3, [pc, #552]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8005fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ea      	bne.n	8005f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8097 	beq.w	80060e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fbe:	4b83      	ldr	r3, [pc, #524]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	4b7f      	ldr	r3, [pc, #508]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4a7e      	ldr	r2, [pc, #504]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fda:	4b7c      	ldr	r3, [pc, #496]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	60bb      	str	r3, [r7, #8]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fea:	4b79      	ldr	r3, [pc, #484]	; (80061d0 <HAL_RCC_OscConfig+0x47c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d118      	bne.n	8006028 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff6:	4b76      	ldr	r3, [pc, #472]	; (80061d0 <HAL_RCC_OscConfig+0x47c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a75      	ldr	r2, [pc, #468]	; (80061d0 <HAL_RCC_OscConfig+0x47c>)
 8005ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006002:	f7fc fb29 	bl	8002658 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600a:	f7fc fb25 	bl	8002658 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e118      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601c:	4b6c      	ldr	r3, [pc, #432]	; (80061d0 <HAL_RCC_OscConfig+0x47c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d106      	bne.n	800603e <HAL_RCC_OscConfig+0x2ea>
 8006030:	4b66      	ldr	r3, [pc, #408]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	4a65      	ldr	r2, [pc, #404]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6713      	str	r3, [r2, #112]	; 0x70
 800603c:	e01c      	b.n	8006078 <HAL_RCC_OscConfig+0x324>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b05      	cmp	r3, #5
 8006044:	d10c      	bne.n	8006060 <HAL_RCC_OscConfig+0x30c>
 8006046:	4b61      	ldr	r3, [pc, #388]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	4a60      	ldr	r2, [pc, #384]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 800604c:	f043 0304 	orr.w	r3, r3, #4
 8006050:	6713      	str	r3, [r2, #112]	; 0x70
 8006052:	4b5e      	ldr	r3, [pc, #376]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a5d      	ldr	r2, [pc, #372]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
 800605e:	e00b      	b.n	8006078 <HAL_RCC_OscConfig+0x324>
 8006060:	4b5a      	ldr	r3, [pc, #360]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006064:	4a59      	ldr	r2, [pc, #356]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	6713      	str	r3, [r2, #112]	; 0x70
 800606c:	4b57      	ldr	r3, [pc, #348]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a56      	ldr	r2, [pc, #344]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006072:	f023 0304 	bic.w	r3, r3, #4
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d015      	beq.n	80060ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006080:	f7fc faea 	bl	8002658 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006086:	e00a      	b.n	800609e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006088:	f7fc fae6 	bl	8002658 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e0d7      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	4b4b      	ldr	r3, [pc, #300]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0ee      	beq.n	8006088 <HAL_RCC_OscConfig+0x334>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ac:	f7fc fad4 	bl	8002658 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	f7fc fad0 	bl	8002658 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e0c1      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ca:	4b40      	ldr	r3, [pc, #256]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1ee      	bne.n	80060b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d105      	bne.n	80060e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060dc:	4b3b      	ldr	r3, [pc, #236]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	4a3a      	ldr	r2, [pc, #232]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 80060e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80ad 	beq.w	800624c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d060      	beq.n	80061c0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d145      	bne.n	8006192 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006106:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <HAL_RCC_OscConfig+0x480>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fc faa4 	bl	8002658 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006114:	f7fc faa0 	bl	8002658 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e093      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f0      	bne.n	8006114 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	019b      	lsls	r3, r3, #6
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	3b01      	subs	r3, #1
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	061b      	lsls	r3, r3, #24
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	071b      	lsls	r3, r3, #28
 800615e:	491b      	ldr	r1, [pc, #108]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <HAL_RCC_OscConfig+0x480>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616a:	f7fc fa75 	bl	8002658 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006172:	f7fc fa71 	bl	8002658 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e064      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006184:	4b11      	ldr	r3, [pc, #68]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x41e>
 8006190:	e05c      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <HAL_RCC_OscConfig+0x480>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fc fa5e 	bl	8002658 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fc fa5a 	bl	8002658 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e04d      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0x44c>
 80061be:	e045      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d107      	bne.n	80061d8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e040      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40007000 	.word	0x40007000
 80061d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061d8:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <HAL_RCC_OscConfig+0x504>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d030      	beq.n	8006248 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d129      	bne.n	8006248 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	429a      	cmp	r2, r3
 8006200:	d122      	bne.n	8006248 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800620e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006210:	4293      	cmp	r3, r2
 8006212:	d119      	bne.n	8006248 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	3b01      	subs	r3, #1
 8006222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d10f      	bne.n	8006248 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d107      	bne.n	8006248 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800

0800625c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d012      	beq.n	8006298 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f831 	bl	80062e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006296:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f821 	bl	80062fc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80062ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80062ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062d2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	775a      	strb	r2, [r3, #29]
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	40013c00 	.word	0x40013c00

080062e8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <HAL_SD_IRQHandler+0x2e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa3e 	bl	80067b8 <SD_Read_IT>
 800633c:	e155      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 808f 	beq.w	800646c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006366:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800636a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d039      	beq.n	80063fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <HAL_SD_IRQHandler+0x8a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d011      	beq.n	80063be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f002 f8ea 	bl	8008578 <SDMMC_CmdStopTransfer>
 80063a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f933 	bl	8006624 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <HAL_SD_IRQHandler+0xda>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f910 	bl	8006610 <HAL_SD_RxCpltCallback>
 80063f0:	e0fb      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f902 	bl	80065fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063f8:	e0f7      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80f2 	beq.w	80065ea <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f002 f8af 	bl	8008578 <SDMMC_CmdStopTransfer>
 800641a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f8f8 	bl	8006624 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 80d5 	bne.w	80065ea <HAL_SD_IRQHandler+0x2da>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	f040 80cf 	bne.w	80065ea <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0208 	bic.w	r2, r2, #8
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f8c9 	bl	80065fc <HAL_SD_TxCpltCallback>
}
 800646a:	e0be      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_SD_IRQHandler+0x17c>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f9e8 	bl	800685a <SD_Write_IT>
 800648a:	e0ae      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006492:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80a7 	beq.w	80065ea <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	f043 0202 	orr.w	r2, r3, #2
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	f043 0208 	orr.w	r2, r3, #8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f043 0210 	orr.w	r2, r3, #16
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f240 523a 	movw	r2, #1338	; 0x53a
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800651c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f002 f828 	bl	8008578 <SDMMC_CmdStopTransfer>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f869 	bl	8006624 <HAL_SD_ErrorCallback>
}
 8006552:	e04a      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d045      	beq.n	80065ea <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_SD_IRQHandler+0x262>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d011      	beq.n	8006596 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_SD_IRQHandler+0x2e4>)
 8006578:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	4618      	mov	r0, r3
 8006580:	f7fc fdc4 	bl	800310c <HAL_DMA_Abort_IT>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d02f      	beq.n	80065ea <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658e:	4618      	mov	r0, r3
 8006590:	f000 f87c 	bl	800668c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006594:	e029      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <HAL_SD_IRQHandler+0x29a>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d011      	beq.n	80065ce <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	4a12      	ldr	r2, [pc, #72]	; (80065f8 <HAL_SD_IRQHandler+0x2e8>)
 80065b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fc fda8 	bl	800310c <HAL_DMA_Abort_IT>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f897 	bl	80066fa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80065cc:	e00d      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f828 	bl	8006638 <HAL_SD_AbortCallback>
}
 80065e8:	e7ff      	b.n	80065ea <HAL_SD_IRQHandler+0x2da>
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	0800668d 	.word	0x0800668d
 80065f8:	080066fb 	.word	0x080066fb

080065fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006658:	f107 030c 	add.w	r3, r7, #12
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f882 	bl	8006768 <SD_SendStatus>
 8006664:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	0a5b      	lsrs	r3, r3, #9
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006682:	693b      	ldr	r3, [r7, #16]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f240 523a 	movw	r2, #1338	; 0x53a
 80066a2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff ffd1 	bl	800664c <HAL_SD_GetCardState>
 80066aa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b06      	cmp	r3, #6
 80066be:	d002      	beq.n	80066c6 <SD_DMATxAbort+0x3a>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	d10a      	bne.n	80066dc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 ff54 	bl	8008578 <SDMMC_CmdStopTransfer>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	431a      	orrs	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ffa7 	bl	8006638 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80066ea:	e002      	b.n	80066f2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ff99 	bl	8006624 <HAL_SD_ErrorCallback>
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006710:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff ff9a 	bl	800664c <HAL_SD_GetCardState>
 8006718:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b06      	cmp	r3, #6
 800672c:	d002      	beq.n	8006734 <SD_DMARxAbort+0x3a>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b05      	cmp	r3, #5
 8006732:	d10a      	bne.n	800674a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f001 ff1d 	bl	8008578 <SDMMC_CmdStopTransfer>
 800673e:	4602      	mov	r2, r0
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff70 	bl	8006638 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006758:	e002      	b.n	8006760 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff ff62 	bl	8006624 <HAL_SD_ErrorCallback>
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800677c:	e018      	b.n	80067b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f001 ff16 	bl	80085bc <SDMMC_CmdSendStatus>
 8006790:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	e009      	b.n	80067b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fed5 	bl	8008552 <SDIO_GetResponse>
 80067a8:	4602      	mov	r2, r0
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d03f      	beq.n	8006852 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e033      	b.n	8006840 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fe63 	bl	80084a8 <SDIO_ReadFIFO>
 80067e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3b01      	subs	r3, #1
 800680c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3b01      	subs	r3, #1
 8006822:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	0e1b      	lsrs	r3, r3, #24
 8006828:	b2da      	uxtb	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3b01      	subs	r3, #1
 8006838:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	3301      	adds	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b07      	cmp	r3, #7
 8006844:	d9c8      	bls.n	80067d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d043      	beq.n	80068fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e037      	b.n	80068ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3b01      	subs	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	021a      	lsls	r2, r3, #8
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4313      	orrs	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	041a      	lsls	r2, r3, #16
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	061a      	lsls	r2, r3, #24
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f107 0208 	add.w	r2, r7, #8
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 fdef 	bl	80084c2 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	3301      	adds	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b07      	cmp	r3, #7
 80068ee:	d9c4      	bls.n	800687a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e07b      	b.n	8006a0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d108      	bne.n	8006930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006926:	d009      	beq.n	800693c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	61da      	str	r2, [r3, #28]
 800692e:	e005      	b.n	800693c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb fabc 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	ea42 0103 	orr.w	r1, r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	f003 0104 	and.w	r1, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0210 	and.w	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b088      	sub	sp, #32
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_SPI_Transmit+0x22>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e126      	b.n	8006c86 <HAL_SPI_Transmit+0x270>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a40:	f7fb fe0a 	bl	8002658 <HAL_GetTick>
 8006a44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
 8006a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a5a:	e10b      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_SPI_Transmit+0x52>
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a6c:	e102      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2203      	movs	r2, #3
 8006a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ad4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d007      	beq.n	8006af4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afc:	d14b      	bne.n	8006b96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <HAL_SPI_Transmit+0xf6>
 8006b06:	8afb      	ldrh	r3, [r7, #22]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d13e      	bne.n	8006b8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	881a      	ldrh	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b30:	e02b      	b.n	8006b8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d112      	bne.n	8006b66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	881a      	ldrh	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b64:	e011      	b.n	8006b8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b66:	f7fb fd77 	bl	8002658 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d803      	bhi.n	8006b7e <HAL_SPI_Transmit+0x168>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Transmit+0x16e>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b88:	e074      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ce      	bne.n	8006b32 <HAL_SPI_Transmit+0x11c>
 8006b94:	e04c      	b.n	8006c30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Transmit+0x18e>
 8006b9e:	8afb      	ldrh	r3, [r7, #22]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d140      	bne.n	8006c26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bca:	e02c      	b.n	8006c26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d113      	bne.n	8006c02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c00:	e011      	b.n	8006c26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c02:	f7fb fd29 	bl	8002658 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d803      	bhi.n	8006c1a <HAL_SPI_Transmit+0x204>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d102      	bne.n	8006c20 <HAL_SPI_Transmit+0x20a>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c24:	e026      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1cd      	bne.n	8006bcc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f8b3 	bl	8006da0 <SPI_EndRxTxTransaction>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e000      	b.n	8006c74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ca0:	f7fb fcda 	bl	8002658 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	4413      	add	r3, r2
 8006cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cb0:	f7fb fcd2 	bl	8002658 <HAL_GetTick>
 8006cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cb6:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	015b      	lsls	r3, r3, #5
 8006cbc:	0d1b      	lsrs	r3, r3, #20
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	fb02 f303 	mul.w	r3, r2, r3
 8006cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cc6:	e054      	b.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d050      	beq.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cd0:	f7fb fcc2 	bl	8002658 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d902      	bls.n	8006ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d13d      	bne.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cfe:	d111      	bne.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d08:	d004      	beq.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d12:	d107      	bne.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2c:	d10f      	bne.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e017      	b.n	8006d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d19b      	bne.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3720      	adds	r7, #32
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000000 	.word	0x20000000

08006da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <SPI_EndRxTxTransaction+0x7c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <SPI_EndRxTxTransaction+0x80>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	0d5b      	lsrs	r3, r3, #21
 8006db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dbc:	fb02 f303 	mul.w	r3, r2, r3
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dca:	d112      	bne.n	8006df2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2180      	movs	r1, #128	; 0x80
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff ff5a 	bl	8006c90 <SPI_WaitFlagStateUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d016      	beq.n	8006e10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e00f      	b.n	8006e12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e08:	2b80      	cmp	r3, #128	; 0x80
 8006e0a:	d0f2      	beq.n	8006df2 <SPI_EndRxTxTransaction+0x52>
 8006e0c:	e000      	b.n	8006e10 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e0e:	bf00      	nop
  }

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000000 	.word	0x20000000
 8006e20:	165e9f81 	.word	0x165e9f81

08006e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e041      	b.n	8006eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb f88a 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f000 fc6c 	bl	8007740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e041      	b.n	8006f58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d106      	bne.n	8006eee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f839 	bl	8006f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4619      	mov	r1, r3
 8006f00:	4610      	mov	r0, r2
 8006f02:	f000 fc1d 	bl	8007740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_TIM_PWM_Start+0x24>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	bf14      	ite	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	2300      	moveq	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e022      	b.n	8006fde <HAL_TIM_PWM_Start+0x6a>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d109      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x3e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	bf14      	ite	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	2300      	moveq	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	e015      	b.n	8006fde <HAL_TIM_PWM_Start+0x6a>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d109      	bne.n	8006fcc <HAL_TIM_PWM_Start+0x58>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	bf14      	ite	ne
 8006fc4:	2301      	movne	r3, #1
 8006fc6:	2300      	moveq	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	e008      	b.n	8006fde <HAL_TIM_PWM_Start+0x6a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e07c      	b.n	80070e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_PWM_Start+0x82>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff4:	e013      	b.n	800701e <HAL_TIM_PWM_Start+0xaa>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_PWM_Start+0x92>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	e00b      	b.n	800701e <HAL_TIM_PWM_Start+0xaa>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d104      	bne.n	8007016 <HAL_TIM_PWM_Start+0xa2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007014:	e003      	b.n	800701e <HAL_TIM_PWM_Start+0xaa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2201      	movs	r2, #1
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fe74 	bl	8007d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2d      	ldr	r2, [pc, #180]	; (80070e8 <HAL_TIM_PWM_Start+0x174>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIM_PWM_Start+0xcc>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2c      	ldr	r2, [pc, #176]	; (80070ec <HAL_TIM_PWM_Start+0x178>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d101      	bne.n	8007044 <HAL_TIM_PWM_Start+0xd0>
 8007040:	2301      	movs	r3, #1
 8007042:	e000      	b.n	8007046 <HAL_TIM_PWM_Start+0xd2>
 8007044:	2300      	movs	r3, #0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a22      	ldr	r2, [pc, #136]	; (80070e8 <HAL_TIM_PWM_Start+0x174>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d022      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706c:	d01d      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <HAL_TIM_PWM_Start+0x17c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d018      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <HAL_TIM_PWM_Start+0x180>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_TIM_PWM_Start+0x184>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00e      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a16      	ldr	r2, [pc, #88]	; (80070ec <HAL_TIM_PWM_Start+0x178>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d009      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a18      	ldr	r2, [pc, #96]	; (80070fc <HAL_TIM_PWM_Start+0x188>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <HAL_TIM_PWM_Start+0x136>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a16      	ldr	r2, [pc, #88]	; (8007100 <HAL_TIM_PWM_Start+0x18c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d111      	bne.n	80070ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b06      	cmp	r3, #6
 80070ba:	d010      	beq.n	80070de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070cc:	e007      	b.n	80070de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0201 	orr.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40014000 	.word	0x40014000
 8007100:	40001800 	.word	0x40001800

08007104 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e041      	b.n	800719c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f839 	bl	80071a4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f000 fafb 	bl	8007740 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0208 	bic.w	r2, r2, #8
 8007158:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d122      	bne.n	8007214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d11b      	bne.n	8007214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0202 	mvn.w	r2, #2
 80071e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa81 	bl	8007702 <HAL_TIM_IC_CaptureCallback>
 8007200:	e005      	b.n	800720e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa73 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa84 	bl	8007716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b04      	cmp	r3, #4
 8007220:	d122      	bne.n	8007268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b04      	cmp	r3, #4
 800722e:	d11b      	bne.n	8007268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0204 	mvn.w	r2, #4
 8007238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa57 	bl	8007702 <HAL_TIM_IC_CaptureCallback>
 8007254:	e005      	b.n	8007262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa49 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa5a 	bl	8007716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b08      	cmp	r3, #8
 8007274:	d122      	bne.n	80072bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b08      	cmp	r3, #8
 8007282:	d11b      	bne.n	80072bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0208 	mvn.w	r2, #8
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa2d 	bl	8007702 <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa1f 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa30 	bl	8007716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d122      	bne.n	8007310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d11b      	bne.n	8007310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0210 	mvn.w	r2, #16
 80072e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2208      	movs	r2, #8
 80072e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa03 	bl	8007702 <HAL_TIM_IC_CaptureCallback>
 80072fc:	e005      	b.n	800730a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9f5 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa06 	bl	8007716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10e      	bne.n	800733c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d107      	bne.n	800733c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0201 	mvn.w	r2, #1
 8007334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9cf 	bl	80076da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b80      	cmp	r3, #128	; 0x80
 8007348:	d10e      	bne.n	8007368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007354:	2b80      	cmp	r3, #128	; 0x80
 8007356:	d107      	bne.n	8007368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fdd4 	bl	8007f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d10e      	bne.n	8007394 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d107      	bne.n	8007394 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800738c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9cb 	bl	800772a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d10e      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d107      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0220 	mvn.w	r2, #32
 80073b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fd9e 	bl	8007efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0ae      	b.n	8007544 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	f200 809f 	bhi.w	8007534 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007535 	.word	0x08007535
 8007404:	08007535 	.word	0x08007535
 8007408:	08007535 	.word	0x08007535
 800740c:	08007471 	.word	0x08007471
 8007410:	08007535 	.word	0x08007535
 8007414:	08007535 	.word	0x08007535
 8007418:	08007535 	.word	0x08007535
 800741c:	080074b3 	.word	0x080074b3
 8007420:	08007535 	.word	0x08007535
 8007424:	08007535 	.word	0x08007535
 8007428:	08007535 	.word	0x08007535
 800742c:	080074f3 	.word	0x080074f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68b9      	ldr	r1, [r7, #8]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fa22 	bl	8007880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0208 	orr.w	r2, r2, #8
 800744a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0204 	bic.w	r2, r2, #4
 800745a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6999      	ldr	r1, [r3, #24]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	619a      	str	r2, [r3, #24]
      break;
 800746e:	e064      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fa72 	bl	8007960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6999      	ldr	r1, [r3, #24]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	021a      	lsls	r2, r3, #8
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	619a      	str	r2, [r3, #24]
      break;
 80074b0:	e043      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fac7 	bl	8007a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0208 	orr.w	r2, r2, #8
 80074cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0204 	bic.w	r2, r2, #4
 80074dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69d9      	ldr	r1, [r3, #28]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	61da      	str	r2, [r3, #28]
      break;
 80074f0:	e023      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fb1b 	bl	8007b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69d9      	ldr	r1, [r3, #28]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	021a      	lsls	r2, r3, #8
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	61da      	str	r2, [r3, #28]
      break;
 8007532:	e002      	b.n	800753a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
      break;
 8007538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_TIM_ConfigClockSource+0x1c>
 8007564:	2302      	movs	r3, #2
 8007566:	e0b4      	b.n	80076d2 <HAL_TIM_ConfigClockSource+0x186>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800758e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a0:	d03e      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0xd4>
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a6:	f200 8087 	bhi.w	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	f000 8086 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x172>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	d87f      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075b8:	2b70      	cmp	r3, #112	; 0x70
 80075ba:	d01a      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0xa6>
 80075bc:	2b70      	cmp	r3, #112	; 0x70
 80075be:	d87b      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075c0:	2b60      	cmp	r3, #96	; 0x60
 80075c2:	d050      	beq.n	8007666 <HAL_TIM_ConfigClockSource+0x11a>
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d877      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d03c      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0xfa>
 80075cc:	2b50      	cmp	r3, #80	; 0x50
 80075ce:	d873      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d058      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x13a>
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d86f      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d064      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d86b      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d060      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d867      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d05c      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d05a      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15a>
 80075f0:	e062      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6899      	ldr	r1, [r3, #8]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f000 fb67 	bl	8007cd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	609a      	str	r2, [r3, #8]
      break;
 800761e:	e04f      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	6899      	ldr	r1, [r3, #8]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f000 fb50 	bl	8007cd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007642:	609a      	str	r2, [r3, #8]
      break;
 8007644:	e03c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6859      	ldr	r1, [r3, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	461a      	mov	r2, r3
 8007654:	f000 fac4 	bl	8007be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2150      	movs	r1, #80	; 0x50
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fb1d 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 8007664:	e02c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6859      	ldr	r1, [r3, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	461a      	mov	r2, r3
 8007674:	f000 fae3 	bl	8007c3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2160      	movs	r1, #96	; 0x60
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fb0d 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 8007684:	e01c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6859      	ldr	r1, [r3, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	461a      	mov	r2, r3
 8007694:	f000 faa4 	bl	8007be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2140      	movs	r1, #64	; 0x40
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fafd 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 80076a4:	e00c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f000 faf4 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 80076b6:	e003      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
      break;
 80076bc:	e000      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a40      	ldr	r2, [pc, #256]	; (8007854 <TIM_Base_SetConfig+0x114>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d00f      	beq.n	8007780 <TIM_Base_SetConfig+0x40>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a3d      	ldr	r2, [pc, #244]	; (8007858 <TIM_Base_SetConfig+0x118>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00b      	beq.n	8007780 <TIM_Base_SetConfig+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a3c      	ldr	r2, [pc, #240]	; (800785c <TIM_Base_SetConfig+0x11c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d007      	beq.n	8007780 <TIM_Base_SetConfig+0x40>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a3b      	ldr	r2, [pc, #236]	; (8007860 <TIM_Base_SetConfig+0x120>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a3a      	ldr	r2, [pc, #232]	; (8007864 <TIM_Base_SetConfig+0x124>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d108      	bne.n	8007792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2f      	ldr	r2, [pc, #188]	; (8007854 <TIM_Base_SetConfig+0x114>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d02b      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a0:	d027      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2c      	ldr	r2, [pc, #176]	; (8007858 <TIM_Base_SetConfig+0x118>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d023      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a2b      	ldr	r2, [pc, #172]	; (800785c <TIM_Base_SetConfig+0x11c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01f      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <TIM_Base_SetConfig+0x120>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01b      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a29      	ldr	r2, [pc, #164]	; (8007864 <TIM_Base_SetConfig+0x124>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d017      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a28      	ldr	r2, [pc, #160]	; (8007868 <TIM_Base_SetConfig+0x128>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d013      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a27      	ldr	r2, [pc, #156]	; (800786c <TIM_Base_SetConfig+0x12c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00f      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a26      	ldr	r2, [pc, #152]	; (8007870 <TIM_Base_SetConfig+0x130>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00b      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a25      	ldr	r2, [pc, #148]	; (8007874 <TIM_Base_SetConfig+0x134>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d007      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a24      	ldr	r2, [pc, #144]	; (8007878 <TIM_Base_SetConfig+0x138>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a23      	ldr	r2, [pc, #140]	; (800787c <TIM_Base_SetConfig+0x13c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d108      	bne.n	8007804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a0a      	ldr	r2, [pc, #40]	; (8007854 <TIM_Base_SetConfig+0x114>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_Base_SetConfig+0xf8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <TIM_Base_SetConfig+0x124>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d103      	bne.n	8007840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	615a      	str	r2, [r3, #20]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	40010000 	.word	0x40010000
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	40010400 	.word	0x40010400
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800
 8007874:	40001800 	.word	0x40001800
 8007878:	40001c00 	.word	0x40001c00
 800787c:	40002000 	.word	0x40002000

08007880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0303 	bic.w	r3, r3, #3
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f023 0302 	bic.w	r3, r3, #2
 80078c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a20      	ldr	r2, [pc, #128]	; (8007958 <TIM_OC1_SetConfig+0xd8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC1_SetConfig+0x64>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a1f      	ldr	r2, [pc, #124]	; (800795c <TIM_OC1_SetConfig+0xdc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d10c      	bne.n	80078fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0308 	bic.w	r3, r3, #8
 80078ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f023 0304 	bic.w	r3, r3, #4
 80078fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a15      	ldr	r2, [pc, #84]	; (8007958 <TIM_OC1_SetConfig+0xd8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_OC1_SetConfig+0x8e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a14      	ldr	r2, [pc, #80]	; (800795c <TIM_OC1_SetConfig+0xdc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d111      	bne.n	8007932 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800791c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	621a      	str	r2, [r3, #32]
}
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40010000 	.word	0x40010000
 800795c:	40010400 	.word	0x40010400

08007960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f023 0210 	bic.w	r2, r3, #16
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f023 0320 	bic.w	r3, r3, #32
 80079aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a22      	ldr	r2, [pc, #136]	; (8007a44 <TIM_OC2_SetConfig+0xe4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <TIM_OC2_SetConfig+0x68>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a21      	ldr	r2, [pc, #132]	; (8007a48 <TIM_OC2_SetConfig+0xe8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d10d      	bne.n	80079e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <TIM_OC2_SetConfig+0xe4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC2_SetConfig+0x94>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <TIM_OC2_SetConfig+0xe8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d113      	bne.n	8007a1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40010400 	.word	0x40010400

08007a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <TIM_OC3_SetConfig+0xe0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d003      	beq.n	8007ab2 <TIM_OC3_SetConfig+0x66>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <TIM_OC3_SetConfig+0xe4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d10d      	bne.n	8007ace <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a16      	ldr	r2, [pc, #88]	; (8007b2c <TIM_OC3_SetConfig+0xe0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_OC3_SetConfig+0x92>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <TIM_OC3_SetConfig+0xe4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d113      	bne.n	8007b06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40010400 	.word	0x40010400

08007b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	031b      	lsls	r3, r3, #12
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a12      	ldr	r2, [pc, #72]	; (8007bd8 <TIM_OC4_SetConfig+0xa4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC4_SetConfig+0x68>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <TIM_OC4_SetConfig+0xa8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d109      	bne.n	8007bb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	019b      	lsls	r3, r3, #6
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40010400 	.word	0x40010400

08007be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f023 0201 	bic.w	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 030a 	bic.w	r3, r3, #10
 8007c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	621a      	str	r2, [r3, #32]
}
 8007c32:	bf00      	nop
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b087      	sub	sp, #28
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f023 0210 	bic.w	r2, r3, #16
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	031b      	lsls	r3, r3, #12
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f043 0307 	orr.w	r3, r3, #7
 8007cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	609a      	str	r2, [r3, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	021a      	lsls	r2, r3, #8
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	609a      	str	r2, [r3, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2201      	movs	r2, #1
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	43db      	mvns	r3, r3
 8007d36:	401a      	ands	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1a      	ldr	r2, [r3, #32]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e05a      	b.n	8007e2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a21      	ldr	r2, [pc, #132]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d022      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc4:	d01d      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1d      	ldr	r2, [pc, #116]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d018      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1a      	ldr	r2, [pc, #104]	; (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00e      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a17      	ldr	r2, [pc, #92]	; (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d10c      	bne.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40010400 	.word	0x40010400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40001800 	.word	0x40001800

08007e58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e03d      	b.n	8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e03f      	b.n	8007fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fa f8fa 	bl	8002144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	; 0x24
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f829 	bl	8007fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc4:	b0c0      	sub	sp, #256	; 0x100
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fdc:	68d9      	ldr	r1, [r3, #12]
 8007fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	ea40 0301 	orr.w	r3, r0, r1
 8007fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	4313      	orrs	r3, r2
 8008008:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008018:	f021 010c 	bic.w	r1, r1, #12
 800801c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008026:	430b      	orrs	r3, r1
 8008028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803a:	6999      	ldr	r1, [r3, #24]
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	ea40 0301 	orr.w	r3, r0, r1
 8008046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4b8f      	ldr	r3, [pc, #572]	; (800828c <UART_SetConfig+0x2cc>)
 8008050:	429a      	cmp	r2, r3
 8008052:	d005      	beq.n	8008060 <UART_SetConfig+0xa0>
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b8d      	ldr	r3, [pc, #564]	; (8008290 <UART_SetConfig+0x2d0>)
 800805c:	429a      	cmp	r2, r3
 800805e:	d104      	bne.n	800806a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008060:	f7fd fb34 	bl	80056cc <HAL_RCC_GetPCLK2Freq>
 8008064:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008068:	e003      	b.n	8008072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800806a:	f7fd fb1b 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 800806e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807c:	f040 810c 	bne.w	8008298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008084:	2200      	movs	r2, #0
 8008086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800808a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800808e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	1891      	adds	r1, r2, r2
 8008098:	65b9      	str	r1, [r7, #88]	; 0x58
 800809a:	415b      	adcs	r3, r3
 800809c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800809e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080a2:	4621      	mov	r1, r4
 80080a4:	eb12 0801 	adds.w	r8, r2, r1
 80080a8:	4629      	mov	r1, r5
 80080aa:	eb43 0901 	adc.w	r9, r3, r1
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080c2:	4690      	mov	r8, r2
 80080c4:	4699      	mov	r9, r3
 80080c6:	4623      	mov	r3, r4
 80080c8:	eb18 0303 	adds.w	r3, r8, r3
 80080cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080d0:	462b      	mov	r3, r5
 80080d2:	eb49 0303 	adc.w	r3, r9, r3
 80080d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080ee:	460b      	mov	r3, r1
 80080f0:	18db      	adds	r3, r3, r3
 80080f2:	653b      	str	r3, [r7, #80]	; 0x50
 80080f4:	4613      	mov	r3, r2
 80080f6:	eb42 0303 	adc.w	r3, r2, r3
 80080fa:	657b      	str	r3, [r7, #84]	; 0x54
 80080fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008104:	f7f8 f87e 	bl	8000204 <__aeabi_uldivmod>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4b61      	ldr	r3, [pc, #388]	; (8008294 <UART_SetConfig+0x2d4>)
 800810e:	fba3 2302 	umull	r2, r3, r3, r2
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	011c      	lsls	r4, r3, #4
 8008116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800811a:	2200      	movs	r2, #0
 800811c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008120:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008128:	4642      	mov	r2, r8
 800812a:	464b      	mov	r3, r9
 800812c:	1891      	adds	r1, r2, r2
 800812e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008130:	415b      	adcs	r3, r3
 8008132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008138:	4641      	mov	r1, r8
 800813a:	eb12 0a01 	adds.w	sl, r2, r1
 800813e:	4649      	mov	r1, r9
 8008140:	eb43 0b01 	adc.w	fp, r3, r1
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008158:	4692      	mov	sl, r2
 800815a:	469b      	mov	fp, r3
 800815c:	4643      	mov	r3, r8
 800815e:	eb1a 0303 	adds.w	r3, sl, r3
 8008162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008166:	464b      	mov	r3, r9
 8008168:	eb4b 0303 	adc.w	r3, fp, r3
 800816c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800817c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008184:	460b      	mov	r3, r1
 8008186:	18db      	adds	r3, r3, r3
 8008188:	643b      	str	r3, [r7, #64]	; 0x40
 800818a:	4613      	mov	r3, r2
 800818c:	eb42 0303 	adc.w	r3, r2, r3
 8008190:	647b      	str	r3, [r7, #68]	; 0x44
 8008192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800819a:	f7f8 f833 	bl	8000204 <__aeabi_uldivmod>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	4b3b      	ldr	r3, [pc, #236]	; (8008294 <UART_SetConfig+0x2d4>)
 80081a6:	fba3 2301 	umull	r2, r3, r3, r1
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	2264      	movs	r2, #100	; 0x64
 80081ae:	fb02 f303 	mul.w	r3, r2, r3
 80081b2:	1acb      	subs	r3, r1, r3
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081ba:	4b36      	ldr	r3, [pc, #216]	; (8008294 <UART_SetConfig+0x2d4>)
 80081bc:	fba3 2302 	umull	r2, r3, r3, r2
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081c8:	441c      	add	r4, r3
 80081ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081dc:	4642      	mov	r2, r8
 80081de:	464b      	mov	r3, r9
 80081e0:	1891      	adds	r1, r2, r2
 80081e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80081e4:	415b      	adcs	r3, r3
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081ec:	4641      	mov	r1, r8
 80081ee:	1851      	adds	r1, r2, r1
 80081f0:	6339      	str	r1, [r7, #48]	; 0x30
 80081f2:	4649      	mov	r1, r9
 80081f4:	414b      	adcs	r3, r1
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008204:	4659      	mov	r1, fp
 8008206:	00cb      	lsls	r3, r1, #3
 8008208:	4651      	mov	r1, sl
 800820a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820e:	4651      	mov	r1, sl
 8008210:	00ca      	lsls	r2, r1, #3
 8008212:	4610      	mov	r0, r2
 8008214:	4619      	mov	r1, r3
 8008216:	4603      	mov	r3, r0
 8008218:	4642      	mov	r2, r8
 800821a:	189b      	adds	r3, r3, r2
 800821c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008220:	464b      	mov	r3, r9
 8008222:	460a      	mov	r2, r1
 8008224:	eb42 0303 	adc.w	r3, r2, r3
 8008228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008238:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800823c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008240:	460b      	mov	r3, r1
 8008242:	18db      	adds	r3, r3, r3
 8008244:	62bb      	str	r3, [r7, #40]	; 0x28
 8008246:	4613      	mov	r3, r2
 8008248:	eb42 0303 	adc.w	r3, r2, r3
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008256:	f7f7 ffd5 	bl	8000204 <__aeabi_uldivmod>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <UART_SetConfig+0x2d4>)
 8008260:	fba3 1302 	umull	r1, r3, r3, r2
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	2164      	movs	r1, #100	; 0x64
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	3332      	adds	r3, #50	; 0x32
 8008272:	4a08      	ldr	r2, [pc, #32]	; (8008294 <UART_SetConfig+0x2d4>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f003 0207 	and.w	r2, r3, #7
 800827e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4422      	add	r2, r4
 8008286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008288:	e105      	b.n	8008496 <UART_SetConfig+0x4d6>
 800828a:	bf00      	nop
 800828c:	40011000 	.word	0x40011000
 8008290:	40011400 	.word	0x40011400
 8008294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829c:	2200      	movs	r2, #0
 800829e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082aa:	4642      	mov	r2, r8
 80082ac:	464b      	mov	r3, r9
 80082ae:	1891      	adds	r1, r2, r2
 80082b0:	6239      	str	r1, [r7, #32]
 80082b2:	415b      	adcs	r3, r3
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
 80082b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082ba:	4641      	mov	r1, r8
 80082bc:	1854      	adds	r4, r2, r1
 80082be:	4649      	mov	r1, r9
 80082c0:	eb43 0501 	adc.w	r5, r3, r1
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	00eb      	lsls	r3, r5, #3
 80082ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082d2:	00e2      	lsls	r2, r4, #3
 80082d4:	4614      	mov	r4, r2
 80082d6:	461d      	mov	r5, r3
 80082d8:	4643      	mov	r3, r8
 80082da:	18e3      	adds	r3, r4, r3
 80082dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082e0:	464b      	mov	r3, r9
 80082e2:	eb45 0303 	adc.w	r3, r5, r3
 80082e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008306:	4629      	mov	r1, r5
 8008308:	008b      	lsls	r3, r1, #2
 800830a:	4621      	mov	r1, r4
 800830c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008310:	4621      	mov	r1, r4
 8008312:	008a      	lsls	r2, r1, #2
 8008314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008318:	f7f7 ff74 	bl	8000204 <__aeabi_uldivmod>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4b60      	ldr	r3, [pc, #384]	; (80084a4 <UART_SetConfig+0x4e4>)
 8008322:	fba3 2302 	umull	r2, r3, r3, r2
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	011c      	lsls	r4, r3, #4
 800832a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800832e:	2200      	movs	r2, #0
 8008330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008334:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800833c:	4642      	mov	r2, r8
 800833e:	464b      	mov	r3, r9
 8008340:	1891      	adds	r1, r2, r2
 8008342:	61b9      	str	r1, [r7, #24]
 8008344:	415b      	adcs	r3, r3
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800834c:	4641      	mov	r1, r8
 800834e:	1851      	adds	r1, r2, r1
 8008350:	6139      	str	r1, [r7, #16]
 8008352:	4649      	mov	r1, r9
 8008354:	414b      	adcs	r3, r1
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008364:	4659      	mov	r1, fp
 8008366:	00cb      	lsls	r3, r1, #3
 8008368:	4651      	mov	r1, sl
 800836a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800836e:	4651      	mov	r1, sl
 8008370:	00ca      	lsls	r2, r1, #3
 8008372:	4610      	mov	r0, r2
 8008374:	4619      	mov	r1, r3
 8008376:	4603      	mov	r3, r0
 8008378:	4642      	mov	r2, r8
 800837a:	189b      	adds	r3, r3, r2
 800837c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008380:	464b      	mov	r3, r9
 8008382:	460a      	mov	r2, r1
 8008384:	eb42 0303 	adc.w	r3, r2, r3
 8008388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	67bb      	str	r3, [r7, #120]	; 0x78
 8008396:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083a4:	4649      	mov	r1, r9
 80083a6:	008b      	lsls	r3, r1, #2
 80083a8:	4641      	mov	r1, r8
 80083aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ae:	4641      	mov	r1, r8
 80083b0:	008a      	lsls	r2, r1, #2
 80083b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083b6:	f7f7 ff25 	bl	8000204 <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4b39      	ldr	r3, [pc, #228]	; (80084a4 <UART_SetConfig+0x4e4>)
 80083c0:	fba3 1302 	umull	r1, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	2164      	movs	r1, #100	; 0x64
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	3332      	adds	r3, #50	; 0x32
 80083d2:	4a34      	ldr	r2, [pc, #208]	; (80084a4 <UART_SetConfig+0x4e4>)
 80083d4:	fba2 2303 	umull	r2, r3, r2, r3
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083de:	441c      	add	r4, r3
 80083e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e4:	2200      	movs	r2, #0
 80083e6:	673b      	str	r3, [r7, #112]	; 0x70
 80083e8:	677a      	str	r2, [r7, #116]	; 0x74
 80083ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80083ee:	4642      	mov	r2, r8
 80083f0:	464b      	mov	r3, r9
 80083f2:	1891      	adds	r1, r2, r2
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	415b      	adcs	r3, r3
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083fe:	4641      	mov	r1, r8
 8008400:	1851      	adds	r1, r2, r1
 8008402:	6039      	str	r1, [r7, #0]
 8008404:	4649      	mov	r1, r9
 8008406:	414b      	adcs	r3, r1
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008416:	4659      	mov	r1, fp
 8008418:	00cb      	lsls	r3, r1, #3
 800841a:	4651      	mov	r1, sl
 800841c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008420:	4651      	mov	r1, sl
 8008422:	00ca      	lsls	r2, r1, #3
 8008424:	4610      	mov	r0, r2
 8008426:	4619      	mov	r1, r3
 8008428:	4603      	mov	r3, r0
 800842a:	4642      	mov	r2, r8
 800842c:	189b      	adds	r3, r3, r2
 800842e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008430:	464b      	mov	r3, r9
 8008432:	460a      	mov	r2, r1
 8008434:	eb42 0303 	adc.w	r3, r2, r3
 8008438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800843a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	663b      	str	r3, [r7, #96]	; 0x60
 8008444:	667a      	str	r2, [r7, #100]	; 0x64
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008452:	4649      	mov	r1, r9
 8008454:	008b      	lsls	r3, r1, #2
 8008456:	4641      	mov	r1, r8
 8008458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800845c:	4641      	mov	r1, r8
 800845e:	008a      	lsls	r2, r1, #2
 8008460:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008464:	f7f7 fece 	bl	8000204 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <UART_SetConfig+0x4e4>)
 800846e:	fba3 1302 	umull	r1, r3, r3, r2
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	2164      	movs	r1, #100	; 0x64
 8008476:	fb01 f303 	mul.w	r3, r1, r3
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	3332      	adds	r3, #50	; 0x32
 8008480:	4a08      	ldr	r2, [pc, #32]	; (80084a4 <UART_SetConfig+0x4e4>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	f003 020f 	and.w	r2, r3, #15
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4422      	add	r2, r4
 8008494:	609a      	str	r2, [r3, #8]
}
 8008496:	bf00      	nop
 8008498:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800849c:	46bd      	mov	sp, r7
 800849e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084a2:	bf00      	nop
 80084a4:	51eb851f 	.word	0x51eb851f

080084a8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008502:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008508:	431a      	orrs	r2, r3
                       Command->CPSM);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800850e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800851e:	f023 030f 	bic.w	r3, r3, #15
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	b2db      	uxtb	r3, r3
}
 8008546:	4618      	mov	r0, r3
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3314      	adds	r3, #20
 8008560:	461a      	mov	r2, r3
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	4413      	add	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
}  
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008584:	230c      	movs	r3, #12
 8008586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008588:	2340      	movs	r3, #64	; 0x40
 800858a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008594:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff ffa1 	bl	80084e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80085a2:	4a05      	ldr	r2, [pc, #20]	; (80085b8 <SDMMC_CmdStopTransfer+0x40>)
 80085a4:	210c      	movs	r1, #12
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f82a 	bl	8008600 <SDMMC_GetCmdResp1>
 80085ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085ae:	69fb      	ldr	r3, [r7, #28]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3720      	adds	r7, #32
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	05f5e100 	.word	0x05f5e100

080085bc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80085ca:	230d      	movs	r3, #13
 80085cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085dc:	f107 0308 	add.w	r3, r7, #8
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff ff7e 	bl	80084e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80085e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ec:	210d      	movs	r1, #13
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f806 	bl	8008600 <SDMMC_GetCmdResp1>
 80085f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085f6:	69fb      	ldr	r3, [r7, #28]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	460b      	mov	r3, r1
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800860e:	4b70      	ldr	r3, [pc, #448]	; (80087d0 <SDMMC_GetCmdResp1+0x1d0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a70      	ldr	r2, [pc, #448]	; (80087d4 <SDMMC_GetCmdResp1+0x1d4>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	0a5a      	lsrs	r2, r3, #9
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	fb02 f303 	mul.w	r3, r2, r3
 8008620:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	1e5a      	subs	r2, r3, #1
 8008626:	61fa      	str	r2, [r7, #28]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800862c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008630:	e0c9      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0ef      	beq.n	8008622 <SDMMC_GetCmdResp1+0x22>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1ea      	bne.n	8008622 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2204      	movs	r2, #4
 800865c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800865e:	2304      	movs	r3, #4
 8008660:	e0b1      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008674:	2301      	movs	r3, #1
 8008676:	e0a6      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	22c5      	movs	r2, #197	; 0xc5
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff ff5a 	bl	8008538 <SDIO_GetCommandResponse>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	4293      	cmp	r3, r2
 800868c:	d001      	beq.n	8008692 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800868e:	2301      	movs	r3, #1
 8008690:	e099      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008692:	2100      	movs	r1, #0
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff ff5c 	bl	8008552 <SDIO_GetResponse>
 800869a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4b4e      	ldr	r3, [pc, #312]	; (80087d8 <SDMMC_GetCmdResp1+0x1d8>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e08d      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da02      	bge.n	80086b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086b4:	e087      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086c0:	2340      	movs	r3, #64	; 0x40
 80086c2:	e080      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80086ce:	2380      	movs	r3, #128	; 0x80
 80086d0:	e079      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80086dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086e0:	e071      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f0:	e069      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80086fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008700:	e061      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800870c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008710:	e059      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800871c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008720:	e051      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800872c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008730:	e049      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800873c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008740:	e041      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800874c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008750:	e039      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800875c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008760:	e031      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800876c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008770:	e029      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800877c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008780:	e021      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800878c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008790:	e019      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800879c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087a0:	e011      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80087ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087b0:	e009      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087c0:	e001      	b.n	80087c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000000 	.word	0x20000000
 80087d4:	10624dd3 	.word	0x10624dd3
 80087d8:	fdffe008 	.word	0xfdffe008

080087dc <_ZdlPvj>:
 80087dc:	f000 b804 	b.w	80087e8 <_ZdlPv>

080087e0 <_ZdaPv>:
 80087e0:	f000 b802 	b.w	80087e8 <_ZdlPv>

080087e4 <_Znaj>:
 80087e4:	f000 b802 	b.w	80087ec <_Znwj>

080087e8 <_ZdlPv>:
 80087e8:	f000 b854 	b.w	8008894 <free>

080087ec <_Znwj>:
 80087ec:	2801      	cmp	r0, #1
 80087ee:	bf38      	it	cc
 80087f0:	2001      	movcc	r0, #1
 80087f2:	b510      	push	{r4, lr}
 80087f4:	4604      	mov	r4, r0
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 f844 	bl	8008884 <malloc>
 80087fc:	b930      	cbnz	r0, 800880c <_Znwj+0x20>
 80087fe:	f000 f807 	bl	8008810 <_ZSt15get_new_handlerv>
 8008802:	b908      	cbnz	r0, 8008808 <_Znwj+0x1c>
 8008804:	f000 f80c 	bl	8008820 <abort>
 8008808:	4780      	blx	r0
 800880a:	e7f4      	b.n	80087f6 <_Znwj+0xa>
 800880c:	bd10      	pop	{r4, pc}
	...

08008810 <_ZSt15get_new_handlerv>:
 8008810:	4b02      	ldr	r3, [pc, #8]	; (800881c <_ZSt15get_new_handlerv+0xc>)
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	f3bf 8f5b 	dmb	ish
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000694 	.word	0x20000694

08008820 <abort>:
 8008820:	b508      	push	{r3, lr}
 8008822:	2006      	movs	r0, #6
 8008824:	f000 f95e 	bl	8008ae4 <raise>
 8008828:	2001      	movs	r0, #1
 800882a:	f7f9 fe33 	bl	8002494 <_exit>
	...

08008830 <__errno>:
 8008830:	4b01      	ldr	r3, [pc, #4]	; (8008838 <__errno+0x8>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	2000000c 	.word	0x2000000c

0800883c <__libc_init_array>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4d0d      	ldr	r5, [pc, #52]	; (8008874 <__libc_init_array+0x38>)
 8008840:	4c0d      	ldr	r4, [pc, #52]	; (8008878 <__libc_init_array+0x3c>)
 8008842:	1b64      	subs	r4, r4, r5
 8008844:	10a4      	asrs	r4, r4, #2
 8008846:	2600      	movs	r6, #0
 8008848:	42a6      	cmp	r6, r4
 800884a:	d109      	bne.n	8008860 <__libc_init_array+0x24>
 800884c:	4d0b      	ldr	r5, [pc, #44]	; (800887c <__libc_init_array+0x40>)
 800884e:	4c0c      	ldr	r4, [pc, #48]	; (8008880 <__libc_init_array+0x44>)
 8008850:	f000 f972 	bl	8008b38 <_init>
 8008854:	1b64      	subs	r4, r4, r5
 8008856:	10a4      	asrs	r4, r4, #2
 8008858:	2600      	movs	r6, #0
 800885a:	42a6      	cmp	r6, r4
 800885c:	d105      	bne.n	800886a <__libc_init_array+0x2e>
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f855 3b04 	ldr.w	r3, [r5], #4
 8008864:	4798      	blx	r3
 8008866:	3601      	adds	r6, #1
 8008868:	e7ee      	b.n	8008848 <__libc_init_array+0xc>
 800886a:	f855 3b04 	ldr.w	r3, [r5], #4
 800886e:	4798      	blx	r3
 8008870:	3601      	adds	r6, #1
 8008872:	e7f2      	b.n	800885a <__libc_init_array+0x1e>
 8008874:	08008bb8 	.word	0x08008bb8
 8008878:	08008bb8 	.word	0x08008bb8
 800887c:	08008bb8 	.word	0x08008bb8
 8008880:	08008bc0 	.word	0x08008bc0

08008884 <malloc>:
 8008884:	4b02      	ldr	r3, [pc, #8]	; (8008890 <malloc+0xc>)
 8008886:	4601      	mov	r1, r0
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	f000 b87f 	b.w	800898c <_malloc_r>
 800888e:	bf00      	nop
 8008890:	2000000c 	.word	0x2000000c

08008894 <free>:
 8008894:	4b02      	ldr	r3, [pc, #8]	; (80088a0 <free+0xc>)
 8008896:	4601      	mov	r1, r0
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f000 b80b 	b.w	80088b4 <_free_r>
 800889e:	bf00      	nop
 80088a0:	2000000c 	.word	0x2000000c

080088a4 <memset>:
 80088a4:	4402      	add	r2, r0
 80088a6:	4603      	mov	r3, r0
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d100      	bne.n	80088ae <memset+0xa>
 80088ac:	4770      	bx	lr
 80088ae:	f803 1b01 	strb.w	r1, [r3], #1
 80088b2:	e7f9      	b.n	80088a8 <memset+0x4>

080088b4 <_free_r>:
 80088b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088b6:	2900      	cmp	r1, #0
 80088b8:	d044      	beq.n	8008944 <_free_r+0x90>
 80088ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088be:	9001      	str	r0, [sp, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f1a1 0404 	sub.w	r4, r1, #4
 80088c6:	bfb8      	it	lt
 80088c8:	18e4      	addlt	r4, r4, r3
 80088ca:	f000 f927 	bl	8008b1c <__malloc_lock>
 80088ce:	4a1e      	ldr	r2, [pc, #120]	; (8008948 <_free_r+0x94>)
 80088d0:	9801      	ldr	r0, [sp, #4]
 80088d2:	6813      	ldr	r3, [r2, #0]
 80088d4:	b933      	cbnz	r3, 80088e4 <_free_r+0x30>
 80088d6:	6063      	str	r3, [r4, #4]
 80088d8:	6014      	str	r4, [r2, #0]
 80088da:	b003      	add	sp, #12
 80088dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088e0:	f000 b922 	b.w	8008b28 <__malloc_unlock>
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	d908      	bls.n	80088fa <_free_r+0x46>
 80088e8:	6825      	ldr	r5, [r4, #0]
 80088ea:	1961      	adds	r1, r4, r5
 80088ec:	428b      	cmp	r3, r1
 80088ee:	bf01      	itttt	eq
 80088f0:	6819      	ldreq	r1, [r3, #0]
 80088f2:	685b      	ldreq	r3, [r3, #4]
 80088f4:	1949      	addeq	r1, r1, r5
 80088f6:	6021      	streq	r1, [r4, #0]
 80088f8:	e7ed      	b.n	80088d6 <_free_r+0x22>
 80088fa:	461a      	mov	r2, r3
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	b10b      	cbz	r3, 8008904 <_free_r+0x50>
 8008900:	42a3      	cmp	r3, r4
 8008902:	d9fa      	bls.n	80088fa <_free_r+0x46>
 8008904:	6811      	ldr	r1, [r2, #0]
 8008906:	1855      	adds	r5, r2, r1
 8008908:	42a5      	cmp	r5, r4
 800890a:	d10b      	bne.n	8008924 <_free_r+0x70>
 800890c:	6824      	ldr	r4, [r4, #0]
 800890e:	4421      	add	r1, r4
 8008910:	1854      	adds	r4, r2, r1
 8008912:	42a3      	cmp	r3, r4
 8008914:	6011      	str	r1, [r2, #0]
 8008916:	d1e0      	bne.n	80088da <_free_r+0x26>
 8008918:	681c      	ldr	r4, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	6053      	str	r3, [r2, #4]
 800891e:	4421      	add	r1, r4
 8008920:	6011      	str	r1, [r2, #0]
 8008922:	e7da      	b.n	80088da <_free_r+0x26>
 8008924:	d902      	bls.n	800892c <_free_r+0x78>
 8008926:	230c      	movs	r3, #12
 8008928:	6003      	str	r3, [r0, #0]
 800892a:	e7d6      	b.n	80088da <_free_r+0x26>
 800892c:	6825      	ldr	r5, [r4, #0]
 800892e:	1961      	adds	r1, r4, r5
 8008930:	428b      	cmp	r3, r1
 8008932:	bf04      	itt	eq
 8008934:	6819      	ldreq	r1, [r3, #0]
 8008936:	685b      	ldreq	r3, [r3, #4]
 8008938:	6063      	str	r3, [r4, #4]
 800893a:	bf04      	itt	eq
 800893c:	1949      	addeq	r1, r1, r5
 800893e:	6021      	streq	r1, [r4, #0]
 8008940:	6054      	str	r4, [r2, #4]
 8008942:	e7ca      	b.n	80088da <_free_r+0x26>
 8008944:	b003      	add	sp, #12
 8008946:	bd30      	pop	{r4, r5, pc}
 8008948:	20000698 	.word	0x20000698

0800894c <sbrk_aligned>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4e0e      	ldr	r6, [pc, #56]	; (8008988 <sbrk_aligned+0x3c>)
 8008950:	460c      	mov	r4, r1
 8008952:	6831      	ldr	r1, [r6, #0]
 8008954:	4605      	mov	r5, r0
 8008956:	b911      	cbnz	r1, 800895e <sbrk_aligned+0x12>
 8008958:	f000 f88c 	bl	8008a74 <_sbrk_r>
 800895c:	6030      	str	r0, [r6, #0]
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f887 	bl	8008a74 <_sbrk_r>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d00a      	beq.n	8008980 <sbrk_aligned+0x34>
 800896a:	1cc4      	adds	r4, r0, #3
 800896c:	f024 0403 	bic.w	r4, r4, #3
 8008970:	42a0      	cmp	r0, r4
 8008972:	d007      	beq.n	8008984 <sbrk_aligned+0x38>
 8008974:	1a21      	subs	r1, r4, r0
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f87c 	bl	8008a74 <_sbrk_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d101      	bne.n	8008984 <sbrk_aligned+0x38>
 8008980:	f04f 34ff 	mov.w	r4, #4294967295
 8008984:	4620      	mov	r0, r4
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	2000069c 	.word	0x2000069c

0800898c <_malloc_r>:
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	1ccd      	adds	r5, r1, #3
 8008992:	f025 0503 	bic.w	r5, r5, #3
 8008996:	3508      	adds	r5, #8
 8008998:	2d0c      	cmp	r5, #12
 800899a:	bf38      	it	cc
 800899c:	250c      	movcc	r5, #12
 800899e:	2d00      	cmp	r5, #0
 80089a0:	4607      	mov	r7, r0
 80089a2:	db01      	blt.n	80089a8 <_malloc_r+0x1c>
 80089a4:	42a9      	cmp	r1, r5
 80089a6:	d905      	bls.n	80089b4 <_malloc_r+0x28>
 80089a8:	230c      	movs	r3, #12
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	2600      	movs	r6, #0
 80089ae:	4630      	mov	r0, r6
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	4e2e      	ldr	r6, [pc, #184]	; (8008a70 <_malloc_r+0xe4>)
 80089b6:	f000 f8b1 	bl	8008b1c <__malloc_lock>
 80089ba:	6833      	ldr	r3, [r6, #0]
 80089bc:	461c      	mov	r4, r3
 80089be:	bb34      	cbnz	r4, 8008a0e <_malloc_r+0x82>
 80089c0:	4629      	mov	r1, r5
 80089c2:	4638      	mov	r0, r7
 80089c4:	f7ff ffc2 	bl	800894c <sbrk_aligned>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	4604      	mov	r4, r0
 80089cc:	d14d      	bne.n	8008a6a <_malloc_r+0xde>
 80089ce:	6834      	ldr	r4, [r6, #0]
 80089d0:	4626      	mov	r6, r4
 80089d2:	2e00      	cmp	r6, #0
 80089d4:	d140      	bne.n	8008a58 <_malloc_r+0xcc>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	4631      	mov	r1, r6
 80089da:	4638      	mov	r0, r7
 80089dc:	eb04 0803 	add.w	r8, r4, r3
 80089e0:	f000 f848 	bl	8008a74 <_sbrk_r>
 80089e4:	4580      	cmp	r8, r0
 80089e6:	d13a      	bne.n	8008a5e <_malloc_r+0xd2>
 80089e8:	6821      	ldr	r1, [r4, #0]
 80089ea:	3503      	adds	r5, #3
 80089ec:	1a6d      	subs	r5, r5, r1
 80089ee:	f025 0503 	bic.w	r5, r5, #3
 80089f2:	3508      	adds	r5, #8
 80089f4:	2d0c      	cmp	r5, #12
 80089f6:	bf38      	it	cc
 80089f8:	250c      	movcc	r5, #12
 80089fa:	4629      	mov	r1, r5
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7ff ffa5 	bl	800894c <sbrk_aligned>
 8008a02:	3001      	adds	r0, #1
 8008a04:	d02b      	beq.n	8008a5e <_malloc_r+0xd2>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	442b      	add	r3, r5
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	e00e      	b.n	8008a2c <_malloc_r+0xa0>
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	1b52      	subs	r2, r2, r5
 8008a12:	d41e      	bmi.n	8008a52 <_malloc_r+0xc6>
 8008a14:	2a0b      	cmp	r2, #11
 8008a16:	d916      	bls.n	8008a46 <_malloc_r+0xba>
 8008a18:	1961      	adds	r1, r4, r5
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	6025      	str	r5, [r4, #0]
 8008a1e:	bf18      	it	ne
 8008a20:	6059      	strne	r1, [r3, #4]
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	bf08      	it	eq
 8008a26:	6031      	streq	r1, [r6, #0]
 8008a28:	5162      	str	r2, [r4, r5]
 8008a2a:	604b      	str	r3, [r1, #4]
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f104 060b 	add.w	r6, r4, #11
 8008a32:	f000 f879 	bl	8008b28 <__malloc_unlock>
 8008a36:	f026 0607 	bic.w	r6, r6, #7
 8008a3a:	1d23      	adds	r3, r4, #4
 8008a3c:	1af2      	subs	r2, r6, r3
 8008a3e:	d0b6      	beq.n	80089ae <_malloc_r+0x22>
 8008a40:	1b9b      	subs	r3, r3, r6
 8008a42:	50a3      	str	r3, [r4, r2]
 8008a44:	e7b3      	b.n	80089ae <_malloc_r+0x22>
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	bf0c      	ite	eq
 8008a4c:	6032      	streq	r2, [r6, #0]
 8008a4e:	605a      	strne	r2, [r3, #4]
 8008a50:	e7ec      	b.n	8008a2c <_malloc_r+0xa0>
 8008a52:	4623      	mov	r3, r4
 8008a54:	6864      	ldr	r4, [r4, #4]
 8008a56:	e7b2      	b.n	80089be <_malloc_r+0x32>
 8008a58:	4634      	mov	r4, r6
 8008a5a:	6876      	ldr	r6, [r6, #4]
 8008a5c:	e7b9      	b.n	80089d2 <_malloc_r+0x46>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	4638      	mov	r0, r7
 8008a64:	f000 f860 	bl	8008b28 <__malloc_unlock>
 8008a68:	e7a1      	b.n	80089ae <_malloc_r+0x22>
 8008a6a:	6025      	str	r5, [r4, #0]
 8008a6c:	e7de      	b.n	8008a2c <_malloc_r+0xa0>
 8008a6e:	bf00      	nop
 8008a70:	20000698 	.word	0x20000698

08008a74 <_sbrk_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d06      	ldr	r5, [pc, #24]	; (8008a90 <_sbrk_r+0x1c>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	f7f9 fd12 	bl	80024a8 <_sbrk>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_sbrk_r+0x1a>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_sbrk_r+0x1a>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	200006a0 	.word	0x200006a0

08008a94 <_raise_r>:
 8008a94:	291f      	cmp	r1, #31
 8008a96:	b538      	push	{r3, r4, r5, lr}
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	d904      	bls.n	8008aa8 <_raise_r+0x14>
 8008a9e:	2316      	movs	r3, #22
 8008aa0:	6003      	str	r3, [r0, #0]
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008aaa:	b112      	cbz	r2, 8008ab2 <_raise_r+0x1e>
 8008aac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ab0:	b94b      	cbnz	r3, 8008ac6 <_raise_r+0x32>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f830 	bl	8008b18 <_getpid_r>
 8008ab8:	462a      	mov	r2, r5
 8008aba:	4601      	mov	r1, r0
 8008abc:	4620      	mov	r0, r4
 8008abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac2:	f000 b817 	b.w	8008af4 <_kill_r>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d00a      	beq.n	8008ae0 <_raise_r+0x4c>
 8008aca:	1c59      	adds	r1, r3, #1
 8008acc:	d103      	bne.n	8008ad6 <_raise_r+0x42>
 8008ace:	2316      	movs	r3, #22
 8008ad0:	6003      	str	r3, [r0, #0]
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	e7e7      	b.n	8008aa6 <_raise_r+0x12>
 8008ad6:	2400      	movs	r4, #0
 8008ad8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008adc:	4628      	mov	r0, r5
 8008ade:	4798      	blx	r3
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e7e0      	b.n	8008aa6 <_raise_r+0x12>

08008ae4 <raise>:
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <raise+0xc>)
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	f7ff bfd3 	b.w	8008a94 <_raise_r>
 8008aee:	bf00      	nop
 8008af0:	2000000c 	.word	0x2000000c

08008af4 <_kill_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	; (8008b14 <_kill_r+0x20>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	4604      	mov	r4, r0
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	f7f9 fcb7 	bl	8002474 <_kill>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d102      	bne.n	8008b10 <_kill_r+0x1c>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	b103      	cbz	r3, 8008b10 <_kill_r+0x1c>
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	bd38      	pop	{r3, r4, r5, pc}
 8008b12:	bf00      	nop
 8008b14:	200006a0 	.word	0x200006a0

08008b18 <_getpid_r>:
 8008b18:	f7f9 bca4 	b.w	8002464 <_getpid>

08008b1c <__malloc_lock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__malloc_lock+0x8>)
 8008b1e:	f000 b809 	b.w	8008b34 <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	200006a4 	.word	0x200006a4

08008b28 <__malloc_unlock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__malloc_unlock+0x8>)
 8008b2a:	f000 b804 	b.w	8008b36 <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	200006a4 	.word	0x200006a4

08008b34 <__retarget_lock_acquire_recursive>:
 8008b34:	4770      	bx	lr

08008b36 <__retarget_lock_release_recursive>:
 8008b36:	4770      	bx	lr

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
