
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eca8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800ee78  0800ee78  0001ee78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f110  0800f110  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800f110  0800f110  0001f110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f118  0800f118  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f118  0800f118  0001f118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f120  0800f120  0001f120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800f128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001204  20000070  0800f198  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001274  0800f198  00021274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003522d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070f4  00000000  00000000  000552cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002698  00000000  00000000  0005c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e8  00000000  00000000  0005ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df3b  00000000  00000000  00060e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003379a  00000000  00000000  0008ed83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee1a0  00000000  00000000  000c251d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b06bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a830  00000000  00000000  001b0710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ee60 	.word	0x0800ee60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800ee60 	.word	0x0800ee60

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_ZN9Component3ActEv>:
	virtual ~Component();

	uint8_t ID;
	bool IsActive = false;

	virtual void Act() {};
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_ZN7Control11UpdateStateEv>:
	bool CheckNav(uint8_t &x, uint8_t &y) { return x == this->navXIndex && y == this->navYIndex; };

	uint8_t GetNavX() { return this->navXIndex; };
	uint8_t GetNavY() { return this->navYIndex; };

	virtual void UpdateState() {};
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_ZN10PageButtonD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/PageButton.h>

PageButton::~PageButton()
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	4a05      	ldr	r2, [pc, #20]	; (800060c <_ZN10PageButtonD1Ev+0x20>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fab9 	bl	8004b74 <_ZN7ControlD1Ev>
{
}
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	0800efc4 	.word	0x0800efc4

08000610 <_ZN10PageButtonD0Ev>:
PageButton::~PageButton()
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
}
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffe7 	bl	80005ec <_ZN10PageButtonD1Ev>
 800061e:	2114      	movs	r1, #20
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f00d feea 	bl	800e3fa <_ZdlPvj>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <_ZN10PageButton11UpdateStateEv>:
{
	this->IsActive = press;
}

void PageButton::UpdateState()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	this->nxt->SetClick(ID, IsActive);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6898      	ldr	r0, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7919      	ldrb	r1, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	461a      	mov	r2, r3
 8000646:	f001 fdf5 	bl	8002234 <_ZN7Nextion8SetClickEhb>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_ZN10PageButton3ActEv>:

void PageButton::Act()
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	this->nxt->SetPage(pageID);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7c9b      	ldrb	r3, [r3, #18]
 8000662:	4619      	mov	r1, r3
 8000664:	4610      	mov	r0, r2
 8000666:	f001 fd97 	bl	8002198 <_ZN7Nextion7SetPageEh>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <_ZN11ProgressBarD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/ProgressBar.h>

ProgressBar::~ProgressBar()
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <_ZN11ProgressBarD1Ev+0x20>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	f004 fa75 	bl	8004b74 <_ZN7ControlD1Ev>
{
}
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	0800efe4 	.word	0x0800efe4

08000698 <_ZN11ProgressBarD0Ev>:
ProgressBar::~ProgressBar()
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
}
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ffe7 	bl	8000674 <_ZN11ProgressBarD1Ev>
 80006a6:	2114      	movs	r1, #20
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f00d fea6 	bl	800e3fa <_ZdlPvj>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_ZN11ProgressBar11UpdateStateEv>:

void ProgressBar::UpdateState()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	this->nxt->SetProgressBar(ID, value);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6898      	ldr	r0, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7919      	ldrb	r1, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7c9b      	ldrb	r3, [r3, #18]
 80006cc:	461a      	mov	r2, r3
 80006ce:	f001 fd79 	bl	80021c4 <_ZN7Nextion14SetProgressBarEhh>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	88fa      	ldrh	r2, [r7, #6]
 8000708:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2200      	movs	r2, #0
 800070e:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f007 fbd0 	bl	8007ebc <HAL_GPIO_WritePin>
	};
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef *port, uint16_t pin, GPIO_Default_State defaultState)
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	4611      	mov	r1, r2
 8000732:	461a      	mov	r2, r3
 8000734:	460b      	mov	r3, r1
 8000736:	80fb      	strh	r3, [r7, #6]
 8000738:	4613      	mov	r3, r2
 800073a:	717b      	strb	r3, [r7, #5]
	{
		this->port = port;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	88fa      	ldrh	r2, [r7, #6]
 8000746:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	797a      	ldrb	r2, [r7, #5]
 800074c:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, (GPIO_PinState)defaultState);
 800074e:	797a      	ldrb	r2, [r7, #5]
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	4619      	mov	r1, r3
 8000754:	68b8      	ldr	r0, [r7, #8]
 8000756:	f007 fbb1 	bl	8007ebc <HAL_GPIO_WritePin>
	}
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZN12StripCurrentC1Ev>:
 *
 */
class StripCurrent
{
public:
	StripCurrent() {};
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <_ZN9ShiftRegsC1Ev+0x2c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3308      	adds	r3, #8
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffa3 	bl	80006da <_ZN3PinC1Ev>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3310      	adds	r3, #16
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff9e 	bl	80006da <_ZN3PinC1Ev>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	0800f028 	.word	0x0800f028

080007ac <_ZN15PCA9634SettingsC1Ev>:
	uint8_t green = 0;
	uint8_t blue = 0;
	bool en = 1;
};

struct PCA9634Settings
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2201      	movs	r2, #1
 80007b8:	719a      	strb	r2, [r3, #6]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	71da      	strb	r2, [r3, #7]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	721a      	strb	r2, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	725a      	strb	r2, [r3, #9]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <_ZN7PCA9634C1Ev>:
 *
 */
class PCA9634
{
public:
	PCA9634() {};
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	227f      	movs	r2, #127	; 0x7f
 80007e6:	741a      	strb	r2, [r3, #16]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3311      	adds	r3, #17
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffdd 	bl	80007ac <_ZN15PCA9634SettingsC1Ev>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	331c      	adds	r3, #28
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff6f 	bl	80006da <_ZN3PinC1Ev>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <_ZN12StripControlC1Ev>:
 *
 */
class StripControl
{
public:
	StripControl() {};
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <_ZN12StripControlC1Ev+0x38>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	330c      	adds	r3, #12
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff5d 	bl	80006da <_ZN3PinC1Ev>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3314      	adds	r3, #20
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff58 	bl	80006da <_ZN3PinC1Ev>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	331c      	adds	r3, #28
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff53 	bl	80006da <_ZN3PinC1Ev>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800f038 	.word	0x0800f038

08000844 <_ZN9ComponentC1EP7Nextionh>:
	Component(Nextion *next, uint8_t id) { nxt = next; ID = id; };
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <_ZN9ComponentC1EP7Nextionh+0x34>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2200      	movs	r2, #0
 800085c:	715a      	strb	r2, [r3, #5]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	711a      	strb	r2, [r3, #4]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	0800f080 	.word	0x0800f080

0800087c <_ZN7ControlC1EP7NextionhPKchh>:
	Control(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY): Component(nxt, id) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4613      	mov	r3, r2
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffd6 	bl	8000844 <_ZN9ComponentC1EP7Nextionh>
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <_ZN7ControlC1EP7NextionhPKchh+0x40>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]
		ObjName = name;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	60da      	str	r2, [r3, #12]
		navXIndex = navX;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	7e3a      	ldrb	r2, [r7, #24]
 80008a8:	741a      	strb	r2, [r3, #16]
		navYIndex = navY;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	7f3a      	ldrb	r2, [r7, #28]
 80008ae:	745a      	strb	r2, [r3, #17]
	};
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	0800f094 	.word	0x0800f094

080008c0 <_ZN7ControlC1EP7NextionhPKc>:
	Control(Nextion *nxt, uint8_t id, const char* name): Component(nxt, id) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffb4 	bl	8000844 <_ZN9ComponentC1EP7Nextionh>
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <_ZN7ControlC1EP7NextionhPKc+0x38>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	601a      	str	r2, [r3, #0]
		navXIndex = IGNORE_NAV;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	741a      	strb	r2, [r3, #16]
		navYIndex = IGNORE_NAV;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	22ff      	movs	r2, #255	; 0xff
 80008ec:	745a      	strb	r2, [r3, #17]
	}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	0800f094 	.word	0x0800f094

080008fc <_ZN6ButtonC1EP7NextionhPKchh>:
 *
 */
class Button : public Control
{
public:
	Button(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY): Control(nxt, id, name, navX, navY) {};
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af02      	add	r7, sp, #8
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4613      	mov	r3, r2
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	79fa      	ldrb	r2, [r7, #7]
 8000910:	7f3b      	ldrb	r3, [r7, #28]
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	7e3b      	ldrb	r3, [r7, #24]
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	f7ff ffae 	bl	800087c <_ZN7ControlC1EP7NextionhPKchh>
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_ZN6ButtonC1EP7NextionhPKchh+0x3c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0800f060 	.word	0x0800f060

0800093c <_ZN10PageButtonC1EP7NextionhPKchhh>:
 *
 */
class PageButton : public Control
{
public:
	PageButton(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY, uint8_t pageID): Control(nxt, id, name, navX, navY) {};
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4613      	mov	r3, r2
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	7f3b      	ldrb	r3, [r7, #28]
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	7e3b      	ldrb	r3, [r7, #24]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	f7ff ff8e 	bl	800087c <_ZN7ControlC1EP7NextionhPKchh>
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <_ZN10PageButtonC1EP7NextionhPKchhh+0x34>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	0800efc4 	.word	0x0800efc4

08000974 <_ZN11ProgressBarC1EP7NextionhPKc>:
 *
 */
class ProgressBar : public Control
{
public:
	ProgressBar(Nextion *nxt, uint8_t id, const char* name): Control(nxt, id, name) {};
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4613      	mov	r3, r2
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	f7ff ff98 	bl	80008c0 <_ZN7ControlC1EP7NextionhPKc>
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <_ZN11ProgressBarC1EP7NextionhPKc+0x2c>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800efe4 	.word	0x0800efe4

080009a4 <_ZN9ComponentC1ERKS_>:
class Component
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <_ZN9ComponentC1ERKS_+0x38>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	791a      	ldrb	r2, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	711a      	strb	r2, [r3, #4]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	795a      	ldrb	r2, [r3, #5]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	715a      	strb	r2, [r3, #5]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	0800f080 	.word	0x0800f080

080009e0 <_ZN7ControlC1ERKS_>:
class Control : public Component
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffd7 	bl	80009a4 <_ZN9ComponentC1ERKS_>
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <_ZN7ControlC1ERKS_+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	7c1a      	ldrb	r2, [r3, #16]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	741a      	strb	r2, [r3, #16]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	7c5a      	ldrb	r2, [r3, #17]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	745a      	strb	r2, [r3, #17]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	0800f094 	.word	0x0800f094

08000a24 <_ZN10PageButtonC1ERKS_>:
class PageButton : public Control
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ffd3 	bl	80009e0 <_ZN7ControlC1ERKS_>
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <_ZN10PageButtonC1ERKS_+0x30>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	7c9a      	ldrb	r2, [r3, #18]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	749a      	strb	r2, [r3, #18]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	0800efc4 	.word	0x0800efc4

08000a58 <_ZN4PageC1ERKS_>:
#include "ProgressBar.h"

/*
 *
 */
class Page : public Component
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff9b 	bl	80009a4 <_ZN9ComponentC1ERKS_>
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <_ZN4PageC1ERKS_+0xa0>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	7b1a      	ldrb	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	731a      	strb	r2, [r3, #12]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	7b5a      	ldrb	r2, [r3, #13]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	735a      	strb	r2, [r3, #13]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	691a      	ldr	r2, [r3, #16]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	699a      	ldr	r2, [r3, #24]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	619a      	str	r2, [r3, #24]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	69da      	ldr	r2, [r3, #28]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	61da      	str	r2, [r3, #28]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	6a1a      	ldr	r2, [r3, #32]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	621a      	str	r2, [r3, #32]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	0800f0b4 	.word	0x0800f0b4

08000afc <_ZN6ButtonC1ERKS_>:
class Button : public Control
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff67 	bl	80009e0 <_ZN7ControlC1ERKS_>
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <_ZN6ButtonC1ERKS_+0x38>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	7c9a      	ldrb	r2, [r3, #18]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	749a      	strb	r2, [r3, #18]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800f060 	.word	0x0800f060

08000b38 <_ZN11ProgressBarC1ERKS_>:
class ProgressBar : public Control
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff49 	bl	80009e0 <_ZN7ControlC1ERKS_>
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <_ZN11ProgressBarC1ERKS_+0x30>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	7c9a      	ldrb	r2, [r3, #18]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	749a      	strb	r2, [r3, #18]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	0800efe4 	.word	0x0800efe4

08000b6c <_Z18AudioLevelsAveragev>:
	}

}

void AudioLevelsAverage()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
//	double average = 0;
//	for (int i = 0; i < AUDIO_BUFFER_SIZE; ++i) {
//		sum += audioBuffer[i];
//	}
//	average = sum / 64;
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <AudioFullCallback>:
		AudioLevelsAverage();
	}
}

void AudioFullCallback()
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
	AudioLevelsAverage();
 8000b7e:	f7ff fff5 	bl	8000b6c <_Z18AudioLevelsAveragev>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <CurrentConvFullCallback>:
{

}

void CurrentConvFullCallback()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	stripCurr.Calc();
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <CurrentConvFullCallback+0x10>)
 8000b8e:	f002 f893 	bl	8002cb8 <_ZN12StripCurrent4CalcEv>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000110 	.word	0x20000110

08000b9c <_Z24PageChangeCallbackHandleh>:

void PageChangeCallbackHandle(uint8_t pageNumber)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	screenCtrl.ChangePageEvent(pageNumber);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <_Z24PageChangeCallbackHandleh+0x1c>)
 8000bac:	f001 fdee 	bl	800278c <_ZN13ScreenControl15ChangePageEventEh>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000cd8 	.word	0x20000cd8

08000bbc <_Z24TouchEventCallbackHandlehhh>:

void TouchEventCallbackHandle(uint8_t pageID, uint8_t compID, uint8_t event)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	71bb      	strb	r3, [r7, #6]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	717b      	strb	r3, [r7, #5]
	screenCtrl.TouchEvent(pageID, compID, event);
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	79ba      	ldrb	r2, [r7, #6]
 8000bd2:	79f9      	ldrb	r1, [r7, #7]
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <_Z24TouchEventCallbackHandlehhh+0x28>)
 8000bd6:	f001 fe20 	bl	800281a <_ZN13ScreenControl10TouchEventEhhh>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000cd8 	.word	0x20000cd8

08000be8 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	3208      	adds	r2, #8
 8000c02:	6811      	ldr	r1, [r2, #0]
 8000c04:	6019      	str	r1, [r3, #0]
 8000c06:	8891      	ldrh	r1, [r2, #4]
 8000c08:	7992      	ldrb	r2, [r2, #6]
 8000c0a:	8099      	strh	r1, [r3, #4]
 8000c0c:	719a      	strb	r2, [r3, #6]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	3310      	adds	r3, #16
 8000c14:	3210      	adds	r2, #16
 8000c16:	6811      	ldr	r1, [r2, #0]
 8000c18:	6019      	str	r1, [r3, #0]
 8000c1a:	8891      	ldrh	r1, [r2, #4]
 8000c1c:	7992      	ldrb	r2, [r2, #6]
 8000c1e:	8099      	strh	r1, [r3, #4]
 8000c20:	719a      	strb	r2, [r3, #6]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	8b1a      	ldrh	r2, [r3, #24]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	831a      	strh	r2, [r3, #24]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	69da      	ldr	r2, [r3, #28]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	61da      	str	r2, [r3, #28]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	6a1a      	ldr	r2, [r3, #32]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	621a      	str	r2, [r3, #32]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_ZN12StripControlaSERKS_>:
class StripControl
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	7a1a      	ldrb	r2, [r3, #8]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	721a      	strb	r2, [r3, #8]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	7a5a      	ldrb	r2, [r3, #9]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	725a      	strb	r2, [r3, #9]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	330c      	adds	r3, #12
 8000c70:	320c      	adds	r2, #12
 8000c72:	6811      	ldr	r1, [r2, #0]
 8000c74:	6019      	str	r1, [r3, #0]
 8000c76:	8891      	ldrh	r1, [r2, #4]
 8000c78:	7992      	ldrb	r2, [r2, #6]
 8000c7a:	8099      	strh	r1, [r3, #4]
 8000c7c:	719a      	strb	r2, [r3, #6]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	3314      	adds	r3, #20
 8000c84:	3214      	adds	r2, #20
 8000c86:	6811      	ldr	r1, [r2, #0]
 8000c88:	6019      	str	r1, [r3, #0]
 8000c8a:	8891      	ldrh	r1, [r2, #4]
 8000c8c:	7992      	ldrb	r2, [r2, #6]
 8000c8e:	8099      	strh	r1, [r3, #4]
 8000c90:	719a      	strb	r2, [r3, #6]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	331c      	adds	r3, #28
 8000c98:	321c      	adds	r2, #28
 8000c9a:	6811      	ldr	r1, [r2, #0]
 8000c9c:	6019      	str	r1, [r3, #0]
 8000c9e:	8891      	ldrh	r1, [r2, #4]
 8000ca0:	7992      	ldrb	r2, [r2, #6]
 8000ca2:	8099      	strh	r1, [r3, #4]
 8000ca4:	719a      	strb	r2, [r3, #6]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <Init>:
		UART_HandleTypeDef   *in_huart3,

		RTC_HandleTypeDef    *in_hrtc,
		SD_HandleTypeDef     *in_hsd
	)
{
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b0b2      	sub	sp, #200	; 0xc8
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]
//	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_4);
//	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, 127);

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cca:	498e      	ldr	r1, [pc, #568]	; (8000f04 <Init+0x250>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fd0f 	bl	80006f0 <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cda:	498a      	ldr	r1, [pc, #552]	; (8000f04 <Init+0x250>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd07 	bl	80006f0 <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin pwmOE = Pin(PWM_OE_GPIO_Port, PWM_OE_Pin, GPIO_Default_State::ACTIVE_LOW);
 8000ce2:	f107 0018 	add.w	r0, r7, #24
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2240      	movs	r2, #64	; 0x40
 8000cea:	4987      	ldr	r1, [pc, #540]	; (8000f08 <Init+0x254>)
 8000cec:	f7ff fd1b 	bl	8000726 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	currentADCHandle = in_hadc1;
 8000cf0:	4a86      	ldr	r2, [pc, #536]	; (8000f0c <Init+0x258>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6013      	str	r3, [r2, #0]
	currentADC_DMAHandle = in_hdma_adc1;
 8000cf6:	4a86      	ldr	r2, [pc, #536]	; (8000f10 <Init+0x25c>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	6013      	str	r3, [r2, #0]

	stripI2cHandle = in_hfmpi2c1;
 8000cfc:	4a85      	ldr	r2, [pc, #532]	; (8000f14 <Init+0x260>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 8000d02:	4a85      	ldr	r2, [pc, #532]	; (8000f18 <Init+0x264>)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	6013      	str	r3, [r2, #0]

	i2cHandle = in_hi2c1;
 8000d08:	4a84      	ldr	r2, [pc, #528]	; (8000f1c <Init+0x268>)
 8000d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000d0e:	6013      	str	r3, [r2, #0]

	audioHandle = in_hi2s5;
 8000d10:	4a83      	ldr	r2, [pc, #524]	; (8000f20 <Init+0x26c>)
 8000d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000d16:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = hdma_spi5_rx;
 8000d18:	4a82      	ldr	r2, [pc, #520]	; (8000f24 <Init+0x270>)
 8000d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000d1e:	6013      	str	r3, [r2, #0]

	rtcHandle = in_hrtc;
 8000d20:	4a81      	ldr	r2, [pc, #516]	; (8000f28 <Init+0x274>)
 8000d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d26:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 8000d28:	4a80      	ldr	r2, [pc, #512]	; (8000f2c <Init+0x278>)
 8000d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d2e:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 8000d30:	4a7f      	ldr	r2, [pc, #508]	; (8000f30 <Init+0x27c>)
 8000d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000d36:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 8000d38:	4a7e      	ldr	r2, [pc, #504]	; (8000f34 <Init+0x280>)
 8000d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000d3e:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8000d40:	4a7d      	ldr	r2, [pc, #500]	; (8000f38 <Init+0x284>)
 8000d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000d46:	6013      	str	r3, [r2, #0]
	adcTimHandle = in_htim8;
 8000d48:	4a7c      	ldr	r2, [pc, #496]	; (8000f3c <Init+0x288>)
 8000d4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000d4e:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 8000d50:	4a7b      	ldr	r2, [pc, #492]	; (8000f40 <Init+0x28c>)
 8000d52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d56:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 8000d58:	4a7a      	ldr	r2, [pc, #488]	; (8000f44 <Init+0x290>)
 8000d5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d5e:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 8000d60:	4a79      	ldr	r2, [pc, #484]	; (8000f48 <Init+0x294>)
 8000d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d66:	6013      	str	r3, [r2, #0]

	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 8000d68:	4b71      	ldr	r3, [pc, #452]	; (8000f30 <Init+0x27c>)
 8000d6a:	681d      	ldr	r5, [r3, #0]
 8000d6c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000d70:	466a      	mov	r2, sp
 8000d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d7a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	cb0c      	ldmia	r3, {r2, r3}
 8000d84:	4629      	mov	r1, r5
 8000d86:	4620      	mov	r0, r4
 8000d88:	f001 fdaa 	bl	80028e0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 8000d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d90:	4619      	mov	r1, r3
 8000d92:	486e      	ldr	r0, [pc, #440]	; (8000f4c <Init+0x298>)
 8000d94:	f7ff ff28 	bl	8000be8 <_ZN9ShiftRegsaSERKS_>
 8000d98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fde1 	bl	8002964 <_ZN9ShiftRegsD1Ev>
	stripCurr = StripCurrent(currentADCHandle, adcTimHandle);
 8000da2:	4b5a      	ldr	r3, [pc, #360]	; (8000f0c <Init+0x258>)
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <Init+0x288>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 ff27 	bl	8002c02 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>
 8000db4:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <Init+0x29c>)
 8000db6:	461d      	mov	r5, r3
 8000db8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 ff37 	bl	8002c40 <_ZN12StripCurrentD1Ev>
	stripCtrl = StripControl(&stripCurr);
 8000dd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dd6:	495e      	ldr	r1, [pc, #376]	; (8000f50 <Init+0x29c>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fe57 	bl	8002a8c <_ZN12StripControlC1EP12StripCurrent>
 8000dde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000de2:	4619      	mov	r1, r3
 8000de4:	485b      	ldr	r0, [pc, #364]	; (8000f54 <Init+0x2a0>)
 8000de6:	f7ff ff2f 	bl	8000c48 <_ZN12StripControlaSERKS_>
 8000dea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fea4 	bl	8002b3c <_ZN12StripControlD1Ev>
	ledA = PCA9634(0x2A, stripI2cHandle, pwmOE);
 8000df4:	4b47      	ldr	r3, [pc, #284]	; (8000f14 <Init+0x260>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	212a      	movs	r1, #42	; 0x2a
 8000e04:	f001 faff 	bl	8002406 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <Init+0x2a4>)
 8000e0a:	461d      	mov	r5, r3
 8000e0c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	602b      	str	r3, [r5, #0]
 8000e1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fb2e 	bl	8002482 <_ZN7PCA9634D1Ev>

	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_1);
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <Init+0x280>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00a fb39 	bl	800b4a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_3);
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <Init+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2108      	movs	r1, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f00a fb33 	bl	800b4a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_1);
 8000e3e:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <Init+0x284>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00a fb2d 	bl	800b4a4 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	482c      	ldr	r0, [pc, #176]	; (8000f04 <Init+0x250>)
 8000e52:	f007 f833 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e5c:	4829      	ldr	r0, [pc, #164]	; (8000f04 <Init+0x250>)
 8000e5e:	f007 f82d 	bl	8007ebc <HAL_GPIO_WritePin>

	settings = PCA9634Settings();
 8000e62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	811a      	strh	r2, [r3, #8]
 8000e6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc9a 	bl	80007ac <_ZN15PCA9634SettingsC1Ev>
 8000e78:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <Init+0x2a8>)
 8000e7a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e80:	c303      	stmia	r3!, {r0, r1}
 8000e82:	801a      	strh	r2, [r3, #0]
	settings.Driver = PCA9634_OUTPUT_DRIVER::TOTEM_POLE;
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <Init+0x2a8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	711a      	strb	r2, [r3, #4]
	settings.Invert = PCA9634_OUTPUT_LOGIC::INVERTED;
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <Init+0x2a8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	709a      	strb	r2, [r3, #2]
	ledA.ChangeSettings(settings);
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <Init+0x2a8>)
 8000e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e94:	4830      	ldr	r0, [pc, #192]	; (8000f58 <Init+0x2a4>)
 8000e96:	f001 fb06 	bl	80024a6 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>

	shiftReg.Init();
 8000e9a:	482c      	ldr	r0, [pc, #176]	; (8000f4c <Init+0x298>)
 8000e9c:	f001 fd8a 	bl	80029b4 <_ZN9ShiftRegs4InitEv>

	if (stripCurr.Init() != HAL_OK)
 8000ea0:	482b      	ldr	r0, [pc, #172]	; (8000f50 <Init+0x29c>)
 8000ea2:	f001 fee8 	bl	8002c76 <_ZN12StripCurrent4InitEv>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <Init+0x206>
	{
		return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e01f      	b.n	8000efa <Init+0x246>
	}

	stripCtrl.Init();
 8000eba:	4826      	ldr	r0, [pc, #152]	; (8000f54 <Init+0x2a0>)
 8000ebc:	f001 fe62 	bl	8002b84 <_ZN12StripControl4InitEv>

	NextionCallbacks callbacks = NextionCallbacks();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
	callbacks.PageChange = PageChangeCallbackHandle;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <Init+0x2ac>)
 8000eca:	613b      	str	r3, [r7, #16]
	callbacks.TouchEvent = TouchEventCallbackHandle;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <Init+0x2b0>)
 8000ece:	617b      	str	r3, [r7, #20]

	next.Startup(screenHandle, callbacks);
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <Init+0x28c>)
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	cb0c      	ldmia	r3, {r2, r3}
 8000eda:	4823      	ldr	r0, [pc, #140]	; (8000f68 <Init+0x2b4>)
 8000edc:	f001 f88e 	bl	8001ffc <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks>
	screenCtrl.ChangePage(1);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4822      	ldr	r0, [pc, #136]	; (8000f6c <Init+0x2b8>)
 8000ee4:	f001 fc6b 	bl	80027be <_ZN13ScreenControl10ChangePageEh>
	screenCtrl.Init();
 8000ee8:	4820      	ldr	r0, [pc, #128]	; (8000f6c <Init+0x2b8>)
 8000eea:	f001 fc17 	bl	800271c <_ZN13ScreenControl4InitEv>

	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, 0);
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <Init+0x284>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
	return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	37c0      	adds	r7, #192	; 0xc0
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bdb0      	pop	{r4, r5, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	2000008c 	.word	0x2000008c
 8000f10:	20000090 	.word	0x20000090
 8000f14:	20000094 	.word	0x20000094
 8000f18:	20000098 	.word	0x20000098
 8000f1c:	2000009c 	.word	0x2000009c
 8000f20:	200000a0 	.word	0x200000a0
 8000f24:	200000a4 	.word	0x200000a4
 8000f28:	200000c4 	.word	0x200000c4
 8000f2c:	200000c8 	.word	0x200000c8
 8000f30:	200000a8 	.word	0x200000a8
 8000f34:	200000ac 	.word	0x200000ac
 8000f38:	200000b0 	.word	0x200000b0
 8000f3c:	200000b4 	.word	0x200000b4
 8000f40:	200000b8 	.word	0x200000b8
 8000f44:	200000bc 	.word	0x200000bc
 8000f48:	200000c0 	.word	0x200000c0
 8000f4c:	200000cc 	.word	0x200000cc
 8000f50:	20000110 	.word	0x20000110
 8000f54:	20000128 	.word	0x20000128
 8000f58:	2000014c 	.word	0x2000014c
 8000f5c:	20000170 	.word	0x20000170
 8000f60:	08000b9d 	.word	0x08000b9d
 8000f64:	08000bbd 	.word	0x08000bbd
 8000f68:	200000f0 	.word	0x200000f0
 8000f6c:	20000cd8 	.word	0x20000cd8

08000f70 <InitTest>:

void InitTest()
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
//	shiftReg.IndicatorTest();
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	indicator = !indicator;
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <Main+0x9c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <Main+0x9c>)
 8000f90:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_1, indicator ? UINT16_MAX / 2 : 0);
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <Main+0x9c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <Main+0x20>
 8000f9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f9e:	e000      	b.n	8000fa2 <Main+0x22>
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <Main+0xa0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_3, !indicator ? UINT16_MAX : 0);
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <Main+0x9c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <Main+0x36>
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	e001      	b.n	8000fba <Main+0x3a>
 8000fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <Main+0xa0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c

	stripCtrl.Check();
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <Main+0xa4>)
 8000fc4:	f001 fdff 	bl	8002bc6 <_ZN12StripControl5CheckEv>

	if (screenCtrl.CheckPage(1))
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <Main+0xa8>)
 8000fcc:	f001 fc73 	bl	80028b6 <_ZN13ScreenControl9CheckPageEh>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00c      	beq.n	8000ff0 <Main+0x70>
	{
		screenCtrl.ChangeText("t1", indicator ? AUDIO_SRC_BTN_XLR : AUDIO_SRC_BTN_JACK, 4);
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <Main+0x9c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <Main+0x62>
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <Main+0xac>)
 8000fe0:	e000      	b.n	8000fe4 <Main+0x64>
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <Main+0xb0>)
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	4913      	ldr	r1, [pc, #76]	; (8001034 <Main+0xb4>)
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <Main+0xa8>)
 8000fea:	f001 fc52 	bl	8002892 <_ZN13ScreenControl10ChangeTextEPKcS1_h>
 8000fee:	e00b      	b.n	8001008 <Main+0x88>
	}
	else
	{
		screenCtrl.ChangeText("b0", indicator ? AUDIO_SRC_BTN_XLR : AUDIO_SRC_BTN_JACK, 4);
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <Main+0x9c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <Main+0x7c>
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <Main+0xac>)
 8000ffa:	e000      	b.n	8000ffe <Main+0x7e>
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <Main+0xb0>)
 8000ffe:	2304      	movs	r3, #4
 8001000:	490d      	ldr	r1, [pc, #52]	; (8001038 <Main+0xb8>)
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <Main+0xa8>)
 8001004:	f001 fc45 	bl	8002892 <_ZN13ScreenControl10ChangeTextEPKcS1_h>
	}

	HAL_Delay(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f004 fa16 	bl	800543c <HAL_Delay>

//
//	ReadCurrent();
//	shiftReg.Update();

	next.CheckForTouchEvents();
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <Main+0xbc>)
 8001012:	f001 f92b 	bl	800226c <_ZN7Nextion19CheckForTouchEventsEv>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000017a 	.word	0x2000017a
 8001020:	200000ac 	.word	0x200000ac
 8001024:	20000128 	.word	0x20000128
 8001028:	20000cd8 	.word	0x20000cd8
 800102c:	0800ee78 	.word	0x0800ee78
 8001030:	0800ee7c 	.word	0x0800ee7c
 8001034:	0800ee84 	.word	0x0800ee84
 8001038:	0800ee88 	.word	0x0800ee88
 800103c:	200000f0 	.word	0x200000f0

08001040 <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_UP_IND);
	screenCtrl.NavigateVert(-1);
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <MenuUpInterruptCallback+0x14>)
 800104a:	f001 fb8d 	bl	8002768 <_ZN13ScreenControl12NavigateVertEa>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000cd8 	.word	0x20000cd8

08001058 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_DOWN_IND);
	screenCtrl.NavigateVert(1);
 800105c:	2101      	movs	r1, #1
 800105e:	4802      	ldr	r0, [pc, #8]	; (8001068 <MenuDownInterruptCallback+0x10>)
 8001060:	f001 fb82 	bl	8002768 <_ZN13ScreenControl12NavigateVertEa>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000cd8 	.word	0x20000cd8

0800106c <MenuLeftInterruptCallback>:
void MenuLeftInterruptCallback()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	screenCtrl.NavigateHorz(-1);
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <MenuLeftInterruptCallback+0x14>)
 8001076:	f001 fb65 	bl	8002744 <_ZN13ScreenControl12NavigateHorzEa>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000cd8 	.word	0x20000cd8

08001084 <MenuRightInterruptCallback>:
void MenuRightInterruptCallback()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_RIGHT_IND);
	screenCtrl.NavigateHorz(1);
 8001088:	2101      	movs	r1, #1
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <MenuRightInterruptCallback+0x10>)
 800108c:	f001 fb5a 	bl	8002744 <_ZN13ScreenControl12NavigateHorzEa>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000cd8 	.word	0x20000cd8

08001098 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 800109c:	2108      	movs	r1, #8
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MenuActInterruptCallback+0x18>)
 80010a0:	f001 fcc7 	bl	8002a32 <_ZN9ShiftRegs11ToggleValueEj>
	screenCtrl.Act();
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MenuActInterruptCallback+0x1c>)
 80010a6:	f001 fbe3 	bl	8002870 <_ZN13ScreenControl3ActEv>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000cc 	.word	0x200000cc
 80010b4:	20000cd8 	.word	0x20000cd8

080010b8 <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	relayState = relayState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MenuBackInterruptCallback+0x38>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MenuBackInterruptCallback+0x38>)
 80010ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin, relayState);
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MenuBackInterruptCallback+0x38>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2101      	movs	r1, #1
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MenuBackInterruptCallback+0x3c>)
 80010da:	f006 feef 	bl	8007ebc <HAL_GPIO_WritePin>
	shiftReg.SetValue((uint8_t)relayState, MENU_BACK_IND);
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <MenuBackInterruptCallback+0x38>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MenuBackInterruptCallback+0x40>)
 80010e8:	f001 fc76 	bl	80029d8 <_ZN9ShiftRegs8SetValueEhj>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000017b 	.word	0x2000017b
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	200000cc 	.word	0x200000cc

080010fc <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_Z41__static_initialization_and_destruction_0ii>:
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af06      	add	r7, sp, #24
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 848a 	bne.w	8001a3e <_Z41__static_initialization_and_destruction_0ii+0x926>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	4293      	cmp	r3, r2
 8001132:	f040 8484 	bne.w	8001a3e <_Z41__static_initialization_and_destruction_0ii+0x926>
ShiftRegs shiftReg;
 8001136:	48ae      	ldr	r0, [pc, #696]	; (80013f0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8001138:	f7ff fb20 	bl	800077c <_ZN9ShiftRegsC1Ev>
Nextion next = Nextion();
 800113c:	48ad      	ldr	r0, [pc, #692]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800113e:	f000 fee7 	bl	8001f10 <_ZN7NextionC1Ev>
StripCurrent stripCurr;
 8001142:	48ad      	ldr	r0, [pc, #692]	; (80013f8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8001144:	f7ff fb0e 	bl	8000764 <_ZN12StripCurrentC1Ev>
StripControl stripCtrl;
 8001148:	48ac      	ldr	r0, [pc, #688]	; (80013fc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800114a:	f7ff fb5d 	bl	8000808 <_ZN12StripControlC1Ev>
PCA9634 ledA;
 800114e:	48ac      	ldr	r0, [pc, #688]	; (8001400 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8001150:	f7ff fb43 	bl	80007da <_ZN7PCA9634C1Ev>
PCA9634Settings settings;
 8001154:	48ab      	ldr	r0, [pc, #684]	; (8001404 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8001156:	f7ff fb29 	bl	80007ac <_ZN15PCA9634SettingsC1Ev>
PageButton homeBtn = PageButton(&next, 1, "pb1", 0, 0, 1);
 800115a:	2301      	movs	r3, #1
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2300      	movs	r3, #0
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	2300      	movs	r3, #0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4ba8      	ldr	r3, [pc, #672]	; (8001408 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001168:	2201      	movs	r2, #1
 800116a:	49a2      	ldr	r1, [pc, #648]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800116c:	48a7      	ldr	r0, [pc, #668]	; (800140c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800116e:	f7ff fbe5 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton settingsBtn = PageButton(&next, 2, "pb5", 1, 0, 5);
 8001172:	2305      	movs	r3, #5
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2300      	movs	r3, #0
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2301      	movs	r3, #1
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4ba4      	ldr	r3, [pc, #656]	; (8001410 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001180:	2202      	movs	r2, #2
 8001182:	499c      	ldr	r1, [pc, #624]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001184:	48a3      	ldr	r0, [pc, #652]	; (8001414 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8001186:	f7ff fbd9 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 800118a:	4ca3      	ldr	r4, [pc, #652]	; (8001418 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800118c:	499f      	ldr	r1, [pc, #636]	; (800140c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff fc48 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001194:	f104 0314 	add.w	r3, r4, #20
 8001198:	499e      	ldr	r1, [pc, #632]	; (8001414 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fc42 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
PageButton mainPageBtn   = PageButton(&next, 7, "pb1", 0, 0, 2);
 80011a0:	2302      	movs	r3, #2
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	4990      	ldr	r1, [pc, #576]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80011b2:	489a      	ldr	r0, [pc, #616]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80011b4:	f7ff fbc2 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton chnPageBtn    = PageButton(&next, 1, "pb2", 0, 1, 3);
 80011b8:	2303      	movs	r3, #3
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	2300      	movs	r3, #0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4b96      	ldr	r3, [pc, #600]	; (8001420 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	498a      	ldr	r1, [pc, #552]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80011ca:	4896      	ldr	r0, [pc, #600]	; (8001424 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80011cc:	f7ff fbb6 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton chCfgPageBtn  = PageButton(&next, 6, "pb3", 0, 2, 4);
 80011d0:	2304      	movs	r3, #4
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2302      	movs	r3, #2
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4b92      	ldr	r3, [pc, #584]	; (8001428 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80011de:	2206      	movs	r2, #6
 80011e0:	4984      	ldr	r1, [pc, #528]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80011e2:	4892      	ldr	r0, [pc, #584]	; (800142c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80011e4:	f7ff fbaa 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton audPageBtn    = PageButton(&next, 4, "pb5", 0, 3, 6);
 80011e8:	2306      	movs	r3, #6
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	2303      	movs	r3, #3
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b86      	ldr	r3, [pc, #536]	; (8001410 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	497e      	ldr	r1, [pc, #504]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80011fa:	488d      	ldr	r0, [pc, #564]	; (8001430 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80011fc:	f7ff fb9e 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton patPageBtn    = PageButton(&next, 5, "pb7", 1, 1, 8);
 8001200:	2308      	movs	r3, #8
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2301      	movs	r3, #1
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b89      	ldr	r3, [pc, #548]	; (8001434 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800120e:	2205      	movs	r2, #5
 8001210:	4978      	ldr	r1, [pc, #480]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001212:	4889      	ldr	r0, [pc, #548]	; (8001438 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8001214:	f7ff fb92 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton colPageBtn    = PageButton(&next, 8, "pb6", 1, 2, 7);
 8001218:	2307      	movs	r3, #7
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2302      	movs	r3, #2
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2301      	movs	r3, #1
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4b85      	ldr	r3, [pc, #532]	; (800143c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8001226:	2208      	movs	r2, #8
 8001228:	4972      	ldr	r1, [pc, #456]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800122a:	4885      	ldr	r0, [pc, #532]	; (8001440 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800122c:	f7ff fb86 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton settPageBtn   = PageButton(&next, 2, "pb4", 1, 3, 5);
 8001230:	2305      	movs	r3, #5
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2303      	movs	r3, #3
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2301      	movs	r3, #1
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800123e:	2202      	movs	r2, #2
 8001240:	496c      	ldr	r1, [pc, #432]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001242:	4881      	ldr	r0, [pc, #516]	; (8001448 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8001244:	f7ff fb7a 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 8001248:	4c80      	ldr	r4, [pc, #512]	; (800144c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800124a:	4974      	ldr	r1, [pc, #464]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fbe9 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001252:	3414      	adds	r4, #20
 8001254:	4973      	ldr	r1, [pc, #460]	; (8001424 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fbe4 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 800125c:	3414      	adds	r4, #20
 800125e:	4973      	ldr	r1, [pc, #460]	; (800142c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff fbdf 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001266:	3414      	adds	r4, #20
 8001268:	4971      	ldr	r1, [pc, #452]	; (8001430 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff fbda 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001270:	3414      	adds	r4, #20
 8001272:	4971      	ldr	r1, [pc, #452]	; (8001438 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff fbd5 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 800127a:	3414      	adds	r4, #20
 800127c:	4970      	ldr	r1, [pc, #448]	; (8001440 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800127e:	4620      	mov	r0, r4
 8001280:	f7ff fbd0 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001284:	f104 0314 	add.w	r3, r4, #20
 8001288:	496f      	ldr	r1, [pc, #444]	; (8001448 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fbca 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
Page homePage = Page(&next, 1, NULL, 0, mainBtns, 7);
 8001290:	2307      	movs	r3, #7
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2201      	movs	r2, #1
 80012a0:	4954      	ldr	r1, [pc, #336]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80012a2:	486b      	ldr	r0, [pc, #428]	; (8001450 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80012a4:	f003 fcec 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button runBtn = Button(&next, 2, "b0", 0, 1);
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	494f      	ldr	r1, [pc, #316]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80012b6:	4868      	ldr	r0, [pc, #416]	; (8001458 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80012b8:	f7ff fb20 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
};
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80012be:	4966      	ldr	r1, [pc, #408]	; (8001458 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fc1b 	bl	8000afc <_ZN6ButtonC1ERKS_>
PageButton runHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1);
 80012c6:	2301      	movs	r3, #1
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80012d4:	2212      	movs	r2, #18
 80012d6:	4947      	ldr	r1, [pc, #284]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80012d8:	4861      	ldr	r0, [pc, #388]	; (8001460 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80012da:	f7ff fb2f 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton runSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5);
 80012de:	2305      	movs	r3, #5
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80012ec:	2213      	movs	r2, #19
 80012ee:	4941      	ldr	r1, [pc, #260]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80012f0:	485c      	ldr	r0, [pc, #368]	; (8001464 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80012f2:	f7ff fb23 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 80012f6:	4c5c      	ldr	r4, [pc, #368]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80012f8:	4959      	ldr	r1, [pc, #356]	; (8001460 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fb92 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001300:	f104 0314 	add.w	r3, r4, #20
 8001304:	4957      	ldr	r1, [pc, #348]	; (8001464 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb8c 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
Page runPage = Page(&next, 2, runBtns, 1, runPageBtns, 2);
 800130c:	2302      	movs	r3, #2
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2301      	movs	r3, #1
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800131a:	2202      	movs	r2, #2
 800131c:	4935      	ldr	r1, [pc, #212]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800131e:	4853      	ldr	r0, [pc, #332]	; (800146c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8001320:	f003 fcae 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button srcCh1Btn = Button(&next, 3, "b0", 0, 1);
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800132e:	2203      	movs	r2, #3
 8001330:	4930      	ldr	r1, [pc, #192]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001332:	484f      	ldr	r0, [pc, #316]	; (8001470 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8001334:	f7ff fae2 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh2Btn = Button(&next, 21, "b1", 1, 1);
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2301      	movs	r3, #1
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8001342:	2215      	movs	r2, #21
 8001344:	492b      	ldr	r1, [pc, #172]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001346:	484c      	ldr	r0, [pc, #304]	; (8001478 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8001348:	f7ff fad8 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh3Btn = Button(&next, 22, "b2", 2, 1);
 800134c:	2301      	movs	r3, #1
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2302      	movs	r3, #2
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4b49      	ldr	r3, [pc, #292]	; (800147c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8001356:	2216      	movs	r2, #22
 8001358:	4926      	ldr	r1, [pc, #152]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800135a:	4849      	ldr	r0, [pc, #292]	; (8001480 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800135c:	f7ff face 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh4Btn = Button(&next, 23, "b3", 3, 1);
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2303      	movs	r3, #3
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800136a:	2217      	movs	r2, #23
 800136c:	4921      	ldr	r1, [pc, #132]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800136e:	4846      	ldr	r0, [pc, #280]	; (8001488 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8001370:	f7ff fac4 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh5Btn = Button(&next, 24, "b4", 4, 1);
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	2304      	movs	r3, #4
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b43      	ldr	r3, [pc, #268]	; (800148c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800137e:	2218      	movs	r2, #24
 8001380:	491c      	ldr	r1, [pc, #112]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001382:	4843      	ldr	r0, [pc, #268]	; (8001490 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8001384:	f7ff faba 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh6Btn = Button(&next, 25, "b5", 5, 1);
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	2305      	movs	r3, #5
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8001392:	2219      	movs	r2, #25
 8001394:	4917      	ldr	r1, [pc, #92]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001396:	4840      	ldr	r0, [pc, #256]	; (8001498 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8001398:	f7ff fab0 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh7Btn = Button(&next, 26, "b6", 6, 1);
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	2306      	movs	r3, #6
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80013a6:	221a      	movs	r2, #26
 80013a8:	4912      	ldr	r1, [pc, #72]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80013aa:	483d      	ldr	r0, [pc, #244]	; (80014a0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80013ac:	f7ff faa6 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh8Btn = Button(&next, 27, "b7", 7, 1);
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2307      	movs	r3, #7
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80013ba:	221b      	movs	r2, #27
 80013bc:	490d      	ldr	r1, [pc, #52]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80013be:	483a      	ldr	r0, [pc, #232]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80013c0:	f7ff fa9c 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
ProgressBar ch1Bar = ProgressBar(&next, 1, "j0");
 80013c4:	4b39      	ldr	r3, [pc, #228]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	490a      	ldr	r1, [pc, #40]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80013ca:	4839      	ldr	r0, [pc, #228]	; (80014b0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80013cc:	f7ff fad2 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch2Bar = ProgressBar(&next, 4, "j1");
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80013d6:	4838      	ldr	r0, [pc, #224]	; (80014b8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80013d8:	f7ff facc 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch3Bar = ProgressBar(&next, 6, "j2");
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80013de:	2206      	movs	r2, #6
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80013e2:	4837      	ldr	r0, [pc, #220]	; (80014c0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80013e4:	f7ff fac6 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch4Bar = ProgressBar(&next, 8, "j3");
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80013ea:	2208      	movs	r2, #8
 80013ec:	4901      	ldr	r1, [pc, #4]	; (80013f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80013ee:	e06b      	b.n	80014c8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>
 80013f0:	200000cc 	.word	0x200000cc
 80013f4:	200000f0 	.word	0x200000f0
 80013f8:	20000110 	.word	0x20000110
 80013fc:	20000128 	.word	0x20000128
 8001400:	2000014c 	.word	0x2000014c
 8001404:	20000170 	.word	0x20000170
 8001408:	0800ee8c 	.word	0x0800ee8c
 800140c:	2000017c 	.word	0x2000017c
 8001410:	0800ee90 	.word	0x0800ee90
 8001414:	20000190 	.word	0x20000190
 8001418:	200001a4 	.word	0x200001a4
 800141c:	200001cc 	.word	0x200001cc
 8001420:	0800ee94 	.word	0x0800ee94
 8001424:	200001e0 	.word	0x200001e0
 8001428:	0800ee98 	.word	0x0800ee98
 800142c:	200001f4 	.word	0x200001f4
 8001430:	20000208 	.word	0x20000208
 8001434:	0800ee9c 	.word	0x0800ee9c
 8001438:	2000021c 	.word	0x2000021c
 800143c:	0800eea0 	.word	0x0800eea0
 8001440:	20000230 	.word	0x20000230
 8001444:	0800eea4 	.word	0x0800eea4
 8001448:	20000244 	.word	0x20000244
 800144c:	20000258 	.word	0x20000258
 8001450:	200002e4 	.word	0x200002e4
 8001454:	0800ee88 	.word	0x0800ee88
 8001458:	20000314 	.word	0x20000314
 800145c:	2000032c 	.word	0x2000032c
 8001460:	20000344 	.word	0x20000344
 8001464:	20000358 	.word	0x20000358
 8001468:	2000036c 	.word	0x2000036c
 800146c:	20000394 	.word	0x20000394
 8001470:	200003c4 	.word	0x200003c4
 8001474:	0800eea8 	.word	0x0800eea8
 8001478:	200003dc 	.word	0x200003dc
 800147c:	0800eeac 	.word	0x0800eeac
 8001480:	200003f4 	.word	0x200003f4
 8001484:	0800eeb0 	.word	0x0800eeb0
 8001488:	2000040c 	.word	0x2000040c
 800148c:	0800eeb4 	.word	0x0800eeb4
 8001490:	20000424 	.word	0x20000424
 8001494:	0800eeb8 	.word	0x0800eeb8
 8001498:	2000043c 	.word	0x2000043c
 800149c:	0800eebc 	.word	0x0800eebc
 80014a0:	20000454 	.word	0x20000454
 80014a4:	0800eec0 	.word	0x0800eec0
 80014a8:	2000046c 	.word	0x2000046c
 80014ac:	0800eec4 	.word	0x0800eec4
 80014b0:	20000484 	.word	0x20000484
 80014b4:	0800eec8 	.word	0x0800eec8
 80014b8:	20000498 	.word	0x20000498
 80014bc:	0800eecc 	.word	0x0800eecc
 80014c0:	200004ac 	.word	0x200004ac
 80014c4:	0800eed0 	.word	0x0800eed0
 80014c8:	48b5      	ldr	r0, [pc, #724]	; (80017a0 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80014ca:	f7ff fa53 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch5Bar = ProgressBar(&next, 10, "j4");
 80014ce:	4bb5      	ldr	r3, [pc, #724]	; (80017a4 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80014d0:	220a      	movs	r2, #10
 80014d2:	49b5      	ldr	r1, [pc, #724]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80014d4:	48b5      	ldr	r0, [pc, #724]	; (80017ac <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80014d6:	f7ff fa4d 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch6Bar = ProgressBar(&next, 12, "j5");
 80014da:	4bb5      	ldr	r3, [pc, #724]	; (80017b0 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 80014dc:	220c      	movs	r2, #12
 80014de:	49b2      	ldr	r1, [pc, #712]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80014e0:	48b4      	ldr	r0, [pc, #720]	; (80017b4 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 80014e2:	f7ff fa47 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch7Bar = ProgressBar(&next, 14, "j6");
 80014e6:	4bb4      	ldr	r3, [pc, #720]	; (80017b8 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 80014e8:	220e      	movs	r2, #14
 80014ea:	49af      	ldr	r1, [pc, #700]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80014ec:	48b3      	ldr	r0, [pc, #716]	; (80017bc <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 80014ee:	f7ff fa41 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch8Bar = ProgressBar(&next, 16, "j7");
 80014f2:	4bb3      	ldr	r3, [pc, #716]	; (80017c0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 80014f4:	2210      	movs	r2, #16
 80014f6:	49ac      	ldr	r1, [pc, #688]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80014f8:	48b2      	ldr	r0, [pc, #712]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 80014fa:	f7ff fa3b 	bl	8000974 <_ZN11ProgressBarC1EP7NextionhPKc>
PageButton chVisHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1);
 80014fe:	2301      	movs	r3, #1
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	2300      	movs	r3, #0
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2300      	movs	r3, #0
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4baf      	ldr	r3, [pc, #700]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 800150c:	2212      	movs	r2, #18
 800150e:	49a6      	ldr	r1, [pc, #664]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001510:	48ae      	ldr	r0, [pc, #696]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8001512:	f7ff fa13 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton chVisSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5);
 8001516:	2305      	movs	r3, #5
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2300      	movs	r3, #0
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2301      	movs	r3, #1
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4bab      	ldr	r3, [pc, #684]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8001524:	2213      	movs	r2, #19
 8001526:	49a0      	ldr	r1, [pc, #640]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001528:	48aa      	ldr	r0, [pc, #680]	; (80017d4 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800152a:	f7ff fa07 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 800152e:	4caa      	ldr	r4, [pc, #680]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8001530:	49a6      	ldr	r1, [pc, #664]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fa76 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 8001538:	f104 0314 	add.w	r3, r4, #20
 800153c:	49a5      	ldr	r1, [pc, #660]	; (80017d4 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fa70 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
};
 8001544:	4ca5      	ldr	r4, [pc, #660]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8001546:	49a6      	ldr	r1, [pc, #664]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8001548:	4620      	mov	r0, r4
 800154a:	f7ff fad7 	bl	8000afc <_ZN6ButtonC1ERKS_>
 800154e:	3418      	adds	r4, #24
 8001550:	49a4      	ldr	r1, [pc, #656]	; (80017e4 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fad2 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001558:	3418      	adds	r4, #24
 800155a:	49a3      	ldr	r1, [pc, #652]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff facd 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001562:	3418      	adds	r4, #24
 8001564:	49a1      	ldr	r1, [pc, #644]	; (80017ec <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff fac8 	bl	8000afc <_ZN6ButtonC1ERKS_>
 800156c:	3418      	adds	r4, #24
 800156e:	49a0      	ldr	r1, [pc, #640]	; (80017f0 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fac3 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001576:	3418      	adds	r4, #24
 8001578:	499e      	ldr	r1, [pc, #632]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fabe 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001580:	3418      	adds	r4, #24
 8001582:	499d      	ldr	r1, [pc, #628]	; (80017f8 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fab9 	bl	8000afc <_ZN6ButtonC1ERKS_>
 800158a:	f104 0318 	add.w	r3, r4, #24
 800158e:	499b      	ldr	r1, [pc, #620]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fab3 	bl	8000afc <_ZN6ButtonC1ERKS_>
};
 8001596:	4c9a      	ldr	r4, [pc, #616]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 8001598:	499a      	ldr	r1, [pc, #616]	; (8001804 <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff facc 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015a0:	3414      	adds	r4, #20
 80015a2:	4999      	ldr	r1, [pc, #612]	; (8001808 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fac7 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015aa:	3414      	adds	r4, #20
 80015ac:	4997      	ldr	r1, [pc, #604]	; (800180c <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fac2 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015b4:	3414      	adds	r4, #20
 80015b6:	497a      	ldr	r1, [pc, #488]	; (80017a0 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fabd 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015be:	3414      	adds	r4, #20
 80015c0:	497a      	ldr	r1, [pc, #488]	; (80017ac <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fab8 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015c8:	3414      	adds	r4, #20
 80015ca:	497a      	ldr	r1, [pc, #488]	; (80017b4 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fab3 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015d2:	3414      	adds	r4, #20
 80015d4:	4979      	ldr	r1, [pc, #484]	; (80017bc <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff faae 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
 80015dc:	f104 0314 	add.w	r3, r4, #20
 80015e0:	4978      	ldr	r1, [pc, #480]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff faa8 	bl	8000b38 <_ZN11ProgressBarC1ERKS_>
Page channelVisPage = Page(&next, 3, chVisBtns, 8, chVisPageBtns, 2, progBars, 8);
 80015e8:	2308      	movs	r3, #8
 80015ea:	9304      	str	r3, [sp, #16]
 80015ec:	4b84      	ldr	r3, [pc, #528]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80015ee:	9303      	str	r3, [sp, #12]
 80015f0:	2302      	movs	r3, #2
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2308      	movs	r3, #8
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4b77      	ldr	r3, [pc, #476]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80015fe:	2203      	movs	r2, #3
 8001600:	4969      	ldr	r1, [pc, #420]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001602:	4883      	ldr	r0, [pc, #524]	; (8001810 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8001604:	f003 fbe0 	bl	8004dc8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari>
Button ch1Btn = Button(&next, 13, "b0", 0, 2);
 8001608:	2302      	movs	r3, #2
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	4b80      	ldr	r3, [pc, #512]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8001612:	220d      	movs	r2, #13
 8001614:	4964      	ldr	r1, [pc, #400]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001616:	4880      	ldr	r0, [pc, #512]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8001618:	f7ff f970 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch2Btn = Button(&next, 13, "b1", 1, 2);
 800161c:	2302      	movs	r3, #2
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2301      	movs	r3, #1
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4b7d      	ldr	r3, [pc, #500]	; (800181c <_Z41__static_initialization_and_destruction_0ii+0x704>)
 8001626:	220d      	movs	r2, #13
 8001628:	495f      	ldr	r1, [pc, #380]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800162a:	487d      	ldr	r0, [pc, #500]	; (8001820 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 800162c:	f7ff f966 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch3Btn = Button(&next, 13, "b2", 2, 2);
 8001630:	2302      	movs	r3, #2
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4b7a      	ldr	r3, [pc, #488]	; (8001824 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800163a:	220d      	movs	r2, #13
 800163c:	495a      	ldr	r1, [pc, #360]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800163e:	487a      	ldr	r0, [pc, #488]	; (8001828 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8001640:	f7ff f95c 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch4Btn = Button(&next, 13, "b3", 3, 2);
 8001644:	2302      	movs	r3, #2
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2303      	movs	r3, #3
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4b77      	ldr	r3, [pc, #476]	; (800182c <_Z41__static_initialization_and_destruction_0ii+0x714>)
 800164e:	220d      	movs	r2, #13
 8001650:	4955      	ldr	r1, [pc, #340]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001652:	4877      	ldr	r0, [pc, #476]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 8001654:	f7ff f952 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch5Btn = Button(&next, 13, "b4", 4, 2);
 8001658:	2302      	movs	r3, #2
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2304      	movs	r3, #4
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4b74      	ldr	r3, [pc, #464]	; (8001834 <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 8001662:	220d      	movs	r2, #13
 8001664:	4950      	ldr	r1, [pc, #320]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001666:	4874      	ldr	r0, [pc, #464]	; (8001838 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 8001668:	f7ff f948 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch6Btn = Button(&next, 13, "b5", 5, 2);
 800166c:	2302      	movs	r3, #2
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2305      	movs	r3, #5
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4b71      	ldr	r3, [pc, #452]	; (800183c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8001676:	220d      	movs	r2, #13
 8001678:	494b      	ldr	r1, [pc, #300]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800167a:	4871      	ldr	r0, [pc, #452]	; (8001840 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800167c:	f7ff f93e 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch7Btn = Button(&next, 13, "b6", 6, 2);
 8001680:	2302      	movs	r3, #2
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2306      	movs	r3, #6
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	4b6e      	ldr	r3, [pc, #440]	; (8001844 <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 800168a:	220d      	movs	r2, #13
 800168c:	4946      	ldr	r1, [pc, #280]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800168e:	486e      	ldr	r0, [pc, #440]	; (8001848 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 8001690:	f7ff f934 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch8Btn = Button(&next, 13, "b7", 7, 2);
 8001694:	2302      	movs	r3, #2
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2307      	movs	r3, #7
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4b6b      	ldr	r3, [pc, #428]	; (800184c <_Z41__static_initialization_and_destruction_0ii+0x734>)
 800169e:	220d      	movs	r2, #13
 80016a0:	4941      	ldr	r1, [pc, #260]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80016a2:	486b      	ldr	r0, [pc, #428]	; (8001850 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 80016a4:	f7ff f92a 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
PageButton chCfgHomeBtn = PageButton(&next, 3, "pb1", 0, 0, 1);
 80016a8:	2301      	movs	r3, #1
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2300      	movs	r3, #0
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 80016b6:	2203      	movs	r2, #3
 80016b8:	493b      	ldr	r1, [pc, #236]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80016ba:	4866      	ldr	r0, [pc, #408]	; (8001854 <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 80016bc:	f7ff f93e 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton chCfgSettingsBtn = PageButton(&next, 4, "pb5", 1, 0, 5);
 80016c0:	2305      	movs	r3, #5
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	4935      	ldr	r1, [pc, #212]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80016d2:	4861      	ldr	r0, [pc, #388]	; (8001858 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 80016d4:	f7ff f932 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 80016d8:	4c60      	ldr	r4, [pc, #384]	; (800185c <_Z41__static_initialization_and_destruction_0ii+0x744>)
 80016da:	495e      	ldr	r1, [pc, #376]	; (8001854 <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff f9a1 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 80016e2:	f104 0314 	add.w	r3, r4, #20
 80016e6:	495c      	ldr	r1, [pc, #368]	; (8001858 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f99b 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
};
 80016ee:	4c5c      	ldr	r4, [pc, #368]	; (8001860 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 80016f0:	4949      	ldr	r1, [pc, #292]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fa02 	bl	8000afc <_ZN6ButtonC1ERKS_>
 80016f8:	3418      	adds	r4, #24
 80016fa:	4949      	ldr	r1, [pc, #292]	; (8001820 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff f9fd 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001702:	3418      	adds	r4, #24
 8001704:	4948      	ldr	r1, [pc, #288]	; (8001828 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff f9f8 	bl	8000afc <_ZN6ButtonC1ERKS_>
 800170c:	3418      	adds	r4, #24
 800170e:	4948      	ldr	r1, [pc, #288]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff f9f3 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001716:	3418      	adds	r4, #24
 8001718:	4947      	ldr	r1, [pc, #284]	; (8001838 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff f9ee 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001720:	3418      	adds	r4, #24
 8001722:	4947      	ldr	r1, [pc, #284]	; (8001840 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff f9e9 	bl	8000afc <_ZN6ButtonC1ERKS_>
 800172a:	3418      	adds	r4, #24
 800172c:	4946      	ldr	r1, [pc, #280]	; (8001848 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff f9e4 	bl	8000afc <_ZN6ButtonC1ERKS_>
 8001734:	f104 0318 	add.w	r3, r4, #24
 8001738:	4945      	ldr	r1, [pc, #276]	; (8001850 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f9de 	bl	8000afc <_ZN6ButtonC1ERKS_>
Page channelConfigPage = Page(&next, 4, chCfgBtns, 8, chCfgPageBtns, 2);
 8001740:	2302      	movs	r3, #2
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	4b45      	ldr	r3, [pc, #276]	; (800185c <_Z41__static_initialization_and_destruction_0ii+0x744>)
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2308      	movs	r3, #8
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 800174e:	2204      	movs	r2, #4
 8001750:	4915      	ldr	r1, [pc, #84]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001752:	4844      	ldr	r0, [pc, #272]	; (8001864 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 8001754:	f003 fa94 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button saveBtn = Button(&next, 0, "b0", 0, 2);
 8001758:	2302      	movs	r3, #2
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8001762:	2200      	movs	r2, #0
 8001764:	4910      	ldr	r1, [pc, #64]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001766:	4840      	ldr	r0, [pc, #256]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 8001768:	f7ff f8c8 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
};
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x754>)
 800176e:	493e      	ldr	r1, [pc, #248]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f9c3 	bl	8000afc <_ZN6ButtonC1ERKS_>
};
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 8001778:	493e      	ldr	r1, [pc, #248]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f952 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
Page settingsPage = Page(&next, 5, settBtns, 1, settPageBtns, 1);
 8001780:	2301      	movs	r3, #1
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2301      	movs	r3, #1
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x754>)
 800178e:	2205      	movs	r2, #5
 8001790:	4905      	ldr	r1, [pc, #20]	; (80017a8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8001792:	4839      	ldr	r0, [pc, #228]	; (8001878 <_Z41__static_initialization_and_destruction_0ii+0x760>)
 8001794:	f003 fa74 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button audSrcXlrBtn = Button(&next, 12, "b7", 2, 1);
 8001798:	2301      	movs	r3, #1
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	e06d      	b.n	800187c <_Z41__static_initialization_and_destruction_0ii+0x764>
 80017a0:	200004c0 	.word	0x200004c0
 80017a4:	0800eed4 	.word	0x0800eed4
 80017a8:	200000f0 	.word	0x200000f0
 80017ac:	200004d4 	.word	0x200004d4
 80017b0:	0800eed8 	.word	0x0800eed8
 80017b4:	200004e8 	.word	0x200004e8
 80017b8:	0800eedc 	.word	0x0800eedc
 80017bc:	200004fc 	.word	0x200004fc
 80017c0:	0800eee0 	.word	0x0800eee0
 80017c4:	20000510 	.word	0x20000510
 80017c8:	0800ee8c 	.word	0x0800ee8c
 80017cc:	20000524 	.word	0x20000524
 80017d0:	0800ee90 	.word	0x0800ee90
 80017d4:	20000538 	.word	0x20000538
 80017d8:	2000054c 	.word	0x2000054c
 80017dc:	20000574 	.word	0x20000574
 80017e0:	200003c4 	.word	0x200003c4
 80017e4:	200003dc 	.word	0x200003dc
 80017e8:	200003f4 	.word	0x200003f4
 80017ec:	2000040c 	.word	0x2000040c
 80017f0:	20000424 	.word	0x20000424
 80017f4:	2000043c 	.word	0x2000043c
 80017f8:	20000454 	.word	0x20000454
 80017fc:	2000046c 	.word	0x2000046c
 8001800:	20000634 	.word	0x20000634
 8001804:	20000484 	.word	0x20000484
 8001808:	20000498 	.word	0x20000498
 800180c:	200004ac 	.word	0x200004ac
 8001810:	200006d4 	.word	0x200006d4
 8001814:	0800ee88 	.word	0x0800ee88
 8001818:	20000704 	.word	0x20000704
 800181c:	0800eea8 	.word	0x0800eea8
 8001820:	2000071c 	.word	0x2000071c
 8001824:	0800eeac 	.word	0x0800eeac
 8001828:	20000734 	.word	0x20000734
 800182c:	0800eeb0 	.word	0x0800eeb0
 8001830:	2000074c 	.word	0x2000074c
 8001834:	0800eeb4 	.word	0x0800eeb4
 8001838:	20000764 	.word	0x20000764
 800183c:	0800eeb8 	.word	0x0800eeb8
 8001840:	2000077c 	.word	0x2000077c
 8001844:	0800eebc 	.word	0x0800eebc
 8001848:	20000794 	.word	0x20000794
 800184c:	0800eec0 	.word	0x0800eec0
 8001850:	200007ac 	.word	0x200007ac
 8001854:	200007c4 	.word	0x200007c4
 8001858:	200007d8 	.word	0x200007d8
 800185c:	200007ec 	.word	0x200007ec
 8001860:	20000814 	.word	0x20000814
 8001864:	200008d4 	.word	0x200008d4
 8001868:	20000904 	.word	0x20000904
 800186c:	2000091c 	.word	0x2000091c
 8001870:	20000934 	.word	0x20000934
 8001874:	2000017c 	.word	0x2000017c
 8001878:	20000948 	.word	0x20000948
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <_Z41__static_initialization_and_destruction_0ii+0x9e8>)
 8001880:	220c      	movs	r2, #12
 8001882:	49a0      	ldr	r1, [pc, #640]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8001884:	48a0      	ldr	r0, [pc, #640]	; (8001b08 <_Z41__static_initialization_and_destruction_0ii+0x9f0>)
 8001886:	f7ff f839 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
Button audSrcJackBtn = Button(&next, 13, "b0", 3, 1);
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	2303      	movs	r3, #3
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	4b9e      	ldr	r3, [pc, #632]	; (8001b0c <_Z41__static_initialization_and_destruction_0ii+0x9f4>)
 8001894:	220d      	movs	r2, #13
 8001896:	499b      	ldr	r1, [pc, #620]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8001898:	489d      	ldr	r0, [pc, #628]	; (8001b10 <_Z41__static_initialization_and_destruction_0ii+0x9f8>)
 800189a:	f7ff f82f 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
PageButton audHomeBtn = PageButton(&next, 15, "pb1", 0, 0, 1);
 800189e:	2301      	movs	r3, #1
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	4b9a      	ldr	r3, [pc, #616]	; (8001b14 <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 80018ac:	220f      	movs	r2, #15
 80018ae:	4995      	ldr	r1, [pc, #596]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80018b0:	4899      	ldr	r0, [pc, #612]	; (8001b18 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 80018b2:	f7ff f843 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton audSettingsBtn = PageButton(&next, 16, "pb5", 1, 0, 5);
 80018b6:	2305      	movs	r3, #5
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2301      	movs	r3, #1
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4b96      	ldr	r3, [pc, #600]	; (8001b1c <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 80018c4:	2210      	movs	r2, #16
 80018c6:	498f      	ldr	r1, [pc, #572]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80018c8:	4895      	ldr	r0, [pc, #596]	; (8001b20 <_Z41__static_initialization_and_destruction_0ii+0xa08>)
 80018ca:	f7ff f837 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 80018ce:	4c95      	ldr	r4, [pc, #596]	; (8001b24 <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 80018d0:	4991      	ldr	r1, [pc, #580]	; (8001b18 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff f8a6 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 80018d8:	f104 0314 	add.w	r3, r4, #20
 80018dc:	4990      	ldr	r1, [pc, #576]	; (8001b20 <_Z41__static_initialization_and_destruction_0ii+0xa08>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f8a0 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
};
 80018e4:	4c90      	ldr	r4, [pc, #576]	; (8001b28 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 80018e6:	4988      	ldr	r1, [pc, #544]	; (8001b08 <_Z41__static_initialization_and_destruction_0ii+0x9f0>)
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff f907 	bl	8000afc <_ZN6ButtonC1ERKS_>
 80018ee:	f104 0318 	add.w	r3, r4, #24
 80018f2:	4987      	ldr	r1, [pc, #540]	; (8001b10 <_Z41__static_initialization_and_destruction_0ii+0x9f8>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f901 	bl	8000afc <_ZN6ButtonC1ERKS_>
Page audioPage = Page(&next, 6, audBtns, 2, audPageBtns, 2);
 80018fa:	2302      	movs	r3, #2
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2302      	movs	r3, #2
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 8001908:	2206      	movs	r2, #6
 800190a:	497e      	ldr	r1, [pc, #504]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 800190c:	4887      	ldr	r0, [pc, #540]	; (8001b2c <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 800190e:	f003 f9b7 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button colChSelBtn = Button(&next, 0, "b0", 0, 2);
 8001912:	2302      	movs	r3, #2
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	2300      	movs	r3, #0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	4b7c      	ldr	r3, [pc, #496]	; (8001b0c <_Z41__static_initialization_and_destruction_0ii+0x9f4>)
 800191c:	2200      	movs	r2, #0
 800191e:	4979      	ldr	r1, [pc, #484]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8001920:	4883      	ldr	r0, [pc, #524]	; (8001b30 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 8001922:	f7fe ffeb 	bl	80008fc <_ZN6ButtonC1EP7NextionhPKchh>
};
 8001926:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 8001928:	4981      	ldr	r1, [pc, #516]	; (8001b30 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f8e6 	bl	8000afc <_ZN6ButtonC1ERKS_>
PageButton colHomeBtn = PageButton(&next, 5, "pb1", 0, 0, 1);
 8001930:	2301      	movs	r3, #1
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2300      	movs	r3, #0
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 800193e:	2205      	movs	r2, #5
 8001940:	4970      	ldr	r1, [pc, #448]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8001942:	487d      	ldr	r0, [pc, #500]	; (8001b38 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 8001944:	f7fe fffa 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton colSettingsBtn = PageButton(&next, 6, "pb5", 1, 0, 5);
 8001948:	2305      	movs	r3, #5
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	2300      	movs	r3, #0
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	2301      	movs	r3, #1
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 8001956:	2206      	movs	r2, #6
 8001958:	496a      	ldr	r1, [pc, #424]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 800195a:	4878      	ldr	r0, [pc, #480]	; (8001b3c <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 800195c:	f7fe ffee 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 8001960:	4c77      	ldr	r4, [pc, #476]	; (8001b40 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 8001962:	4975      	ldr	r1, [pc, #468]	; (8001b38 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff f85d 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 800196a:	f104 0314 	add.w	r3, r4, #20
 800196e:	4973      	ldr	r1, [pc, #460]	; (8001b3c <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f857 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
Page colorPage = Page(&next, 7, colorBtns, 0, colPageBtns, 2);
 8001976:	2302      	movs	r3, #2
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	4b71      	ldr	r3, [pc, #452]	; (8001b40 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	2300      	movs	r3, #0
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 8001984:	2207      	movs	r2, #7
 8001986:	495f      	ldr	r1, [pc, #380]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8001988:	486e      	ldr	r0, [pc, #440]	; (8001b44 <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 800198a:	f003 f979 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
PageButton patHomeBtn = PageButton(&next, 4, "pb1", 0, 0, 1);
 800198e:	2301      	movs	r3, #1
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	2300      	movs	r3, #0
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 800199c:	2204      	movs	r2, #4
 800199e:	4959      	ldr	r1, [pc, #356]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80019a0:	4869      	ldr	r0, [pc, #420]	; (8001b48 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 80019a2:	f7fe ffcb 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
PageButton patSettingsBtn = PageButton(&next, 5, "pb5", 1, 0, 5);
 80019a6:	2305      	movs	r3, #5
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	2300      	movs	r3, #0
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 80019b4:	2205      	movs	r2, #5
 80019b6:	4953      	ldr	r1, [pc, #332]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80019b8:	4864      	ldr	r0, [pc, #400]	; (8001b4c <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 80019ba:	f7fe ffbf 	bl	800093c <_ZN10PageButtonC1EP7NextionhPKchhh>
};
 80019be:	4c64      	ldr	r4, [pc, #400]	; (8001b50 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 80019c0:	4961      	ldr	r1, [pc, #388]	; (8001b48 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 80019c2:	4620      	mov	r0, r4
 80019c4:	f7ff f82e 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
 80019c8:	f104 0314 	add.w	r3, r4, #20
 80019cc:	495f      	ldr	r1, [pc, #380]	; (8001b4c <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f828 	bl	8000a24 <_ZN10PageButtonC1ERKS_>
Page patternPage = Page(&next, 7, NULL, 0, patPageBtns, 2);
 80019d4:	2302      	movs	r3, #2
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2300      	movs	r3, #0
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2300      	movs	r3, #0
 80019e2:	2207      	movs	r2, #7
 80019e4:	4947      	ldr	r1, [pc, #284]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80019e6:	485b      	ldr	r0, [pc, #364]	; (8001b54 <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 80019e8:	f003 f94a 	bl	8004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
};
 80019ec:	4c5a      	ldr	r4, [pc, #360]	; (8001b58 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 80019ee:	495b      	ldr	r1, [pc, #364]	; (8001b5c <_Z41__static_initialization_and_destruction_0ii+0xa44>)
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff f831 	bl	8000a58 <_ZN4PageC1ERKS_>
 80019f6:	3430      	adds	r4, #48	; 0x30
 80019f8:	4959      	ldr	r1, [pc, #356]	; (8001b60 <_Z41__static_initialization_and_destruction_0ii+0xa48>)
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff f82c 	bl	8000a58 <_ZN4PageC1ERKS_>
 8001a00:	3430      	adds	r4, #48	; 0x30
 8001a02:	4958      	ldr	r1, [pc, #352]	; (8001b64 <_Z41__static_initialization_and_destruction_0ii+0xa4c>)
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff f827 	bl	8000a58 <_ZN4PageC1ERKS_>
 8001a0a:	3430      	adds	r4, #48	; 0x30
 8001a0c:	4956      	ldr	r1, [pc, #344]	; (8001b68 <_Z41__static_initialization_and_destruction_0ii+0xa50>)
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff f822 	bl	8000a58 <_ZN4PageC1ERKS_>
 8001a14:	3430      	adds	r4, #48	; 0x30
 8001a16:	4955      	ldr	r1, [pc, #340]	; (8001b6c <_Z41__static_initialization_and_destruction_0ii+0xa54>)
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7ff f81d 	bl	8000a58 <_ZN4PageC1ERKS_>
 8001a1e:	3430      	adds	r4, #48	; 0x30
 8001a20:	4942      	ldr	r1, [pc, #264]	; (8001b2c <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f818 	bl	8000a58 <_ZN4PageC1ERKS_>
 8001a28:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001a2c:	4945      	ldr	r1, [pc, #276]	; (8001b44 <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f812 	bl	8000a58 <_ZN4PageC1ERKS_>
ScreenControl screenCtrl = ScreenControl(&next, pages);
 8001a34:	4a48      	ldr	r2, [pc, #288]	; (8001b58 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 8001a36:	4933      	ldr	r1, [pc, #204]	; (8001b04 <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8001a38:	484d      	ldr	r0, [pc, #308]	; (8001b70 <_Z41__static_initialization_and_destruction_0ii+0xa58>)
 8001a3a:	f000 fe0d 	bl	8002658 <_ZN13ScreenControlC1EP7NextionP4Page>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 81b6 	bne.w	8001db2 <_Z41__static_initialization_and_destruction_0ii+0xc9a>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f040 81b0 	bne.w	8001db2 <_Z41__static_initialization_and_destruction_0ii+0xc9a>
 8001a52:	4847      	ldr	r0, [pc, #284]	; (8001b70 <_Z41__static_initialization_and_destruction_0ii+0xa58>)
 8001a54:	f000 fe18 	bl	8002688 <_ZN13ScreenControlD1Ev>
Page pages[] = {
 8001a58:	4c46      	ldr	r4, [pc, #280]	; (8001b74 <_Z41__static_initialization_and_destruction_0ii+0xa5c>)
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 8001a5c:	429c      	cmp	r4, r3
 8001a5e:	d005      	beq.n	8001a6c <_Z41__static_initialization_and_destruction_0ii+0x954>
 8001a60:	3c30      	subs	r4, #48	; 0x30
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4620      	mov	r0, r4
 8001a68:	4798      	blx	r3
 8001a6a:	e7f6      	b.n	8001a5a <_Z41__static_initialization_and_destruction_0ii+0x942>
Page patternPage = Page(&next, 7, NULL, 0, patPageBtns, 2);
 8001a6c:	4839      	ldr	r0, [pc, #228]	; (8001b54 <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 8001a6e:	f003 fa43 	bl	8004ef8 <_ZN4PageD1Ev>
PageButton patPageBtns[] = {
 8001a72:	4c41      	ldr	r4, [pc, #260]	; (8001b78 <_Z41__static_initialization_and_destruction_0ii+0xa60>)
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d005      	beq.n	8001a86 <_Z41__static_initialization_and_destruction_0ii+0x96e>
 8001a7a:	3c14      	subs	r4, #20
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4620      	mov	r0, r4
 8001a82:	4798      	blx	r3
 8001a84:	e7f6      	b.n	8001a74 <_Z41__static_initialization_and_destruction_0ii+0x95c>
PageButton patSettingsBtn = PageButton(&next, 5, "pb5", 1, 0, 5);
 8001a86:	4831      	ldr	r0, [pc, #196]	; (8001b4c <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 8001a88:	f7fe fdb0 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton patHomeBtn = PageButton(&next, 4, "pb1", 0, 0, 1);
 8001a8c:	482e      	ldr	r0, [pc, #184]	; (8001b48 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 8001a8e:	f7fe fdad 	bl	80005ec <_ZN10PageButtonD1Ev>
Page colorPage = Page(&next, 7, colorBtns, 0, colPageBtns, 2);
 8001a92:	482c      	ldr	r0, [pc, #176]	; (8001b44 <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 8001a94:	f003 fa30 	bl	8004ef8 <_ZN4PageD1Ev>
PageButton colPageBtns[] = {
 8001a98:	4c38      	ldr	r4, [pc, #224]	; (8001b7c <_Z41__static_initialization_and_destruction_0ii+0xa64>)
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 8001a9c:	429c      	cmp	r4, r3
 8001a9e:	d005      	beq.n	8001aac <_Z41__static_initialization_and_destruction_0ii+0x994>
 8001aa0:	3c14      	subs	r4, #20
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	4798      	blx	r3
 8001aaa:	e7f6      	b.n	8001a9a <_Z41__static_initialization_and_destruction_0ii+0x982>
PageButton colSettingsBtn = PageButton(&next, 6, "pb5", 1, 0, 5);
 8001aac:	4823      	ldr	r0, [pc, #140]	; (8001b3c <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 8001aae:	f7fe fd9d 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton colHomeBtn = PageButton(&next, 5, "pb1", 0, 0, 1);
 8001ab2:	4821      	ldr	r0, [pc, #132]	; (8001b38 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 8001ab4:	f7fe fd9a 	bl	80005ec <_ZN10PageButtonD1Ev>
Button colorBtns[] = {
 8001ab8:	4c31      	ldr	r4, [pc, #196]	; (8001b80 <_Z41__static_initialization_and_destruction_0ii+0xa68>)
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 8001abc:	429c      	cmp	r4, r3
 8001abe:	d005      	beq.n	8001acc <_Z41__static_initialization_and_destruction_0ii+0x9b4>
 8001ac0:	3c18      	subs	r4, #24
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4798      	blx	r3
 8001aca:	e7f6      	b.n	8001aba <_Z41__static_initialization_and_destruction_0ii+0x9a2>
Button colChSelBtn = Button(&next, 0, "b0", 0, 2);
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 8001ace:	f002 ffef 	bl	8004ab0 <_ZN6ButtonD1Ev>
Page audioPage = Page(&next, 6, audBtns, 2, audPageBtns, 2);
 8001ad2:	4816      	ldr	r0, [pc, #88]	; (8001b2c <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 8001ad4:	f003 fa10 	bl	8004ef8 <_ZN4PageD1Ev>
Button audBtns[] = {
 8001ad8:	4c2a      	ldr	r4, [pc, #168]	; (8001b84 <_Z41__static_initialization_and_destruction_0ii+0xa6c>)
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 8001adc:	429c      	cmp	r4, r3
 8001ade:	d005      	beq.n	8001aec <_Z41__static_initialization_and_destruction_0ii+0x9d4>
 8001ae0:	3c18      	subs	r4, #24
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4798      	blx	r3
 8001aea:	e7f6      	b.n	8001ada <_Z41__static_initialization_and_destruction_0ii+0x9c2>
PageButton audPageBtns[] = {
 8001aec:	4c26      	ldr	r4, [pc, #152]	; (8001b88 <_Z41__static_initialization_and_destruction_0ii+0xa70>)
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 8001af0:	429c      	cmp	r4, r3
 8001af2:	d04b      	beq.n	8001b8c <_Z41__static_initialization_and_destruction_0ii+0xa74>
 8001af4:	3c14      	subs	r4, #20
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4620      	mov	r0, r4
 8001afc:	4798      	blx	r3
 8001afe:	e7f6      	b.n	8001aee <_Z41__static_initialization_and_destruction_0ii+0x9d6>
 8001b00:	0800eec0 	.word	0x0800eec0
 8001b04:	200000f0 	.word	0x200000f0
 8001b08:	20000978 	.word	0x20000978
 8001b0c:	0800ee88 	.word	0x0800ee88
 8001b10:	20000990 	.word	0x20000990
 8001b14:	0800ee8c 	.word	0x0800ee8c
 8001b18:	200009a8 	.word	0x200009a8
 8001b1c:	0800ee90 	.word	0x0800ee90
 8001b20:	200009bc 	.word	0x200009bc
 8001b24:	200009d0 	.word	0x200009d0
 8001b28:	200009f8 	.word	0x200009f8
 8001b2c:	20000a28 	.word	0x20000a28
 8001b30:	20000a58 	.word	0x20000a58
 8001b34:	20000a70 	.word	0x20000a70
 8001b38:	20000a88 	.word	0x20000a88
 8001b3c:	20000a9c 	.word	0x20000a9c
 8001b40:	20000ab0 	.word	0x20000ab0
 8001b44:	20000ad8 	.word	0x20000ad8
 8001b48:	20000b08 	.word	0x20000b08
 8001b4c:	20000b1c 	.word	0x20000b1c
 8001b50:	20000b30 	.word	0x20000b30
 8001b54:	20000b58 	.word	0x20000b58
 8001b58:	20000b88 	.word	0x20000b88
 8001b5c:	200002e4 	.word	0x200002e4
 8001b60:	20000394 	.word	0x20000394
 8001b64:	200006d4 	.word	0x200006d4
 8001b68:	200008d4 	.word	0x200008d4
 8001b6c:	20000948 	.word	0x20000948
 8001b70:	20000cd8 	.word	0x20000cd8
 8001b74:	20000cd8 	.word	0x20000cd8
 8001b78:	20000b58 	.word	0x20000b58
 8001b7c:	20000ad8 	.word	0x20000ad8
 8001b80:	20000a88 	.word	0x20000a88
 8001b84:	20000a28 	.word	0x20000a28
 8001b88:	200009f8 	.word	0x200009f8
PageButton audSettingsBtn = PageButton(&next, 16, "pb5", 1, 0, 5);
 8001b8c:	488b      	ldr	r0, [pc, #556]	; (8001dbc <_Z41__static_initialization_and_destruction_0ii+0xca4>)
 8001b8e:	f7fe fd2d 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton audHomeBtn = PageButton(&next, 15, "pb1", 0, 0, 1);
 8001b92:	488b      	ldr	r0, [pc, #556]	; (8001dc0 <_Z41__static_initialization_and_destruction_0ii+0xca8>)
 8001b94:	f7fe fd2a 	bl	80005ec <_ZN10PageButtonD1Ev>
Button audSrcJackBtn = Button(&next, 13, "b0", 3, 1);
 8001b98:	488a      	ldr	r0, [pc, #552]	; (8001dc4 <_Z41__static_initialization_and_destruction_0ii+0xcac>)
 8001b9a:	f002 ff89 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button audSrcXlrBtn = Button(&next, 12, "b7", 2, 1);
 8001b9e:	488a      	ldr	r0, [pc, #552]	; (8001dc8 <_Z41__static_initialization_and_destruction_0ii+0xcb0>)
 8001ba0:	f002 ff86 	bl	8004ab0 <_ZN6ButtonD1Ev>
Page settingsPage = Page(&next, 5, settBtns, 1, settPageBtns, 1);
 8001ba4:	4889      	ldr	r0, [pc, #548]	; (8001dcc <_Z41__static_initialization_and_destruction_0ii+0xcb4>)
 8001ba6:	f003 f9a7 	bl	8004ef8 <_ZN4PageD1Ev>
PageButton settPageBtns[] = {
 8001baa:	4c89      	ldr	r4, [pc, #548]	; (8001dd0 <_Z41__static_initialization_and_destruction_0ii+0xcb8>)
 8001bac:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0xcbc>)
 8001bae:	429c      	cmp	r4, r3
 8001bb0:	d005      	beq.n	8001bbe <_Z41__static_initialization_and_destruction_0ii+0xaa6>
 8001bb2:	3c14      	subs	r4, #20
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4798      	blx	r3
 8001bbc:	e7f6      	b.n	8001bac <_Z41__static_initialization_and_destruction_0ii+0xa94>
Button settBtns[] = {
 8001bbe:	4c86      	ldr	r4, [pc, #536]	; (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0xcc0>)
 8001bc0:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <_Z41__static_initialization_and_destruction_0ii+0xcc4>)
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	d005      	beq.n	8001bd2 <_Z41__static_initialization_and_destruction_0ii+0xaba>
 8001bc6:	3c18      	subs	r4, #24
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4798      	blx	r3
 8001bd0:	e7f6      	b.n	8001bc0 <_Z41__static_initialization_and_destruction_0ii+0xaa8>
Button saveBtn = Button(&next, 0, "b0", 0, 2);
 8001bd2:	4883      	ldr	r0, [pc, #524]	; (8001de0 <_Z41__static_initialization_and_destruction_0ii+0xcc8>)
 8001bd4:	f002 ff6c 	bl	8004ab0 <_ZN6ButtonD1Ev>
Page channelConfigPage = Page(&next, 4, chCfgBtns, 8, chCfgPageBtns, 2);
 8001bd8:	4882      	ldr	r0, [pc, #520]	; (8001de4 <_Z41__static_initialization_and_destruction_0ii+0xccc>)
 8001bda:	f003 f98d 	bl	8004ef8 <_ZN4PageD1Ev>
Button chCfgBtns[] = {
 8001bde:	4c82      	ldr	r4, [pc, #520]	; (8001de8 <_Z41__static_initialization_and_destruction_0ii+0xcd0>)
 8001be0:	4b82      	ldr	r3, [pc, #520]	; (8001dec <_Z41__static_initialization_and_destruction_0ii+0xcd4>)
 8001be2:	429c      	cmp	r4, r3
 8001be4:	d005      	beq.n	8001bf2 <_Z41__static_initialization_and_destruction_0ii+0xada>
 8001be6:	3c18      	subs	r4, #24
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4620      	mov	r0, r4
 8001bee:	4798      	blx	r3
 8001bf0:	e7f6      	b.n	8001be0 <_Z41__static_initialization_and_destruction_0ii+0xac8>
PageButton chCfgPageBtns[] = {
 8001bf2:	4c7f      	ldr	r4, [pc, #508]	; (8001df0 <_Z41__static_initialization_and_destruction_0ii+0xcd8>)
 8001bf4:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <_Z41__static_initialization_and_destruction_0ii+0xcdc>)
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	d005      	beq.n	8001c06 <_Z41__static_initialization_and_destruction_0ii+0xaee>
 8001bfa:	3c14      	subs	r4, #20
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4620      	mov	r0, r4
 8001c02:	4798      	blx	r3
 8001c04:	e7f6      	b.n	8001bf4 <_Z41__static_initialization_and_destruction_0ii+0xadc>
PageButton chCfgSettingsBtn = PageButton(&next, 4, "pb5", 1, 0, 5);
 8001c06:	487c      	ldr	r0, [pc, #496]	; (8001df8 <_Z41__static_initialization_and_destruction_0ii+0xce0>)
 8001c08:	f7fe fcf0 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton chCfgHomeBtn = PageButton(&next, 3, "pb1", 0, 0, 1);
 8001c0c:	487b      	ldr	r0, [pc, #492]	; (8001dfc <_Z41__static_initialization_and_destruction_0ii+0xce4>)
 8001c0e:	f7fe fced 	bl	80005ec <_ZN10PageButtonD1Ev>
Button ch8Btn = Button(&next, 13, "b7", 7, 2);
 8001c12:	487b      	ldr	r0, [pc, #492]	; (8001e00 <_Z41__static_initialization_and_destruction_0ii+0xce8>)
 8001c14:	f002 ff4c 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch7Btn = Button(&next, 13, "b6", 6, 2);
 8001c18:	487a      	ldr	r0, [pc, #488]	; (8001e04 <_Z41__static_initialization_and_destruction_0ii+0xcec>)
 8001c1a:	f002 ff49 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch6Btn = Button(&next, 13, "b5", 5, 2);
 8001c1e:	487a      	ldr	r0, [pc, #488]	; (8001e08 <_Z41__static_initialization_and_destruction_0ii+0xcf0>)
 8001c20:	f002 ff46 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch5Btn = Button(&next, 13, "b4", 4, 2);
 8001c24:	4879      	ldr	r0, [pc, #484]	; (8001e0c <_Z41__static_initialization_and_destruction_0ii+0xcf4>)
 8001c26:	f002 ff43 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch4Btn = Button(&next, 13, "b3", 3, 2);
 8001c2a:	4879      	ldr	r0, [pc, #484]	; (8001e10 <_Z41__static_initialization_and_destruction_0ii+0xcf8>)
 8001c2c:	f002 ff40 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch3Btn = Button(&next, 13, "b2", 2, 2);
 8001c30:	4878      	ldr	r0, [pc, #480]	; (8001e14 <_Z41__static_initialization_and_destruction_0ii+0xcfc>)
 8001c32:	f002 ff3d 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch2Btn = Button(&next, 13, "b1", 1, 2);
 8001c36:	4878      	ldr	r0, [pc, #480]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0xd00>)
 8001c38:	f002 ff3a 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button ch1Btn = Button(&next, 13, "b0", 0, 2);
 8001c3c:	4877      	ldr	r0, [pc, #476]	; (8001e1c <_Z41__static_initialization_and_destruction_0ii+0xd04>)
 8001c3e:	f002 ff37 	bl	8004ab0 <_ZN6ButtonD1Ev>
Page channelVisPage = Page(&next, 3, chVisBtns, 8, chVisPageBtns, 2, progBars, 8);
 8001c42:	4877      	ldr	r0, [pc, #476]	; (8001e20 <_Z41__static_initialization_and_destruction_0ii+0xd08>)
 8001c44:	f003 f958 	bl	8004ef8 <_ZN4PageD1Ev>
ProgressBar progBars[] = {
 8001c48:	4c76      	ldr	r4, [pc, #472]	; (8001e24 <_Z41__static_initialization_and_destruction_0ii+0xd0c>)
 8001c4a:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <_Z41__static_initialization_and_destruction_0ii+0xd10>)
 8001c4c:	429c      	cmp	r4, r3
 8001c4e:	d005      	beq.n	8001c5c <_Z41__static_initialization_and_destruction_0ii+0xb44>
 8001c50:	3c14      	subs	r4, #20
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4620      	mov	r0, r4
 8001c58:	4798      	blx	r3
 8001c5a:	e7f6      	b.n	8001c4a <_Z41__static_initialization_and_destruction_0ii+0xb32>
Button chVisBtns[] = {
 8001c5c:	4c73      	ldr	r4, [pc, #460]	; (8001e2c <_Z41__static_initialization_and_destruction_0ii+0xd14>)
 8001c5e:	4b74      	ldr	r3, [pc, #464]	; (8001e30 <_Z41__static_initialization_and_destruction_0ii+0xd18>)
 8001c60:	429c      	cmp	r4, r3
 8001c62:	d005      	beq.n	8001c70 <_Z41__static_initialization_and_destruction_0ii+0xb58>
 8001c64:	3c18      	subs	r4, #24
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4798      	blx	r3
 8001c6e:	e7f6      	b.n	8001c5e <_Z41__static_initialization_and_destruction_0ii+0xb46>
PageButton chVisPageBtns[] = {
 8001c70:	4c70      	ldr	r4, [pc, #448]	; (8001e34 <_Z41__static_initialization_and_destruction_0ii+0xd1c>)
 8001c72:	4b71      	ldr	r3, [pc, #452]	; (8001e38 <_Z41__static_initialization_and_destruction_0ii+0xd20>)
 8001c74:	429c      	cmp	r4, r3
 8001c76:	d005      	beq.n	8001c84 <_Z41__static_initialization_and_destruction_0ii+0xb6c>
 8001c78:	3c14      	subs	r4, #20
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4798      	blx	r3
 8001c82:	e7f6      	b.n	8001c72 <_Z41__static_initialization_and_destruction_0ii+0xb5a>
PageButton chVisSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5);
 8001c84:	486d      	ldr	r0, [pc, #436]	; (8001e3c <_Z41__static_initialization_and_destruction_0ii+0xd24>)
 8001c86:	f7fe fcb1 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton chVisHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1);
 8001c8a:	486d      	ldr	r0, [pc, #436]	; (8001e40 <_Z41__static_initialization_and_destruction_0ii+0xd28>)
 8001c8c:	f7fe fcae 	bl	80005ec <_ZN10PageButtonD1Ev>
ProgressBar ch8Bar = ProgressBar(&next, 16, "j7");
 8001c90:	486c      	ldr	r0, [pc, #432]	; (8001e44 <_Z41__static_initialization_and_destruction_0ii+0xd2c>)
 8001c92:	f7fe fcef 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch7Bar = ProgressBar(&next, 14, "j6");
 8001c96:	486c      	ldr	r0, [pc, #432]	; (8001e48 <_Z41__static_initialization_and_destruction_0ii+0xd30>)
 8001c98:	f7fe fcec 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch6Bar = ProgressBar(&next, 12, "j5");
 8001c9c:	486b      	ldr	r0, [pc, #428]	; (8001e4c <_Z41__static_initialization_and_destruction_0ii+0xd34>)
 8001c9e:	f7fe fce9 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch5Bar = ProgressBar(&next, 10, "j4");
 8001ca2:	486b      	ldr	r0, [pc, #428]	; (8001e50 <_Z41__static_initialization_and_destruction_0ii+0xd38>)
 8001ca4:	f7fe fce6 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch4Bar = ProgressBar(&next, 8, "j3");
 8001ca8:	486a      	ldr	r0, [pc, #424]	; (8001e54 <_Z41__static_initialization_and_destruction_0ii+0xd3c>)
 8001caa:	f7fe fce3 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch3Bar = ProgressBar(&next, 6, "j2");
 8001cae:	486a      	ldr	r0, [pc, #424]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0xd40>)
 8001cb0:	f7fe fce0 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch2Bar = ProgressBar(&next, 4, "j1");
 8001cb4:	4869      	ldr	r0, [pc, #420]	; (8001e5c <_Z41__static_initialization_and_destruction_0ii+0xd44>)
 8001cb6:	f7fe fcdd 	bl	8000674 <_ZN11ProgressBarD1Ev>
ProgressBar ch1Bar = ProgressBar(&next, 1, "j0");
 8001cba:	4869      	ldr	r0, [pc, #420]	; (8001e60 <_Z41__static_initialization_and_destruction_0ii+0xd48>)
 8001cbc:	f7fe fcda 	bl	8000674 <_ZN11ProgressBarD1Ev>
Button srcCh8Btn = Button(&next, 27, "b7", 7, 1);
 8001cc0:	4868      	ldr	r0, [pc, #416]	; (8001e64 <_Z41__static_initialization_and_destruction_0ii+0xd4c>)
 8001cc2:	f002 fef5 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh7Btn = Button(&next, 26, "b6", 6, 1);
 8001cc6:	4868      	ldr	r0, [pc, #416]	; (8001e68 <_Z41__static_initialization_and_destruction_0ii+0xd50>)
 8001cc8:	f002 fef2 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh6Btn = Button(&next, 25, "b5", 5, 1);
 8001ccc:	4867      	ldr	r0, [pc, #412]	; (8001e6c <_Z41__static_initialization_and_destruction_0ii+0xd54>)
 8001cce:	f002 feef 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh5Btn = Button(&next, 24, "b4", 4, 1);
 8001cd2:	4867      	ldr	r0, [pc, #412]	; (8001e70 <_Z41__static_initialization_and_destruction_0ii+0xd58>)
 8001cd4:	f002 feec 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh4Btn = Button(&next, 23, "b3", 3, 1);
 8001cd8:	4866      	ldr	r0, [pc, #408]	; (8001e74 <_Z41__static_initialization_and_destruction_0ii+0xd5c>)
 8001cda:	f002 fee9 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh3Btn = Button(&next, 22, "b2", 2, 1);
 8001cde:	4866      	ldr	r0, [pc, #408]	; (8001e78 <_Z41__static_initialization_and_destruction_0ii+0xd60>)
 8001ce0:	f002 fee6 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh2Btn = Button(&next, 21, "b1", 1, 1);
 8001ce4:	4865      	ldr	r0, [pc, #404]	; (8001e7c <_Z41__static_initialization_and_destruction_0ii+0xd64>)
 8001ce6:	f002 fee3 	bl	8004ab0 <_ZN6ButtonD1Ev>
Button srcCh1Btn = Button(&next, 3, "b0", 0, 1);
 8001cea:	4865      	ldr	r0, [pc, #404]	; (8001e80 <_Z41__static_initialization_and_destruction_0ii+0xd68>)
 8001cec:	f002 fee0 	bl	8004ab0 <_ZN6ButtonD1Ev>
Page runPage = Page(&next, 2, runBtns, 1, runPageBtns, 2);
 8001cf0:	4864      	ldr	r0, [pc, #400]	; (8001e84 <_Z41__static_initialization_and_destruction_0ii+0xd6c>)
 8001cf2:	f003 f901 	bl	8004ef8 <_ZN4PageD1Ev>
PageButton runPageBtns[] = {
 8001cf6:	4c64      	ldr	r4, [pc, #400]	; (8001e88 <_Z41__static_initialization_and_destruction_0ii+0xd70>)
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <_Z41__static_initialization_and_destruction_0ii+0xd74>)
 8001cfa:	429c      	cmp	r4, r3
 8001cfc:	d005      	beq.n	8001d0a <_Z41__static_initialization_and_destruction_0ii+0xbf2>
 8001cfe:	3c14      	subs	r4, #20
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4620      	mov	r0, r4
 8001d06:	4798      	blx	r3
 8001d08:	e7f6      	b.n	8001cf8 <_Z41__static_initialization_and_destruction_0ii+0xbe0>
PageButton runSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5);
 8001d0a:	4861      	ldr	r0, [pc, #388]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0xd78>)
 8001d0c:	f7fe fc6e 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton runHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1);
 8001d10:	4860      	ldr	r0, [pc, #384]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0xd7c>)
 8001d12:	f7fe fc6b 	bl	80005ec <_ZN10PageButtonD1Ev>
Button runBtns[] = {
 8001d16:	4c60      	ldr	r4, [pc, #384]	; (8001e98 <_Z41__static_initialization_and_destruction_0ii+0xd80>)
 8001d18:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0xd84>)
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	d005      	beq.n	8001d2a <_Z41__static_initialization_and_destruction_0ii+0xc12>
 8001d1e:	3c18      	subs	r4, #24
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4620      	mov	r0, r4
 8001d26:	4798      	blx	r3
 8001d28:	e7f6      	b.n	8001d18 <_Z41__static_initialization_and_destruction_0ii+0xc00>
Button runBtn = Button(&next, 2, "b0", 0, 1);
 8001d2a:	485d      	ldr	r0, [pc, #372]	; (8001ea0 <_Z41__static_initialization_and_destruction_0ii+0xd88>)
 8001d2c:	f002 fec0 	bl	8004ab0 <_ZN6ButtonD1Ev>
Page homePage = Page(&next, 1, NULL, 0, mainBtns, 7);
 8001d30:	485c      	ldr	r0, [pc, #368]	; (8001ea4 <_Z41__static_initialization_and_destruction_0ii+0xd8c>)
 8001d32:	f003 f8e1 	bl	8004ef8 <_ZN4PageD1Ev>
PageButton mainBtns[] = {
 8001d36:	4c5c      	ldr	r4, [pc, #368]	; (8001ea8 <_Z41__static_initialization_and_destruction_0ii+0xd90>)
 8001d38:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <_Z41__static_initialization_and_destruction_0ii+0xd94>)
 8001d3a:	429c      	cmp	r4, r3
 8001d3c:	d005      	beq.n	8001d4a <_Z41__static_initialization_and_destruction_0ii+0xc32>
 8001d3e:	3c14      	subs	r4, #20
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4620      	mov	r0, r4
 8001d46:	4798      	blx	r3
 8001d48:	e7f6      	b.n	8001d38 <_Z41__static_initialization_and_destruction_0ii+0xc20>
PageButton settPageBtn   = PageButton(&next, 2, "pb4", 1, 3, 5);
 8001d4a:	4859      	ldr	r0, [pc, #356]	; (8001eb0 <_Z41__static_initialization_and_destruction_0ii+0xd98>)
 8001d4c:	f7fe fc4e 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton colPageBtn    = PageButton(&next, 8, "pb6", 1, 2, 7);
 8001d50:	4858      	ldr	r0, [pc, #352]	; (8001eb4 <_Z41__static_initialization_and_destruction_0ii+0xd9c>)
 8001d52:	f7fe fc4b 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton patPageBtn    = PageButton(&next, 5, "pb7", 1, 1, 8);
 8001d56:	4858      	ldr	r0, [pc, #352]	; (8001eb8 <_Z41__static_initialization_and_destruction_0ii+0xda0>)
 8001d58:	f7fe fc48 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton audPageBtn    = PageButton(&next, 4, "pb5", 0, 3, 6);
 8001d5c:	4857      	ldr	r0, [pc, #348]	; (8001ebc <_Z41__static_initialization_and_destruction_0ii+0xda4>)
 8001d5e:	f7fe fc45 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton chCfgPageBtn  = PageButton(&next, 6, "pb3", 0, 2, 4);
 8001d62:	4857      	ldr	r0, [pc, #348]	; (8001ec0 <_Z41__static_initialization_and_destruction_0ii+0xda8>)
 8001d64:	f7fe fc42 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton chnPageBtn    = PageButton(&next, 1, "pb2", 0, 1, 3);
 8001d68:	4856      	ldr	r0, [pc, #344]	; (8001ec4 <_Z41__static_initialization_and_destruction_0ii+0xdac>)
 8001d6a:	f7fe fc3f 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton mainPageBtn   = PageButton(&next, 7, "pb1", 0, 0, 2);
 8001d6e:	4856      	ldr	r0, [pc, #344]	; (8001ec8 <_Z41__static_initialization_and_destruction_0ii+0xdb0>)
 8001d70:	f7fe fc3c 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton subMenuPageBtns[] = {
 8001d74:	4c55      	ldr	r4, [pc, #340]	; (8001ecc <_Z41__static_initialization_and_destruction_0ii+0xdb4>)
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <_Z41__static_initialization_and_destruction_0ii+0xdb8>)
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	d005      	beq.n	8001d88 <_Z41__static_initialization_and_destruction_0ii+0xc70>
 8001d7c:	3c14      	subs	r4, #20
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4620      	mov	r0, r4
 8001d84:	4798      	blx	r3
 8001d86:	e7f6      	b.n	8001d76 <_Z41__static_initialization_and_destruction_0ii+0xc5e>
PageButton settingsBtn = PageButton(&next, 2, "pb5", 1, 0, 5);
 8001d88:	4852      	ldr	r0, [pc, #328]	; (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0xdbc>)
 8001d8a:	f7fe fc2f 	bl	80005ec <_ZN10PageButtonD1Ev>
PageButton homeBtn = PageButton(&next, 1, "pb1", 0, 0, 1);
 8001d8e:	4852      	ldr	r0, [pc, #328]	; (8001ed8 <_Z41__static_initialization_and_destruction_0ii+0xdc0>)
 8001d90:	f7fe fc2c 	bl	80005ec <_ZN10PageButtonD1Ev>
PCA9634 ledA;
 8001d94:	4851      	ldr	r0, [pc, #324]	; (8001edc <_Z41__static_initialization_and_destruction_0ii+0xdc4>)
 8001d96:	f000 fb74 	bl	8002482 <_ZN7PCA9634D1Ev>
StripControl stripCtrl;
 8001d9a:	4851      	ldr	r0, [pc, #324]	; (8001ee0 <_Z41__static_initialization_and_destruction_0ii+0xdc8>)
 8001d9c:	f000 fece 	bl	8002b3c <_ZN12StripControlD1Ev>
StripCurrent stripCurr;
 8001da0:	4850      	ldr	r0, [pc, #320]	; (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0xdcc>)
 8001da2:	f000 ff4d 	bl	8002c40 <_ZN12StripCurrentD1Ev>
Nextion next = Nextion();
 8001da6:	4850      	ldr	r0, [pc, #320]	; (8001ee8 <_Z41__static_initialization_and_destruction_0ii+0xdd0>)
 8001da8:	f000 f8ee 	bl	8001f88 <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 8001dac:	484f      	ldr	r0, [pc, #316]	; (8001eec <_Z41__static_initialization_and_destruction_0ii+0xdd4>)
 8001dae:	f000 fdd9 	bl	8002964 <_ZN9ShiftRegsD1Ev>
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200009bc 	.word	0x200009bc
 8001dc0:	200009a8 	.word	0x200009a8
 8001dc4:	20000990 	.word	0x20000990
 8001dc8:	20000978 	.word	0x20000978
 8001dcc:	20000948 	.word	0x20000948
 8001dd0:	20000948 	.word	0x20000948
 8001dd4:	20000934 	.word	0x20000934
 8001dd8:	20000934 	.word	0x20000934
 8001ddc:	2000091c 	.word	0x2000091c
 8001de0:	20000904 	.word	0x20000904
 8001de4:	200008d4 	.word	0x200008d4
 8001de8:	200008d4 	.word	0x200008d4
 8001dec:	20000814 	.word	0x20000814
 8001df0:	20000814 	.word	0x20000814
 8001df4:	200007ec 	.word	0x200007ec
 8001df8:	200007d8 	.word	0x200007d8
 8001dfc:	200007c4 	.word	0x200007c4
 8001e00:	200007ac 	.word	0x200007ac
 8001e04:	20000794 	.word	0x20000794
 8001e08:	2000077c 	.word	0x2000077c
 8001e0c:	20000764 	.word	0x20000764
 8001e10:	2000074c 	.word	0x2000074c
 8001e14:	20000734 	.word	0x20000734
 8001e18:	2000071c 	.word	0x2000071c
 8001e1c:	20000704 	.word	0x20000704
 8001e20:	200006d4 	.word	0x200006d4
 8001e24:	200006d4 	.word	0x200006d4
 8001e28:	20000634 	.word	0x20000634
 8001e2c:	20000634 	.word	0x20000634
 8001e30:	20000574 	.word	0x20000574
 8001e34:	20000574 	.word	0x20000574
 8001e38:	2000054c 	.word	0x2000054c
 8001e3c:	20000538 	.word	0x20000538
 8001e40:	20000524 	.word	0x20000524
 8001e44:	20000510 	.word	0x20000510
 8001e48:	200004fc 	.word	0x200004fc
 8001e4c:	200004e8 	.word	0x200004e8
 8001e50:	200004d4 	.word	0x200004d4
 8001e54:	200004c0 	.word	0x200004c0
 8001e58:	200004ac 	.word	0x200004ac
 8001e5c:	20000498 	.word	0x20000498
 8001e60:	20000484 	.word	0x20000484
 8001e64:	2000046c 	.word	0x2000046c
 8001e68:	20000454 	.word	0x20000454
 8001e6c:	2000043c 	.word	0x2000043c
 8001e70:	20000424 	.word	0x20000424
 8001e74:	2000040c 	.word	0x2000040c
 8001e78:	200003f4 	.word	0x200003f4
 8001e7c:	200003dc 	.word	0x200003dc
 8001e80:	200003c4 	.word	0x200003c4
 8001e84:	20000394 	.word	0x20000394
 8001e88:	20000394 	.word	0x20000394
 8001e8c:	2000036c 	.word	0x2000036c
 8001e90:	20000358 	.word	0x20000358
 8001e94:	20000344 	.word	0x20000344
 8001e98:	20000344 	.word	0x20000344
 8001e9c:	2000032c 	.word	0x2000032c
 8001ea0:	20000314 	.word	0x20000314
 8001ea4:	200002e4 	.word	0x200002e4
 8001ea8:	200002e4 	.word	0x200002e4
 8001eac:	20000258 	.word	0x20000258
 8001eb0:	20000244 	.word	0x20000244
 8001eb4:	20000230 	.word	0x20000230
 8001eb8:	2000021c 	.word	0x2000021c
 8001ebc:	20000208 	.word	0x20000208
 8001ec0:	200001f4 	.word	0x200001f4
 8001ec4:	200001e0 	.word	0x200001e0
 8001ec8:	200001cc 	.word	0x200001cc
 8001ecc:	200001cc 	.word	0x200001cc
 8001ed0:	200001a4 	.word	0x200001a4
 8001ed4:	20000190 	.word	0x20000190
 8001ed8:	2000017c 	.word	0x2000017c
 8001edc:	2000014c 	.word	0x2000014c
 8001ee0:	20000128 	.word	0x20000128
 8001ee4:	20000110 	.word	0x20000110
 8001ee8:	200000f0 	.word	0x200000f0
 8001eec:	200000cc 	.word	0x200000cc

08001ef0 <_GLOBAL__sub_I_currentADCHandle>:
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff f90d 	bl	8001118 <_Z41__static_initialization_and_destruction_0ii>
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_GLOBAL__sub_D_currentADCHandle>:
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff f905 	bl	8001118 <_Z41__static_initialization_and_destruction_0ii>
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <_ZN7NextionC1Ev+0x74>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8001f1e:	2010      	movs	r0, #16
 8001f20:	f00c fa71 	bl	800e406 <_Znaj>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8001f2c:	2020      	movs	r0, #32
 8001f2e:	f00c fa6a 	bl	800e406 <_Znaj>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 8001f3a:	2010      	movs	r0, #16
 8001f3c:	f00c fa63 	bl	800e406 <_Znaj>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	611a      	str	r2, [r3, #16]
	memset(this->cmdBuffer, 0, NEXTION_BUFFER);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00c fab7 	bl	800e4c4 <memset>
	memset(this->recBuffer, 0, NEXTION_REC_SIZE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00c fab0 	bl	800e4c4 <memset>
	memset(this->buffer, 0, NEXTION_BUFFER);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00c faa9 	bl	800e4c4 <memset>
	this->index = 0;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	719a      	strb	r2, [r3, #6]
}
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800f008 	.word	0x0800f008

08001f88 <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <_ZN7NextionD1Ev+0x50>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
{
	delete[] this->cmdBuffer;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d004      	beq.n	8001fa8 <_ZN7NextionD1Ev+0x20>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00c fa2b 	bl	800e3fe <_ZdaPv>
	delete[] this->recBuffer;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <_ZN7NextionD1Ev+0x32>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00c fa22 	bl	800e3fe <_ZdaPv>
	delete[] this->buffer;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <_ZN7NextionD1Ev+0x44>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00c fa19 	bl	800e3fe <_ZdaPv>
}
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	0800f008 	.word	0x0800f008

08001fdc <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
}
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffcf 	bl	8001f88 <_ZN7NextionD1Ev>
 8001fea:	2120      	movs	r1, #32
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f00c fa04 	bl	800e3fa <_ZdlPvj>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks>:

void Nextion::Startup(UART_HandleTypeDef *uart, NextionCallbacks callbacks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	4639      	mov	r1, r7
 8002008:	e881 000c 	stmia.w	r1, {r2, r3}
	this->uart = uart;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	615a      	str	r2, [r3, #20]
	this->callbacks = callbacks;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3318      	adds	r3, #24
 8002016:	463a      	mov	r2, r7
 8002018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201c:	e883 0003 	stmia.w	r3, {r0, r1}
//	SetBaud(BAUD_RATE, false);
	HAL_UART_Receive(uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68d9      	ldr	r1, [r3, #12]
 8002024:	2364      	movs	r3, #100	; 0x64
 8002026:	2220      	movs	r2, #32
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f00a faf2 	bl	800c612 <HAL_UART_Receive>
	SendCommand("bkcmd=2");
 800202e:	4907      	ldr	r1, [pc, #28]	; (800204c <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks+0x50>)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f887 	bl	8002144 <_ZN7Nextion11SendCommandEPKc>
#if DISABLE_TOUCH == 1
	// There doesnt seem to be a global "Disable Touch" command...
	SendCommand("");
#endif
	HAL_Delay(50);
 8002036:	2032      	movs	r0, #50	; 0x32
 8002038:	f003 fa00 	bl	800543c <HAL_Delay>
	this->Reset();
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f807 	bl	8002050 <_ZN7Nextion5ResetEv>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	0800eee4 	.word	0x0800eee4

08002050 <_ZN7Nextion5ResetEv>:

void Nextion::Reset()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	SendCommand("rest");
 8002058:	4905      	ldr	r1, [pc, #20]	; (8002070 <_ZN7Nextion5ResetEv+0x20>)
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f872 	bl	8002144 <_ZN7Nextion11SendCommandEPKc>
	HAL_Delay(250);
 8002060:	20fa      	movs	r0, #250	; 0xfa
 8002062:	f003 f9eb 	bl	800543c <HAL_Delay>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	0800eeec 	.word	0x0800eeec

08002074 <_ZN7Nextion12CommandCheckEv>:

bool Nextion::CommandCheck()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	if (this->recBuffer[0] == 0 || this->recBuffer[0] == NEX_RET_CMD_FINISHED)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <_ZN7Nextion12CommandCheckEv+0x1c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <_ZN7Nextion12CommandCheckEv+0x20>
	{
		return true;
 8002090:	2301      	movs	r3, #1
 8002092:	e025      	b.n	80020e0 <_ZN7Nextion12CommandCheckEv+0x6c>
	}
	if (this->recBuffer[0] == NEX_RET_CURRENT_PAGE_ID_HEAD)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b66      	cmp	r3, #102	; 0x66
 800209c:	d109      	bne.n	80020b2 <_ZN7Nextion12CommandCheckEv+0x3e>
	{
		this->callbacks.PageChange(this->recBuffer[1]);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68d2      	ldr	r2, [r2, #12]
 80020a6:	3201      	adds	r2, #1
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4610      	mov	r0, r2
 80020ac:	4798      	blx	r3
		return true;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e016      	b.n	80020e0 <_ZN7Nextion12CommandCheckEv+0x6c>
	}
	if (this->recBuffer[0] == NEX_RET_EVENT_TOUCH_HEAD)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b65      	cmp	r3, #101	; 0x65
 80020ba:	d110      	bne.n	80020de <_ZN7Nextion12CommandCheckEv+0x6a>
	{
		this->callbacks.TouchEvent(this->recBuffer[1], this->recBuffer[2], this->recBuffer[3]);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68d2      	ldr	r2, [r2, #12]
 80020c4:	3201      	adds	r2, #1
 80020c6:	7810      	ldrb	r0, [r2, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68d2      	ldr	r2, [r2, #12]
 80020cc:	3202      	adds	r2, #2
 80020ce:	7811      	ldrb	r1, [r2, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68d2      	ldr	r2, [r2, #12]
 80020d4:	3203      	adds	r2, #3
 80020d6:	7812      	ldrb	r2, [r2, #0]
 80020d8:	4798      	blx	r3
		return true;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <_ZN7Nextion12CommandCheckEv+0x6c>
	}
	return false;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN7Nextion11SendCommandEv>:

bool Nextion::SendCommand()
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(this->uart, (unsigned char*)this->buffer, strlen(this->buffer), UART_TIMEOUT);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695c      	ldr	r4, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691d      	ldr	r5, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f887 	bl	8000210 <strlen>
 8002102:	4603      	mov	r3, r0
 8002104:	b29a      	uxth	r2, r3
 8002106:	2364      	movs	r3, #100	; 0x64
 8002108:	4629      	mov	r1, r5
 800210a:	4620      	mov	r0, r4
 800210c:	f00a f9ef 	bl	800c4ee <HAL_UART_Transmit>
	HAL_UART_Transmit(this->uart, NEXT_END, 3, UART_TIMEOUT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6958      	ldr	r0, [r3, #20]
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	2203      	movs	r2, #3
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <_ZN7Nextion11SendCommandEv+0x58>)
 800211a:	f00a f9e8 	bl	800c4ee <HAL_UART_Transmit>
	HAL_UART_Receive(this->uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6958      	ldr	r0, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	2220      	movs	r2, #32
 800212a:	f00a fa72 	bl	800c612 <HAL_UART_Receive>
	return CommandCheck();
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa0 	bl	8002074 <_ZN7Nextion12CommandCheckEv>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bdb0      	pop	{r4, r5, r7, pc}
 800213e:	bf00      	nop
 8002140:	0800effc 	.word	0x0800effc

08002144 <_ZN7Nextion11SendCommandEPKc>:

bool Nextion::SendCommand(const char *buffer)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(this->uart, (unsigned char*)buffer, strlen(buffer), UART_TIMEOUT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695c      	ldr	r4, [r3, #20]
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f7fe f85c 	bl	8000210 <strlen>
 8002158:	4603      	mov	r3, r0
 800215a:	b29a      	uxth	r2, r3
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	4620      	mov	r0, r4
 8002162:	f00a f9c4 	bl	800c4ee <HAL_UART_Transmit>
	HAL_UART_Transmit(this->uart, NEXT_END, 3, UART_TIMEOUT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6958      	ldr	r0, [r3, #20]
 800216a:	2364      	movs	r3, #100	; 0x64
 800216c:	2203      	movs	r2, #3
 800216e:	4909      	ldr	r1, [pc, #36]	; (8002194 <_ZN7Nextion11SendCommandEPKc+0x50>)
 8002170:	f00a f9bd 	bl	800c4ee <HAL_UART_Transmit>
	HAL_UART_Receive(this->uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6958      	ldr	r0, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68d9      	ldr	r1, [r3, #12]
 800217c:	2364      	movs	r3, #100	; 0x64
 800217e:	2220      	movs	r2, #32
 8002180:	f00a fa47 	bl	800c612 <HAL_UART_Receive>
	return CommandCheck();
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff75 	bl	8002074 <_ZN7Nextion12CommandCheckEv>
 800218a:	4603      	mov	r3, r0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	0800effc 	.word	0x0800effc

08002198 <_ZN7Nextion7SetPageEh>:
{
	SetPage(0);
}

void Nextion::SetPage(uint8_t id)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
	snprintf(this->buffer, 8, "page %d", id);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6918      	ldr	r0, [r3, #16]
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_ZN7Nextion7SetPageEh+0x28>)
 80021ac:	2108      	movs	r1, #8
 80021ae:	f00c fac5 	bl	800e73c <sniprintf>
	SendCommand();
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff98 	bl	80020e8 <_ZN7Nextion11SendCommandEv>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800ef18 	.word	0x0800ef18

080021c4 <_ZN7Nextion14SetProgressBarEhh>:
	snprintf(this->buffer, 12, "%s.val=%d", objId, value);
	SendCommand();
}

void Nextion::SetProgressBar(uint8_t objId, uint8_t value)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
 80021d0:	4613      	mov	r3, r2
 80021d2:	70bb      	strb	r3, [r7, #2]
	snprintf(this->buffer, 10, "j%d.val=%d", objId, value);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6918      	ldr	r0, [r3, #16]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <_ZN7Nextion14SetProgressBarEhh+0x34>)
 80021e2:	210a      	movs	r1, #10
 80021e4:	f00c faaa 	bl	800e73c <sniprintf>
	SendCommand();
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff7d 	bl	80020e8 <_ZN7Nextion11SendCommandEv>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	0800ef44 	.word	0x0800ef44

080021fc <_ZN7Nextion7SetTextEPKcS1_i>:
	snprintf(this->buffer, len + 10, "t%d.txt=\"%s\"", objId, str);
	SendCommand();
}

void Nextion::SetText(const char *objId, const char *str, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
	snprintf(this->buffer, len + 10, "%s.txt=\"%s\"", objId, str);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6918      	ldr	r0, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	330a      	adds	r3, #10
 8002212:	4619      	mov	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_ZN7Nextion7SetTextEPKcS1_i+0x34>)
 800221c:	f00c fa8e 	bl	800e73c <sniprintf>
	SendCommand();
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff ff61 	bl	80020e8 <_ZN7Nextion11SendCommandEv>
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	0800ef6c 	.word	0x0800ef6c

08002234 <_ZN7Nextion8SetClickEhb>:
	snprintf(this->buffer, 11, "%s.dis=%d", objId, scale);
	SendCommand();
}

void Nextion::SetClick(uint8_t id, bool en)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af02      	add	r7, sp, #8
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
 8002240:	4613      	mov	r3, r2
 8002242:	70bb      	strb	r3, [r7, #2]
	snprintf(this->buffer, 10, "click %d,%d", id, (uint8_t)en);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6918      	ldr	r0, [r3, #16]
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	78bb      	ldrb	r3, [r7, #2]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <_ZN7Nextion8SetClickEhb+0x34>)
 8002252:	210a      	movs	r1, #10
 8002254:	f00c fa72 	bl	800e73c <sniprintf>
	SendCommand();
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff45 	bl	80020e8 <_ZN7Nextion11SendCommandEv>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	0800efac 	.word	0x0800efac

0800226c <_ZN7Nextion19CheckForTouchEventsEv>:
		CommandCheck();
	}
}

HAL_StatusTypeDef Nextion::CheckForTouchEvents()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT) == HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6958      	ldr	r0, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68d9      	ldr	r1, [r3, #12]
 800227c:	2364      	movs	r3, #100	; 0x64
 800227e:	2220      	movs	r2, #32
 8002280:	f00a f9c7 	bl	800c612 <HAL_UART_Receive>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf0c      	ite	eq
 800228a:	2301      	moveq	r3, #1
 800228c:	2300      	movne	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <_ZN7Nextion19CheckForTouchEventsEv+0x38>
	{
		if (this->recBuffer[0] != 0)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <_ZN7Nextion19CheckForTouchEventsEv+0x38>
		{
			this->ParseCommands();
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f805 	bl	80022ae <_ZN7Nextion13ParseCommandsEv>
		}
	}
	return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZN7Nextion13ParseCommandsEv>:

void Nextion::ParseCommands()
{
 80022ae:	b590      	push	{r4, r7, lr}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NEXTION_REC_SIZE; ++i)
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b1f      	cmp	r3, #31
 80022be:	dc3e      	bgt.n	800233e <_ZN7Nextion13ParseCommandsEv+0x90>
	{
		uint8_t value = (uint8_t)this->recBuffer[i];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	72fb      	strb	r3, [r7, #11]
		if (this->recBuffer[i] == NEX_RET_EVENT_TOUCH_HEAD && this->recBuffer[i + 4] == NXT_END_VAL && this->recBuffer[i + 5] == NXT_END_VAL && this->recBuffer[i + 6] == NXT_END_VAL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b65      	cmp	r3, #101	; 0x65
 80022d8:	d12d      	bne.n	8002336 <_ZN7Nextion13ParseCommandsEv+0x88>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d125      	bne.n	8002336 <_ZN7Nextion13ParseCommandsEv+0x88>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3305      	adds	r3, #5
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2bff      	cmp	r3, #255	; 0xff
 80022f8:	d11d      	bne.n	8002336 <_ZN7Nextion13ParseCommandsEv+0x88>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3306      	adds	r3, #6
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d115      	bne.n	8002336 <_ZN7Nextion13ParseCommandsEv+0x88>
		{
			this->callbacks.TouchEvent(this->recBuffer[i + 1], this->recBuffer[i + 2], this->recBuffer[i + 3]);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68d1      	ldr	r1, [r2, #12]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	3201      	adds	r2, #1
 8002316:	440a      	add	r2, r1
 8002318:	7810      	ldrb	r0, [r2, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68d1      	ldr	r1, [r2, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	3202      	adds	r2, #2
 8002322:	440a      	add	r2, r1
 8002324:	7814      	ldrb	r4, [r2, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68d1      	ldr	r1, [r2, #12]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	3203      	adds	r2, #3
 800232e:	440a      	add	r2, r1
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4621      	mov	r1, r4
 8002334:	4798      	blx	r3
	for (int i = 0; i < NEXTION_REC_SIZE; ++i)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3301      	adds	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e7bd      	b.n	80022ba <_ZN7Nextion13ParseCommandsEv+0xc>
		}
	}
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}

08002346 <_ZN15PCA9634Settings7ToBytesEPhj>:
 * @brief Convert settings into two bytes and add them to the buffer.
 * @param buffer The buffer to store the settings in.
 * @param offset sets an offset from the start of the buffer to save the settings. Default = 0.
 */
void PCA9634Settings::ToBytes(uint8_t *buffer, size_t offset = 0)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
	uint8_t upper = (uint8_t)this->Enable;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	795b      	ldrb	r3, [r3, #5]
 8002356:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Driver << 2;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	791b      	ldrb	r3, [r3, #4]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	b25a      	sxtb	r2, r3
 8002360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002364:	4313      	orrs	r3, r2
 8002366:	b25b      	sxtb	r3, r3
 8002368:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Change << 3;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	78db      	ldrb	r3, [r3, #3]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	b25a      	sxtb	r2, r3
 8002372:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002376:	4313      	orrs	r3, r2
 8002378:	b25b      	sxtb	r3, r3
 800237a:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Invert << 4;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	789b      	ldrb	r3, [r3, #2]
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	b25a      	sxtb	r2, r3
 8002384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002388:	4313      	orrs	r3, r2
 800238a:	b25b      	sxtb	r3, r3
 800238c:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->GroupCtrl << 5;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	b25a      	sxtb	r2, r3
 8002396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800239a:	4313      	orrs	r3, r2
 800239c:	b25b      	sxtb	r3, r3
 800239e:	75fb      	strb	r3, [r7, #23]

	uint8_t lower = (uint8_t)this->AllCallEnable;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	799b      	ldrb	r3, [r3, #6]
 80023a4:	75bb      	strb	r3, [r7, #22]
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	79db      	ldrb	r3, [r3, #7]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	7a1b      	ldrb	r3, [r3, #8]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	b2db      	uxtb	r3, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 80023b6:	4413      	add	r3, r2
 80023b8:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn3 << 3);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	7a5b      	ldrb	r3, [r3, #9]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	b2db      	uxtb	r3, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 80023c2:	4413      	add	r3, r2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	b25a      	sxtb	r2, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 80023c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	75bb      	strb	r3, [r7, #22]
	lower |= (uint8_t)this->Sleep << 4;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	b25a      	sxtb	r2, r3
 80023da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80023de:	4313      	orrs	r3, r2
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	75bb      	strb	r3, [r7, #22]

	buffer[0 + offset] = lower;
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	7dba      	ldrb	r2, [r7, #22]
 80023ec:	701a      	strb	r2, [r3, #0]
	buffer[1 + offset] = upper;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3301      	adds	r3, #1
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4413      	add	r3, r2
 80023f6:	7dfa      	ldrb	r2, [r7, #23]
 80023f8:	701a      	strb	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>:
	return result;
}

/* PCA9634 Class Methods -----------------------------------------------------*/

PCA9634::PCA9634(uint8_t address, FMPI2C_HandleTypeDef *i2cBus, Pin oePin)
 8002406:	b082      	sub	sp, #8
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	460b      	mov	r3, r1
 8002416:	72fb      	strb	r3, [r7, #11]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	227f      	movs	r2, #127	; 0x7f
 800241c:	741a      	strb	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3311      	adds	r3, #17
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f9c2 	bl	80007ac <_ZN15PCA9634SettingsC1Ev>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	331c      	adds	r3, #28
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f954 	bl	80006da <_ZN3PinC1Ev>
{
	this->address = address << 1;
 8002432:	7afb      	ldrb	r3, [r7, #11]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	701a      	strb	r2, [r3, #0]
	this->i2cBus = i2cBus;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	605a      	str	r2, [r3, #4]
	this->channels = new uint8_t[RGB_CHANNELS];
 8002442:	2008      	movs	r0, #8
 8002444:	f00b ffdf 	bl	800e406 <_Znaj>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
	this->channelState = new PCA9634_LEDOUT[RGB_CHANNELS];
 8002450:	2008      	movs	r0, #8
 8002452:	f00b ffd8 	bl	800e406 <_Znaj>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	60da      	str	r2, [r3, #12]
	this->oePin = oePin;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	331c      	adds	r3, #28
 8002462:	f107 021c 	add.w	r2, r7, #28
 8002466:	6810      	ldr	r0, [r2, #0]
 8002468:	6018      	str	r0, [r3, #0]
 800246a:	8891      	ldrh	r1, [r2, #4]
 800246c:	7992      	ldrb	r2, [r2, #6]
 800246e:	8099      	strh	r1, [r3, #4]
 8002470:	719a      	strb	r2, [r3, #6]
}
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800247e:	b002      	add	sp, #8
 8002480:	4770      	bx	lr

08002482 <_ZN7PCA9634D1Ev>:

PCA9634::~PCA9634()
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
{
	delete[] channels;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <_ZN7PCA9634D1Ev+0x1a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	f00b ffb1 	bl	800e3fe <_ZdaPv>
}
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>:
 * @brief Update the current settings and send it to the PCA9634.
 * @param settings The new esttings to apply.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::ChangeSettings(PCA9634Settings settings)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	4638      	mov	r0, r7
 80024b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (SendSettings(settings) == HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f819 	bl	80024f0 <_ZN7PCA963412SendSettingsE15PCA9634Settings>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x3e>
	{
		this->settings = settings;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f103 0211 	add.w	r2, r3, #17
 80024d4:	463b      	mov	r3, r7
 80024d6:	cb03      	ldmia	r3!, {r0, r1}
 80024d8:	6010      	str	r0, [r2, #0]
 80024da:	6051      	str	r1, [r2, #4]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	8113      	strh	r3, [r2, #8]
		return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x40>
	}
	return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <_ZN7PCA963412SendSettingsE15PCA9634Settings>:
 * @brief PRIVATE - Sends the provided settings to the PCA9634.
 * @param settings The new esttings to send.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::SendSettings(PCA9634Settings settings)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4638      	mov	r0, r7
 80024fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buffer[3] = {0,0,0};
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <_ZN7PCA963412SendSettingsE15PCA9634Settings+0x4c>)
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4611      	mov	r1, r2
 8002508:	8019      	strh	r1, [r3, #0]
 800250a:	3302      	adds	r3, #2
 800250c:	0c12      	lsrs	r2, r2, #16
 800250e:	701a      	strb	r2, [r3, #0]
	settings.ToBytes(buffer, 1);
 8002510:	f107 0114 	add.w	r1, r7, #20
 8002514:	463b      	mov	r3, r7
 8002516:	2201      	movs	r2, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff14 	bl	8002346 <_ZN15PCA9634Settings7ToBytesEPhj>
	return WriteBytes(PCA9634_AUTO_INC::ALL_REGS, PCA9634_CTRL_REGISTER::MODE1, buffer, 3);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2203      	movs	r2, #3
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	2200      	movs	r2, #0
 8002528:	2104      	movs	r1, #4
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f808 	bl	8002540 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800efb8 	.word	0x0800efb8

08002540 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>:
 * @param inc Auto-Increment register option.
 * @param reg The starting register to send to.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::WriteBytes(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg, uint8_t *bytes, size_t len)
{
 8002540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	b08a      	sub	sp, #40	; 0x28
 8002546:	af02      	add	r7, sp, #8
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	72fb      	strb	r3, [r7, #11]
 8002550:	4613      	mov	r3, r2
 8002552:	72bb      	strb	r3, [r7, #10]
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
		temp[j] = bytes[i];
	}
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 8002554:	466b      	mov	r3, sp
 8002556:	469a      	mov	sl, r3
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
 8002558:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800255a:	617e      	str	r6, [r7, #20]
 800255c:	4633      	mov	r3, r6
 800255e:	3301      	adds	r3, #1
 8002560:	2200      	movs	r2, #0
 8002562:	4698      	mov	r8, r3
 8002564:	4691      	mov	r9, r2
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257a:	4633      	mov	r3, r6
 800257c:	3301      	adds	r3, #1
 800257e:	2200      	movs	r2, #0
 8002580:	461c      	mov	r4, r3
 8002582:	4615      	mov	r5, r2
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	00eb      	lsls	r3, r5, #3
 800258e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002592:	00e2      	lsls	r2, r4, #3
 8002594:	4633      	mov	r3, r6
 8002596:	3301      	adds	r3, #1
 8002598:	3307      	adds	r3, #7
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	ebad 0d03 	sub.w	sp, sp, r3
 80025a2:	ab02      	add	r3, sp, #8
 80025a4:	3300      	adds	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693c      	ldr	r4, [r7, #16]
 80025aa:	7aba      	ldrb	r2, [r7, #10]
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	4619      	mov	r1, r3
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f83a 	bl	800262a <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>
 80025b6:	4603      	mov	r3, r0
 80025b8:	7023      	strb	r3, [r4, #0]
 80025ba:	1c62      	adds	r2, r4, #1
 80025bc:	1e73      	subs	r3, r6, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db04      	blt.n	80025cc <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x8c>
 80025c2:	2100      	movs	r1, #0
 80025c4:	7011      	strb	r1, [r2, #0]
 80025c6:	3201      	adds	r2, #1
 80025c8:	3b01      	subs	r3, #1
 80025ca:	e7f8      	b.n	80025be <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x7e>
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80025cc:	2301      	movs	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d6:	3301      	adds	r3, #1
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20f      	bcs.n	80025fe <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0xbe>
		temp[j] = bytes[i];
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	7819      	ldrb	r1, [r3, #0]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	460a      	mov	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	e7ea      	b.n	80025d4 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x94>
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6858      	ldr	r0, [r3, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b299      	uxth	r1, r3
 8002608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260a:	b29b      	uxth	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	b29b      	uxth	r3, r3
 8002610:	22c8      	movs	r2, #200	; 0xc8
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	f004 fa1d 	bl	8006a54 <HAL_FMPI2C_Master_Transmit>
 800261a:	4603      	mov	r3, r0
 800261c:	bf00      	nop
 800261e:	46d5      	mov	sp, sl
}
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800262a <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>:
 * @param inc Auto-Increment register option.
 * @param reg Desired register.
 * @retval HAL status
 */
uint8_t PCA9634::CombineCommand(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
 8002636:	4613      	mov	r3, r2
 8002638:	70bb      	strb	r3, [r7, #2]
	return (uint8_t)reg | ((uint8_t)inc << 5);
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	015b      	lsls	r3, r3, #5
 800263e:	b25a      	sxtb	r2, r3
 8002640:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002644:	4313      	orrs	r3, r2
 8002646:	b25b      	sxtb	r3, r3
 8002648:	b2db      	uxtb	r3, r3
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <_ZN13ScreenControlC1EP7NextionP4Page>:
 *      Author: Daxxn
 */

#include "ScreenControl.h"

ScreenControl::ScreenControl(Nextion *nxt, Page *pages)
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <_ZN13ScreenControlC1EP7NextionP4Page+0x2c>)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]
{
	this->nxt = nxt;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	605a      	str	r2, [r3, #4]
	this->pages = pages;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]
}
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	0800f018 	.word	0x0800f018

08002688 <_ZN13ScreenControlD1Ev>:

ScreenControl::~ScreenControl()
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <_ZN13ScreenControlD1Ev+0x70>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
{
	this->nxt = NULL;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
	delete[] this->pages;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d024      	beq.n	80026ee <_ZN13ScreenControlD1Ev+0x66>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	3b04      	subs	r3, #4
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	18cc      	adds	r4, r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	429c      	cmp	r4, r3
 80026c0:	d005      	beq.n	80026ce <_ZN13ScreenControlD1Ev+0x46>
 80026c2:	3c30      	subs	r4, #48	; 0x30
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4620      	mov	r0, r4
 80026ca:	4798      	blx	r3
 80026cc:	e7f5      	b.n	80026ba <_ZN13ScreenControlD1Ev+0x32>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f1a3 0008 	sub.w	r0, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	3b04      	subs	r3, #4
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	3308      	adds	r3, #8
 80026e8:	4619      	mov	r1, r3
 80026ea:	f00b fe8a 	bl	800e402 <_ZdaPvj>
}
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	0800f018 	.word	0x0800f018

080026fc <_ZN13ScreenControlD0Ev>:
ScreenControl::~ScreenControl()
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
}
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ffbf 	bl	8002688 <_ZN13ScreenControlD1Ev>
 800270a:	2114      	movs	r1, #20
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f00b fe74 	bl	800e3fa <_ZdlPvj>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZN13ScreenControl4InitEv>:

HAL_StatusTypeDef ScreenControl::Init()
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	this->currentPage = &pages[0];
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]
	this->currentPage->Navigate(0, 0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fc83 	bl	8005040 <_ZN4Page8NavigateEaa>
	return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_ZN13ScreenControl12NavigateHorzEa>:

void ScreenControl::NavigateHorz(int8_t x)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
	this->currentPage->Navigate(x, 0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8002758:	2200      	movs	r2, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fc70 	bl	8005040 <_ZN4Page8NavigateEaa>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_ZN13ScreenControl12NavigateVertEa>:

void ScreenControl::NavigateVert(int8_t y)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
	this->currentPage->Navigate(0, y);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fc5e 	bl	8005040 <_ZN4Page8NavigateEaa>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_ZN13ScreenControl15ChangePageEventEh>:
{
	this->currentPage->Navigate(x, y);
}

void ScreenControl::ChangePageEvent(uint8_t pageID)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
	this->currentPage = &this->pages[pageID];
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	18ca      	adds	r2, r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
	this->currentPage->Init();
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fd48 	bl	8005246 <_ZN4Page4InitEv>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_ZN13ScreenControl10ChangePageEh>:

void ScreenControl::ChangePage(uint8_t pageID)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < PAGE_COUNT; ++i) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	dc1f      	bgt.n	8002814 <_ZN13ScreenControl10ChangePageEh+0x56>
		if (this->pages[i].ID == pageID)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	440b      	add	r3, r1
 80027e4:	791b      	ldrb	r3, [r3, #4]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d10f      	bne.n	800280c <_ZN13ScreenControl10ChangePageEh+0x4e>
		{
			this->currentPage = &this->pages[i];
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	18ca      	adds	r2, r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
			this->currentPage->Init();
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fd1e 	bl	8005246 <_ZN4Page4InitEv>
			return;
 800280a:	e003      	b.n	8002814 <_ZN13ScreenControl10ChangePageEh+0x56>
	for (int i = 0; i < PAGE_COUNT; ++i) {
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3301      	adds	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e7dc      	b.n	80027ce <_ZN13ScreenControl10ChangePageEh+0x10>
		}
	}
}
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_ZN13ScreenControl10TouchEventEhhh>:
	this->currentPage = &this->pages[index];
	this->currentPage->Init();
}

void ScreenControl::TouchEvent(uint8_t pageID, uint8_t compID, uint8_t event)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	4608      	mov	r0, r1
 8002824:	4611      	mov	r1, r2
 8002826:	461a      	mov	r2, r3
 8002828:	4603      	mov	r3, r0
 800282a:	70fb      	strb	r3, [r7, #3]
 800282c:	460b      	mov	r3, r1
 800282e:	70bb      	strb	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
	if (this->CheckPage(pageID))
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f83c 	bl	80028b6 <_ZN13ScreenControl9CheckPageEh>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d011      	beq.n	8002868 <_ZN13ScreenControl10TouchEventEhhh+0x4e>
	{
		Control* ctrl = this->currentPage->FindControl(compID);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	78ba      	ldrb	r2, [r7, #2]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fd21 	bl	8005294 <_ZN4Page11FindControlEh>
 8002852:	60f8      	str	r0, [r7, #12]
		if (ctrl != NULL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <_ZN13ScreenControl10TouchEventEhhh+0x4e>
		{
			ctrl->Act();
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3308      	adds	r3, #8
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4610      	mov	r0, r2
 8002866:	4798      	blx	r3
		}
	}
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZN13ScreenControl3ActEv>:

void ScreenControl::Act()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	this->currentPage->Act();
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3308      	adds	r3, #8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4610      	mov	r0, r2
 8002888:	4798      	blx	r3
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZN13ScreenControl10ChangeTextEPKcS1_h>:

void ScreenControl::ChangeText(const char *objId, const char* text, uint8_t len)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	70fb      	strb	r3, [r7, #3]
	this->nxt->SetText(objId, text, len);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6858      	ldr	r0, [r3, #4]
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	f7ff fca7 	bl	80021fc <_ZN7Nextion7SetTextEPKcS1_i>
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_ZN13ScreenControl9CheckPageEh>:

bool ScreenControl::CheckPage(uint8_t pageID)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
	return this->currentPage->ID == pageID;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	4639      	mov	r1, r7
 80028ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3308      	adds	r3, #8
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd feed 	bl	80006da <_ZN3PinC1Ev>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3310      	adds	r3, #16
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fee8 	bl	80006da <_ZN3PinC1Ev>
{
	this->_spi = spi;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3308      	adds	r3, #8
 8002914:	463a      	mov	r2, r7
 8002916:	6810      	ldr	r0, [r2, #0]
 8002918:	6018      	str	r0, [r3, #0]
 800291a:	8891      	ldrh	r1, [r2, #4]
 800291c:	7992      	ldrb	r2, [r2, #6]
 800291e:	8099      	strh	r1, [r3, #4]
 8002920:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3310      	adds	r3, #16
 8002926:	f107 0218 	add.w	r2, r7, #24
 800292a:	6810      	ldr	r0, [r2, #0]
 800292c:	6018      	str	r0, [r3, #0]
 800292e:	8891      	ldrh	r1, [r2, #4]
 8002930:	7992      	ldrb	r2, [r2, #6]
 8002932:	8099      	strh	r1, [r3, #4]
 8002934:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8002936:	2002      	movs	r0, #2
 8002938:	f00b fd65 	bl	800e406 <_Znaj>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	4613      	mov	r3, r2
 8002942:	2100      	movs	r1, #0
 8002944:	7019      	strb	r1, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	2100      	movs	r1, #0
 800294a:	7019      	strb	r1, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	831a      	strh	r2, [r3, #24]
}
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	0800f028 	.word	0x0800f028

08002964 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	4a08      	ldr	r2, [pc, #32]	; (8002990 <_ZN9ShiftRegsD1Ev+0x2c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <_ZN9ShiftRegsD1Ev+0x20>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4618      	mov	r0, r3
 8002980:	f00b fd3d 	bl	800e3fe <_ZdaPv>
}
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	0800f028 	.word	0x0800f028

08002994 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
}
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffe1 	bl	8002964 <_ZN9ShiftRegsD1Ev>
 80029a2:	2124      	movs	r1, #36	; 0x24
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f00b fd28 	bl	800e3fa <_ZdlPvj>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3308      	adds	r3, #8
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fa23 	bl	8002e0c <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3310      	adds	r3, #16
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fa1e 	bl	8002e0c <_ZN3Pin5ClearEv>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	460b      	mov	r3, r1
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d10d      	bne.n	8002a08 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8b1b      	ldrh	r3, [r3, #24]
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8002a06:	e00e      	b.n	8002a26 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8b1b      	ldrh	r3, [r3, #24]
 8002a0c:	b21a      	sxth	r2, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	831a      	strh	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f80f 	bl	8002a62 <_ZN9ShiftRegs8GetValueEj>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffbf 	bl	80029d8 <_ZN9ShiftRegs8SetValueEhj>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8b1b      	ldrh	r3, [r3, #24]
 8002a70:	461a      	mov	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	fa42 f303 	asr.w	r3, r2, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZN12StripControlC1EP12StripCurrent>:
 *      Author: Daxxn
 */

#include "StripControl.h"

StripControl::StripControl(StripCurrent *stripCurrent)
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <_ZN12StripControlC1EP12StripCurrent+0xa4>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fe1a 	bl	80006da <_ZN3PinC1Ev>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fe15 	bl	80006da <_ZN3PinC1Ev>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	331c      	adds	r3, #28
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fe10 	bl	80006da <_ZN3PinC1Ev>
{
	this->stripCurrent = stripCurrent;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	605a      	str	r2, [r3, #4]
	this->stripEShdnPin = Pin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, ACTIVE_LOW);
 8002ac0:	f107 0008 	add.w	r0, r7, #8
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	491a      	ldr	r1, [pc, #104]	; (8002b34 <_ZN12StripControlC1EP12StripCurrent+0xa8>)
 8002aca:	f7fd fe2c 	bl	8000726 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	331c      	adds	r3, #28
 8002ad2:	f107 0208 	add.w	r2, r7, #8
 8002ad6:	6810      	ldr	r0, [r2, #0]
 8002ad8:	6018      	str	r0, [r3, #0]
 8002ada:	8891      	ldrh	r1, [r2, #4]
 8002adc:	7992      	ldrb	r2, [r2, #6]
 8002ade:	8099      	strh	r1, [r3, #4]
 8002ae0:	719a      	strb	r2, [r3, #6]
	this->stripPGoodPin = Pin(STRIP_PG_GPIO_Port, STRIP_PG_Pin);
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	4912      	ldr	r1, [pc, #72]	; (8002b34 <_ZN12StripControlC1EP12StripCurrent+0xa8>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fe00 	bl	80006f0 <_ZN3PinC1EP12GPIO_TypeDeft>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3314      	adds	r3, #20
 8002af4:	f107 0210 	add.w	r2, r7, #16
 8002af8:	6810      	ldr	r0, [r2, #0]
 8002afa:	6018      	str	r0, [r3, #0]
 8002afc:	8891      	ldrh	r1, [r2, #4]
 8002afe:	7992      	ldrb	r2, [r2, #6]
 8002b00:	8099      	strh	r1, [r3, #4]
 8002b02:	719a      	strb	r2, [r3, #6]
	this->stripPowerPin = Pin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin);
 8002b04:	f107 0318 	add.w	r3, r7, #24
 8002b08:	2201      	movs	r2, #1
 8002b0a:	490b      	ldr	r1, [pc, #44]	; (8002b38 <_ZN12StripControlC1EP12StripCurrent+0xac>)
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fdef 	bl	80006f0 <_ZN3PinC1EP12GPIO_TypeDeft>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	330c      	adds	r3, #12
 8002b16:	f107 0218 	add.w	r2, r7, #24
 8002b1a:	6810      	ldr	r0, [r2, #0]
 8002b1c:	6018      	str	r0, [r3, #0]
 8002b1e:	8891      	ldrh	r1, [r2, #4]
 8002b20:	7992      	ldrb	r2, [r2, #6]
 8002b22:	8099      	strh	r1, [r3, #4]
 8002b24:	719a      	strb	r2, [r3, #6]
}
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	0800f038 	.word	0x0800f038
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00

08002b3c <_ZN12StripControlD1Ev>:

StripControl::~StripControl()
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <_ZN12StripControlD1Ev+0x24>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
{
	this->stripCurrent = NULL;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
}
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	0800f038 	.word	0x0800f038

08002b64 <_ZN12StripControlD0Ev>:
StripControl::~StripControl()
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
}
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffe5 	bl	8002b3c <_ZN12StripControlD1Ev>
 8002b72:	2124      	movs	r1, #36	; 0x24
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f00b fc40 	bl	800e3fa <_ZdlPvj>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZN12StripControl4InitEv>:

HAL_StatusTypeDef StripControl::Init()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	this->stripPowerPin.Clear();
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f93b 	bl	8002e0c <_ZN3Pin5ClearEv>
	this->stripEShdnPin.Clear();
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	331c      	adds	r3, #28
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f936 	bl	8002e0c <_ZN3Pin5ClearEv>
	this->pGood = this->stripPGoodPin.Read() == GPIO_PIN_SET;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f920 	bl	8002dea <_ZN3Pin4ReadEv>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	725a      	strb	r2, [r3, #9]
	return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_ZN12StripControl5CheckEv>:
		this->stripPowerPin.Write(enable);
	}
}

void StripControl::Check()
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
	StripCurrentStatus status = this->stripCurrent->CheckCurrents();
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f8b6 	bl	8002d44 <_ZN12StripCurrent13CheckCurrentsEv>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]
	if (status == OCP_CUT)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d10b      	bne.n	8002bfa <_ZN12StripControl5CheckEv+0x34>
	{
		this->stripEShdnPin.Write(GPIO_PIN_SET);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	331c      	adds	r3, #28
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 f8e1 	bl	8002db0 <_ZN3Pin5WriteE13GPIO_PinState>
		this->stripPowerPin.Write(GPIO_PIN_RESET);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f8db 	bl	8002db0 <_ZN3Pin5WriteE13GPIO_PinState>
	}
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>:
 */

#include "main.h"
#include <StripCurrent.h>

StripCurrent::StripCurrent(ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *timer)
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
{
	this->buffer = new uint8_t[STRIP_CURR_BUFFER_LEN];
 8002c0e:	206e      	movs	r0, #110	; 0x6e
 8002c10:	f00b fbf9 	bl	800e406 <_Znaj>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	60da      	str	r2, [r3, #12]
	this->adc = adcHandle;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	605a      	str	r2, [r3, #4]
	this->timer = timer;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
	this->averages = new uint8_t[ADC_CHANNELS];
 8002c28:	200b      	movs	r0, #11
 8002c2a:	f00b fbec 	bl	800e406 <_Znaj>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	615a      	str	r2, [r3, #20]
//	HAL_ADC_RegisterCallback(adc, HAL_ADC_CONVERSION_COMPLETE_CB_ID, callback);
}
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
{
	delete[] this->buffer;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <_ZN12StripCurrentD1Ev+0x1a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00b fbd2 	bl	800e3fe <_ZdaPv>
	delete[] this->averages;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <_ZN12StripCurrentD1Ev+0x2c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f00b fbc9 	bl	800e3fe <_ZdaPv>
}
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_ZN12StripCurrent4InitEv>:

HAL_StatusTypeDef StripCurrent::Init()
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(this->adc, (uint32_t *)this->buffer, STRIP_CURR_BUFFER_LEN) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6858      	ldr	r0, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	226e      	movs	r2, #110	; 0x6e
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f002 fd75 	bl	8005778 <HAL_ADC_Start_DMA>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <_ZN12StripCurrent4InitEv+0x2c>
	{
		return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e006      	b.n	8002cb0 <_ZN12StripCurrent4InitEv+0x3a>
	}
	return HAL_TIM_Base_Start(this->timer);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f008 fb3a 	bl	800b320 <HAL_TIM_Base_Start>
 8002cac:	4603      	mov	r3, r0
 8002cae:	bf00      	nop
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN12StripCurrent4CalcEv>:
{
	return buffer[ch];
}

void StripCurrent::Calc()
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	// Get each channels value from the DMA buffer
	// and calc the average.
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b0a      	cmp	r3, #10
 8002cc8:	dc27      	bgt.n	8002d1a <_ZN12StripCurrent4CalcEv+0x62>
		static uint16_t sum;
		for (int offset = 0; offset < STRIP_CURR_BUFFER_LEN; offset += ADC_CHANNELS) {
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b6d      	cmp	r3, #109	; 0x6d
 8002cd2:	dc11      	bgt.n	8002cf8 <_ZN12StripCurrent4CalcEv+0x40>
			sum += buffer[i + offset];
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	440a      	add	r2, r1
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <_ZN12StripCurrent4CalcEv+0x84>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <_ZN12StripCurrent4CalcEv+0x84>)
 8002cee:	801a      	strh	r2, [r3, #0]
		for (int offset = 0; offset < STRIP_CURR_BUFFER_LEN; offset += ADC_CHANNELS) {
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	330b      	adds	r3, #11
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	e7ea      	b.n	8002cce <_ZN12StripCurrent4CalcEv+0x16>
		}
		averages[i] = sum / SAMPLE_SIZE;
 8002cf8:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <_ZN12StripCurrent4CalcEv+0x84>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <_ZN12StripCurrent4CalcEv+0x88>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	b299      	uxth	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e7d4      	b.n	8002cc4 <_ZN12StripCurrent4CalcEv+0xc>
//		averages[i] += *buffer + (i * 8);
//		uint8_t aver = buffer[i * SAMPLE_SIZE];
//		averages[i] += buffer[i * SAMPLE_SIZE];
	}
	this->temp = averages[TEMP_INDEX];
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	7a5a      	ldrb	r2, [r3, #9]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	74da      	strb	r2, [r3, #19]
	this->vref = averages[VREF_INDEX];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	7a9a      	ldrb	r2, [r3, #10]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	749a      	strb	r2, [r3, #18]
//	this->CheckCurrents();
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000cec 	.word	0x20000cec
 8002d40:	cccccccd 	.word	0xcccccccd

08002d44 <_ZN12StripCurrent13CheckCurrentsEv>:

StripCurrentStatus StripCurrent::CheckCurrents()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
	StripCurrentStatus status = GOOD;
 8002d50:	2300      	movs	r3, #0
 8002d52:	72fb      	strb	r3, [r7, #11]
	while (i < STRIP_SIZE && status == GOOD)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	dc19      	bgt.n	8002d8e <_ZN12StripCurrent13CheckCurrentsEv+0x4a>
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <_ZN12StripCurrent13CheckCurrentsEv+0x4a>
	{
		if (this->averages[i] >= ABS_MAX_CURRENT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2bef      	cmp	r3, #239	; 0xef
 8002d6c:	d902      	bls.n	8002d74 <_ZN12StripCurrent13CheckCurrentsEv+0x30>
		{
			status = OCP_CUT;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	e008      	b.n	8002d86 <_ZN12StripCurrent13CheckCurrentsEv+0x42>
		}
		else if (this-> averages[i] >= OVER_CURRENT_THR)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2bc7      	cmp	r3, #199	; 0xc7
 8002d80:	d901      	bls.n	8002d86 <_ZN12StripCurrent13CheckCurrentsEv+0x42>
		{
			status = OC_WARN;
 8002d82:	2301      	movs	r3, #1
 8002d84:	72fb      	strb	r3, [r7, #11]
		}
		i++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
	while (i < STRIP_SIZE && status == GOOD)
 8002d8c:	e7e2      	b.n	8002d54 <_ZN12StripCurrent13CheckCurrentsEv+0x10>
	}
	if (status != GOOD && this->alertCallback != NULL)
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <_ZN12StripCurrent13CheckCurrentsEv+0x62>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <_ZN12StripCurrent13CheckCurrentsEv+0x62>
	{
		this->alertCallback(status);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	7afa      	ldrb	r2, [r7, #11]
 8002da2:	4610      	mov	r0, r2
 8002da4:	4798      	blx	r3
	}
	return status;
 8002da6:	7afb      	ldrb	r3, [r7, #11]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8899      	ldrh	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	799b      	ldrb	r3, [r3, #6]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e000      	b.n	8002ddc <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f005 f86d 	bl	8007ebc <HAL_GPIO_WritePin>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZN3Pin4ReadEv>:

GPIO_PinState Pin::Read()
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	889b      	ldrh	r3, [r3, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f005 f845 	bl	8007e8c <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8899      	ldrh	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	799b      	ldrb	r3, [r3, #6]
 8002e20:	461a      	mov	r2, r3
 8002e22:	f005 f84b 	bl	8007ebc <HAL_GPIO_WritePin>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d032      	beq.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x78>
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e44:	dc3a      	bgt.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
 8002e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e4a:	d020      	beq.n	8002e8e <HAL_GPIO_EXTI_Callback+0x60>
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e50:	dc34      	bgt.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e56:	d01d      	beq.n	8002e94 <HAL_GPIO_EXTI_Callback+0x66>
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5c:	dc2e      	bgt.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d01a      	beq.n	8002e9a <HAL_GPIO_EXTI_Callback+0x6c>
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	dc28      	bgt.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d023      	beq.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x8a>
 8002e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e74:	dc22      	bgt.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_GPIO_EXTI_Callback+0x84>
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	dc1c      	bgt.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d00c      	beq.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x72>
 8002e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8a:	d00f      	beq.n	8002eac <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 8002e8c:	e016      	b.n	8002ebc <HAL_GPIO_EXTI_Callback+0x8e>
			Enc1TurnInterruptCallback();
 8002e8e:	f7fe f935 	bl	80010fc <Enc1TurnInterruptCallback>
			break;
 8002e92:	e014      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			Enc2TurnInterruptCallback();
 8002e94:	f7fe f939 	bl	800110a <Enc2TurnInterruptCallback>
			break;
 8002e98:	e011      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			MenuUpInterruptCallback();
 8002e9a:	f7fe f8d1 	bl	8001040 <MenuUpInterruptCallback>
			break;
 8002e9e:	e00e      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			MenuDownInterruptCallback();
 8002ea0:	f7fe f8da 	bl	8001058 <MenuDownInterruptCallback>
			break;
 8002ea4:	e00b      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			MenuLeftInterruptCallback();
 8002ea6:	f7fe f8e1 	bl	800106c <MenuLeftInterruptCallback>
			break;
 8002eaa:	e008      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			MenuRightInterruptCallback();
 8002eac:	f7fe f8ea 	bl	8001084 <MenuRightInterruptCallback>
			break;
 8002eb0:	e005      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			MenuActInterruptCallback();
 8002eb2:	f7fe f8f1 	bl	8001098 <MenuActInterruptCallback>
			break;
 8002eb6:	e002      	b.n	8002ebe <HAL_GPIO_EXTI_Callback+0x90>
			MenuBackInterruptCallback();
 8002eb8:	f7fe f8fe 	bl	80010b8 <MenuBackInterruptCallback>
			break;
 8002ebc:	bf00      	nop
	}
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
	AudioFullCallback();
 8002ece:	f7fd fe54 	bl	8000b7a <AudioFullCallback>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_ADC_ConvCpltCallback>:
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
	AudioHalfFullCallback();
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	CurrentConvFullCallback();
 8002ee2:	f7fd fe51 	bl	8000b88 <CurrentConvFullCallback>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ef6:	f002 fa2f 	bl	8005358 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002efa:	f000 f86b 	bl	8002fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002efe:	f000 fdff 	bl	8003b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f02:	f000 fdbf 	bl	8003a84 <MX_DMA_Init>
  MX_ADC1_Init();
 8002f06:	f000 f8d1 	bl	80030ac <MX_ADC1_Init>
  MX_I2C1_Init();
 8002f0a:	f000 f9eb 	bl	80032e4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002f0e:	f000 fbdd 	bl	80036cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002f12:	f000 fd39 	bl	8003988 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f16:	f000 fd61 	bl	80039dc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002f1a:	f000 fc59 	bl	80037d0 <MX_TIM6_Init>
  MX_RTC_Init();
 8002f1e:	f000 fa3d 	bl	800339c <MX_RTC_Init>
  MX_SPI4_Init();
 8002f22:	f000 faed 	bl	8003500 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8002f26:	f000 f9a1 	bl	800326c <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8002f2a:	f000 fd81 	bl	8003a30 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002f2e:	f000 fb1d 	bl	800356c <MX_TIM1_Init>
  MX_I2S5_Init();
 8002f32:	f000 fa05 	bl	8003340 <MX_I2S5_Init>
  MX_SDIO_SD_Init();
 8002f36:	f000 fac3 	bl	80034c0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002f3a:	f00b f873 	bl	800e024 <MX_FATFS_Init>
  MX_TIM8_Init();
 8002f3e:	f000 fc85 	bl	800384c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


//  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_RESET);
  if (Init(
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <main+0xa4>)
 8002f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <main+0xa8>)
 8002f48:	930a      	str	r3, [sp, #40]	; 0x28
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <main+0xac>)
 8002f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <main+0xb0>)
 8002f50:	9308      	str	r3, [sp, #32]
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <main+0xb4>)
 8002f54:	9307      	str	r3, [sp, #28]
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <main+0xb8>)
 8002f58:	9306      	str	r3, [sp, #24]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <main+0xbc>)
 8002f5c:	9305      	str	r3, [sp, #20]
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <main+0xc0>)
 8002f60:	9304      	str	r3, [sp, #16]
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <main+0xc4>)
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <main+0xc8>)
 8002f68:	9302      	str	r3, [sp, #8]
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <main+0xcc>)
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <main+0xd0>)
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <main+0xd4>)
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <main+0xd8>)
 8002f76:	4915      	ldr	r1, [pc, #84]	; (8002fcc <main+0xdc>)
 8002f78:	4815      	ldr	r0, [pc, #84]	; (8002fd0 <main+0xe0>)
 8002f7a:	f7fd fe9b 	bl	8000cb4 <Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <main+0x98>

		  &hrtc,
		  &hsd
  ) != HAL_OK)
  {
	  Error_Handler();
 8002f84:	f000 ff04 	bl	8003d90 <Error_Handler>
  }

  // For Init tests
  InitTest();
 8002f88:	f7fd fff2 	bl	8000f70 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8002f8c:	f7fd fff8 	bl	8000f80 <Main>
 8002f90:	e7fc      	b.n	8002f8c <main+0x9c>
 8002f92:	bf00      	nop
 8002f94:	20000f7c 	.word	0x20000f7c
 8002f98:	20000f5c 	.word	0x20000f5c
 8002f9c:	20001200 	.word	0x20001200
 8002fa0:	200011bc 	.word	0x200011bc
 8002fa4:	20001178 	.word	0x20001178
 8002fa8:	20001130 	.word	0x20001130
 8002fac:	200010a0 	.word	0x200010a0
 8002fb0:	20001058 	.word	0x20001058
 8002fb4:	20001000 	.word	0x20001000
 8002fb8:	20000efc 	.word	0x20000efc
 8002fbc:	20000eb4 	.word	0x20000eb4
 8002fc0:	20000e60 	.word	0x20000e60
 8002fc4:	20000e00 	.word	0x20000e00
 8002fc8:	20000db4 	.word	0x20000db4
 8002fcc:	20000d54 	.word	0x20000d54
 8002fd0:	20000cf0 	.word	0x20000cf0

08002fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b094      	sub	sp, #80	; 0x50
 8002fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	2234      	movs	r2, #52	; 0x34
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f00b fa6e 	bl	800e4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe8:	f107 0308 	add.w	r3, r7, #8
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <SystemClock_Config+0xd0>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <SystemClock_Config+0xd0>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003006:	6413      	str	r3, [r2, #64]	; 0x40
 8003008:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <SystemClock_Config+0xd0>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003014:	2300      	movs	r3, #0
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <SystemClock_Config+0xd4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <SystemClock_Config+0xd4>)
 800301e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <SystemClock_Config+0xd4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003030:	2305      	movs	r3, #5
 8003032:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003038:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800303a:	2301      	movs	r3, #1
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800303e:	2302      	movs	r3, #2
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003048:	2308      	movs	r3, #8
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800304c:	2332      	movs	r3, #50	; 0x32
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003050:	2302      	movs	r3, #2
 8003052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003054:	2302      	movs	r3, #2
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003058:	2302      	movs	r3, #2
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	4618      	mov	r0, r3
 8003062:	f006 faa7 	bl	80095b4 <HAL_RCC_OscConfig>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800306c:	f000 fe90 	bl	8003d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003070:	230f      	movs	r3, #15
 8003072:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003074:	2302      	movs	r3, #2
 8003076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f005 fd44 	bl	8008b18 <HAL_RCC_ClockConfig>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003096:	f000 fe7b 	bl	8003d90 <Error_Handler>
  }
}
 800309a:	bf00      	nop
 800309c:	3750      	adds	r7, #80	; 0x50
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000

080030ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030b2:	463b      	mov	r3, r7
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030be:	4b69      	ldr	r3, [pc, #420]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030c0:	4a69      	ldr	r2, [pc, #420]	; (8003268 <MX_ADC1_Init+0x1bc>)
 80030c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80030ca:	4b66      	ldr	r3, [pc, #408]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80030d2:	4b64      	ldr	r3, [pc, #400]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030d8:	4b62      	ldr	r3, [pc, #392]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030de:	4b61      	ldr	r3, [pc, #388]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030f0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030f6:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80030fc:	4b59      	ldr	r3, [pc, #356]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80030fe:	220b      	movs	r2, #11
 8003100:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003102:	4b58      	ldr	r3, [pc, #352]	; (8003264 <MX_ADC1_Init+0x1b8>)
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800310a:	4b56      	ldr	r3, [pc, #344]	; (8003264 <MX_ADC1_Init+0x1b8>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003110:	4854      	ldr	r0, [pc, #336]	; (8003264 <MX_ADC1_Init+0x1b8>)
 8003112:	f002 f9b7 	bl	8005484 <HAL_ADC_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800311c:	f000 fe38 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003120:	2304      	movs	r3, #4
 8003122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800312c:	463b      	mov	r3, r7
 800312e:	4619      	mov	r1, r3
 8003130:	484c      	ldr	r0, [pc, #304]	; (8003264 <MX_ADC1_Init+0x1b8>)
 8003132:	f002 fc2f 	bl	8005994 <HAL_ADC_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800313c:	f000 fe28 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003140:	2305      	movs	r3, #5
 8003142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003144:	2302      	movs	r3, #2
 8003146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003148:	463b      	mov	r3, r7
 800314a:	4619      	mov	r1, r3
 800314c:	4845      	ldr	r0, [pc, #276]	; (8003264 <MX_ADC1_Init+0x1b8>)
 800314e:	f002 fc21 	bl	8005994 <HAL_ADC_ConfigChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003158:	f000 fe1a 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800315c:	2306      	movs	r3, #6
 800315e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003160:	2303      	movs	r3, #3
 8003162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003164:	463b      	mov	r3, r7
 8003166:	4619      	mov	r1, r3
 8003168:	483e      	ldr	r0, [pc, #248]	; (8003264 <MX_ADC1_Init+0x1b8>)
 800316a:	f002 fc13 	bl	8005994 <HAL_ADC_ConfigChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003174:	f000 fe0c 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003178:	2307      	movs	r3, #7
 800317a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800317c:	2304      	movs	r3, #4
 800317e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003180:	463b      	mov	r3, r7
 8003182:	4619      	mov	r1, r3
 8003184:	4837      	ldr	r0, [pc, #220]	; (8003264 <MX_ADC1_Init+0x1b8>)
 8003186:	f002 fc05 	bl	8005994 <HAL_ADC_ConfigChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8003190:	f000 fdfe 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003194:	2308      	movs	r3, #8
 8003196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003198:	2305      	movs	r3, #5
 800319a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800319c:	463b      	mov	r3, r7
 800319e:	4619      	mov	r1, r3
 80031a0:	4830      	ldr	r0, [pc, #192]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80031a2:	f002 fbf7 	bl	8005994 <HAL_ADC_ConfigChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80031ac:	f000 fdf0 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80031b0:	2309      	movs	r3, #9
 80031b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80031b4:	2306      	movs	r3, #6
 80031b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b8:	463b      	mov	r3, r7
 80031ba:	4619      	mov	r1, r3
 80031bc:	4829      	ldr	r0, [pc, #164]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80031be:	f002 fbe9 	bl	8005994 <HAL_ADC_ConfigChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80031c8:	f000 fde2 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80031cc:	230e      	movs	r3, #14
 80031ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80031d0:	2307      	movs	r3, #7
 80031d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031d4:	463b      	mov	r3, r7
 80031d6:	4619      	mov	r1, r3
 80031d8:	4822      	ldr	r0, [pc, #136]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80031da:	f002 fbdb 	bl	8005994 <HAL_ADC_ConfigChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80031e4:	f000 fdd4 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80031e8:	230f      	movs	r3, #15
 80031ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80031ec:	2308      	movs	r3, #8
 80031ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031f0:	463b      	mov	r3, r7
 80031f2:	4619      	mov	r1, r3
 80031f4:	481b      	ldr	r0, [pc, #108]	; (8003264 <MX_ADC1_Init+0x1b8>)
 80031f6:	f002 fbcd 	bl	8005994 <HAL_ADC_ConfigChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8003200:	f000 fdc6 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003204:	2300      	movs	r3, #0
 8003206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003208:	2309      	movs	r3, #9
 800320a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800320c:	463b      	mov	r3, r7
 800320e:	4619      	mov	r1, r3
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <MX_ADC1_Init+0x1b8>)
 8003212:	f002 fbbf 	bl	8005994 <HAL_ADC_ConfigChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 800321c:	f000 fdb8 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003220:	2310      	movs	r3, #16
 8003222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003224:	230a      	movs	r3, #10
 8003226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003228:	463b      	mov	r3, r7
 800322a:	4619      	mov	r1, r3
 800322c:	480d      	ldr	r0, [pc, #52]	; (8003264 <MX_ADC1_Init+0x1b8>)
 800322e:	f002 fbb1 	bl	8005994 <HAL_ADC_ConfigChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8003238:	f000 fdaa 	bl	8003d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800323c:	2311      	movs	r3, #17
 800323e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003240:	230b      	movs	r3, #11
 8003242:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003244:	2301      	movs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003248:	463b      	mov	r3, r7
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <MX_ADC1_Init+0x1b8>)
 800324e:	f002 fba1 	bl	8005994 <HAL_ADC_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8003258:	f000 fd9a 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000cf0 	.word	0x20000cf0
 8003268:	40012000 	.word	0x40012000

0800326c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 8003272:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <MX_FMPI2C1_Init+0x70>)
 8003274:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x0020081F;
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <MX_FMPI2C1_Init+0x74>)
 800327a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 8003284:	2201      	movs	r2, #1
 8003286:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80032a6:	480c      	ldr	r0, [pc, #48]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 80032a8:	f003 fb44 	bl	8006934 <HAL_FMPI2C_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80032b2:	f000 fd6d 	bl	8003d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032b6:	2100      	movs	r1, #0
 80032b8:	4807      	ldr	r0, [pc, #28]	; (80032d8 <MX_FMPI2C1_Init+0x6c>)
 80032ba:	f004 fbf5 	bl	8007aa8 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80032c4:	f000 fd64 	bl	8003d90 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 80032c8:	2001      	movs	r0, #1
 80032ca:	f004 fc39 	bl	8007b40 <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 80032ce:	2002      	movs	r0, #2
 80032d0:	f004 fc36 	bl	8007b40 <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000db4 	.word	0x20000db4
 80032dc:	40006000 	.word	0x40006000
 80032e0:	0020081f 	.word	0x0020081f

080032e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <MX_I2C1_Init+0x50>)
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <MX_I2C1_Init+0x54>)
 80032ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <MX_I2C1_Init+0x50>)
 80032f0:	4a12      	ldr	r2, [pc, #72]	; (800333c <MX_I2C1_Init+0x58>)
 80032f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <MX_I2C1_Init+0x50>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <MX_I2C1_Init+0x50>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <MX_I2C1_Init+0x50>)
 8003302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <MX_I2C1_Init+0x50>)
 800330a:	2200      	movs	r2, #0
 800330c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <MX_I2C1_Init+0x50>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <MX_I2C1_Init+0x50>)
 8003316:	2200      	movs	r2, #0
 8003318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <MX_I2C1_Init+0x50>)
 800331c:	2200      	movs	r2, #0
 800331e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003320:	4804      	ldr	r0, [pc, #16]	; (8003334 <MX_I2C1_Init+0x50>)
 8003322:	f004 fdfd 	bl	8007f20 <HAL_I2C_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800332c:	f000 fd30 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000e60 	.word	0x20000e60
 8003338:	40005400 	.word	0x40005400
 800333c:	000186a0 	.word	0x000186a0

08003340 <MX_I2S5_Init>:
  * @brief I2S5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S5_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END I2S5_Init 0 */

  /* USER CODE BEGIN I2S5_Init 1 */

  /* USER CODE END I2S5_Init 1 */
  hi2s5.Instance = SPI5;
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <MX_I2S5_Init+0x54>)
 8003346:	4a14      	ldr	r2, [pc, #80]	; (8003398 <MX_I2S5_Init+0x58>)
 8003348:	601a      	str	r2, [r3, #0]
  hi2s5.Init.Mode = I2S_MODE_MASTER_RX;
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <MX_I2S5_Init+0x54>)
 800334c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003350:	605a      	str	r2, [r3, #4]
  hi2s5.Init.Standard = I2S_STANDARD_PHILIPS;
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <MX_I2S5_Init+0x54>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  hi2s5.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003358:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <MX_I2S5_Init+0x54>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
  hi2s5.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <MX_I2S5_Init+0x54>)
 8003360:	2200      	movs	r2, #0
 8003362:	611a      	str	r2, [r3, #16]
  hi2s5.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <MX_I2S5_Init+0x54>)
 8003366:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800336a:	615a      	str	r2, [r3, #20]
  hi2s5.Init.CPOL = I2S_CPOL_LOW;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <MX_I2S5_Init+0x54>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  hi2s5.Init.ClockSource = I2S_CLOCK_PLL;
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <MX_I2S5_Init+0x54>)
 8003374:	2200      	movs	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
  hi2s5.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <MX_I2S5_Init+0x54>)
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s5) != HAL_OK)
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <MX_I2S5_Init+0x54>)
 8003380:	f004 ff12 	bl	80081a8 <HAL_I2S_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_I2S5_Init+0x4e>
  {
    Error_Handler();
 800338a:	f000 fd01 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S5_Init 2 */

  /* USER CODE END I2S5_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000eb4 	.word	0x20000eb4
 8003398:	40015000 	.word	0x40015000

0800339c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b090      	sub	sp, #64	; 0x40
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80033a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80033b6:	463b      	mov	r3, r7
 80033b8:	2228      	movs	r2, #40	; 0x28
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f00b f881 	bl	800e4c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033c4:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <MX_RTC_Init+0x120>)
 80033c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80033ce:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033d0:	227f      	movs	r2, #127	; 0x7f
 80033d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80033d4:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033d6:	22ff      	movs	r2, #255	; 0xff
 80033d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80033da:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033ec:	4832      	ldr	r0, [pc, #200]	; (80034b8 <MX_RTC_Init+0x11c>)
 80033ee:	f006 fb65 	bl	8009abc <HAL_RTC_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80033f8:	f000 fcca 	bl	8003d90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003414:	2300      	movs	r3, #0
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800341c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003420:	2201      	movs	r2, #1
 8003422:	4619      	mov	r1, r3
 8003424:	4824      	ldr	r0, [pc, #144]	; (80034b8 <MX_RTC_Init+0x11c>)
 8003426:	f006 fbbf 	bl	8009ba8 <HAL_RTC_SetTime>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003430:	f000 fcae 	bl	8003d90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800344c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003450:	2201      	movs	r2, #1
 8003452:	4619      	mov	r1, r3
 8003454:	4818      	ldr	r0, [pc, #96]	; (80034b8 <MX_RTC_Init+0x11c>)
 8003456:	f006 fc41 	bl	8009cdc <HAL_RTC_SetDate>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8003460:	f000 fc96 	bl	8003d90 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8003464:	2301      	movs	r3, #1
 8003466:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8003468:	2301      	movs	r3, #1
 800346a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800346c:	2300      	movs	r3, #0
 800346e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003470:	2300      	movs	r3, #0
 8003472:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8003474:	2300      	movs	r3, #0
 8003476:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003498:	463b      	mov	r3, r7
 800349a:	2201      	movs	r2, #1
 800349c:	4619      	mov	r1, r3
 800349e:	4806      	ldr	r0, [pc, #24]	; (80034b8 <MX_RTC_Init+0x11c>)
 80034a0:	f006 fca0 	bl	8009de4 <HAL_RTC_SetAlarm_IT>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80034aa:	f000 fc71 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	3740      	adds	r7, #64	; 0x40
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000f5c 	.word	0x20000f5c
 80034bc:	40002800 	.word	0x40002800

080034c0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <MX_SDIO_SD_Init+0x3c>)
 80034c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034d8:	2200      	movs	r2, #0
 80034da:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <MX_SDIO_SD_Init+0x38>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	20000f7c 	.word	0x20000f7c
 80034fc:	40012c00 	.word	0x40012c00

08003500 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <MX_SPI4_Init+0x64>)
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <MX_SPI4_Init+0x68>)
 8003508:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <MX_SPI4_Init+0x64>)
 800350c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003510:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <MX_SPI4_Init+0x64>)
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <MX_SPI4_Init+0x64>)
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <MX_SPI4_Init+0x64>)
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <MX_SPI4_Init+0x64>)
 8003526:	2200      	movs	r2, #0
 8003528:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <MX_SPI4_Init+0x64>)
 800352c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003530:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <MX_SPI4_Init+0x64>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <MX_SPI4_Init+0x64>)
 800353a:	2200      	movs	r2, #0
 800353c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <MX_SPI4_Init+0x64>)
 8003540:	2200      	movs	r2, #0
 8003542:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <MX_SPI4_Init+0x64>)
 8003546:	2200      	movs	r2, #0
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MX_SPI4_Init+0x64>)
 800354c:	220a      	movs	r2, #10
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003550:	4804      	ldr	r0, [pc, #16]	; (8003564 <MX_SPI4_Init+0x64>)
 8003552:	f007 fe0d 	bl	800b170 <HAL_SPI_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800355c:	f000 fc18 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20001000 	.word	0x20001000
 8003568:	40013400 	.word	0x40013400

0800356c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b096      	sub	sp, #88	; 0x58
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003580:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800358a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	611a      	str	r2, [r3, #16]
 800359a:	615a      	str	r2, [r3, #20]
 800359c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2220      	movs	r2, #32
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f00a ff8d 	bl	800e4c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035aa:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035ac:	4a46      	ldr	r2, [pc, #280]	; (80036c8 <MX_TIM1_Init+0x15c>)
 80035ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035b0:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c4:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035ca:	4b3e      	ldr	r3, [pc, #248]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035d6:	483b      	ldr	r0, [pc, #236]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035d8:	f007 fe53 	bl	800b282 <HAL_TIM_Base_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80035e2:	f000 fbd5 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035f0:	4619      	mov	r1, r3
 80035f2:	4834      	ldr	r0, [pc, #208]	; (80036c4 <MX_TIM1_Init+0x158>)
 80035f4:	f008 fa42 	bl	800ba7c <HAL_TIM_ConfigClockSource>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80035fe:	f000 fbc7 	bl	8003d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003602:	4830      	ldr	r0, [pc, #192]	; (80036c4 <MX_TIM1_Init+0x158>)
 8003604:	f007 fef4 	bl	800b3f0 <HAL_TIM_PWM_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800360e:	f000 fbbf 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800361a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800361e:	4619      	mov	r1, r3
 8003620:	4828      	ldr	r0, [pc, #160]	; (80036c4 <MX_TIM1_Init+0x158>)
 8003622:	f008 fe35 	bl	800c290 <HAL_TIMEx_MasterConfigSynchronization>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800362c:	f000 fbb0 	bl	8003d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003630:	2360      	movs	r3, #96	; 0x60
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003638:	2300      	movs	r3, #0
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800363c:	2300      	movs	r3, #0
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003640:	2300      	movs	r3, #0
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003644:	2300      	movs	r3, #0
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800364c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003650:	2200      	movs	r2, #0
 8003652:	4619      	mov	r1, r3
 8003654:	481b      	ldr	r0, [pc, #108]	; (80036c4 <MX_TIM1_Init+0x158>)
 8003656:	f008 f94f 	bl	800b8f8 <HAL_TIM_PWM_ConfigChannel>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003660:	f000 fb96 	bl	8003d90 <Error_Handler>
  }
  sConfigOC.Pulse = 32000;
 8003664:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800366a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366e:	2208      	movs	r2, #8
 8003670:	4619      	mov	r1, r3
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <MX_TIM1_Init+0x158>)
 8003674:	f008 f940 	bl	800b8f8 <HAL_TIM_PWM_ConfigChannel>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800367e:	f000 fb87 	bl	8003d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800369a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4807      	ldr	r0, [pc, #28]	; (80036c4 <MX_TIM1_Init+0x158>)
 80036a6:	f008 fe6f 	bl	800c388 <HAL_TIMEx_ConfigBreakDeadTime>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80036b0:	f000 fb6e 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036b4:	4803      	ldr	r0, [pc, #12]	; (80036c4 <MX_TIM1_Init+0x158>)
 80036b6:	f000 ff8d 	bl	80045d4 <HAL_TIM_MspPostInit>

}
 80036ba:	bf00      	nop
 80036bc:	3758      	adds	r7, #88	; 0x58
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20001058 	.word	0x20001058
 80036c8:	40010000 	.word	0x40010000

080036cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	; 0x38
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e0:	f107 0320 	add.w	r3, r7, #32
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
 80036f8:	615a      	str	r2, [r3, #20]
 80036fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036fc:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <MX_TIM3_Init+0xfc>)
 80036fe:	4a33      	ldr	r2, [pc, #204]	; (80037cc <MX_TIM3_Init+0x100>)
 8003700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <MX_TIM3_Init+0xfc>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x100;
 800370e:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003714:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <MX_TIM3_Init+0xfc>)
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003722:	4829      	ldr	r0, [pc, #164]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003724:	f007 fdad 	bl	800b282 <HAL_TIM_Base_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800372e:	f000 fb2f 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373c:	4619      	mov	r1, r3
 800373e:	4822      	ldr	r0, [pc, #136]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003740:	f008 f99c 	bl	800ba7c <HAL_TIM_ConfigClockSource>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800374a:	f000 fb21 	bl	8003d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800374e:	481e      	ldr	r0, [pc, #120]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003750:	f007 fe4e 	bl	800b3f0 <HAL_TIM_PWM_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800375a:	f000 fb19 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003766:	f107 0320 	add.w	r3, r7, #32
 800376a:	4619      	mov	r1, r3
 800376c:	4816      	ldr	r0, [pc, #88]	; (80037c8 <MX_TIM3_Init+0xfc>)
 800376e:	f008 fd8f 	bl	800c290 <HAL_TIMEx_MasterConfigSynchronization>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003778:	f000 fb0a 	bl	8003d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800377c:	2360      	movs	r3, #96	; 0x60
 800377e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	2200      	movs	r2, #0
 8003790:	4619      	mov	r1, r3
 8003792:	480d      	ldr	r0, [pc, #52]	; (80037c8 <MX_TIM3_Init+0xfc>)
 8003794:	f008 f8b0 	bl	800b8f8 <HAL_TIM_PWM_ConfigChannel>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800379e:	f000 faf7 	bl	8003d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	220c      	movs	r2, #12
 80037a6:	4619      	mov	r1, r3
 80037a8:	4807      	ldr	r0, [pc, #28]	; (80037c8 <MX_TIM3_Init+0xfc>)
 80037aa:	f008 f8a5 	bl	800b8f8 <HAL_TIM_PWM_ConfigChannel>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80037b4:	f000 faec 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037b8:	4803      	ldr	r0, [pc, #12]	; (80037c8 <MX_TIM3_Init+0xfc>)
 80037ba:	f000 ff0b 	bl	80045d4 <HAL_TIM_MspPostInit>

}
 80037be:	bf00      	nop
 80037c0:	3738      	adds	r7, #56	; 0x38
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200010a0 	.word	0x200010a0
 80037cc:	40000400 	.word	0x40000400

080037d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037d6:	463b      	mov	r3, r7
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <MX_TIM6_Init+0x74>)
 80037e0:	4a19      	ldr	r2, [pc, #100]	; (8003848 <MX_TIM6_Init+0x78>)
 80037e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <MX_TIM6_Init+0x74>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <MX_TIM6_Init+0x74>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <MX_TIM6_Init+0x74>)
 80037f2:	22ff      	movs	r2, #255	; 0xff
 80037f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <MX_TIM6_Init+0x74>)
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037fc:	4811      	ldr	r0, [pc, #68]	; (8003844 <MX_TIM6_Init+0x74>)
 80037fe:	f007 fd40 	bl	800b282 <HAL_TIM_Base_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003808:	f000 fac2 	bl	8003d90 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800380c:	2108      	movs	r1, #8
 800380e:	480d      	ldr	r0, [pc, #52]	; (8003844 <MX_TIM6_Init+0x74>)
 8003810:	f007 ff10 	bl	800b634 <HAL_TIM_OnePulse_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 800381a:	f000 fab9 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800381e:	2320      	movs	r3, #32
 8003820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003826:	463b      	mov	r3, r7
 8003828:	4619      	mov	r1, r3
 800382a:	4806      	ldr	r0, [pc, #24]	; (8003844 <MX_TIM6_Init+0x74>)
 800382c:	f008 fd30 	bl	800c290 <HAL_TIMEx_MasterConfigSynchronization>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 8003836:	f000 faab 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200010e8 	.word	0x200010e8
 8003848:	40001000 	.word	0x40001000

0800384c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b096      	sub	sp, #88	; 0x58
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003860:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	611a      	str	r2, [r3, #16]
 800387a:	615a      	str	r2, [r3, #20]
 800387c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	2220      	movs	r2, #32
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f00a fe1d 	bl	800e4c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <MX_TIM8_Init+0x134>)
 800388c:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <MX_TIM8_Init+0x138>)
 800388e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5000-1;
 8003890:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <MX_TIM8_Init+0x134>)
 8003892:	f241 3287 	movw	r2, #4999	; 0x1387
 8003896:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <MX_TIM8_Init+0x134>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 800389e:	4b38      	ldr	r3, [pc, #224]	; (8003980 <MX_TIM8_Init+0x134>)
 80038a0:	22f9      	movs	r2, #249	; 0xf9
 80038a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <MX_TIM8_Init+0x134>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80038aa:	4b35      	ldr	r3, [pc, #212]	; (8003980 <MX_TIM8_Init+0x134>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <MX_TIM8_Init+0x134>)
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80038b6:	4832      	ldr	r0, [pc, #200]	; (8003980 <MX_TIM8_Init+0x134>)
 80038b8:	f007 fce3 	bl	800b282 <HAL_TIM_Base_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80038c2:	f000 fa65 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80038cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038d0:	4619      	mov	r1, r3
 80038d2:	482b      	ldr	r0, [pc, #172]	; (8003980 <MX_TIM8_Init+0x134>)
 80038d4:	f008 f8d2 	bl	800ba7c <HAL_TIM_ConfigClockSource>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80038de:	f000 fa57 	bl	8003d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80038e2:	4827      	ldr	r0, [pc, #156]	; (8003980 <MX_TIM8_Init+0x134>)
 80038e4:	f007 fd84 	bl	800b3f0 <HAL_TIM_PWM_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80038ee:	f000 fa4f 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038f2:	2320      	movs	r3, #32
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038fe:	4619      	mov	r1, r3
 8003900:	481f      	ldr	r0, [pc, #124]	; (8003980 <MX_TIM8_Init+0x134>)
 8003902:	f008 fcc5 	bl	800c290 <HAL_TIMEx_MasterConfigSynchronization>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800390c:	f000 fa40 	bl	8003d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003910:	2360      	movs	r3, #96	; 0x60
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800391c:	2300      	movs	r3, #0
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800392c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003930:	2200      	movs	r2, #0
 8003932:	4619      	mov	r1, r3
 8003934:	4812      	ldr	r0, [pc, #72]	; (8003980 <MX_TIM8_Init+0x134>)
 8003936:	f007 ffdf 	bl	800b8f8 <HAL_TIM_PWM_ConfigChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003940:	f000 fa26 	bl	8003d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003944:	2300      	movs	r3, #0
 8003946:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800395c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4806      	ldr	r0, [pc, #24]	; (8003980 <MX_TIM8_Init+0x134>)
 8003968:	f008 fd0e 	bl	800c388 <HAL_TIMEx_ConfigBreakDeadTime>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003972:	f000 fa0d 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	3758      	adds	r7, #88	; 0x58
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20001130 	.word	0x20001130
 8003984:	40010400 	.word	0x40010400

08003988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <MX_USART1_UART_Init+0x50>)
 8003990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 8003994:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 80039ae:	220c      	movs	r2, #12
 80039b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_USART1_UART_Init+0x4c>)
 80039c0:	f008 fd48 	bl	800c454 <HAL_UART_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039ca:	f000 f9e1 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20001178 	.word	0x20001178
 80039d8:	40011000 	.word	0x40011000

080039dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <MX_USART2_UART_Init+0x50>)
 80039e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 80039e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 8003a02:	220c      	movs	r2, #12
 8003a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a12:	4805      	ldr	r0, [pc, #20]	; (8003a28 <MX_USART2_UART_Init+0x4c>)
 8003a14:	f008 fd1e 	bl	800c454 <HAL_UART_Init>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a1e:	f000 f9b7 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200011bc 	.word	0x200011bc
 8003a2c:	40004400 	.word	0x40004400

08003a30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <MX_USART3_UART_Init+0x50>)
 8003a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a56:	220c      	movs	r2, #12
 8003a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_USART3_UART_Init+0x4c>)
 8003a68:	f008 fcf4 	bl	800c454 <HAL_UART_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a72:	f000 f98d 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20001200 	.word	0x20001200
 8003a80:	40004800 	.word	0x40004800

08003a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <MX_DMA_Init+0x78>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <MX_DMA_Init+0x78>)
 8003a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <MX_DMA_Init+0x78>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <MX_DMA_Init+0x78>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <MX_DMA_Init+0x78>)
 8003ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <MX_DMA_Init+0x78>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	200c      	movs	r0, #12
 8003ac8:	f002 faed 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003acc:	200c      	movs	r0, #12
 8003ace:	f002 fb06 	bl	80060de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2038      	movs	r0, #56	; 0x38
 8003ad8:	f002 fae5 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003adc:	2038      	movs	r0, #56	; 0x38
 8003ade:	f002 fafe 	bl	80060de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	203b      	movs	r0, #59	; 0x3b
 8003ae8:	f002 fadd 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003aec:	203b      	movs	r0, #59	; 0x3b
 8003aee:	f002 faf6 	bl	80060de <HAL_NVIC_EnableIRQ>

}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800

08003b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	4b98      	ldr	r3, [pc, #608]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a97      	ldr	r2, [pc, #604]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b95      	ldr	r3, [pc, #596]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	4b91      	ldr	r3, [pc, #580]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a90      	ldr	r2, [pc, #576]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b8e      	ldr	r3, [pc, #568]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a89      	ldr	r2, [pc, #548]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b87      	ldr	r3, [pc, #540]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b83      	ldr	r3, [pc, #524]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a82      	ldr	r2, [pc, #520]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b80      	ldr	r3, [pc, #512]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b7c      	ldr	r3, [pc, #496]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a7b      	ldr	r2, [pc, #492]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b79      	ldr	r3, [pc, #484]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a74      	ldr	r2, [pc, #464]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b72      	ldr	r3, [pc, #456]	; (8003d7c <MX_GPIO_Init+0x27c>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STRIP_ESHDN_Pin|DMX_EN_Pin, GPIO_PIN_RESET);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f240 4101 	movw	r1, #1025	; 0x401
 8003bc4:	486e      	ldr	r0, [pc, #440]	; (8003d80 <MX_GPIO_Init+0x280>)
 8003bc6:	f004 f979 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f24e 0101 	movw	r1, #57345	; 0xe001
 8003bd0:	486c      	ldr	r0, [pc, #432]	; (8003d84 <MX_GPIO_Init+0x284>)
 8003bd2:	f004 f973 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bdc:	4868      	ldr	r0, [pc, #416]	; (8003d80 <MX_GPIO_Init+0x280>)
 8003bde:	f004 f96d 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LGT_EN3_GPIO_Port, LGT_EN3_Pin, GPIO_PIN_RESET);
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be8:	4867      	ldr	r0, [pc, #412]	; (8003d88 <MX_GPIO_Init+0x288>)
 8003bea:	f004 f967 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LGT_EN2_Pin|LGT_EN1_Pin, GPIO_PIN_RESET);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2103      	movs	r1, #3
 8003bf2:	4866      	ldr	r0, [pc, #408]	; (8003d8c <MX_GPIO_Init+0x28c>)
 8003bf4:	f004 f962 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JACK_SW_Pin */
  GPIO_InitStruct.Pin = JACK_SW_Pin;
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JACK_SW_GPIO_Port, &GPIO_InitStruct);
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4860      	ldr	r0, [pc, #384]	; (8003d8c <MX_GPIO_Init+0x28c>)
 8003c0c:	f003 ffba 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin DMX_EN_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin|DMX_EN_Pin;
 8003c10:	f240 5301 	movw	r3, #1281	; 0x501
 8003c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c16:	2301      	movs	r3, #1
 8003c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c22:	f107 031c 	add.w	r3, r7, #28
 8003c26:	4619      	mov	r1, r3
 8003c28:	4855      	ldr	r0, [pc, #340]	; (8003d80 <MX_GPIO_Init+0x280>)
 8003c2a:	f003 ffab 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VAA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VAA_PG_Pin|STRIP_PG_Pin;
 8003c2e:	230e      	movs	r3, #14
 8003c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	484f      	ldr	r0, [pc, #316]	; (8003d80 <MX_GPIO_Init+0x280>)
 8003c42:	f003 ff9f 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 8003c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	484b      	ldr	r0, [pc, #300]	; (8003d8c <MX_GPIO_Init+0x28c>)
 8003c5e:	f003 ff91 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8003c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	4844      	ldr	r0, [pc, #272]	; (8003d88 <MX_GPIO_Init+0x288>)
 8003c78:	f003 ff84 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8003c7c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8c:	f107 031c 	add.w	r3, r7, #28
 8003c90:	4619      	mov	r1, r3
 8003c92:	483d      	ldr	r0, [pc, #244]	; (8003d88 <MX_GPIO_Init+0x288>)
 8003c94:	f003 ff76 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 8003c98:	f641 7328 	movw	r3, #7976	; 0x1f28
 8003c9c:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	4619      	mov	r1, r3
 8003cae:	4835      	ldr	r0, [pc, #212]	; (8003d84 <MX_GPIO_Init+0x284>)
 8003cb0:	f003 ff68 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 8003cb4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	482d      	ldr	r0, [pc, #180]	; (8003d84 <MX_GPIO_Init+0x284>)
 8003cce:	f003 ff59 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 8003cd2:	f244 0301 	movw	r3, #16385	; 0x4001
 8003cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4826      	ldr	r0, [pc, #152]	; (8003d84 <MX_GPIO_Init+0x284>)
 8003cec:	f003 ff4a 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8003cfc:	f107 031c 	add.w	r3, r7, #28
 8003d00:	4619      	mov	r1, r3
 8003d02:	4820      	ldr	r0, [pc, #128]	; (8003d84 <MX_GPIO_Init+0x284>)
 8003d04:	f003 ff3e 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LGT_EN3_Pin */
  GPIO_InitStruct.Pin = LGT_EN3_Pin;
 8003d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LGT_EN3_GPIO_Port, &GPIO_InitStruct);
 8003d1a:	f107 031c 	add.w	r3, r7, #28
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4819      	ldr	r0, [pc, #100]	; (8003d88 <MX_GPIO_Init+0x288>)
 8003d22:	f003 ff2f 	bl	8007b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LGT_EN2_Pin LGT_EN1_Pin */
  GPIO_InitStruct.Pin = LGT_EN2_Pin|LGT_EN1_Pin;
 8003d26:	2303      	movs	r3, #3
 8003d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d36:	f107 031c 	add.w	r3, r7, #28
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4813      	ldr	r0, [pc, #76]	; (8003d8c <MX_GPIO_Init+0x28c>)
 8003d3e:	f003 ff21 	bl	8007b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	2009      	movs	r0, #9
 8003d48:	f002 f9ad 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d4c:	2009      	movs	r0, #9
 8003d4e:	f002 f9c6 	bl	80060de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	2017      	movs	r0, #23
 8003d58:	f002 f9a5 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d5c:	2017      	movs	r0, #23
 8003d5e:	f002 f9be 	bl	80060de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	2028      	movs	r0, #40	; 0x28
 8003d68:	f002 f99d 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d6c:	2028      	movs	r0, #40	; 0x28
 8003d6e:	f002 f9b6 	bl	80060de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d72:	bf00      	nop
 8003d74:	3730      	adds	r7, #48	; 0x30
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40020800 	.word	0x40020800
 8003d84:	40020c00 	.word	0x40020c00
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	40021000 	.word	0x40021000

08003d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d94:	b672      	cpsid	i
}
 8003d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d9e:	4803      	ldr	r0, [pc, #12]	; (8003dac <Error_Handler+0x1c>)
 8003da0:	f004 f88c 	bl	8007ebc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8003da4:	20c8      	movs	r0, #200	; 0xc8
 8003da6:	f001 fb49 	bl	800543c <HAL_Delay>
	  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8003daa:	e7f5      	b.n	8003d98 <Error_Handler+0x8>
 8003dac:	40020800 	.word	0x40020800

08003db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_MspInit+0x58>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <HAL_MspInit+0x58>)
 8003dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_MspInit+0x58>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_MspInit+0x58>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_MspInit+0x58>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_MspInit+0x58>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	2005      	movs	r0, #5
 8003df4:	f002 f957 	bl	80060a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003df8:	2005      	movs	r0, #5
 8003dfa:	f002 f970 	bl	80060de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	; 0x30
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f107 031c 	add.w	r3, r7, #28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a4d      	ldr	r2, [pc, #308]	; (8003f60 <HAL_ADC_MspInit+0x154>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f040 8093 	bne.w	8003f56 <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e40:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	4b44      	ldr	r3, [pc, #272]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4a43      	ldr	r2, [pc, #268]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6313      	str	r3, [r2, #48]	; 0x30
 8003e78:	4b3a      	ldr	r3, [pc, #232]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a35      	ldr	r2, [pc, #212]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	6313      	str	r3, [r2, #48]	; 0x30
 8003e94:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_ADC_MspInit+0x158>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOLID_LGTS_MON_Pin|STRIP_MON2_Pin|STRIP_MON1_Pin|STRIP_MON6_Pin
 8003ea0:	23f1      	movs	r3, #241	; 0xf1
 8003ea2:	61fb      	str	r3, [r7, #28]
                          |STRIP_MON5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	482d      	ldr	r0, [pc, #180]	; (8003f68 <HAL_ADC_MspInit+0x15c>)
 8003eb4:	f003 fe66 	bl	8007b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON4_Pin|STRIP_MON3_Pin;
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4828      	ldr	r0, [pc, #160]	; (8003f6c <HAL_ADC_MspInit+0x160>)
 8003ecc:	f003 fe5a 	bl	8007b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON8_Pin|STRIP_MON7_Pin;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003edc:	f107 031c 	add.w	r3, r7, #28
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4823      	ldr	r0, [pc, #140]	; (8003f70 <HAL_ADC_MspInit+0x164>)
 8003ee4:	f003 fe4e 	bl	8007b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_ADC_MspInit+0x16c>)
 8003eec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f00:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f2a:	4812      	ldr	r0, [pc, #72]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f2c:	f002 f8f2 	bl	8006114 <HAL_DMA_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8003f36:	f7ff ff2b 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f40:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <HAL_ADC_MspInit+0x168>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2012      	movs	r0, #18
 8003f4c:	f002 f8ab 	bl	80060a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003f50:	2012      	movs	r0, #18
 8003f52:	f002 f8c4 	bl	80060de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f56:	bf00      	nop
 8003f58:	3730      	adds	r7, #48	; 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40012000 	.word	0x40012000
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020800 	.word	0x40020800
 8003f70:	40020400 	.word	0x40020400
 8003f74:	20000d54 	.word	0x20000d54
 8003f78:	40026410 	.word	0x40026410

08003f7c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b09a      	sub	sp, #104	; 0x68
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f94:	f107 0318 	add.w	r3, r7, #24
 8003f98:	223c      	movs	r2, #60	; 0x3c
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f00a fa91 	bl	800e4c4 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <HAL_FMPI2C_MspInit+0x16c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	f040 8098 	bne.w	80040de <HAL_FMPI2C_MspInit+0x162>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8003fae:	2310      	movs	r3, #16
 8003fb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fb6:	f107 0318 	add.w	r3, r7, #24
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 ffca 	bl	8008f54 <HAL_RCCEx_PeriphCLKConfig>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8003fc6:	f7ff fee3 	bl	8003d90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	4a46      	ldr	r2, [pc, #280]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8003fd4:	f043 0302 	orr.w	r3, r3, #2
 8003fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fda:	4b44      	ldr	r3, [pc, #272]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004008:	2312      	movs	r3, #18
 800400a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800400c:	2301      	movs	r3, #1
 800400e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8004014:	2304      	movs	r3, #4
 8004016:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004018:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800401c:	4619      	mov	r1, r3
 800401e:	4834      	ldr	r0, [pc, #208]	; (80040f0 <HAL_FMPI2C_MspInit+0x174>)
 8004020:	f003 fdb0 	bl	8007b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004028:	2312      	movs	r3, #18
 800402a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800402c:	2301      	movs	r3, #1
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004030:	2303      	movs	r3, #3
 8004032:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8004034:	2304      	movs	r3, #4
 8004036:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800403c:	4619      	mov	r1, r3
 800403e:	482d      	ldr	r0, [pc, #180]	; (80040f4 <HAL_FMPI2C_MspInit+0x178>)
 8004040:	f003 fda0 	bl	8007b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004052:	6413      	str	r3, [r2, #64]	; 0x40
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_FMPI2C_MspInit+0x170>)
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_FMPI2C_MspInit+0x180>)
 8004064:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004068:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800406c:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004074:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 800407c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004080:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004090:	2200      	movs	r2, #0
 8004092:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 8004096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409a:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800409c:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 80040a2:	4815      	ldr	r0, [pc, #84]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 80040a4:	f002 f836 	bl	8006114 <HAL_DMA_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_FMPI2C_MspInit+0x136>
    {
      Error_Handler();
 80040ae:	f7ff fe6f 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
 80040b8:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <HAL_FMPI2C_MspInit+0x17c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2100      	movs	r1, #0
 80040c2:	205f      	movs	r0, #95	; 0x5f
 80040c4:	f001 ffef 	bl	80060a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 80040c8:	205f      	movs	r0, #95	; 0x5f
 80040ca:	f002 f808 	bl	80060de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2100      	movs	r1, #0
 80040d2:	2060      	movs	r0, #96	; 0x60
 80040d4:	f001 ffe7 	bl	80060a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 80040d8:	2060      	movs	r0, #96	; 0x60
 80040da:	f002 f800 	bl	80060de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80040de:	bf00      	nop
 80040e0:	3768      	adds	r7, #104	; 0x68
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40006000 	.word	0x40006000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020400 	.word	0x40020400
 80040f4:	40020800 	.word	0x40020800
 80040f8:	20000e00 	.word	0x20000e00
 80040fc:	40026028 	.word	0x40026028

08004100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <HAL_I2C_MspInit+0x84>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d12b      	bne.n	800417a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <HAL_I2C_MspInit+0x88>)
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6313      	str	r3, [r2, #48]	; 0x30
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800413e:	23c0      	movs	r3, #192	; 0xc0
 8004140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004142:	2312      	movs	r3, #18
 8004144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414a:	2303      	movs	r3, #3
 800414c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800414e:	2304      	movs	r3, #4
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4619      	mov	r1, r3
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <HAL_I2C_MspInit+0x8c>)
 800415a:	f003 fd13 	bl	8007b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a08      	ldr	r2, [pc, #32]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800417a:	bf00      	nop
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40005400 	.word	0x40005400
 8004188:	40023800 	.word	0x40023800
 800418c:	40020400 	.word	0x40020400

08004190 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b098      	sub	sp, #96	; 0x60
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	223c      	movs	r2, #60	; 0x3c
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f00a f987 	bl	800e4c4 <memset>
  if(hi2s->Instance==SPI5)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <HAL_I2S_MspInit+0x128>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d176      	bne.n	80042ae <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB2;
 80041c0:	2382      	movs	r3, #130	; 0x82
 80041c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 86;
 80041c4:	2356      	movs	r3, #86	; 0x56
 80041c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80041c8:	2308      	movs	r3, #8
 80041ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80041cc:	2304      	movs	r3, #4
 80041ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80041d0:	2302      	movs	r3, #2
 80041d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80041d8:	2300      	movs	r3, #0
 80041da:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041dc:	f107 0310 	add.w	r3, r7, #16
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 feb7 	bl	8008f54 <HAL_RCCEx_PeriphCLKConfig>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 80041ec:	f7ff fdd0 	bl	8003d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_I2S_MspInit+0x12c>)
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	4a30      	ldr	r2, [pc, #192]	; (80042bc <HAL_I2S_MspInit+0x12c>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fe:	6453      	str	r3, [r2, #68]	; 0x44
 8004200:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_I2S_MspInit+0x12c>)
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <HAL_I2S_MspInit+0x12c>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	4a29      	ldr	r2, [pc, #164]	; (80042bc <HAL_I2S_MspInit+0x12c>)
 8004216:	f043 0310 	orr.w	r3, r3, #16
 800421a:	6313      	str	r3, [r2, #48]	; 0x30
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_I2S_MspInit+0x12c>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
    /**I2S5 GPIO Configuration
    PE11     ------> I2S5_WS
    PE12     ------> I2S5_CK
    PE14     ------> I2S5_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8004228:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800423a:	2306      	movs	r3, #6
 800423c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800423e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004242:	4619      	mov	r1, r3
 8004244:	481e      	ldr	r0, [pc, #120]	; (80042c0 <HAL_I2S_MspInit+0x130>)
 8004246:	f003 fc9d 	bl	8007b84 <HAL_GPIO_Init>

    /* I2S5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 800424c:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <HAL_I2S_MspInit+0x138>)
 800424e:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 8004252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004256:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 8004260:	2200      	movs	r2, #0
 8004262:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 8004266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800426a:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 800426e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004272:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 8004276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800427a:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 800427e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004282:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 8004286:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800428a:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 800428e:	2200      	movs	r2, #0
 8004290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8004292:	480c      	ldr	r0, [pc, #48]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 8004294:	f001 ff3e 	bl	8006114 <HAL_DMA_Init>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 800429e:	f7ff fd77 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi5_rx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80042a8:	4a06      	ldr	r2, [pc, #24]	; (80042c4 <HAL_I2S_MspInit+0x134>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80042ae:	bf00      	nop
 80042b0:	3760      	adds	r7, #96	; 0x60
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40015000 	.word	0x40015000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40021000 	.word	0x40021000
 80042c4:	20000efc 	.word	0x20000efc
 80042c8:	40026458 	.word	0x40026458

080042cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b092      	sub	sp, #72	; 0x48
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042d4:	f107 030c 	add.w	r3, r7, #12
 80042d8:	223c      	movs	r2, #60	; 0x3c
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f00a f8f1 	bl	800e4c4 <memset>
  if(hrtc->Instance==RTC)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_RTC_MspInit+0x5c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d119      	bne.n	8004320 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042ec:	2308      	movs	r3, #8
 80042ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042f6:	f107 030c 	add.w	r3, r7, #12
 80042fa:	4618      	mov	r0, r3
 80042fc:	f004 fe2a 	bl	8008f54 <HAL_RCCEx_PeriphCLKConfig>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004306:	f7ff fd43 	bl	8003d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_RTC_MspInit+0x60>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004310:	2200      	movs	r2, #0
 8004312:	2100      	movs	r1, #0
 8004314:	2029      	movs	r0, #41	; 0x29
 8004316:	f001 fec6 	bl	80060a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800431a:	2029      	movs	r0, #41	; 0x29
 800431c:	f001 fedf 	bl	80060de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004320:	bf00      	nop
 8004322:	3748      	adds	r7, #72	; 0x48
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40002800 	.word	0x40002800
 800432c:	42470e3c 	.word	0x42470e3c

08004330 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b09a      	sub	sp, #104	; 0x68
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004348:	f107 0318 	add.w	r3, r7, #24
 800434c:	223c      	movs	r2, #60	; 0x3c
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f00a f8b7 	bl	800e4c4 <memset>
  if(hsd->Instance==SDIO)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a40      	ldr	r2, [pc, #256]	; (800445c <HAL_SD_MspInit+0x12c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d178      	bne.n	8004452 <HAL_SD_MspInit+0x122>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004360:	2360      	movs	r3, #96	; 0x60
 8004362:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004364:	2300      	movs	r3, #0
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004368:	2300      	movs	r3, #0
 800436a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800436c:	f107 0318 	add.w	r3, r7, #24
 8004370:	4618      	mov	r0, r3
 8004372:	f004 fdef 	bl	8008f54 <HAL_RCCEx_PeriphCLKConfig>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 800437c:	f7ff fd08 	bl	8003d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_SD_MspInit+0x130>)
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	4a35      	ldr	r2, [pc, #212]	; (8004460 <HAL_SD_MspInit+0x130>)
 800438a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800438e:	6453      	str	r3, [r2, #68]	; 0x44
 8004390:	4b33      	ldr	r3, [pc, #204]	; (8004460 <HAL_SD_MspInit+0x130>)
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	4a2e      	ldr	r2, [pc, #184]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6313      	str	r3, [r2, #48]	; 0x30
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	4a27      	ldr	r2, [pc, #156]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043c2:	f043 0308 	orr.w	r3, r3, #8
 80043c6:	6313      	str	r3, [r2, #48]	; 0x30
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	4b21      	ldr	r3, [pc, #132]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	4a20      	ldr	r2, [pc, #128]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	6313      	str	r3, [r2, #48]	; 0x30
 80043e4:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_SD_MspInit+0x130>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fe:	2303      	movs	r3, #3
 8004400:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004402:	230c      	movs	r3, #12
 8004404:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004406:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800440a:	4619      	mov	r1, r3
 800440c:	4815      	ldr	r0, [pc, #84]	; (8004464 <HAL_SD_MspInit+0x134>)
 800440e:	f003 fbb9 	bl	8007b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004412:	2304      	movs	r3, #4
 8004414:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441e:	2303      	movs	r3, #3
 8004420:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004422:	230c      	movs	r3, #12
 8004424:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004426:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800442a:	4619      	mov	r1, r3
 800442c:	480e      	ldr	r0, [pc, #56]	; (8004468 <HAL_SD_MspInit+0x138>)
 800442e:	f003 fba9 	bl	8007b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004432:	2310      	movs	r3, #16
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443e:	2303      	movs	r3, #3
 8004440:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004442:	230c      	movs	r3, #12
 8004444:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004446:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800444a:	4619      	mov	r1, r3
 800444c:	4807      	ldr	r0, [pc, #28]	; (800446c <HAL_SD_MspInit+0x13c>)
 800444e:	f003 fb99 	bl	8007b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004452:	bf00      	nop
 8004454:	3768      	adds	r7, #104	; 0x68
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40023800 	.word	0x40023800
 8004464:	40020800 	.word	0x40020800
 8004468:	40020c00 	.word	0x40020c00
 800446c:	40020400 	.word	0x40020400

08004470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_SPI_MspInit+0x84>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d12b      	bne.n	80044ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <HAL_SPI_MspInit+0x88>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_SPI_MspInit+0x88>)
 800449c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044a0:	6453      	str	r3, [r2, #68]	; 0x44
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_SPI_MspInit+0x88>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_SPI_MspInit+0x88>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <HAL_SPI_MspInit+0x88>)
 80044b8:	f043 0310 	orr.w	r3, r3, #16
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_SPI_MspInit+0x88>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GRAPH_CLK_Pin|GRAPH_SDI_Pin;
 80044ca:	2344      	movs	r3, #68	; 0x44
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80044da:	2305      	movs	r3, #5
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4619      	mov	r1, r3
 80044e4:	4805      	ldr	r0, [pc, #20]	; (80044fc <HAL_SPI_MspInit+0x8c>)
 80044e6:	f003 fb4d 	bl	8007b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80044ea:	bf00      	nop
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40013400 	.word	0x40013400
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40021000 	.word	0x40021000

08004500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_TIM_Base_MspInit+0xc0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6453      	str	r3, [r2, #68]	; 0x44
 8004522:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800452e:	e042      	b.n	80045b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <HAL_TIM_Base_MspInit+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
}
 8004556:	e02e      	b.n	80045b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_TIM_Base_MspInit+0xcc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d116      	bne.n	8004590 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 800456c:	f043 0310 	orr.w	r3, r3, #16
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	2100      	movs	r1, #0
 8004582:	2036      	movs	r0, #54	; 0x36
 8004584:	f001 fd8f 	bl	80060a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004588:	2036      	movs	r0, #54	; 0x36
 800458a:	f001 fda8 	bl	80060de <HAL_NVIC_EnableIRQ>
}
 800458e:	e012      	b.n	80045b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <HAL_TIM_Base_MspInit+0xd0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10d      	bne.n	80045b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	6453      	str	r3, [r2, #68]	; 0x44
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_TIM_Base_MspInit+0xc4>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40001000 	.word	0x40001000
 80045d0:	40010400 	.word	0x40010400

080045d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <HAL_TIM_MspPostInit+0xb4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d11f      	bne.n	8004636 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	4b24      	ldr	r3, [pc, #144]	; (800468c <HAL_TIM_MspPostInit+0xb8>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a23      	ldr	r2, [pc, #140]	; (800468c <HAL_TIM_MspPostInit+0xb8>)
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
 8004606:	4b21      	ldr	r3, [pc, #132]	; (800468c <HAL_TIM_MspPostInit+0xb8>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = XLR_SEL_IND_Pin|HP_SEL_IND_Pin;
 8004612:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8004616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004618:	2302      	movs	r3, #2
 800461a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004620:	2300      	movs	r3, #0
 8004622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004624:	2301      	movs	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4619      	mov	r1, r3
 800462e:	4818      	ldr	r0, [pc, #96]	; (8004690 <HAL_TIM_MspPostInit+0xbc>)
 8004630:	f003 faa8 	bl	8007b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004634:	e023      	b.n	800467e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIM_MspPostInit+0xc0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d11e      	bne.n	800467e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <HAL_TIM_MspPostInit+0xb8>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	4a10      	ldr	r2, [pc, #64]	; (800468c <HAL_TIM_MspPostInit+0xb8>)
 800464a:	f043 0304 	orr.w	r3, r3, #4
 800464e:	6313      	str	r3, [r2, #48]	; 0x30
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_TIM_MspPostInit+0xb8>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 800465c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	2302      	movs	r3, #2
 8004664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466a:	2300      	movs	r3, #0
 800466c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800466e:	2302      	movs	r3, #2
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004672:	f107 0314 	add.w	r3, r7, #20
 8004676:	4619      	mov	r1, r3
 8004678:	4807      	ldr	r0, [pc, #28]	; (8004698 <HAL_TIM_MspPostInit+0xc4>)
 800467a:	f003 fa83 	bl	8007b84 <HAL_GPIO_Init>
}
 800467e:	bf00      	nop
 8004680:	3728      	adds	r7, #40	; 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40023800 	.word	0x40023800
 8004690:	40021000 	.word	0x40021000
 8004694:	40000400 	.word	0x40000400
 8004698:	40020800 	.word	0x40020800

0800469c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08e      	sub	sp, #56	; 0x38
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5f      	ldr	r2, [pc, #380]	; (8004838 <HAL_UART_MspInit+0x19c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d135      	bne.n	800472a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	4b5e      	ldr	r3, [pc, #376]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a5d      	ldr	r2, [pc, #372]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80046c8:	f043 0310 	orr.w	r3, r3, #16
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b5b      	ldr	r3, [pc, #364]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a56      	ldr	r2, [pc, #344]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 80046f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	2302      	movs	r3, #2
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004704:	2303      	movs	r3, #3
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004708:	2307      	movs	r3, #7
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004710:	4619      	mov	r1, r3
 8004712:	484b      	ldr	r0, [pc, #300]	; (8004840 <HAL_UART_MspInit+0x1a4>)
 8004714:	f003 fa36 	bl	8007b84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004718:	2200      	movs	r2, #0
 800471a:	2100      	movs	r1, #0
 800471c:	2025      	movs	r0, #37	; 0x25
 800471e:	f001 fcc2 	bl	80060a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004722:	2025      	movs	r0, #37	; 0x25
 8004724:	f001 fcdb 	bl	80060de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004728:	e082      	b.n	8004830 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a45      	ldr	r2, [pc, #276]	; (8004844 <HAL_UART_MspInit+0x1a8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d12c      	bne.n	800478e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_UART_MspInit+0x1a0>)
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	4a3f      	ldr	r2, [pc, #252]	; (800483c <HAL_UART_MspInit+0x1a0>)
 800473e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004742:	6413      	str	r3, [r2, #64]	; 0x40
 8004744:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_UART_MspInit+0x1a0>)
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_UART_MspInit+0x1a0>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	4a38      	ldr	r2, [pc, #224]	; (800483c <HAL_UART_MspInit+0x1a0>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6313      	str	r3, [r2, #48]	; 0x30
 8004760:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_UART_MspInit+0x1a0>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 800476c:	230c      	movs	r3, #12
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800477c:	2307      	movs	r3, #7
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	4619      	mov	r1, r3
 8004786:	482e      	ldr	r0, [pc, #184]	; (8004840 <HAL_UART_MspInit+0x1a4>)
 8004788:	f003 f9fc 	bl	8007b84 <HAL_GPIO_Init>
}
 800478c:	e050      	b.n	8004830 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART3)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <HAL_UART_MspInit+0x1ac>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d14b      	bne.n	8004830 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_UART_MspInit+0x1a0>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	4a26      	ldr	r2, [pc, #152]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a6:	6413      	str	r3, [r2, #64]	; 0x40
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	6313      	str	r3, [r2, #48]	; 0x30
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	6313      	str	r3, [r2, #48]	; 0x30
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <HAL_UART_MspInit+0x1a0>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 80047ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f2:	2302      	movs	r3, #2
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fa:	2303      	movs	r3, #3
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047fe:	2307      	movs	r3, #7
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8004802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004806:	4619      	mov	r1, r3
 8004808:	4810      	ldr	r0, [pc, #64]	; (800484c <HAL_UART_MspInit+0x1b0>)
 800480a:	f003 f9bb 	bl	8007b84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 800480e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004814:	2302      	movs	r3, #2
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800481c:	2303      	movs	r3, #3
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004820:	2307      	movs	r3, #7
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 8004824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004828:	4619      	mov	r1, r3
 800482a:	4809      	ldr	r0, [pc, #36]	; (8004850 <HAL_UART_MspInit+0x1b4>)
 800482c:	f003 f9aa 	bl	8007b84 <HAL_GPIO_Init>
}
 8004830:	bf00      	nop
 8004832:	3738      	adds	r7, #56	; 0x38
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40011000 	.word	0x40011000
 800483c:	40023800 	.word	0x40023800
 8004840:	40020000 	.word	0x40020000
 8004844:	40004400 	.word	0x40004400
 8004848:	40004800 	.word	0x40004800
 800484c:	40020400 	.word	0x40020400
 8004850:	40020800 	.word	0x40020800

08004854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004858:	e7fe      	b.n	8004858 <NMI_Handler+0x4>

0800485a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  Error_Handler();
 800485e:	f7ff fa97 	bl	8003d90 <Error_Handler>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <HardFault_Handler+0x8>

08004864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <MemManage_Handler+0x4>

0800486a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  Error_Handler();
 800486e:	f7ff fa8f 	bl	8003d90 <Error_Handler>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004872:	e7fe      	b.n	8004872 <BusFault_Handler+0x8>

08004874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  Error_Handler();
 8004878:	f7ff fa8a 	bl	8003d90 <Error_Handler>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800487c:	e7fe      	b.n	800487c <UsageFault_Handler+0x8>

0800487e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ac:	f000 fda6 	bl	80053fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 80048c6:	2008      	movs	r0, #8
 80048c8:	f003 fb12 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <DMA1_Stream1_IRQHandler+0x10>)
 80048d6:	f001 fdb5 	bl	8006444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000e00 	.word	0x20000e00

080048e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <ADC_IRQHandler+0x10>)
 80048ea:	f000 fe31 	bl	8005550 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000cf0 	.word	0x20000cf0

080048f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 80048fc:	2020      	movs	r0, #32
 80048fe:	f003 faf7 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 8004902:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004906:	f003 faf3 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 800490a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800490e:	f003 faef 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <USART1_IRQHandler+0x10>)
 800491e:	f007 ff1b 	bl	800c758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20001178 	.word	0x20001178

0800492c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 8004930:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004934:	f003 fadc 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 8004938:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800493c:	f003 fad8 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 8004940:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004944:	f003 fad4 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8004948:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800494c:	f003 fad0 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8004950:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004954:	f003 facc 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 8004958:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800495c:	f003 fac8 	bl	8007ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}

08004964 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004968:	4802      	ldr	r0, [pc, #8]	; (8004974 <RTC_Alarm_IRQHandler+0x10>)
 800496a:	f005 fb7d 	bl	800a068 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800496e:	bf00      	nop
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000f5c 	.word	0x20000f5c

08004978 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <TIM6_IRQHandler+0x10>)
 800497e:	f006 feb3 	bl	800b6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200010e8 	.word	0x200010e8

0800498c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004990:	4802      	ldr	r0, [pc, #8]	; (800499c <DMA2_Stream0_IRQHandler+0x10>)
 8004992:	f001 fd57 	bl	8006444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000d54 	.word	0x20000d54

080049a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 80049a4:	4802      	ldr	r0, [pc, #8]	; (80049b0 <DMA2_Stream3_IRQHandler+0x10>)
 80049a6:	f001 fd4d 	bl	8006444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000efc 	.word	0x20000efc

080049b4 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 80049b8:	4802      	ldr	r0, [pc, #8]	; (80049c4 <FMPI2C1_EV_IRQHandler+0x10>)
 80049ba:	f002 f93f 	bl	8006c3c <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000db4 	.word	0x20000db4

080049c8 <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 80049cc:	4802      	ldr	r0, [pc, #8]	; (80049d8 <FMPI2C1_ER_IRQHandler+0x10>)
 80049ce:	f002 f94f 	bl	8006c70 <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000db4 	.word	0x20000db4

080049dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return 1;
 80049e0:	2301      	movs	r3, #1
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <_kill>:

int _kill(int pid, int sig)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049f6:	f009 fd2b 	bl	800e450 <__errno>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2216      	movs	r2, #22
 80049fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_exit>:

void _exit (int status)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a14:	f04f 31ff 	mov.w	r1, #4294967295
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffe7 	bl	80049ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a1e:	e7fe      	b.n	8004a1e <_exit+0x12>

08004a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a28:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <_sbrk+0x5c>)
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <_sbrk+0x60>)
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a34:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <_sbrk+0x64>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <_sbrk+0x64>)
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <_sbrk+0x68>)
 8004a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <_sbrk+0x64>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d207      	bcs.n	8004a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a50:	f009 fcfe 	bl	800e450 <__errno>
 8004a54:	4603      	mov	r3, r0
 8004a56:	220c      	movs	r2, #12
 8004a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	e009      	b.n	8004a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <_sbrk+0x64>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <_sbrk+0x64>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <_sbrk+0x64>)
 8004a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20040000 	.word	0x20040000
 8004a80:	00000400 	.word	0x00000400
 8004a84:	20001244 	.word	0x20001244
 8004a88:	20001278 	.word	0x20001278

08004a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <SystemInit+0x20>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	4a05      	ldr	r2, [pc, #20]	; (8004aac <SystemInit+0x20>)
 8004a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <_ZN6ButtonD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Button.h>

Button::~Button()
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <_ZN6ButtonD1Ev+0x20>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f857 	bl	8004b74 <_ZN7ControlD1Ev>
{
}
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	0800f060 	.word	0x0800f060

08004ad4 <_ZN6ButtonD0Ev>:
Button::~Button()
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
}
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ffe7 	bl	8004ab0 <_ZN6ButtonD1Ev>
 8004ae2:	2118      	movs	r1, #24
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f009 fc88 	bl	800e3fa <_ZdlPvj>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <_ZN6Button11UpdateStateEv>:
{
	this->pressActive = press;
}

void Button::UpdateState()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	this->nxt->SetClick(this->ID, this->pressActive);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6898      	ldr	r0, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	7919      	ldrb	r1, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7c9b      	ldrb	r3, [r3, #18]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f7fd fb93 	bl	8002234 <_ZN7Nextion8SetClickEhb>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <_ZN6Button3ActEv>:

void Button::Act()
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
	if (this->btnAction != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <_ZN6Button3ActEv+0x16>
	{
		this->btnAction();
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4798      	blx	r3
	}
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZN9ComponentD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Component.h>

Component::~Component()
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <_ZN9ComponentD1Ev+0x1c>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
{
}
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	0800f080 	.word	0x0800f080

08004b54 <_ZN9ComponentD0Ev>:
Component::~Component()
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
}
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffe9 	bl	8004b34 <_ZN9ComponentD1Ev>
 8004b62:	210c      	movs	r1, #12
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f009 fc48 	bl	800e3fa <_ZdlPvj>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_ZN7ControlD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Control.h>

Control::~Control()
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <_ZN7ControlD1Ev+0x20>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ffd5 	bl	8004b34 <_ZN9ComponentD1Ev>
{
}
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	0800f094 	.word	0x0800f094

08004b98 <_ZN7ControlD0Ev>:
Control::~Control()
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
}
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ffe7 	bl	8004b74 <_ZN7ControlD1Ev>
 8004ba6:	2114      	movs	r1, #20
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f009 fc26 	bl	800e3fa <_ZdlPvj>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN7Control6SetNavEv>:

void Control::SetNav()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	if (!this->IsActive) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	795b      	ldrb	r3, [r3, #5]
 8004bc4:	f083 0301 	eor.w	r3, r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <_ZN7Control6SetNavEv+0x2c>
		this->IsActive = true;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	715a      	strb	r2, [r3, #5]
		this->nxt->SetClick(ID, true);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6898      	ldr	r0, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	791b      	ldrb	r3, [r3, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7fd fb28 	bl	8002234 <_ZN7Nextion8SetClickEhb>
	}
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN7Control8ClearNavEv>:

void Control::ClearNav()
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	if (this->IsActive)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	795b      	ldrb	r3, [r3, #5]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <_ZN7Control8ClearNavEv+0x26>
	{
		this->IsActive = false;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	715a      	strb	r2, [r3, #5]
		this->nxt->SetClick(ID, false);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6898      	ldr	r0, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	791b      	ldrb	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7fd fb11 	bl	8002234 <_ZN7Nextion8SetClickEhb>
	}
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <_ZN7Control8CheckNavERhS0_>:
	bool CheckNav(uint8_t &x, uint8_t &y) { return x == this->navXIndex && y == this->navYIndex; };
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	7c1b      	ldrb	r3, [r3, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d107      	bne.n	8004c42 <_ZN7Control8CheckNavERhS0_+0x28>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	7c5b      	ldrb	r3, [r3, #17]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d101      	bne.n	8004c42 <_ZN7Control8CheckNavERhS0_+0x28>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <_ZN7Control8CheckNavERhS0_+0x2a>
 8004c42:	2300      	movs	r3, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <_ZN7Control7GetNavXEv>:
	uint8_t GetNavX() { return this->navXIndex; };
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7c1b      	ldrb	r3, [r3, #16]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <_ZN7Control7GetNavYEv>:
	uint8_t GetNavY() { return this->navYIndex; };
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7c5b      	ldrb	r3, [r3, #17]
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>:
 *      Author: Daxxn
 */

#include <Screen/Page.h>

Page::Page(Nextion *nxt, uint8_t id, Button *btns, int btnCount, PageButton *pageBtns, int pageBtnCount): Component(nxt, id)
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	79fa      	ldrb	r2, [r7, #7]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fdd4 	bl	8000844 <_ZN9ComponentC1EP7Nextionh>
 8004c9c:	4a49      	ldr	r2, [pc, #292]	; (8004dc4 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x144>)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]
{
	this->buttons = btns;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	619a      	str	r2, [r3, #24]
	this->pageButtons = pageBtns;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	615a      	str	r2, [r3, #20]
	this->pageBtnCount = pageBtnCount;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24
	this->btnCount = btnCount;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	621a      	str	r2, [r3, #32]
	this->progBars = NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	61da      	str	r2, [r3, #28]
	this->pbCount = 0;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28

	this->CurrentControl = &btns[0];
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	611a      	str	r2, [r3, #16]

	uint8_t temp1 = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	74bb      	strb	r3, [r7, #18]
	int i = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < btnCount; ++i) {
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	da31      	bge.n	8004d48 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xc8>
		temp1 = this->buttons[i].GetNavX();
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6999      	ldr	r1, [r3, #24]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ffab 	bl	8004c50 <_ZN7Control7GetNavXEv>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]
		if (this->maxXNav < temp1)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004d04:	7cfa      	ldrb	r2, [r7, #19]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d903      	bls.n	8004d12 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x92>
		{
			this->maxXNav = temp1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	7cfa      	ldrb	r2, [r7, #19]
 8004d0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
		temp1 = this->buttons[i].GetNavY();
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	440b      	add	r3, r1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ffa0 	bl	8004c68 <_ZN7Control7GetNavYEv>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	74fb      	strb	r3, [r7, #19]
		if (this->maxYNav < temp1)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d32:	7cfa      	ldrb	r2, [r7, #19]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d903      	bls.n	8004d40 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xc0>
		{
			this->maxYNav = temp1;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	7cfa      	ldrb	r2, [r7, #19]
 8004d3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (i = 0; i < btnCount; ++i) {
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	3301      	adds	r3, #1
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e7c9      	b.n	8004cdc <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x5c>
		}
	}
	for (i = 0; i < pageBtnCount; ++i)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	429a      	cmp	r2, r3
 8004d52:	da31      	bge.n	8004db8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x138>
	{
		temp2 = this->pageButtons[i].GetNavX();
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6959      	ldr	r1, [r3, #20]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff73 	bl	8004c50 <_ZN7Control7GetNavXEv>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	74bb      	strb	r3, [r7, #18]
		if (this->maxXNav < temp2)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004d74:	7cba      	ldrb	r2, [r7, #18]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d903      	bls.n	8004d82 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x102>
		{
			this->maxXNav = temp2;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	7cba      	ldrb	r2, [r7, #18]
 8004d7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
		temp2 = this->pageButtons[i].GetNavY();
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6959      	ldr	r1, [r3, #20]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff ff68 	bl	8004c68 <_ZN7Control7GetNavYEv>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	74bb      	strb	r3, [r7, #18]
		if (this->maxYNav < temp2)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004da2:	7cba      	ldrb	r2, [r7, #18]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d903      	bls.n	8004db0 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x130>
		{
			this->maxYNav = temp2;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	7cba      	ldrb	r2, [r7, #18]
 8004dac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (i = 0; i < pageBtnCount; ++i)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3301      	adds	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e7c9      	b.n	8004d4c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xcc>
		}
	}
}
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0800f0b4 	.word	0x0800f0b4

08004dc8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari>:

Page::Page(
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
		int btnCount,
		PageButton *pageBtns,
		int pageBtnCount,
		ProgressBar *progBars,
		int pbCount
	): Component(nxt, id)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	79fa      	ldrb	r2, [r7, #7]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb fd30 	bl	8000844 <_ZN9ComponentC1EP7Nextionh>
 8004de4:	4a43      	ldr	r2, [pc, #268]	; (8004ef4 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x12c>)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	601a      	str	r2, [r3, #0]
{
	this->buttons = btns;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	619a      	str	r2, [r3, #24]
	this->pageButtons = pageBtns;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df4:	615a      	str	r2, [r3, #20]
	this->progBars = progBars;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfa:	61da      	str	r2, [r3, #28]
	this->btnCount = btnCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	621a      	str	r2, [r3, #32]
	this->pageBtnCount = pageBtnCount;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
	this->pbCount = pbCount;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28

	this->CurrentControl = &btns[0];
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	611a      	str	r2, [r3, #16]

	uint8_t temp1 = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	74bb      	strb	r3, [r7, #18]
	for (int i = 0; i < btnCount; ++i) {
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	da60      	bge.n	8004eea <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x122>
		temp1 = this->buttons[i].GetNavX();
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6999      	ldr	r1, [r3, #24]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff ff09 	bl	8004c50 <_ZN7Control7GetNavXEv>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]
		temp2 = this->pageButtons[i].GetNavX();
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6959      	ldr	r1, [r3, #20]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fefc 	bl	8004c50 <_ZN7Control7GetNavXEv>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	74bb      	strb	r3, [r7, #18]
		if (this->maxXNav < temp1)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004e62:	7cfa      	ldrb	r2, [r7, #19]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d904      	bls.n	8004e72 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xaa>
		{
			this->maxXNav = temp1;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	7cfa      	ldrb	r2, [r7, #19]
 8004e6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004e70:	e009      	b.n	8004e86 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xbe>
		}
		else if (this->maxXNav < temp2)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004e78:	7cba      	ldrb	r2, [r7, #18]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d903      	bls.n	8004e86 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xbe>
		{
			this->maxXNav = temp2;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	7cba      	ldrb	r2, [r7, #18]
 8004e82:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
		temp1 = this->buttons[i].GetNavY();
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	440b      	add	r3, r1
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fee6 	bl	8004c68 <_ZN7Control7GetNavYEv>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	74fb      	strb	r3, [r7, #19]
		temp2 = this->pageButtons[i].GetNavY();
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6959      	ldr	r1, [r3, #20]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fed9 	bl	8004c68 <_ZN7Control7GetNavYEv>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	74bb      	strb	r3, [r7, #18]
		if (this->maxYNav < temp1)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ec0:	7cfa      	ldrb	r2, [r7, #19]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x106>
		{
			this->maxYNav = temp1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	7cfa      	ldrb	r2, [r7, #19]
 8004eca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}
		if (this->maxYNav < temp2)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ed4:	7cba      	ldrb	r2, [r7, #18]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d903      	bls.n	8004ee2 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x11a>
		{
			this->maxYNav = temp2;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	7cba      	ldrb	r2, [r7, #18]
 8004ede:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (int i = 0; i < btnCount; ++i) {
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e79a      	b.n	8004e20 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x58>
		}
	}
}
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	0800f0b4 	.word	0x0800f0b4

08004ef8 <_ZN4PageD1Ev>:


Page::~Page()
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	4a46      	ldr	r2, [pc, #280]	; (800501c <_ZN4PageD1Ev+0x124>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
{
	delete[] this->buttons;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d024      	beq.n	8004f58 <_ZN4PageD1Ev+0x60>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	3b04      	subs	r3, #4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	18cc      	adds	r4, r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	429c      	cmp	r4, r3
 8004f2a:	d005      	beq.n	8004f38 <_ZN4PageD1Ev+0x40>
 8004f2c:	3c18      	subs	r4, #24
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4620      	mov	r0, r4
 8004f34:	4798      	blx	r3
 8004f36:	e7f5      	b.n	8004f24 <_ZN4PageD1Ev+0x2c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f1a3 0008 	sub.w	r0, r3, #8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	3308      	adds	r3, #8
 8004f52:	4619      	mov	r1, r3
 8004f54:	f009 fa55 	bl	800e402 <_ZdaPvj>
	delete[] this->pageButtons;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d024      	beq.n	8004faa <_ZN4PageD1Ev+0xb2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6959      	ldr	r1, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	18cc      	adds	r4, r1, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	429c      	cmp	r4, r3
 8004f7c:	d005      	beq.n	8004f8a <_ZN4PageD1Ev+0x92>
 8004f7e:	3c14      	subs	r4, #20
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4620      	mov	r0, r4
 8004f86:	4798      	blx	r3
 8004f88:	e7f5      	b.n	8004f76 <_ZN4PageD1Ev+0x7e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f1a3 0008 	sub.w	r0, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	3b04      	subs	r3, #4
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f009 fa2c 	bl	800e402 <_ZdaPvj>
	delete[] this->progBars;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d024      	beq.n	8004ffc <_ZN4PageD1Ev+0x104>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69d9      	ldr	r1, [r3, #28]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	18cc      	adds	r4, r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	429c      	cmp	r4, r3
 8004fce:	d005      	beq.n	8004fdc <_ZN4PageD1Ev+0xe4>
 8004fd0:	3c14      	subs	r4, #20
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4798      	blx	r3
 8004fda:	e7f5      	b.n	8004fc8 <_ZN4PageD1Ev+0xd0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f1a3 0008 	sub.w	r0, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	3b04      	subs	r3, #4
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f009 fa03 	bl	800e402 <_ZdaPvj>
	this->CurrentControl = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
	this->nxt = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	609a      	str	r2, [r3, #8]
Page::~Page()
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fd92 	bl	8004b34 <_ZN9ComponentD1Ev>
}
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bd90      	pop	{r4, r7, pc}
 800501a:	bf00      	nop
 800501c:	0800f0b4 	.word	0x0800f0b4

08005020 <_ZN4PageD0Ev>:
Page::~Page()
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
}
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff65 	bl	8004ef8 <_ZN4PageD1Ev>
 800502e:	2130      	movs	r1, #48	; 0x30
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f009 f9e2 	bl	800e3fa <_ZdlPvj>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZN4Page8NavigateEaa>:

void Page::Navigate(int8_t x, int8_t y)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
 800504c:	4613      	mov	r3, r2
 800504e:	70bb      	strb	r3, [r7, #2]
	int8_t tempX = x + this->currentXNav;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	4413      	add	r3, r2
 800505a:	b2db      	uxtb	r3, r3
 800505c:	72fb      	strb	r3, [r7, #11]
	int8_t tempY = y + this->currentYNav;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005064:	78bb      	ldrb	r3, [r7, #2]
 8005066:	4413      	add	r3, r2
 8005068:	b2db      	uxtb	r3, r3
 800506a:	72bb      	strb	r3, [r7, #10]
	if (tempX > this->maxXNav || tempX < 0)
 800506c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005076:	4293      	cmp	r3, r2
 8005078:	dc03      	bgt.n	8005082 <_ZN4Page8NavigateEaa+0x42>
 800507a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da0c      	bge.n	800509c <_ZN4Page8NavigateEaa+0x5c>
	{
		this->currentXNav = this->WrapXNav ? 0 : this->maxXNav;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7b1b      	ldrb	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <_ZN4Page8NavigateEaa+0x4e>
 800508a:	2200      	movs	r2, #0
 800508c:	e002      	b.n	8005094 <_ZN4Page8NavigateEaa+0x54>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800509a:	e008      	b.n	80050ae <_ZN4Page8NavigateEaa+0x6e>
	}
	else
	{
		this->currentXNav += x;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	4413      	add	r3, r2
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if (tempY > this->maxYNav || tempY < 0)
 80050ae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 80050b8:	4293      	cmp	r3, r2
 80050ba:	dc03      	bgt.n	80050c4 <_ZN4Page8NavigateEaa+0x84>
 80050bc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da0c      	bge.n	80050de <_ZN4Page8NavigateEaa+0x9e>
	{
		this->currentYNav = this->WrapYNav ? 0 : this->maxYNav;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7b5b      	ldrb	r3, [r3, #13]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <_ZN4Page8NavigateEaa+0x90>
 80050cc:	2200      	movs	r2, #0
 80050ce:	e002      	b.n	80050d6 <_ZN4Page8NavigateEaa+0x96>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80050dc:	e008      	b.n	80050f0 <_ZN4Page8NavigateEaa+0xb0>
	}
	else
	{
		this->currentYNav += y;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80050e4:	78bb      	ldrb	r3, [r7, #2]
 80050e6:	4413      	add	r3, r2
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	int i;
	for (i = 0; i < this->btnCount; ++i) {
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	da4c      	bge.n	8005198 <_ZN4Page8NavigateEaa+0x158>
		if (this->buttons[i].CheckNav(this->currentXNav, this->currentYNav))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6999      	ldr	r1, [r3, #24]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	4618      	mov	r0, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	332d      	adds	r3, #45	; 0x2d
 800511a:	461a      	mov	r2, r3
 800511c:	f7ff fd7d 	bl	8004c1a <_ZN7Control8CheckNavERhS0_>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01f      	beq.n	8005166 <_ZN4Page8NavigateEaa+0x126>
		{
			this->buttons[i].SetNav();
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6999      	ldr	r1, [r3, #24]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	4618      	mov	r0, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6999      	ldr	r1, [r3, #24]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3310      	adds	r3, #16
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4798      	blx	r3
			this->CurrentControl = &this->buttons[i];
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	18ca      	adds	r2, r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	611a      	str	r2, [r3, #16]
			break;
 8005164:	e018      	b.n	8005198 <_ZN4Page8NavigateEaa+0x158>
		}
		else
		{
			this->buttons[i].ClearNav();
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6999      	ldr	r1, [r3, #24]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	4618      	mov	r0, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6999      	ldr	r1, [r3, #24]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4798      	blx	r3
	for (i = 0; i < this->btnCount; ++i) {
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e7ad      	b.n	80050f4 <_ZN4Page8NavigateEaa+0xb4>
		}
	}
	for (i = 0; i < this->pageBtnCount; ++i) {
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	da4c      	bge.n	8005240 <_ZN4Page8NavigateEaa+0x200>
		if (this->pageButtons[i].CheckNav(currentXNav, currentYNav))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6959      	ldr	r1, [r3, #20]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	4618      	mov	r0, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	332d      	adds	r3, #45	; 0x2d
 80051c2:	461a      	mov	r2, r3
 80051c4:	f7ff fd29 	bl	8004c1a <_ZN7Control8CheckNavERhS0_>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01f      	beq.n	800520e <_ZN4Page8NavigateEaa+0x1ce>
		{
			this->pageButtons[i].SetNav();
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6959      	ldr	r1, [r3, #20]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	4618      	mov	r0, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6959      	ldr	r1, [r3, #20]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3310      	adds	r3, #16
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4798      	blx	r3
			this->CurrentControl = &this->pageButtons[i];
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6959      	ldr	r1, [r3, #20]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	18ca      	adds	r2, r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	611a      	str	r2, [r3, #16]
			return;
 800520c:	e018      	b.n	8005240 <_ZN4Page8NavigateEaa+0x200>
		}
		else
		{
			this->pageButtons[i].ClearNav();
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6959      	ldr	r1, [r3, #20]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	4618      	mov	r0, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6959      	ldr	r1, [r3, #20]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3314      	adds	r3, #20
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4798      	blx	r3
	for (i = 0; i < this->pageBtnCount; ++i) {
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	e7ad      	b.n	800519c <_ZN4Page8NavigateEaa+0x15c>
		}
	}
}
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <_ZN4Page4InitEv>:

void Page::Init()
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	this->nxt->SetPage(ID);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fc ff9d 	bl	8002198 <_ZN7Nextion7SetPageEh>
	this->Navigate(0, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff feec 	bl	8005040 <_ZN4Page8NavigateEaa>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <_ZN4Page3ActEv>:

void Page::Act()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	this->CurrentControl->Act();
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	461a      	mov	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_ZN4Page11FindControlEh>:

Control* Page::FindControl(uint8_t id)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < this->btnCount; ++i) {
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	da22      	bge.n	80052f4 <_ZN4Page11FindControlEh+0x60>
		if (this->buttons[i].ID == id)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6999      	ldr	r1, [r3, #24]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4613      	mov	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	440b      	add	r3, r1
 80052be:	791b      	ldrb	r3, [r3, #4]
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d112      	bne.n	80052ec <_ZN4Page11FindControlEh+0x58>
		{
			this->CurrentControl = &this->buttons[i];
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	18ca      	adds	r2, r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]
			return &this->buttons[i];
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6999      	ldr	r1, [r3, #24]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	e004      	b.n	80052f6 <_ZN4Page11FindControlEh+0x62>
	for (int i = 0; i < this->btnCount; ++i) {
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e7d7      	b.n	80052a4 <_ZN4Page11FindControlEh+0x10>
		}
	}
	return NULL;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8005304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800533c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005308:	480d      	ldr	r0, [pc, #52]	; (8005340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800530a:	490e      	ldr	r1, [pc, #56]	; (8005344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800530c:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800530e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005310:	e002      	b.n	8005318 <LoopCopyDataInit>

08005312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005316:	3304      	adds	r3, #4

08005318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800531a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800531c:	d3f9      	bcc.n	8005312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005320:	4c0b      	ldr	r4, [pc, #44]	; (8005350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005324:	e001      	b.n	800532a <LoopFillZerobss>

08005326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005328:	3204      	adds	r2, #4

0800532a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800532a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800532c:	d3fb      	bcc.n	8005326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800532e:	f7ff fbad 	bl	8004a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005332:	f009 f893 	bl	800e45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005336:	f7fd fddb 	bl	8002ef0 <main>
  bx  lr    
 800533a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800533c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005344:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005348:	0800f128 	.word	0x0800f128
  ldr r2, =_sbss
 800534c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005350:	20001274 	.word	0x20001274

08005354 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005354:	e7fe      	b.n	8005354 <CAN1_RX0_IRQHandler>
	...

08005358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_Init+0x40>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <HAL_Init+0x40>)
 8005362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_Init+0x40>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <HAL_Init+0x40>)
 800536e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_Init+0x40>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_Init+0x40>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005380:	2003      	movs	r0, #3
 8005382:	f000 fe85 	bl	8006090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005386:	200f      	movs	r0, #15
 8005388:	f000 f808 	bl	800539c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800538c:	f7fe fd10 	bl	8003db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023c00 	.word	0x40023c00

0800539c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_InitTick+0x54>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_InitTick+0x58>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fe9d 	bl	80060fa <HAL_SYSTICK_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00e      	b.n	80053e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d80a      	bhi.n	80053e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d0:	2200      	movs	r2, #0
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f000 fe65 	bl	80060a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <HAL_InitTick+0x5c>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000000 	.word	0x20000000
 80053f4:	20000008 	.word	0x20000008
 80053f8:	20000004 	.word	0x20000004

080053fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_IncTick+0x20>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_IncTick+0x24>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4413      	add	r3, r2
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <HAL_IncTick+0x24>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000008 	.word	0x20000008
 8005420:	20001248 	.word	0x20001248

08005424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return uwTick;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_GetTick+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20001248 	.word	0x20001248

0800543c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7ff ffee 	bl	8005424 <HAL_GetTick>
 8005448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d005      	beq.n	8005462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_Delay+0x44>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005462:	bf00      	nop
 8005464:	f7ff ffde 	bl	8005424 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d8f7      	bhi.n	8005464 <HAL_Delay+0x28>
  {
  }
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000008 	.word	0x20000008

08005484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e04a      	b.n	8005530 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d120      	bne.n	80054e4 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_ADC_Init+0xb4>)
 80054a6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a24      	ldr	r2, [pc, #144]	; (800553c <HAL_ADC_Init+0xb8>)
 80054ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a23      	ldr	r2, [pc, #140]	; (8005540 <HAL_ADC_Init+0xbc>)
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_ADC_Init+0xc0>)
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a22      	ldr	r2, [pc, #136]	; (8005548 <HAL_ADC_Init+0xc4>)
 80054be:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_ADC_Init+0xc8>)
 80054cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d118      	bne.n	8005522 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054f8:	f023 0302 	bic.w	r3, r3, #2
 80054fc:	f043 0202 	orr.w	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb67 	bl	8005bd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f023 0303 	bic.w	r3, r3, #3
 8005518:	f043 0201 	orr.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
 8005520:	e001      	b.n	8005526 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	08002edb 	.word	0x08002edb
 800553c:	08005959 	.word	0x08005959
 8005540:	0800596d 	.word	0x0800596d
 8005544:	08005981 	.word	0x08005981
 8005548:	08005edd 	.word	0x08005edd
 800554c:	08003e0d 	.word	0x08003e0d

08005550 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04a      	beq.n	800561c <HAL_ADC_IRQHandler+0xcc>
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d047      	beq.n	800561c <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d12b      	bne.n	800560a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d127      	bne.n	800560a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d006      	beq.n	80055d6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d119      	bne.n	800560a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0220 	bic.w	r2, r2, #32
 80055e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0201 	orr.w	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0212 	mvn.w	r2, #18
 800561a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d058      	beq.n	80056e4 <HAL_ADC_IRQHandler+0x194>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d055      	beq.n	80056e4 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d139      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005676:	2b00      	cmp	r3, #0
 8005678:	d12b      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005684:	2b00      	cmp	r3, #0
 8005686:	d124      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11d      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800569a:	2b00      	cmp	r3, #0
 800569c:	d119      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f06f 020c 	mvn.w	r2, #12
 80056e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <HAL_ADC_IRQHandler+0x1dc>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d10e      	bne.n	800572c <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0201 	mvn.w	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800573a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d016      	beq.n	8005770 <HAL_ADC_IRQHandler+0x220>
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	f043 0202 	orr.w	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0220 	mvn.w	r2, #32
 800575c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f06f 0220 	mvn.w	r2, #32
 800576e:	601a      	str	r2, [r3, #0]
  }
}
 8005770:	bf00      	nop
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_ADC_Start_DMA+0x1e>
 8005792:	2302      	movs	r3, #2
 8005794:	e0ce      	b.n	8005934 <HAL_ADC_Start_DMA+0x1bc>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d018      	beq.n	80057de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057bc:	4b5f      	ldr	r3, [pc, #380]	; (800593c <HAL_ADC_Start_DMA+0x1c4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a5f      	ldr	r2, [pc, #380]	; (8005940 <HAL_ADC_Start_DMA+0x1c8>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0c9a      	lsrs	r2, r3, #18
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057d0:	e002      	b.n	80057d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f9      	bne.n	80057d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ec:	d107      	bne.n	80057fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 8086 	bne.w	800591a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d106      	bne.n	800585c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f023 0206 	bic.w	r2, r3, #6
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
 800585a:	e002      	b.n	8005862 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_ADC_Start_DMA+0x1cc>)
 800586c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	4a35      	ldr	r2, [pc, #212]	; (8005948 <HAL_ADC_Start_DMA+0x1d0>)
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	4a34      	ldr	r2, [pc, #208]	; (800594c <HAL_ADC_Start_DMA+0x1d4>)
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4a33      	ldr	r2, [pc, #204]	; (8005950 <HAL_ADC_Start_DMA+0x1d8>)
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800588e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800589e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	334c      	adds	r3, #76	; 0x4c
 80058ba:	4619      	mov	r1, r3
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f000 fcd6 	bl	8006270 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10f      	bne.n	80058f0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d129      	bne.n	8005932 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80058ec:	609a      	str	r2, [r3, #8]
 80058ee:	e020      	b.n	8005932 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <HAL_ADC_Start_DMA+0x1dc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d11b      	bne.n	8005932 <HAL_ADC_Start_DMA+0x1ba>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d114      	bne.n	8005932 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	e00b      	b.n	8005932 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0210 	orr.w	r2, r3, #16
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f043 0201 	orr.w	r2, r3, #1
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000000 	.word	0x20000000
 8005940:	431bde83 	.word	0x431bde83
 8005944:	40012300 	.word	0x40012300
 8005948:	08005dd1 	.word	0x08005dd1
 800594c:	08005e8f 	.word	0x08005e8f
 8005950:	08005ead 	.word	0x08005ead
 8005954:	40012000 	.word	0x40012000

08005958 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e105      	b.n	8005bbc <HAL_ADC_ConfigChannel+0x228>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b09      	cmp	r3, #9
 80059be:	d925      	bls.n	8005a0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68d9      	ldr	r1, [r3, #12]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	3b1e      	subs	r3, #30
 80059d6:	2207      	movs	r2, #7
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43da      	mvns	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	400a      	ands	r2, r1
 80059e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68d9      	ldr	r1, [r3, #12]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4618      	mov	r0, r3
 80059f8:	4603      	mov	r3, r0
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4403      	add	r3, r0
 80059fe:	3b1e      	subs	r3, #30
 8005a00:	409a      	lsls	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	e022      	b.n	8005a52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6919      	ldr	r1, [r3, #16]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	2207      	movs	r2, #7
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43da      	mvns	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6919      	ldr	r1, [r3, #16]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4618      	mov	r0, r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	4403      	add	r3, r0
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d824      	bhi.n	8005aa4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	3b05      	subs	r3, #5
 8005a6c:	221f      	movs	r2, #31
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43da      	mvns	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	400a      	ands	r2, r1
 8005a7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	4618      	mov	r0, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	3b05      	subs	r3, #5
 8005a96:	fa00 f203 	lsl.w	r2, r0, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8005aa2:	e04c      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	d824      	bhi.n	8005af6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	3b23      	subs	r3, #35	; 0x23
 8005abe:	221f      	movs	r2, #31
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43da      	mvns	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	400a      	ands	r2, r1
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4618      	mov	r0, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3b23      	subs	r3, #35	; 0x23
 8005ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
 8005af4:	e023      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	3b41      	subs	r3, #65	; 0x41
 8005b08:	221f      	movs	r2, #31
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	400a      	ands	r2, r1
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4618      	mov	r0, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	3b41      	subs	r3, #65	; 0x41
 8005b32:	fa00 f203 	lsl.w	r2, r0, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <HAL_ADC_ConfigChannel+0x234>)
 8005b40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <HAL_ADC_ConfigChannel+0x238>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d109      	bne.n	8005b60 <HAL_ADC_ConfigChannel+0x1cc>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b12      	cmp	r3, #18
 8005b52:	d105      	bne.n	8005b60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <HAL_ADC_ConfigChannel+0x238>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d123      	bne.n	8005bb2 <HAL_ADC_ConfigChannel+0x21e>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d003      	beq.n	8005b7a <HAL_ADC_ConfigChannel+0x1e6>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b11      	cmp	r3, #17
 8005b78:	d11b      	bne.n	8005bb2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d111      	bne.n	8005bb2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <HAL_ADC_ConfigChannel+0x23c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <HAL_ADC_ConfigChannel+0x240>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	0c9a      	lsrs	r2, r3, #18
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ba4:	e002      	b.n	8005bac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f9      	bne.n	8005ba6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40012300 	.word	0x40012300
 8005bcc:	40012000 	.word	0x40012000
 8005bd0:	20000000 	.word	0x20000000
 8005bd4:	431bde83 	.word	0x431bde83

08005bd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005be0:	4b79      	ldr	r3, [pc, #484]	; (8005dc8 <ADC_Init+0x1f0>)
 8005be2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6859      	ldr	r1, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	021a      	lsls	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6899      	ldr	r1, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	4a58      	ldr	r2, [pc, #352]	; (8005dcc <ADC_Init+0x1f4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	e00f      	b.n	8005cd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0202 	bic.w	r2, r2, #2
 8005ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7e1b      	ldrb	r3, [r3, #24]
 8005cf0:	005a      	lsls	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01b      	beq.n	8005d3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	035a      	lsls	r2, r3, #13
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	e007      	b.n	8005d4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	051a      	lsls	r2, r3, #20
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6899      	ldr	r1, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d8e:	025a      	lsls	r2, r3, #9
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6899      	ldr	r1, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	029a      	lsls	r2, r3, #10
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40012300 	.word	0x40012300
 8005dcc:	0f000001 	.word	0x0f000001

08005dd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d13d      	bne.n	8005e66 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d12b      	bne.n	8005e5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d127      	bne.n	8005e5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d119      	bne.n	8005e5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0220 	bic.w	r2, r2, #32
 8005e36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e64:	e00f      	b.n	8005e86 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	4798      	blx	r3
}
 8005e7a:	e004      	b.n	8005e86 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2240      	movs	r2, #64	; 0x40
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	f043 0204 	orr.w	r2, r3, #4
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <__NVIC_SetPriorityGrouping+0x44>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f22:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <__NVIC_SetPriorityGrouping+0x44>)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	60d3      	str	r3, [r2, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <__NVIC_GetPriorityGrouping+0x18>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	f003 0307 	and.w	r3, r3, #7
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	db0b      	blt.n	8005f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	f003 021f 	and.w	r2, r3, #31
 8005f6c:	4907      	ldr	r1, [pc, #28]	; (8005f8c <__NVIC_EnableIRQ+0x38>)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2001      	movs	r0, #1
 8005f76:	fa00 f202 	lsl.w	r2, r0, r2
 8005f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	e000e100 	.word	0xe000e100

08005f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	6039      	str	r1, [r7, #0]
 8005f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db0a      	blt.n	8005fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	490c      	ldr	r1, [pc, #48]	; (8005fdc <__NVIC_SetPriority+0x4c>)
 8005faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fae:	0112      	lsls	r2, r2, #4
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fb8:	e00a      	b.n	8005fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	4908      	ldr	r1, [pc, #32]	; (8005fe0 <__NVIC_SetPriority+0x50>)
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	3b04      	subs	r3, #4
 8005fc8:	0112      	lsls	r2, r2, #4
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	440b      	add	r3, r1
 8005fce:	761a      	strb	r2, [r3, #24]
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	e000e100 	.word	0xe000e100
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b089      	sub	sp, #36	; 0x24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f1c3 0307 	rsb	r3, r3, #7
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	bf28      	it	cs
 8006002:	2304      	movcs	r3, #4
 8006004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	3304      	adds	r3, #4
 800600a:	2b06      	cmp	r3, #6
 800600c:	d902      	bls.n	8006014 <NVIC_EncodePriority+0x30>
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	3b03      	subs	r3, #3
 8006012:	e000      	b.n	8006016 <NVIC_EncodePriority+0x32>
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43da      	mvns	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	401a      	ands	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800602c:	f04f 31ff 	mov.w	r1, #4294967295
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	fa01 f303 	lsl.w	r3, r1, r3
 8006036:	43d9      	mvns	r1, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	4313      	orrs	r3, r2
         );
}
 800603e:	4618      	mov	r0, r3
 8006040:	3724      	adds	r7, #36	; 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800605c:	d301      	bcc.n	8006062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800605e:	2301      	movs	r3, #1
 8006060:	e00f      	b.n	8006082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006062:	4a0a      	ldr	r2, [pc, #40]	; (800608c <SysTick_Config+0x40>)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3b01      	subs	r3, #1
 8006068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800606a:	210f      	movs	r1, #15
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	f7ff ff8e 	bl	8005f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <SysTick_Config+0x40>)
 8006076:	2200      	movs	r2, #0
 8006078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800607a:	4b04      	ldr	r3, [pc, #16]	; (800608c <SysTick_Config+0x40>)
 800607c:	2207      	movs	r2, #7
 800607e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	e000e010 	.word	0xe000e010

08006090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff29 	bl	8005ef0 <__NVIC_SetPriorityGrouping>
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b086      	sub	sp, #24
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	4603      	mov	r3, r0
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060b8:	f7ff ff3e 	bl	8005f38 <__NVIC_GetPriorityGrouping>
 80060bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	f7ff ff8e 	bl	8005fe4 <NVIC_EncodePriority>
 80060c8:	4602      	mov	r2, r0
 80060ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ce:	4611      	mov	r1, r2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff ff5d 	bl	8005f90 <__NVIC_SetPriority>
}
 80060d6:	bf00      	nop
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	4603      	mov	r3, r0
 80060e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff ff31 	bl	8005f54 <__NVIC_EnableIRQ>
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ffa2 	bl	800604c <SysTick_Config>
 8006108:	4603      	mov	r3, r0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006120:	f7ff f980 	bl	8005424 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e099      	b.n	8006264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006150:	e00f      	b.n	8006172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006152:	f7ff f967 	bl	8005424 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b05      	cmp	r3, #5
 800615e:	d908      	bls.n	8006172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2203      	movs	r2, #3
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e078      	b.n	8006264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e8      	bne.n	8006152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4b38      	ldr	r3, [pc, #224]	; (800626c <HAL_DMA_Init+0x158>)
 800618c:	4013      	ands	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800619e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d107      	bne.n	80061dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	4313      	orrs	r3, r2
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b04      	cmp	r3, #4
 8006204:	d117      	bne.n	8006236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00e      	beq.n	8006236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fb0f 	bl	800683c <DMA_CheckFifoParam>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2240      	movs	r2, #64	; 0x40
 8006228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006232:	2301      	movs	r3, #1
 8006234:	e016      	b.n	8006264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fac6 	bl	80067d0 <DMA_CalcBaseAndBitshift>
 8006244:	4603      	mov	r3, r0
 8006246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	223f      	movs	r2, #63	; 0x3f
 800624e:	409a      	lsls	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	f010803f 	.word	0xf010803f

08006270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_DMA_Start_IT+0x26>
 8006292:	2302      	movs	r3, #2
 8006294:	e040      	b.n	8006318 <HAL_DMA_Start_IT+0xa8>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d12f      	bne.n	800630a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fa58 	bl	8006774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	223f      	movs	r2, #63	; 0x3f
 80062ca:	409a      	lsls	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0216 	orr.w	r2, r2, #22
 80062de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0208 	orr.w	r2, r2, #8
 80062f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e005      	b.n	8006316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006312:	2302      	movs	r3, #2
 8006314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800632e:	f7ff f879 	bl	8005424 <HAL_GetTick>
 8006332:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d008      	beq.n	8006352 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2280      	movs	r2, #128	; 0x80
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e052      	b.n	80063f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0216 	bic.w	r2, r2, #22
 8006360:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006370:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <HAL_DMA_Abort+0x62>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0208 	bic.w	r2, r2, #8
 8006390:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a2:	e013      	b.n	80063cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063a4:	f7ff f83e 	bl	8005424 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d90c      	bls.n	80063cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2203      	movs	r2, #3
 80063bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e015      	b.n	80063f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e4      	bne.n	80063a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063de:	223f      	movs	r2, #63	; 0x3f
 80063e0:	409a      	lsls	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d004      	beq.n	800641e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2280      	movs	r2, #128	; 0x80
 8006418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e00c      	b.n	8006438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2205      	movs	r2, #5
 8006422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006450:	4b8e      	ldr	r3, [pc, #568]	; (800668c <HAL_DMA_IRQHandler+0x248>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a8e      	ldr	r2, [pc, #568]	; (8006690 <HAL_DMA_IRQHandler+0x24c>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0a9b      	lsrs	r3, r3, #10
 800645c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646e:	2208      	movs	r2, #8
 8006470:	409a      	lsls	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01a      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d013      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0204 	bic.w	r2, r2, #4
 8006496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649c:	2208      	movs	r2, #8
 800649e:	409a      	lsls	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	f043 0201 	orr.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	2201      	movs	r2, #1
 80064d4:	409a      	lsls	r2, r3
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	f043 0202 	orr.w	r2, r3, #2
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	2204      	movs	r2, #4
 80064ec:	409a      	lsls	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d012      	beq.n	800651c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	2204      	movs	r2, #4
 800650a:	409a      	lsls	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	f043 0204 	orr.w	r2, r3, #4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	2210      	movs	r2, #16
 8006522:	409a      	lsls	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d043      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d03c      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	2210      	movs	r2, #16
 8006540:	409a      	lsls	r2, r3
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d018      	beq.n	8006586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d108      	bne.n	8006574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d024      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
 8006572:	e01f      	b.n	80065b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
 8006584:	e016      	b.n	80065b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d107      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0208 	bic.w	r2, r2, #8
 80065a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	2220      	movs	r2, #32
 80065ba:	409a      	lsls	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 808f 	beq.w	80066e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8087 	beq.w	80066e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	2220      	movs	r2, #32
 80065dc:	409a      	lsls	r2, r3
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	d136      	bne.n	800665c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0216 	bic.w	r2, r2, #22
 80065fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800660c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <HAL_DMA_IRQHandler+0x1da>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0208 	bic.w	r2, r2, #8
 800662c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	223f      	movs	r2, #63	; 0x3f
 8006634:	409a      	lsls	r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664e:	2b00      	cmp	r3, #0
 8006650:	d07e      	beq.n	8006750 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
        }
        return;
 800665a:	e079      	b.n	8006750 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01d      	beq.n	80066a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10d      	bne.n	8006694 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	2b00      	cmp	r3, #0
 800667e:	d031      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
 8006688:	e02c      	b.n	80066e4 <HAL_DMA_IRQHandler+0x2a0>
 800668a:	bf00      	nop
 800668c:	20000000 	.word	0x20000000
 8006690:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d023      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
 80066a4:	e01e      	b.n	80066e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10f      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0210 	bic.w	r2, r2, #16
 80066c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d032      	beq.n	8006752 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d022      	beq.n	800673e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2205      	movs	r2, #5
 80066fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3301      	adds	r3, #1
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	429a      	cmp	r2, r3
 800671a:	d307      	bcc.n	800672c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f2      	bne.n	8006710 <HAL_DMA_IRQHandler+0x2cc>
 800672a:	e000      	b.n	800672e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800672c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	e000      	b.n	8006752 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006750:	bf00      	nop
    }
  }
}
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006766:	b2db      	uxtb	r3, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d108      	bne.n	80067b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067b2:	e007      	b.n	80067c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]
}
 80067c4:	bf00      	nop
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	3b10      	subs	r3, #16
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <DMA_CalcBaseAndBitshift+0x64>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <DMA_CalcBaseAndBitshift+0x68>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d909      	bls.n	8006812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	659a      	str	r2, [r3, #88]	; 0x58
 8006810:	e007      	b.n	8006822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	aaaaaaab 	.word	0xaaaaaaab
 8006838:	0800f0c0 	.word	0x0800f0c0

0800683c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11f      	bne.n	8006896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d856      	bhi.n	800690a <DMA_CheckFifoParam+0xce>
 800685c:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <DMA_CheckFifoParam+0x28>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006875 	.word	0x08006875
 8006868:	08006887 	.word	0x08006887
 800686c:	08006875 	.word	0x08006875
 8006870:	0800690b 	.word	0x0800690b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d046      	beq.n	800690e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006884:	e043      	b.n	800690e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800688e:	d140      	bne.n	8006912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006894:	e03d      	b.n	8006912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689e:	d121      	bne.n	80068e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d837      	bhi.n	8006916 <DMA_CheckFifoParam+0xda>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <DMA_CheckFifoParam+0x70>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068c3 	.word	0x080068c3
 80068b4:	080068bd 	.word	0x080068bd
 80068b8:	080068d5 	.word	0x080068d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      break;
 80068c0:	e030      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d025      	beq.n	800691a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d2:	e022      	b.n	800691a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068dc:	d11f      	bne.n	800691e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068e2:	e01c      	b.n	800691e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d903      	bls.n	80068f2 <DMA_CheckFifoParam+0xb6>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d003      	beq.n	80068f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068f0:	e018      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	73fb      	strb	r3, [r7, #15]
      break;
 80068f6:	e015      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e00b      	b.n	8006922 <DMA_CheckFifoParam+0xe6>
      break;
 800690a:	bf00      	nop
 800690c:	e00a      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 800690e:	bf00      	nop
 8006910:	e008      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 8006912:	bf00      	nop
 8006914:	e006      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 8006916:	bf00      	nop
 8006918:	e004      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;   
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <DMA_CheckFifoParam+0xe8>
      break;
 8006922:	bf00      	nop
    }
  } 
  
  return status; 
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop

08006934 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e081      	b.n	8006a4a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fd fb0e 	bl	8003f7c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2224      	movs	r2, #36	; 0x24
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006984:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006994:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d107      	bne.n	80069ae <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	e006      	b.n	80069bc <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d104      	bne.n	80069ce <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069f0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_FMPI2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Master_Transmit(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	460b      	mov	r3, r1
 8006a62:	817b      	strh	r3, [r7, #10]
 8006a64:	4613      	mov	r3, r2
 8006a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	f040 80da 	bne.w	8006c2a <HAL_FMPI2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_FMPI2C_Master_Transmit+0x30>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e0d3      	b.n	8006c2c <HAL_FMPI2C_Master_Transmit+0x1d8>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a8c:	f7fe fcca 	bl	8005424 <HAL_GetTick>
 8006a90:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	2319      	movs	r3, #25
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fe05 	bl	80076ae <FMPI2C_WaitOnFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_FMPI2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e0be      	b.n	8006c2c <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2221      	movs	r2, #33	; 0x21
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MASTER;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2210      	movs	r2, #16
 8006aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	893a      	ldrh	r2, [r7, #8]
 8006ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2bff      	cmp	r3, #255	; 0xff
 8006ade:	d90e      	bls.n	8006afe <HAL_FMPI2C_Master_Transmit+0xaa>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	22ff      	movs	r2, #255	; 0xff
 8006ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	8979      	ldrh	r1, [r7, #10]
 8006aee:	4b51      	ldr	r3, [pc, #324]	; (8006c34 <HAL_FMPI2C_Master_Transmit+0x1e0>)
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 ff46 	bl	8007988 <FMPI2C_TransferConfig>
 8006afc:	e06c      	b.n	8006bd8 <HAL_FMPI2C_Master_Transmit+0x184>
                         FMPI2C_GENERATE_START_WRITE);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	8979      	ldrh	r1, [r7, #10]
 8006b10:	4b48      	ldr	r3, [pc, #288]	; (8006c34 <HAL_FMPI2C_Master_Transmit+0x1e0>)
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 ff35 	bl	8007988 <FMPI2C_TransferConfig>
                         FMPI2C_GENERATE_START_WRITE);
    }

    while (hfmpi2c->XferCount > 0U)
 8006b1e:	e05b      	b.n	8006bd8 <HAL_FMPI2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	6a39      	ldr	r1, [r7, #32]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fe02 	bl	800772e <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_FMPI2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e07b      	b.n	8006c2c <HAL_FMPI2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d034      	beq.n	8006bd8 <HAL_FMPI2C_Master_Transmit+0x184>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d130      	bne.n	8006bd8 <HAL_FMPI2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fd94 	bl	80076ae <FMPI2C_WaitOnFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <HAL_FMPI2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e04d      	b.n	8006c2c <HAL_FMPI2C_Master_Transmit+0x1d8>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d90e      	bls.n	8006bb8 <HAL_FMPI2C_Master_Transmit+0x164>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	8979      	ldrh	r1, [r7, #10]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fee9 	bl	8007988 <FMPI2C_TransferConfig>
 8006bb6:	e00f      	b.n	8006bd8 <HAL_FMPI2C_Master_Transmit+0x184>
                             FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	8979      	ldrh	r1, [r7, #10]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fed8 	bl	8007988 <FMPI2C_TransferConfig>
    while (hfmpi2c->XferCount > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d19e      	bne.n	8006b20 <HAL_FMPI2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	6a39      	ldr	r1, [r7, #32]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fde1 	bl	80077ae <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_FMPI2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e01a      	b.n	8006c2c <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6859      	ldr	r1, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_FMPI2C_Master_Transmit+0x1e4>)
 8006c0a:	400b      	ands	r3, r1
 8006c0c:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <HAL_FMPI2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	80002000 	.word	0x80002000
 8006c38:	fe00e800 	.word	0xfe00e800

08006c3c <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
  }
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d010      	beq.n	8006cb6 <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca4:	f043 0201 	orr.w	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb4:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	0a9b      	lsrs	r3, r3, #10
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	09db      	lsrs	r3, r3, #7
 8006cc6:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	f043 0208 	orr.w	r2, r3, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ce2:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	0a5b      	lsrs	r3, r3, #9
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d010      	beq.n	8006d12 <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f043 0202 	orr.w	r2, r3, #2
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d10:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f003 030b 	and.w	r3, r3, #11
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb89 	bl	800743c <FMPI2C_ITError>
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
 8006d66:	4613      	mov	r3, r2
 8006d68:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <FMPI2C_Slave_ISR_IT+0x24>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e0ec      	b.n	8006fb0 <FMPI2C_Slave_ISR_IT+0x1fe>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8006df6:	6939      	ldr	r1, [r7, #16]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f9bf 	bl	800717c <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d04d      	beq.n	8006ea6 <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d047      	beq.n	8006ea6 <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d128      	bne.n	8006e72 <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b28      	cmp	r3, #40	; 0x28
 8006e2a:	d108      	bne.n	8006e3e <FMPI2C_Slave_ISR_IT+0x8c>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e32:	d104      	bne.n	8006e3e <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8006e34:	6939      	ldr	r1, [r7, #16]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 faaa 	bl	8007390 <FMPI2C_ITListenCplt>
 8006e3c:	e032      	b.n	8006ea4 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b29      	cmp	r3, #41	; 0x29
 8006e48:	d10e      	bne.n	8006e68 <FMPI2C_Slave_ISR_IT+0xb6>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e50:	d00a      	beq.n	8006e68 <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2210      	movs	r2, #16
 8006e58:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fbe5 	bl	800762a <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f92d 	bl	80070c0 <FMPI2C_ITSlaveSeqCplt>
 8006e66:	e01d      	b.n	8006ea4 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 8006e70:	e096      	b.n	8006fa0 <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2210      	movs	r2, #16
 8006e78:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <FMPI2C_Slave_ISR_IT+0xe4>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e92:	f040 8085 	bne.w	8006fa0 <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 facd 	bl	800743c <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 8006ea2:	e07d      	b.n	8006fa0 <FMPI2C_Slave_ISR_IT+0x1ee>
 8006ea4:	e07c      	b.n	8006fa0 <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	089b      	lsrs	r3, r3, #2
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d030      	beq.n	8006f14 <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	089b      	lsrs	r3, r3, #2
 8006eb6:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d02a      	beq.n	8006f14 <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d018      	beq.n	8006efa <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d14f      	bne.n	8006fa4 <FMPI2C_Slave_ISR_IT+0x1f2>
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f0a:	d04b      	beq.n	8006fa4 <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f8d7 	bl	80070c0 <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 8006f12:	e047      	b.n	8006fa4 <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	08db      	lsrs	r3, r3, #3
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	08db      	lsrs	r3, r3, #3
 8006f24:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 8006f2c:	6939      	ldr	r1, [r7, #16]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f842 	bl	8006fb8 <FMPI2C_ITAddrCplt>
 8006f34:	e037      	b.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	085b      	lsrs	r3, r3, #1
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d031      	beq.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d02b      	beq.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d018      	beq.n	8006f8a <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	781a      	ldrb	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f88:	e00d      	b.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f90:	d002      	beq.n	8006f98 <FMPI2C_Slave_ISR_IT+0x1e6>
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f891 	bl	80070c0 <FMPI2C_ITSlaveSeqCplt>
 8006f9e:	e002      	b.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 8006fa4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fce:	2b28      	cmp	r3, #40	; 0x28
 8006fd0:	d16a      	bne.n	80070a8 <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	0c1b      	lsrs	r3, r3, #16
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ff0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ffe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800700c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d138      	bne.n	8007088 <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007016:	897b      	ldrh	r3, [r7, #10]
 8007018:	09db      	lsrs	r3, r3, #7
 800701a:	b29a      	uxth	r2, r3
 800701c:	89bb      	ldrh	r3, [r7, #12]
 800701e:	4053      	eors	r3, r2
 8007020:	b29b      	uxth	r3, r3
 8007022:	f003 0306 	and.w	r3, r3, #6
 8007026:	2b00      	cmp	r3, #0
 8007028:	d11c      	bne.n	8007064 <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800702a:	897b      	ldrh	r3, [r7, #10]
 800702c:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703c:	2b02      	cmp	r3, #2
 800703e:	d13b      	bne.n	80070b8 <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2208      	movs	r2, #8
 800704c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8007056:	89ba      	ldrh	r2, [r7, #12]
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fe7c 	bl	8006d5a <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 8007062:	e029      	b.n	80070b8 <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007064:	893b      	ldrh	r3, [r7, #8]
 8007066:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8007068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fcbd 	bl	80079ec <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 800707a:	89ba      	ldrh	r2, [r7, #12]
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fe6a 	bl	8006d5a <HAL_FMPI2C_AddrCallback>
}
 8007086:	e017      	b.n	80070b8 <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8007088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fcad 	bl	80079ec <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 800709a:	89ba      	ldrh	r2, [r7, #12]
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fe5a 	bl	8006d5a <HAL_FMPI2C_AddrCallback>
}
 80070a6:	e007      	b.n	80070b8 <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	0b9b      	lsrs	r3, r3, #14
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e00d      	b.n	8007112 <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	0bdb      	lsrs	r3, r3, #15
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007110:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b29      	cmp	r3, #41	; 0x29
 800711c:	d112      	bne.n	8007144 <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2228      	movs	r2, #40	; 0x28
 8007122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2221      	movs	r2, #33	; 0x21
 800712a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 800712c:	2101      	movs	r1, #1
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fc5c 	bl	80079ec <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff fdf8 	bl	8006d32 <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007142:	e017      	b.n	8007174 <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b2a      	cmp	r3, #42	; 0x2a
 800714e:	d111      	bne.n	8007174 <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2228      	movs	r2, #40	; 0x28
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2222      	movs	r2, #34	; 0x22
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 800715e:	2102      	movs	r1, #2
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fc43 	bl	80079ec <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fde9 	bl	8006d46 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007198:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2220      	movs	r2, #32
 80071a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b21      	cmp	r3, #33	; 0x21
 80071a6:	d002      	beq.n	80071ae <FMPI2C_ITSlaveCplt+0x32>
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b29      	cmp	r3, #41	; 0x29
 80071ac:	d108      	bne.n	80071c0 <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 80071ae:	f248 0101 	movw	r1, #32769	; 0x8001
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fc1a 	bl	80079ec <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2221      	movs	r2, #33	; 0x21
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
 80071be:	e00d      	b.n	80071dc <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b22      	cmp	r3, #34	; 0x22
 80071c4:	d002      	beq.n	80071cc <FMPI2C_ITSlaveCplt+0x50>
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ca:	d107      	bne.n	80071dc <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 80071cc:	f248 0102 	movw	r1, #32770	; 0x8002
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc0b 	bl	80079ec <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2222      	movs	r2, #34	; 0x22
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b64      	ldr	r3, [pc, #400]	; (8007388 <FMPI2C_ITSlaveCplt+0x20c>)
 80071f8:	400b      	ands	r3, r1
 80071fa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa14 	bl	800762a <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	0b9b      	lsrs	r3, r3, #14
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d013      	beq.n	8007236 <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800721c:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d020      	beq.n	8007268 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007234:	e018      	b.n	8007268 <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	0bdb      	lsrs	r3, r3, #15
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d012      	beq.n	8007268 <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007250:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d020      	beq.n	80072b6 <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0304 	bic.w	r3, r3, #4
 800727a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00c      	beq.n	80072b6 <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	f043 0204 	orr.w	r2, r3, #4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d010      	beq.n	8007304 <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8a7 	bl	800743c <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b28      	cmp	r3, #40	; 0x28
 80072f8:	d141      	bne.n	800737e <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 80072fa:	6979      	ldr	r1, [r7, #20]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f847 	bl	8007390 <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8007302:	e03c      	b.n	800737e <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800730c:	d014      	beq.n	8007338 <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fed6 	bl	80070c0 <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1d      	ldr	r2, [pc, #116]	; (800738c <FMPI2C_ITSlaveCplt+0x210>)
 8007318:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff fd20 	bl	8006d76 <HAL_FMPI2C_ListenCpltCallback>
}
 8007336:	e022      	b.n	800737e <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b22      	cmp	r3, #34	; 0x22
 8007342:	d10e      	bne.n	8007362 <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fcf3 	bl	8006d46 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8007360:	e00d      	b.n	800737e <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff fcda 	bl	8006d32 <HAL_FMPI2C_SlaveTxCpltCallback>
}
 800737e:	bf00      	nop
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	fe00e800 	.word	0xfe00e800
 800738c:	ffff0000 	.word	0xffff0000

08007390 <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a26      	ldr	r2, [pc, #152]	; (8007438 <FMPI2C_ITListenCplt+0xa8>)
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	089b      	lsrs	r3, r3, #2
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d022      	beq.n	800740e <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d012      	beq.n	800740e <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 800740e:	f248 0103 	movw	r1, #32771	; 0x8003
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 faea 	bl	80079ec <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2210      	movs	r2, #16
 800741e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fca4 	bl	8006d76 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	ffff0000 	.word	0xffff0000

0800743c <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800744c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a5d      	ldr	r2, [pc, #372]	; (80075d0 <FMPI2C_ITError+0x194>)
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b28      	cmp	r3, #40	; 0x28
 8007472:	d005      	beq.n	8007480 <FMPI2C_ITError+0x44>
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	2b29      	cmp	r3, #41	; 0x29
 8007478:	d002      	beq.n	8007480 <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b2a      	cmp	r3, #42	; 0x2a
 800747e:	d10b      	bne.n	8007498 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8007480:	2103      	movs	r1, #3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fab2 	bl	80079ec <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2228      	movs	r2, #40	; 0x28
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a50      	ldr	r2, [pc, #320]	; (80075d4 <FMPI2C_ITError+0x198>)
 8007494:	635a      	str	r2, [r3, #52]	; 0x34
 8007496:	e011      	b.n	80074bc <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8007498:	f248 0103 	movw	r1, #32771	; 0x8003
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 faa5 	bl	80079ec <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b60      	cmp	r3, #96	; 0x60
 80074ac:	d003      	beq.n	80074b6 <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d039      	beq.n	800753e <FMPI2C_ITError+0x102>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b11      	cmp	r3, #17
 80074ce:	d002      	beq.n	80074d6 <FMPI2C_ITError+0x9a>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b21      	cmp	r3, #33	; 0x21
 80074d4:	d133      	bne.n	800753e <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074e4:	d107      	bne.n	80074f6 <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff f92c 	bl	8006758 <HAL_DMA_GetState>
 8007500:	4603      	mov	r3, r0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d017      	beq.n	8007536 <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	4a33      	ldr	r2, [pc, #204]	; (80075d8 <FMPI2C_ITError+0x19c>)
 800750c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe ff70 	bl	8006400 <HAL_DMA_Abort_IT>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d04d      	beq.n	80075c2 <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007534:	e045      	b.n	80075c2 <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f850 	bl	80075dc <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 800753c:	e041      	b.n	80075c2 <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d039      	beq.n	80075ba <FMPI2C_ITError+0x17e>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b12      	cmp	r3, #18
 800754a:	d002      	beq.n	8007552 <FMPI2C_ITError+0x116>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b22      	cmp	r3, #34	; 0x22
 8007550:	d133      	bne.n	80075ba <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800755c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007560:	d107      	bne.n	8007572 <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007570:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff f8ee 	bl	8006758 <HAL_DMA_GetState>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d017      	beq.n	80075b2 <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <FMPI2C_ITError+0x19c>)
 8007588:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe ff32 	bl	8006400 <HAL_DMA_Abort_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075b0:	e009      	b.n	80075c6 <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f812 	bl	80075dc <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075b8:	e005      	b.n	80075c6 <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f80e 	bl	80075dc <FMPI2C_TreatErrorCallback>
  }
}
 80075c0:	e002      	b.n	80075c8 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075c6:	bf00      	nop
}
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	ffff0000 	.word	0xffff0000
 80075d4:	08006db3 	.word	0x08006db3
 80075d8:	08007673 	.word	0x08007673

080075dc <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b60      	cmp	r3, #96	; 0x60
 80075ee:	d10e      	bne.n	800760e <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fbc9 	bl	8006d9e <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 800760c:	e009      	b.n	8007622 <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff fbb4 	bl	8006d8a <HAL_FMPI2C_ErrorCallback>
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d103      	bne.n	8007648 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2200      	movs	r2, #0
 8007646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	d007      	beq.n	8007666 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	619a      	str	r2, [r3, #24]
  }
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	2200      	movs	r2, #0
 800768e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769c:	2200      	movs	r2, #0
 800769e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff9b 	bl	80075dc <FMPI2C_TreatErrorCallback>
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	603b      	str	r3, [r7, #0]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 80076be:	e022      	b.n	8007706 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d01e      	beq.n	8007706 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c8:	f7fd feac 	bl	8005424 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d302      	bcc.n	80076de <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d113      	bne.n	8007706 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	f043 0220 	orr.w	r2, r3, #32
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e00f      	b.n	8007726 <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	bf0c      	ite	eq
 8007716:	2301      	moveq	r3, #1
 8007718:	2300      	movne	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	429a      	cmp	r2, r3
 8007722:	d0cd      	beq.n	80076c0 <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 800773a:	e02c      	b.n	8007796 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f871 	bl	8007828 <FMPI2C_IsErrorOccurred>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e02a      	b.n	80077a6 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d01e      	beq.n	8007796 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007758:	f7fd fe64 	bl	8005424 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d113      	bne.n	8007796 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007772:	f043 0220 	orr.w	r2, r3, #32
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e007      	b.n	80077a6 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d1cb      	bne.n	800773c <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 80077ba:	e028      	b.n	800780e <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f831 	bl	8007828 <FMPI2C_IsErrorOccurred>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e026      	b.n	800781e <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d0:	f7fd fe28 	bl	8005424 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d302      	bcc.n	80077e6 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d113      	bne.n	800780e <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ea:	f043 0220 	orr.w	r2, r3, #32
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	645a      	str	r2, [r3, #68]	; 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e007      	b.n	800781e <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b20      	cmp	r3, #32
 800781a:	d1cf      	bne.n	80077bc <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <FMPI2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsErrorOccurred(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hfmpi2c->Instance->ISR;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_AF))
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b00      	cmp	r3, #0
 800784c:	d040      	beq.n	80078d0 <FMPI2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800785c:	d01d      	beq.n	800789a <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800786c:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800786e:	e014      	b.n	800789a <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	d010      	beq.n	800789a <FMPI2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007878:	f7fd fdd4 	bl	8005424 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	d302      	bcc.n	800788e <FMPI2C_IsErrorOccurred+0x66>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <FMPI2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_FMPI2C_ERROR_TIMEOUT;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f043 0320 	orr.w	r3, r3, #32
 8007894:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d002      	beq.n	80078ae <FMPI2C_IsErrorOccurred+0x86>
 80078a8:	7ffb      	ldrb	r3, [r7, #31]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0e0      	beq.n	8007870 <FMPI2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80078ae:	7ffb      	ldrb	r3, [r7, #31]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <FMPI2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2220      	movs	r2, #32
 80078ba:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2210      	movs	r2, #16
 80078c2:	61da      	str	r2, [r3, #28]

    error_code |= HAL_FMPI2C_ERROR_AF;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f043 0304 	orr.w	r3, r3, #4
 80078ca:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hfmpi2c->Instance->ISR;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_BERR))
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <FMPI2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_FMPI2C_ERROR_BERR;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_OVR))
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <FMPI2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_FMPI2C_ERROR_OVR;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f043 0308 	orr.w	r3, r3, #8
 8007908:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_ARLO))
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <FMPI2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_FMPI2C_ERROR_ARLO;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f043 0302 	orr.w	r3, r3, #2
 8007928:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8007938:	7ffb      	ldrb	r3, [r7, #31]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01c      	beq.n	8007978 <FMPI2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff fe73 	bl	800762a <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <FMPI2C_IsErrorOccurred+0x15c>)
 8007950:	400b      	ands	r3, r1
 8007952:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= error_code;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	431a      	orrs	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	645a      	str	r2, [r3, #68]	; 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007978:	7ffb      	ldrb	r3, [r7, #31]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	fe00e800 	.word	0xfe00e800

08007988 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	817b      	strh	r3, [r7, #10]
 8007996:	4613      	mov	r3, r2
 8007998:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 800799a:	897b      	ldrh	r3, [r7, #10]
 800799c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 80079a0:	7a7b      	ldrb	r3, [r7, #9]
 80079a2:	041b      	lsls	r3, r3, #16
 80079a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 80079a8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079b6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2, \
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	0d5b      	lsrs	r3, r3, #21
 80079c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <FMPI2C_TransferConfig+0x60>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	43db      	mvns	r3, r3
 80079cc:	ea02 0103 	and.w	r1, r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
             ((FMPI2C_CR2_SADD | FMPI2C_CR2_NBYTES | FMPI2C_CR2_RELOAD | FMPI2C_CR2_AUTOEND | \
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                FMPI2C_CR2_START | FMPI2C_CR2_STOP)), tmp);
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	03ff63ff 	.word	0x03ff63ff

080079ec <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 80079fc:	887b      	ldrh	r3, [r7, #2]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007a0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a1a:	2b28      	cmp	r3, #40	; 0x28
 8007a1c:	d003      	beq.n	8007a26 <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007a24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00f      	beq.n	8007a50 <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007a36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a44:	2b28      	cmp	r3, #40	; 0x28
 8007a46:	d003      	beq.n	8007a50 <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 8007a50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da03      	bge.n	8007a60 <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d103      	bne.n	8007a6e <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007a6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 8007a6e:	887b      	ldrh	r3, [r7, #2]
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d103      	bne.n	8007a7c <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f043 0320 	orr.w	r3, r3, #32
 8007a7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 8007a7c:	887b      	ldrh	r3, [r7, #2]
 8007a7e:	2b40      	cmp	r3, #64	; 0x40
 8007a80:	d103      	bne.n	8007a8a <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6819      	ldr	r1, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	43da      	mvns	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	400a      	ands	r2, r1
 8007a9a:	601a      	str	r2, [r3, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d138      	bne.n	8007b30 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e032      	b.n	8007b32 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e000      	b.n	8007b32 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b30:	2302      	movs	r3, #2
  }
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8007b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b56:	6453      	str	r3, [r2, #68]	; 0x44
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8007b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8007b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b68:	4905      	ldr	r1, [pc, #20]	; (8007b80 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40023800 	.word	0x40023800
 8007b80:	40013800 	.word	0x40013800

08007b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b089      	sub	sp, #36	; 0x24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	e159      	b.n	8007e54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	f040 8148 	bne.w	8007e4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d005      	beq.n	8007bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d130      	bne.n	8007c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	2203      	movs	r2, #3
 8007be2:	fa02 f303 	lsl.w	r3, r2, r3
 8007be6:	43db      	mvns	r3, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4013      	ands	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	43db      	mvns	r3, r3
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	091b      	lsrs	r3, r3, #4
 8007c22:	f003 0201 	and.w	r2, r3, #1
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d017      	beq.n	8007c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	2203      	movs	r2, #3
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d123      	bne.n	8007cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	08da      	lsrs	r2, r3, #3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3208      	adds	r2, #8
 8007c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	220f      	movs	r2, #15
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	08da      	lsrs	r2, r3, #3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3208      	adds	r2, #8
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f003 0203 	and.w	r2, r3, #3
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 80a2 	beq.w	8007e4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	4b57      	ldr	r3, [pc, #348]	; (8007e6c <HAL_GPIO_Init+0x2e8>)
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	4a56      	ldr	r2, [pc, #344]	; (8007e6c <HAL_GPIO_Init+0x2e8>)
 8007d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d18:	6453      	str	r3, [r2, #68]	; 0x44
 8007d1a:	4b54      	ldr	r3, [pc, #336]	; (8007e6c <HAL_GPIO_Init+0x2e8>)
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d26:	4a52      	ldr	r2, [pc, #328]	; (8007e70 <HAL_GPIO_Init+0x2ec>)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	089b      	lsrs	r3, r3, #2
 8007d2c:	3302      	adds	r3, #2
 8007d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	220f      	movs	r2, #15
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	43db      	mvns	r3, r3
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	4013      	ands	r3, r2
 8007d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a49      	ldr	r2, [pc, #292]	; (8007e74 <HAL_GPIO_Init+0x2f0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d019      	beq.n	8007d86 <HAL_GPIO_Init+0x202>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a48      	ldr	r2, [pc, #288]	; (8007e78 <HAL_GPIO_Init+0x2f4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_GPIO_Init+0x1fe>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a47      	ldr	r2, [pc, #284]	; (8007e7c <HAL_GPIO_Init+0x2f8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00d      	beq.n	8007d7e <HAL_GPIO_Init+0x1fa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a46      	ldr	r2, [pc, #280]	; (8007e80 <HAL_GPIO_Init+0x2fc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <HAL_GPIO_Init+0x1f6>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a45      	ldr	r2, [pc, #276]	; (8007e84 <HAL_GPIO_Init+0x300>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d101      	bne.n	8007d76 <HAL_GPIO_Init+0x1f2>
 8007d72:	2304      	movs	r3, #4
 8007d74:	e008      	b.n	8007d88 <HAL_GPIO_Init+0x204>
 8007d76:	2307      	movs	r3, #7
 8007d78:	e006      	b.n	8007d88 <HAL_GPIO_Init+0x204>
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e004      	b.n	8007d88 <HAL_GPIO_Init+0x204>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e002      	b.n	8007d88 <HAL_GPIO_Init+0x204>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <HAL_GPIO_Init+0x204>
 8007d86:	2300      	movs	r3, #0
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	f002 0203 	and.w	r2, r2, #3
 8007d8e:	0092      	lsls	r2, r2, #2
 8007d90:	4093      	lsls	r3, r2
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d98:	4935      	ldr	r1, [pc, #212]	; (8007e70 <HAL_GPIO_Init+0x2ec>)
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	089b      	lsrs	r3, r3, #2
 8007d9e:	3302      	adds	r3, #2
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007da6:	4b38      	ldr	r3, [pc, #224]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	43db      	mvns	r3, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4013      	ands	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007dca:	4a2f      	ldr	r2, [pc, #188]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007dd0:	4b2d      	ldr	r3, [pc, #180]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007df4:	4a24      	ldr	r2, [pc, #144]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dfa:	4b23      	ldr	r3, [pc, #140]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	43db      	mvns	r3, r3
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	4013      	ands	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e1e:	4a1a      	ldr	r2, [pc, #104]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e24:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	4013      	ands	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e48:	4a0f      	ldr	r2, [pc, #60]	; (8007e88 <HAL_GPIO_Init+0x304>)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3301      	adds	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b0f      	cmp	r3, #15
 8007e58:	f67f aea2 	bls.w	8007ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	3724      	adds	r7, #36	; 0x24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	40013800 	.word	0x40013800
 8007e74:	40020000 	.word	0x40020000
 8007e78:	40020400 	.word	0x40020400
 8007e7c:	40020800 	.word	0x40020800
 8007e80:	40020c00 	.word	0x40020c00
 8007e84:	40021000 	.word	0x40021000
 8007e88:	40013c00 	.word	0x40013c00

08007e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	887b      	ldrh	r3, [r7, #2]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	e001      	b.n	8007eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	807b      	strh	r3, [r7, #2]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ecc:	787b      	ldrb	r3, [r7, #1]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ed2:	887a      	ldrh	r2, [r7, #2]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ed8:	e003      	b.n	8007ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	041a      	lsls	r2, r3, #16
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	619a      	str	r2, [r3, #24]
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007efa:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	88fb      	ldrh	r3, [r7, #6]
 8007f00:	4013      	ands	r3, r2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f06:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fa ff8d 	bl	8002e2e <HAL_GPIO_EXTI_Callback>
  }
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40013c00 	.word	0x40013c00

08007f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e12b      	b.n	800818a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fc f8da 	bl	8004100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2224      	movs	r2, #36	; 0x24
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f84:	f000 ffbe 	bl	8008f04 <HAL_RCC_GetPCLK1Freq>
 8007f88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	4a81      	ldr	r2, [pc, #516]	; (8008194 <HAL_I2C_Init+0x274>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d807      	bhi.n	8007fa4 <HAL_I2C_Init+0x84>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a80      	ldr	r2, [pc, #512]	; (8008198 <HAL_I2C_Init+0x278>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	bf94      	ite	ls
 8007f9c:	2301      	movls	r3, #1
 8007f9e:	2300      	movhi	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	e006      	b.n	8007fb2 <HAL_I2C_Init+0x92>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4a7d      	ldr	r2, [pc, #500]	; (800819c <HAL_I2C_Init+0x27c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	bf94      	ite	ls
 8007fac:	2301      	movls	r3, #1
 8007fae:	2300      	movhi	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e0e7      	b.n	800818a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a78      	ldr	r2, [pc, #480]	; (80081a0 <HAL_I2C_Init+0x280>)
 8007fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc2:	0c9b      	lsrs	r3, r3, #18
 8007fc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a6a      	ldr	r2, [pc, #424]	; (8008194 <HAL_I2C_Init+0x274>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d802      	bhi.n	8007ff4 <HAL_I2C_Init+0xd4>
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	e009      	b.n	8008008 <HAL_I2C_Init+0xe8>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	4a69      	ldr	r2, [pc, #420]	; (80081a4 <HAL_I2C_Init+0x284>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	099b      	lsrs	r3, r3, #6
 8008006:	3301      	adds	r3, #1
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	430b      	orrs	r3, r1
 800800e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800801a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	495c      	ldr	r1, [pc, #368]	; (8008194 <HAL_I2C_Init+0x274>)
 8008024:	428b      	cmp	r3, r1
 8008026:	d819      	bhi.n	800805c <HAL_I2C_Init+0x13c>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	1e59      	subs	r1, r3, #1
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	fbb1 f3f3 	udiv	r3, r1, r3
 8008036:	1c59      	adds	r1, r3, #1
 8008038:	f640 73fc 	movw	r3, #4092	; 0xffc
 800803c:	400b      	ands	r3, r1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <HAL_I2C_Init+0x138>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1e59      	subs	r1, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008050:	3301      	adds	r3, #1
 8008052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008056:	e051      	b.n	80080fc <HAL_I2C_Init+0x1dc>
 8008058:	2304      	movs	r3, #4
 800805a:	e04f      	b.n	80080fc <HAL_I2C_Init+0x1dc>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d111      	bne.n	8008088 <HAL_I2C_Init+0x168>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	1e58      	subs	r0, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	440b      	add	r3, r1
 8008072:	fbb0 f3f3 	udiv	r3, r0, r3
 8008076:	3301      	adds	r3, #1
 8008078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800807c:	2b00      	cmp	r3, #0
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	e012      	b.n	80080ae <HAL_I2C_Init+0x18e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1e58      	subs	r0, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6859      	ldr	r1, [r3, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	0099      	lsls	r1, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	fbb0 f3f3 	udiv	r3, r0, r3
 800809e:	3301      	adds	r3, #1
 80080a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_I2C_Init+0x196>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e022      	b.n	80080fc <HAL_I2C_Init+0x1dc>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10e      	bne.n	80080dc <HAL_I2C_Init+0x1bc>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1e58      	subs	r0, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6859      	ldr	r1, [r3, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	440b      	add	r3, r1
 80080cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80080d0:	3301      	adds	r3, #1
 80080d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080da:	e00f      	b.n	80080fc <HAL_I2C_Init+0x1dc>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	1e58      	subs	r0, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6859      	ldr	r1, [r3, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	0099      	lsls	r1, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	6809      	ldr	r1, [r1, #0]
 8008100:	4313      	orrs	r3, r2
 8008102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69da      	ldr	r2, [r3, #28]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800812a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6911      	ldr	r1, [r2, #16]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68d2      	ldr	r2, [r2, #12]
 8008136:	4311      	orrs	r1, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6812      	ldr	r2, [r2, #0]
 800813c:	430b      	orrs	r3, r1
 800813e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	000186a0 	.word	0x000186a0
 8008198:	001e847f 	.word	0x001e847f
 800819c:	003d08ff 	.word	0x003d08ff
 80081a0:	431bde83 	.word	0x431bde83
 80081a4:	10624dd3 	.word	0x10624dd3

080081a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e154      	b.n	8008464 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a98      	ldr	r2, [pc, #608]	; (8008434 <HAL_I2S_Init+0x28c>)
 80081d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fb ffdb 	bl	8004190 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2202      	movs	r2, #2
 80081de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80081f0:	f023 030f 	bic.w	r3, r3, #15
 80081f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2202      	movs	r2, #2
 80081fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d06f      	beq.n	80082e6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800820e:	2310      	movs	r3, #16
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e001      	b.n	8008218 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008214:	2320      	movs	r3, #32
 8008216:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b20      	cmp	r3, #32
 800821e:	d802      	bhi.n	8008226 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a83      	ldr	r2, [pc, #524]	; (8008438 <HAL_I2S_Init+0x290>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_I2S_Init+0x92>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a81      	ldr	r2, [pc, #516]	; (800843c <HAL_I2S_Init+0x294>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d104      	bne.n	8008244 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800823a:	2001      	movs	r0, #1
 800823c:	f001 f858 	bl	80092f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	e003      	b.n	800824c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008244:	2002      	movs	r0, #2
 8008246:	f001 f853 	bl	80092f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800824a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008254:	d125      	bne.n	80082a2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	fbb2 f2f3 	udiv	r2, r2, r3
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	461a      	mov	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	fbb2 f3f3 	udiv	r3, r2, r3
 800827a:	3305      	adds	r3, #5
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	e01f      	b.n	80082c0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	fbb2 f2f3 	udiv	r2, r2, r3
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	fbb2 f3f3 	udiv	r3, r2, r3
 800829c:	3305      	adds	r3, #5
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	e00e      	b.n	80082c0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	461a      	mov	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	3305      	adds	r3, #5
 80082be:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4a5f      	ldr	r2, [pc, #380]	; (8008440 <HAL_I2S_Init+0x298>)
 80082c4:	fba2 2303 	umull	r2, r3, r2, r3
 80082c8:	08db      	lsrs	r3, r3, #3
 80082ca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	085b      	lsrs	r3, r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	e003      	b.n	80082ee <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80082e6:	2302      	movs	r3, #2
 80082e8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d902      	bls.n	80082fa <HAL_I2S_Init+0x152>
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2bff      	cmp	r3, #255	; 0xff
 80082f8:	d907      	bls.n	800830a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	f043 0210 	orr.w	r2, r3, #16
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e0ac      	b.n	8008464 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	ea42 0103 	orr.w	r1, r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69fa      	ldr	r2, [r7, #28]
 800831a:	430a      	orrs	r2, r1
 800831c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008328:	f023 030f 	bic.w	r3, r3, #15
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6851      	ldr	r1, [r2, #4]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6892      	ldr	r2, [r2, #8]
 8008334:	4311      	orrs	r1, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	68d2      	ldr	r2, [r2, #12]
 800833a:	4311      	orrs	r1, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6992      	ldr	r2, [r2, #24]
 8008340:	430a      	orrs	r2, r1
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800834c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	2b30      	cmp	r3, #48	; 0x30
 8008354:	d003      	beq.n	800835e <HAL_I2S_Init+0x1b6>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	2bb0      	cmp	r3, #176	; 0xb0
 800835c:	d107      	bne.n	800836e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800836c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d16e      	bne.n	8008454 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a32      	ldr	r2, [pc, #200]	; (8008444 <HAL_I2S_Init+0x29c>)
 800837a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a2d      	ldr	r2, [pc, #180]	; (8008438 <HAL_I2S_Init+0x290>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d101      	bne.n	800838a <HAL_I2S_Init+0x1e2>
 8008386:	4b30      	ldr	r3, [pc, #192]	; (8008448 <HAL_I2S_Init+0x2a0>)
 8008388:	e001      	b.n	800838e <HAL_I2S_Init+0x1e6>
 800838a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	4928      	ldr	r1, [pc, #160]	; (8008438 <HAL_I2S_Init+0x290>)
 8008396:	428a      	cmp	r2, r1
 8008398:	d101      	bne.n	800839e <HAL_I2S_Init+0x1f6>
 800839a:	4a2b      	ldr	r2, [pc, #172]	; (8008448 <HAL_I2S_Init+0x2a0>)
 800839c:	e001      	b.n	80083a2 <HAL_I2S_Init+0x1fa>
 800839e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80083a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80083a6:	f023 030f 	bic.w	r3, r3, #15
 80083aa:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <HAL_I2S_Init+0x290>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d101      	bne.n	80083ba <HAL_I2S_Init+0x212>
 80083b6:	4b24      	ldr	r3, [pc, #144]	; (8008448 <HAL_I2S_Init+0x2a0>)
 80083b8:	e001      	b.n	80083be <HAL_I2S_Init+0x216>
 80083ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083be:	2202      	movs	r2, #2
 80083c0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <HAL_I2S_Init+0x290>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d101      	bne.n	80083d0 <HAL_I2S_Init+0x228>
 80083cc:	4b1e      	ldr	r3, [pc, #120]	; (8008448 <HAL_I2S_Init+0x2a0>)
 80083ce:	e001      	b.n	80083d4 <HAL_I2S_Init+0x22c>
 80083d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e0:	d003      	beq.n	80083ea <HAL_I2S_Init+0x242>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80083ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ee:	613b      	str	r3, [r7, #16]
 80083f0:	e001      	b.n	80083f6 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008400:	4313      	orrs	r3, r2
 8008402:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800840a:	4313      	orrs	r3, r2
 800840c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008414:	4313      	orrs	r3, r2
 8008416:	b29a      	uxth	r2, r3
 8008418:	897b      	ldrh	r3, [r7, #10]
 800841a:	4313      	orrs	r3, r2
 800841c:	b29b      	uxth	r3, r3
 800841e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008422:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a03      	ldr	r2, [pc, #12]	; (8008438 <HAL_I2S_Init+0x290>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d10e      	bne.n	800844c <HAL_I2S_Init+0x2a4>
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <HAL_I2S_Init+0x2a0>)
 8008430:	e00e      	b.n	8008450 <HAL_I2S_Init+0x2a8>
 8008432:	bf00      	nop
 8008434:	08008563 	.word	0x08008563
 8008438:	40003800 	.word	0x40003800
 800843c:	40003c00 	.word	0x40003c00
 8008440:	cccccccd 	.word	0xcccccccd
 8008444:	08008679 	.word	0x08008679
 8008448:	40003400 	.word	0x40003400
 800844c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008450:	897a      	ldrh	r2, [r7, #10]
 8008452:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	881a      	ldrh	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	1c9a      	adds	r2, r3, #2
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10e      	bne.n	80084fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80084ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff ffb8 	bl	800846c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	b292      	uxth	r2, r2
 8008518:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	1c9a      	adds	r2, r3, #2
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10e      	bne.n	800855a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800854a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ff93 	bl	8008480 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b04      	cmp	r3, #4
 800857c:	d13a      	bne.n	80085f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b01      	cmp	r3, #1
 8008586:	d109      	bne.n	800859c <I2S_IRQHandler+0x3a>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d102      	bne.n	800859c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff ffb4 	bl	8008504 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d126      	bne.n	80085f4 <I2S_IRQHandler+0x92>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	d11f      	bne.n	80085f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80085c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e6:	f043 0202 	orr.w	r2, r3, #2
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff ff50 	bl	8008494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d136      	bne.n	800866e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b02      	cmp	r3, #2
 8008608:	d109      	bne.n	800861e <I2S_IRQHandler+0xbc>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d102      	bne.n	800861e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff ff45 	bl	80084a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d122      	bne.n	800866e <I2S_IRQHandler+0x10c>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b20      	cmp	r3, #32
 8008634:	d11b      	bne.n	800866e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008644:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	f043 0204 	orr.w	r2, r3, #4
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff ff13 	bl	8008494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800866e:	bf00      	nop
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a92      	ldr	r2, [pc, #584]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d101      	bne.n	8008696 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008692:	4b92      	ldr	r3, [pc, #584]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008694:	e001      	b.n	800869a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a8b      	ldr	r2, [pc, #556]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d101      	bne.n	80086b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80086b0:	4b8a      	ldr	r3, [pc, #552]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086b2:	e001      	b.n	80086b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80086b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c4:	d004      	beq.n	80086d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 8099 	bne.w	8008802 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d107      	bne.n	80086ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f91b 	bl	8008920 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d107      	bne.n	8008704 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f9be 	bl	8008a80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870a:	2b40      	cmp	r3, #64	; 0x40
 800870c:	d13a      	bne.n	8008784 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d035      	beq.n	8008784 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a6e      	ldr	r2, [pc, #440]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d101      	bne.n	8008726 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008722:	4b6e      	ldr	r3, [pc, #440]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008724:	e001      	b.n	800872a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4969      	ldr	r1, [pc, #420]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008732:	428b      	cmp	r3, r1
 8008734:	d101      	bne.n	800873a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008736:	4b69      	ldr	r3, [pc, #420]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008738:	e001      	b.n	800873e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800873a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800873e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008742:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008752:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008776:	f043 0202 	orr.w	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff fe88 	bl	8008494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b08      	cmp	r3, #8
 800878c:	f040 80c3 	bne.w	8008916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80bd 	beq.w	8008916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a49      	ldr	r2, [pc, #292]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d101      	bne.n	80087ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80087b6:	4b49      	ldr	r3, [pc, #292]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80087b8:	e001      	b.n	80087be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80087ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4944      	ldr	r1, [pc, #272]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80087c6:	428b      	cmp	r3, r1
 80087c8:	d101      	bne.n	80087ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80087ca:	4b44      	ldr	r3, [pc, #272]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80087cc:	e001      	b.n	80087d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80087ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80087d8:	2300      	movs	r3, #0
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	f043 0204 	orr.w	r2, r3, #4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fe4a 	bl	8008494 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008800:	e089      	b.n	8008916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b02      	cmp	r3, #2
 800880a:	d107      	bne.n	800881c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8b4 	bl	8008984 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b01      	cmp	r3, #1
 8008824:	d107      	bne.n	8008836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f8f3 	bl	8008a1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883c:	2b40      	cmp	r3, #64	; 0x40
 800883e:	d12f      	bne.n	80088a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d02a      	beq.n	80088a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008858:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d101      	bne.n	8008868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008864:	4b1d      	ldr	r3, [pc, #116]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008866:	e001      	b.n	800886c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4919      	ldr	r1, [pc, #100]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008874:	428b      	cmp	r3, r1
 8008876:	d101      	bne.n	800887c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008878:	4b18      	ldr	r3, [pc, #96]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800887a:	e001      	b.n	8008880 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800887c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008884:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f043 0202 	orr.w	r2, r3, #2
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff fdfa 	bl	8008494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d136      	bne.n	8008918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d031      	beq.n	8008918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a07      	ldr	r2, [pc, #28]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d101      	bne.n	80088c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80088c0:	e001      	b.n	80088c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80088c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4902      	ldr	r1, [pc, #8]	; (80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80088ce:	428b      	cmp	r3, r1
 80088d0:	d106      	bne.n	80088e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80088d2:	4b02      	ldr	r3, [pc, #8]	; (80088dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80088d4:	e006      	b.n	80088e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80088d6:	bf00      	nop
 80088d8:	40003800 	.word	0x40003800
 80088dc:	40003400 	.word	0x40003400
 80088e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80088f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	f043 0204 	orr.w	r2, r3, #4
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fdc0 	bl	8008494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008914:	e000      	b.n	8008918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008916:	bf00      	nop
}
 8008918:	bf00      	nop
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	1c99      	adds	r1, r3, #2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6251      	str	r1, [r2, #36]	; 0x24
 8008932:	881a      	ldrh	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d113      	bne.n	800897a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008960:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7fa faa6 	bl	8002ec6 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	1c99      	adds	r1, r3, #2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6251      	str	r1, [r2, #36]	; 0x24
 8008996:	8819      	ldrh	r1, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <I2SEx_TxISR_I2SExt+0x90>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <I2SEx_TxISR_I2SExt+0x22>
 80089a2:	4b1d      	ldr	r3, [pc, #116]	; (8008a18 <I2SEx_TxISR_I2SExt+0x94>)
 80089a4:	e001      	b.n	80089aa <I2SEx_TxISR_I2SExt+0x26>
 80089a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089aa:	460a      	mov	r2, r1
 80089ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d121      	bne.n	8008a0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a12      	ldr	r2, [pc, #72]	; (8008a14 <I2SEx_TxISR_I2SExt+0x90>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d101      	bne.n	80089d4 <I2SEx_TxISR_I2SExt+0x50>
 80089d0:	4b11      	ldr	r3, [pc, #68]	; (8008a18 <I2SEx_TxISR_I2SExt+0x94>)
 80089d2:	e001      	b.n	80089d8 <I2SEx_TxISR_I2SExt+0x54>
 80089d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	490d      	ldr	r1, [pc, #52]	; (8008a14 <I2SEx_TxISR_I2SExt+0x90>)
 80089e0:	428b      	cmp	r3, r1
 80089e2:	d101      	bne.n	80089e8 <I2SEx_TxISR_I2SExt+0x64>
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <I2SEx_TxISR_I2SExt+0x94>)
 80089e6:	e001      	b.n	80089ec <I2SEx_TxISR_I2SExt+0x68>
 80089e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d106      	bne.n	8008a0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7fa fa5e 	bl	8002ec6 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40003800 	.word	0x40003800
 8008a18:	40003400 	.word	0x40003400

08008a1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68d8      	ldr	r0, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	1c99      	adds	r1, r3, #2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008a34:	b282      	uxth	r2, r0
 8008a36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d113      	bne.n	8008a78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008a5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7fa fa27 	bl	8002ec6 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a20      	ldr	r2, [pc, #128]	; (8008b10 <I2SEx_RxISR_I2SExt+0x90>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d101      	bne.n	8008a96 <I2SEx_RxISR_I2SExt+0x16>
 8008a92:	4b20      	ldr	r3, [pc, #128]	; (8008b14 <I2SEx_RxISR_I2SExt+0x94>)
 8008a94:	e001      	b.n	8008a9a <I2SEx_RxISR_I2SExt+0x1a>
 8008a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a9a:	68d8      	ldr	r0, [r3, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa0:	1c99      	adds	r1, r3, #2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008aa6:	b282      	uxth	r2, r0
 8008aa8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d121      	bne.n	8008b06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a12      	ldr	r2, [pc, #72]	; (8008b10 <I2SEx_RxISR_I2SExt+0x90>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d101      	bne.n	8008ad0 <I2SEx_RxISR_I2SExt+0x50>
 8008acc:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <I2SEx_RxISR_I2SExt+0x94>)
 8008ace:	e001      	b.n	8008ad4 <I2SEx_RxISR_I2SExt+0x54>
 8008ad0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	490d      	ldr	r1, [pc, #52]	; (8008b10 <I2SEx_RxISR_I2SExt+0x90>)
 8008adc:	428b      	cmp	r3, r1
 8008ade:	d101      	bne.n	8008ae4 <I2SEx_RxISR_I2SExt+0x64>
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <I2SEx_RxISR_I2SExt+0x94>)
 8008ae2:	e001      	b.n	8008ae8 <I2SEx_RxISR_I2SExt+0x68>
 8008ae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ae8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008aec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d106      	bne.n	8008b06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fa f9e0 	bl	8002ec6 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40003800 	.word	0x40003800
 8008b14:	40003400 	.word	0x40003400

08008b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0cc      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b2c:	4b68      	ldr	r3, [pc, #416]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d90c      	bls.n	8008b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b3a:	4b65      	ldr	r3, [pc, #404]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b42:	4b63      	ldr	r3, [pc, #396]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d001      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0b8      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d020      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b6c:	4b59      	ldr	r3, [pc, #356]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	4a58      	ldr	r2, [pc, #352]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b84:	4b53      	ldr	r3, [pc, #332]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	4a52      	ldr	r2, [pc, #328]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b90:	4b50      	ldr	r3, [pc, #320]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	494d      	ldr	r1, [pc, #308]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d044      	beq.n	8008c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb6:	4b47      	ldr	r3, [pc, #284]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d119      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e07f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d003      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d107      	bne.n	8008be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd6:	4b3f      	ldr	r3, [pc, #252]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e06f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be6:	4b3b      	ldr	r3, [pc, #236]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e067      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bf6:	4b37      	ldr	r3, [pc, #220]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f023 0203 	bic.w	r2, r3, #3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4934      	ldr	r1, [pc, #208]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c08:	f7fc fc0c 	bl	8005424 <HAL_GetTick>
 8008c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c0e:	e00a      	b.n	8008c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c10:	f7fc fc08 	bl	8005424 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e04f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c26:	4b2b      	ldr	r3, [pc, #172]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 020c 	and.w	r2, r3, #12
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d1eb      	bne.n	8008c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c38:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d20c      	bcs.n	8008c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c46:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4e:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d001      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e032      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c6c:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4916      	ldr	r1, [pc, #88]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d009      	beq.n	8008c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c8a:	4b12      	ldr	r3, [pc, #72]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	490e      	ldr	r1, [pc, #56]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c9e:	f000 f821 	bl	8008ce4 <HAL_RCC_GetSysClockFreq>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	490a      	ldr	r1, [pc, #40]	; (8008cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8008cb0:	5ccb      	ldrb	r3, [r1, r3]
 8008cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb6:	4a09      	ldr	r2, [pc, #36]	; (8008cdc <HAL_RCC_ClockConfig+0x1c4>)
 8008cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fc fb6c 	bl	800539c <HAL_InitTick>

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40023c00 	.word	0x40023c00
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	0800f040 	.word	0x0800f040
 8008cdc:	20000000 	.word	0x20000000
 8008ce0:	20000004 	.word	0x20000004

08008ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce8:	b094      	sub	sp, #80	; 0x50
 8008cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cfc:	4b79      	ldr	r3, [pc, #484]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 030c 	and.w	r3, r3, #12
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d00d      	beq.n	8008d24 <HAL_RCC_GetSysClockFreq+0x40>
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	f200 80e1 	bhi.w	8008ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x34>
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d003      	beq.n	8008d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d16:	e0db      	b.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d18:	4b73      	ldr	r3, [pc, #460]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d1c:	e0db      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d1e:	4b72      	ldr	r3, [pc, #456]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d22:	e0d8      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d24:	4b6f      	ldr	r3, [pc, #444]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d2e:	4b6d      	ldr	r3, [pc, #436]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d063      	beq.n	8008e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d3a:	4b6a      	ldr	r3, [pc, #424]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	099b      	lsrs	r3, r3, #6
 8008d40:	2200      	movs	r2, #0
 8008d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34
 8008d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008d56:	4622      	mov	r2, r4
 8008d58:	462b      	mov	r3, r5
 8008d5a:	f04f 0000 	mov.w	r0, #0
 8008d5e:	f04f 0100 	mov.w	r1, #0
 8008d62:	0159      	lsls	r1, r3, #5
 8008d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d68:	0150      	lsls	r0, r2, #5
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4621      	mov	r1, r4
 8008d70:	1a51      	subs	r1, r2, r1
 8008d72:	6139      	str	r1, [r7, #16]
 8008d74:	4629      	mov	r1, r5
 8008d76:	eb63 0301 	sbc.w	r3, r3, r1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d88:	4659      	mov	r1, fp
 8008d8a:	018b      	lsls	r3, r1, #6
 8008d8c:	4651      	mov	r1, sl
 8008d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d92:	4651      	mov	r1, sl
 8008d94:	018a      	lsls	r2, r1, #6
 8008d96:	4651      	mov	r1, sl
 8008d98:	ebb2 0801 	subs.w	r8, r2, r1
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008db6:	4690      	mov	r8, r2
 8008db8:	4699      	mov	r9, r3
 8008dba:	4623      	mov	r3, r4
 8008dbc:	eb18 0303 	adds.w	r3, r8, r3
 8008dc0:	60bb      	str	r3, [r7, #8]
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	eb49 0303 	adc.w	r3, r9, r3
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	028b      	lsls	r3, r1, #10
 8008dda:	4621      	mov	r1, r4
 8008ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008de0:	4621      	mov	r1, r4
 8008de2:	028a      	lsls	r2, r1, #10
 8008de4:	4610      	mov	r0, r2
 8008de6:	4619      	mov	r1, r3
 8008de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dea:	2200      	movs	r2, #0
 8008dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008df4:	f7f7 fa64 	bl	80002c0 <__aeabi_uldivmod>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e00:	e058      	b.n	8008eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e02:	4b38      	ldr	r3, [pc, #224]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	099b      	lsrs	r3, r3, #6
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	2300      	movs	r3, #0
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
 8008e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	464b      	mov	r3, r9
 8008e20:	f04f 0000 	mov.w	r0, #0
 8008e24:	f04f 0100 	mov.w	r1, #0
 8008e28:	0159      	lsls	r1, r3, #5
 8008e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e2e:	0150      	lsls	r0, r2, #5
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4641      	mov	r1, r8
 8008e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e54:	ebb2 040a 	subs.w	r4, r2, sl
 8008e58:	eb63 050b 	sbc.w	r5, r3, fp
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	f04f 0300 	mov.w	r3, #0
 8008e64:	00eb      	lsls	r3, r5, #3
 8008e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e6a:	00e2      	lsls	r2, r4, #3
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	461d      	mov	r5, r3
 8008e70:	4643      	mov	r3, r8
 8008e72:	18e3      	adds	r3, r4, r3
 8008e74:	603b      	str	r3, [r7, #0]
 8008e76:	464b      	mov	r3, r9
 8008e78:	eb45 0303 	adc.w	r3, r5, r3
 8008e7c:	607b      	str	r3, [r7, #4]
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	028b      	lsls	r3, r1, #10
 8008e8e:	4621      	mov	r1, r4
 8008e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e94:	4621      	mov	r1, r4
 8008e96:	028a      	lsls	r2, r1, #10
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	61bb      	str	r3, [r7, #24]
 8008ea2:	61fa      	str	r2, [r7, #28]
 8008ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ea8:	f7f7 fa0a 	bl	80002c0 <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ece:	e002      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3750      	adds	r7, #80	; 0x50
 8008edc:	46bd      	mov	sp, r7
 8008ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ee2:	bf00      	nop
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	00f42400 	.word	0x00f42400

08008eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ef0:	4b03      	ldr	r3, [pc, #12]	; (8008f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20000000 	.word	0x20000000

08008f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f08:	f7ff fff0 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	0a9b      	lsrs	r3, r3, #10
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	4903      	ldr	r1, [pc, #12]	; (8008f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f1a:	5ccb      	ldrb	r3, [r1, r3]
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	40023800 	.word	0x40023800
 8008f28:	0800f050 	.word	0x0800f050

08008f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f30:	f7ff ffdc 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8008f34:	4602      	mov	r2, r0
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	0b5b      	lsrs	r3, r3, #13
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	4903      	ldr	r1, [pc, #12]	; (8008f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f42:	5ccb      	ldrb	r3, [r1, r3]
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	40023800 	.word	0x40023800
 8008f50:	0800f050 	.word	0x0800f050

08008f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d010      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008f74:	4b87      	ldr	r3, [pc, #540]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f7a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	4984      	ldr	r1, [pc, #528]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8008f92:	2301      	movs	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d010      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008fa2:	4b7c      	ldr	r3, [pc, #496]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	4978      	ldr	r1, [pc, #480]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8083 	beq.w	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	4b6f      	ldr	r3, [pc, #444]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	4a6e      	ldr	r2, [pc, #440]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8008fe2:	4b6c      	ldr	r3, [pc, #432]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fea:	60bb      	str	r3, [r7, #8]
 8008fec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008fee:	4b6a      	ldr	r3, [pc, #424]	; (8009198 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a69      	ldr	r2, [pc, #420]	; (8009198 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ffa:	f7fc fa13 	bl	8005424 <HAL_GetTick>
 8008ffe:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009000:	e008      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009002:	f7fc fa0f 	bl	8005424 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	d901      	bls.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e162      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009014:	4b60      	ldr	r3, [pc, #384]	; (8009198 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f0      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009020:	4b5c      	ldr	r3, [pc, #368]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009028:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02f      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	429a      	cmp	r2, r3
 800903c:	d028      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800903e:	4b55      	ldr	r3, [pc, #340]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009046:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009048:	4b54      	ldr	r3, [pc, #336]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800904e:	4b53      	ldr	r3, [pc, #332]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009054:	4a4f      	ldr	r2, [pc, #316]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800905a:	4b4e      	ldr	r3, [pc, #312]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b01      	cmp	r3, #1
 8009064:	d114      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009066:	f7fc f9dd 	bl	8005424 <HAL_GetTick>
 800906a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800906c:	e00a      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800906e:	f7fc f9d9 	bl	8005424 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	f241 3288 	movw	r2, #5000	; 0x1388
 800907c:	4293      	cmp	r3, r2
 800907e:	d901      	bls.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e12a      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009084:	4b43      	ldr	r3, [pc, #268]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0ee      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	69db      	ldr	r3, [r3, #28]
 8009094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800909c:	d10d      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800909e:	4b3d      	ldr	r3, [pc, #244]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80090ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b2:	4938      	ldr	r1, [pc, #224]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	608b      	str	r3, [r1, #8]
 80090b8:	e005      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80090ba:	4b36      	ldr	r3, [pc, #216]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	4a35      	ldr	r2, [pc, #212]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80090c4:	6093      	str	r3, [r2, #8]
 80090c6:	4b33      	ldr	r3, [pc, #204]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d2:	4930      	ldr	r1, [pc, #192]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80090ea:	4b2d      	ldr	r3, [pc, #180]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80090ec:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80090fa:	4b26      	ldr	r3, [pc, #152]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80090fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	4922      	ldr	r1, [pc, #136]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d011      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800911c:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800911e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009122:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912a:	491a      	ldr	r1, [pc, #104]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800913a:	d101      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 800913c:	2301      	movs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800914e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009152:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	490e      	ldr	r1, [pc, #56]	; (8009194 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800915c:	4313      	orrs	r3, r2
 800915e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d004      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b80      	cmp	r3, #128	; 0x80
 800916e:	f040 8091 	bne.w	8009294 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009178:	f7fc f954 	bl	8005424 <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800917e:	e013      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009180:	f7fc f950 	bl	8005424 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d90c      	bls.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e0a3      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009192:	bf00      	nop
 8009194:	40023800 	.word	0x40023800
 8009198:	40007000 	.word	0x40007000
 800919c:	42470e40 	.word	0x42470e40
 80091a0:	424711e0 	.word	0x424711e0
 80091a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091a8:	4b4e      	ldr	r3, [pc, #312]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e5      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80091b4:	4a4c      	ldr	r2, [pc, #304]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ba:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d023      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d019      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091f8:	d00e      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009202:	2b00      	cmp	r3, #0
 8009204:	d019      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d115      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009216:	d110      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	019b      	lsls	r3, r3, #6
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	061b      	lsls	r3, r3, #24
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	071b      	lsls	r3, r3, #28
 8009232:	492c      	ldr	r1, [pc, #176]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b00      	cmp	r3, #0
 8009244:	d010      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	019b      	lsls	r3, r3, #6
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	061b      	lsls	r3, r3, #24
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	071b      	lsls	r3, r3, #28
 8009260:	4920      	ldr	r1, [pc, #128]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8009262:	4313      	orrs	r3, r2
 8009264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009268:	4b20      	ldr	r3, [pc, #128]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800926e:	f7fc f8d9 	bl	8005424 <HAL_GetTick>
 8009272:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009274:	e008      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009276:	f7fc f8d5 	bl	8005424 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e028      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009288:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f0      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00a      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092a0:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80092a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	490d      	ldr	r1, [pc, #52]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80092c2:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80092c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40023800 	.word	0x40023800
 80092e8:	424710d8 	.word	0x424710d8
 80092ec:	42470068 	.word	0x42470068

080092f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d004      	beq.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b02      	cmp	r3, #2
 8009312:	f000 80a1 	beq.w	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8009316:	e13f      	b.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8009318:	4ba3      	ldr	r3, [pc, #652]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800931a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800931e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800932a:	f000 8084 	beq.w	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009334:	f200 808c 	bhi.w	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800933e:	d04f      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009346:	f200 8083 	bhi.w	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d006      	beq.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009356:	d17b      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009358:	4b94      	ldr	r3, [pc, #592]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800935a:	617b      	str	r3, [r7, #20]
          break;
 800935c:	e07b      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800935e:	4b92      	ldr	r3, [pc, #584]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800936c:	d109      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800936e:	4b8e      	ldr	r3, [pc, #568]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009378:	4a8c      	ldr	r2, [pc, #560]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800937a:	fbb2 f3f3 	udiv	r3, r2, r3
 800937e:	613b      	str	r3, [r7, #16]
 8009380:	e019      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009382:	4b89      	ldr	r3, [pc, #548]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800938a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800938e:	d109      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009390:	4b85      	ldr	r3, [pc, #532]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800939a:	4a85      	ldr	r2, [pc, #532]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800939c:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	e008      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80093a4:	4b80      	ldr	r3, [pc, #512]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80093a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ae:	4a80      	ldr	r2, [pc, #512]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80093b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b4:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80093b6:	4b7c      	ldr	r3, [pc, #496]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80093b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093bc:	099b      	lsrs	r3, r3, #6
 80093be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80093ca:	4b77      	ldr	r3, [pc, #476]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80093cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d0:	0f1b      	lsrs	r3, r3, #28
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093dc:	617b      	str	r3, [r7, #20]
          break;
 80093de:	e03a      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80093e0:	4b71      	ldr	r3, [pc, #452]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ec:	d108      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80093ee:	4b6e      	ldr	r3, [pc, #440]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f6:	4a6e      	ldr	r2, [pc, #440]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80093f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fc:	613b      	str	r3, [r7, #16]
 80093fe:	e007      	b.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009400:	4b69      	ldr	r3, [pc, #420]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009408:	4a69      	ldr	r2, [pc, #420]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800940a:	fbb2 f3f3 	udiv	r3, r2, r3
 800940e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009410:	4b65      	ldr	r3, [pc, #404]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	099b      	lsrs	r3, r3, #6
 8009416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	fb02 f303 	mul.w	r3, r2, r3
 8009420:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009422:	4b61      	ldr	r3, [pc, #388]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	0f1b      	lsrs	r3, r3, #28
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009432:	617b      	str	r3, [r7, #20]
          break;
 8009434:	e00f      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009436:	4b5c      	ldr	r3, [pc, #368]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800943e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009442:	d102      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8009444:	4b5a      	ldr	r3, [pc, #360]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009446:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8009448:	e005      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 800944a:	4b59      	ldr	r3, [pc, #356]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800944c:	617b      	str	r3, [r7, #20]
          break;
 800944e:	e002      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	617b      	str	r3, [r7, #20]
          break;
 8009454:	bf00      	nop
        }
      }
      break;
 8009456:	e09f      	b.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8009458:	4b53      	ldr	r3, [pc, #332]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800945a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800946a:	f000 8084 	beq.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009474:	f200 808c 	bhi.w	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800947e:	d04f      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009486:	f200 8083 	bhi.w	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d006      	beq.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009496:	d17b      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009498:	4b44      	ldr	r3, [pc, #272]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800949a:	617b      	str	r3, [r7, #20]
          break;
 800949c:	e07b      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800949e:	4b42      	ldr	r3, [pc, #264]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ac:	d109      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80094ae:	4b3e      	ldr	r3, [pc, #248]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b8:	4a3c      	ldr	r2, [pc, #240]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80094ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	e019      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80094c2:	4b39      	ldr	r3, [pc, #228]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ce:	d109      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80094d0:	4b35      	ldr	r3, [pc, #212]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094da:	4a35      	ldr	r2, [pc, #212]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80094dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e0:	613b      	str	r3, [r7, #16]
 80094e2:	e008      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80094e4:	4b30      	ldr	r3, [pc, #192]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ee:	4a30      	ldr	r2, [pc, #192]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80094f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f4:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80094f6:	4b2c      	ldr	r3, [pc, #176]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80094f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fc:	099b      	lsrs	r3, r3, #6
 80094fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	fb02 f303 	mul.w	r3, r2, r3
 8009508:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800950a:	4b27      	ldr	r3, [pc, #156]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800950c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009510:	0f1b      	lsrs	r3, r3, #28
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	617b      	str	r3, [r7, #20]
          break;
 800951e:	e03a      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009520:	4b21      	ldr	r3, [pc, #132]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800952c:	d108      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800952e:	4b1e      	ldr	r3, [pc, #120]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009536:	4a1e      	ldr	r2, [pc, #120]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009538:	fbb2 f3f3 	udiv	r3, r2, r3
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e007      	b.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009540:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009548:	4a19      	ldr	r2, [pc, #100]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800954a:	fbb2 f3f3 	udiv	r3, r2, r3
 800954e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009550:	4b15      	ldr	r3, [pc, #84]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	099b      	lsrs	r3, r3, #6
 8009556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	fb02 f303 	mul.w	r3, r2, r3
 8009560:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	0f1b      	lsrs	r3, r3, #28
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009572:	617b      	str	r3, [r7, #20]
          break;
 8009574:	e00f      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009576:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800957e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009582:	d102      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009586:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8009588:	e005      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800958c:	617b      	str	r3, [r7, #20]
          break;
 800958e:	e002      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
          break;
 8009594:	bf00      	nop
        }
      }
      break;
 8009596:	bf00      	nop
    }
  }
  return frequency;
 8009598:	697b      	ldr	r3, [r7, #20]
}
 800959a:	4618      	mov	r0, r3
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40023800 	.word	0x40023800
 80095ac:	00bb8000 	.word	0x00bb8000
 80095b0:	00f42400 	.word	0x00f42400

080095b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e273      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d075      	beq.n	80096be <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80095d2:	4b88      	ldr	r3, [pc, #544]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f003 030c 	and.w	r3, r3, #12
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d00c      	beq.n	80095f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095de:	4b85      	ldr	r3, [pc, #532]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d112      	bne.n	8009610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095ea:	4b82      	ldr	r3, [pc, #520]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f6:	d10b      	bne.n	8009610 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095f8:	4b7e      	ldr	r3, [pc, #504]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d05b      	beq.n	80096bc <HAL_RCC_OscConfig+0x108>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d157      	bne.n	80096bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e24e      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009618:	d106      	bne.n	8009628 <HAL_RCC_OscConfig+0x74>
 800961a:	4b76      	ldr	r3, [pc, #472]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a75      	ldr	r2, [pc, #468]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	e01d      	b.n	8009664 <HAL_RCC_OscConfig+0xb0>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009630:	d10c      	bne.n	800964c <HAL_RCC_OscConfig+0x98>
 8009632:	4b70      	ldr	r3, [pc, #448]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a6f      	ldr	r2, [pc, #444]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	4b6d      	ldr	r3, [pc, #436]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a6c      	ldr	r2, [pc, #432]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	e00b      	b.n	8009664 <HAL_RCC_OscConfig+0xb0>
 800964c:	4b69      	ldr	r3, [pc, #420]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a68      	ldr	r2, [pc, #416]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	4b66      	ldr	r3, [pc, #408]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a65      	ldr	r2, [pc, #404]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 800965e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d013      	beq.n	8009694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800966c:	f7fb feda 	bl	8005424 <HAL_GetTick>
 8009670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009672:	e008      	b.n	8009686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009674:	f7fb fed6 	bl	8005424 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b64      	cmp	r3, #100	; 0x64
 8009680:	d901      	bls.n	8009686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e213      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009686:	4b5b      	ldr	r3, [pc, #364]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0f0      	beq.n	8009674 <HAL_RCC_OscConfig+0xc0>
 8009692:	e014      	b.n	80096be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009694:	f7fb fec6 	bl	8005424 <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800969a:	e008      	b.n	80096ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800969c:	f7fb fec2 	bl	8005424 <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b64      	cmp	r3, #100	; 0x64
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e1ff      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ae:	4b51      	ldr	r3, [pc, #324]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f0      	bne.n	800969c <HAL_RCC_OscConfig+0xe8>
 80096ba:	e000      	b.n	80096be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d063      	beq.n	8009792 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80096ca:	4b4a      	ldr	r3, [pc, #296]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 030c 	and.w	r3, r3, #12
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096d6:	4b47      	ldr	r3, [pc, #284]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80096de:	2b08      	cmp	r3, #8
 80096e0:	d11c      	bne.n	800971c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096e2:	4b44      	ldr	r3, [pc, #272]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d116      	bne.n	800971c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096ee:	4b41      	ldr	r3, [pc, #260]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_RCC_OscConfig+0x152>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d001      	beq.n	8009706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e1d3      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009706:	4b3b      	ldr	r3, [pc, #236]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4937      	ldr	r1, [pc, #220]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009716:	4313      	orrs	r3, r2
 8009718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800971a:	e03a      	b.n	8009792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d020      	beq.n	8009766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009724:	4b34      	ldr	r3, [pc, #208]	; (80097f8 <HAL_RCC_OscConfig+0x244>)
 8009726:	2201      	movs	r2, #1
 8009728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972a:	f7fb fe7b 	bl	8005424 <HAL_GetTick>
 800972e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009730:	e008      	b.n	8009744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009732:	f7fb fe77 	bl	8005424 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e1b4      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009744:	4b2b      	ldr	r3, [pc, #172]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0f0      	beq.n	8009732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009750:	4b28      	ldr	r3, [pc, #160]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	4925      	ldr	r1, [pc, #148]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009760:	4313      	orrs	r3, r2
 8009762:	600b      	str	r3, [r1, #0]
 8009764:	e015      	b.n	8009792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009766:	4b24      	ldr	r3, [pc, #144]	; (80097f8 <HAL_RCC_OscConfig+0x244>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800976c:	f7fb fe5a 	bl	8005424 <HAL_GetTick>
 8009770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009772:	e008      	b.n	8009786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009774:	f7fb fe56 	bl	8005424 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b02      	cmp	r3, #2
 8009780:	d901      	bls.n	8009786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e193      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009786:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1f0      	bne.n	8009774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b00      	cmp	r3, #0
 800979c:	d036      	beq.n	800980c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d016      	beq.n	80097d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097a6:	4b15      	ldr	r3, [pc, #84]	; (80097fc <HAL_RCC_OscConfig+0x248>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ac:	f7fb fe3a 	bl	8005424 <HAL_GetTick>
 80097b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097b2:	e008      	b.n	80097c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097b4:	f7fb fe36 	bl	8005424 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d901      	bls.n	80097c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e173      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097c6:	4b0b      	ldr	r3, [pc, #44]	; (80097f4 <HAL_RCC_OscConfig+0x240>)
 80097c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0f0      	beq.n	80097b4 <HAL_RCC_OscConfig+0x200>
 80097d2:	e01b      	b.n	800980c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <HAL_RCC_OscConfig+0x248>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097da:	f7fb fe23 	bl	8005424 <HAL_GetTick>
 80097de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097e0:	e00e      	b.n	8009800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097e2:	f7fb fe1f 	bl	8005424 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d907      	bls.n	8009800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e15c      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
 80097f4:	40023800 	.word	0x40023800
 80097f8:	42470000 	.word	0x42470000
 80097fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009800:	4b8a      	ldr	r3, [pc, #552]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1ea      	bne.n	80097e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8097 	beq.w	8009948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800981e:	4b83      	ldr	r3, [pc, #524]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10f      	bne.n	800984a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800982a:	2300      	movs	r3, #0
 800982c:	60bb      	str	r3, [r7, #8]
 800982e:	4b7f      	ldr	r3, [pc, #508]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	4a7e      	ldr	r2, [pc, #504]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009838:	6413      	str	r3, [r2, #64]	; 0x40
 800983a:	4b7c      	ldr	r3, [pc, #496]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009842:	60bb      	str	r3, [r7, #8]
 8009844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009846:	2301      	movs	r3, #1
 8009848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800984a:	4b79      	ldr	r3, [pc, #484]	; (8009a30 <HAL_RCC_OscConfig+0x47c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d118      	bne.n	8009888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009856:	4b76      	ldr	r3, [pc, #472]	; (8009a30 <HAL_RCC_OscConfig+0x47c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a75      	ldr	r2, [pc, #468]	; (8009a30 <HAL_RCC_OscConfig+0x47c>)
 800985c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009862:	f7fb fddf 	bl	8005424 <HAL_GetTick>
 8009866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009868:	e008      	b.n	800987c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800986a:	f7fb fddb 	bl	8005424 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d901      	bls.n	800987c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e118      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800987c:	4b6c      	ldr	r3, [pc, #432]	; (8009a30 <HAL_RCC_OscConfig+0x47c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0f0      	beq.n	800986a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d106      	bne.n	800989e <HAL_RCC_OscConfig+0x2ea>
 8009890:	4b66      	ldr	r3, [pc, #408]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009894:	4a65      	ldr	r2, [pc, #404]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009896:	f043 0301 	orr.w	r3, r3, #1
 800989a:	6713      	str	r3, [r2, #112]	; 0x70
 800989c:	e01c      	b.n	80098d8 <HAL_RCC_OscConfig+0x324>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	2b05      	cmp	r3, #5
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCC_OscConfig+0x30c>
 80098a6:	4b61      	ldr	r3, [pc, #388]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098aa:	4a60      	ldr	r2, [pc, #384]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098ac:	f043 0304 	orr.w	r3, r3, #4
 80098b0:	6713      	str	r3, [r2, #112]	; 0x70
 80098b2:	4b5e      	ldr	r3, [pc, #376]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b6:	4a5d      	ldr	r2, [pc, #372]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098b8:	f043 0301 	orr.w	r3, r3, #1
 80098bc:	6713      	str	r3, [r2, #112]	; 0x70
 80098be:	e00b      	b.n	80098d8 <HAL_RCC_OscConfig+0x324>
 80098c0:	4b5a      	ldr	r3, [pc, #360]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c4:	4a59      	ldr	r2, [pc, #356]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098c6:	f023 0301 	bic.w	r3, r3, #1
 80098ca:	6713      	str	r3, [r2, #112]	; 0x70
 80098cc:	4b57      	ldr	r3, [pc, #348]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d0:	4a56      	ldr	r2, [pc, #344]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80098d2:	f023 0304 	bic.w	r3, r3, #4
 80098d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d015      	beq.n	800990c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098e0:	f7fb fda0 	bl	8005424 <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098e6:	e00a      	b.n	80098fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098e8:	f7fb fd9c 	bl	8005424 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e0d7      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098fe:	4b4b      	ldr	r3, [pc, #300]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0ee      	beq.n	80098e8 <HAL_RCC_OscConfig+0x334>
 800990a:	e014      	b.n	8009936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990c:	f7fb fd8a 	bl	8005424 <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009912:	e00a      	b.n	800992a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009914:	f7fb fd86 	bl	8005424 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009922:	4293      	cmp	r3, r2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e0c1      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800992a:	4b40      	ldr	r3, [pc, #256]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1ee      	bne.n	8009914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d105      	bne.n	8009948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800993c:	4b3b      	ldr	r3, [pc, #236]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	4a3a      	ldr	r2, [pc, #232]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 80ad 	beq.w	8009aac <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009952:	4b36      	ldr	r3, [pc, #216]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f003 030c 	and.w	r3, r3, #12
 800995a:	2b08      	cmp	r3, #8
 800995c:	d060      	beq.n	8009a20 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d145      	bne.n	80099f2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009966:	4b33      	ldr	r3, [pc, #204]	; (8009a34 <HAL_RCC_OscConfig+0x480>)
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996c:	f7fb fd5a 	bl	8005424 <HAL_GetTick>
 8009970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009972:	e008      	b.n	8009986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009974:	f7fb fd56 	bl	8005424 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d901      	bls.n	8009986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e093      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009986:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1f0      	bne.n	8009974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69da      	ldr	r2, [r3, #28]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	019b      	lsls	r3, r3, #6
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a8:	085b      	lsrs	r3, r3, #1
 80099aa:	3b01      	subs	r3, #1
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	431a      	orrs	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	061b      	lsls	r3, r3, #24
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099bc:	071b      	lsls	r3, r3, #28
 80099be:	491b      	ldr	r1, [pc, #108]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099c4:	4b1b      	ldr	r3, [pc, #108]	; (8009a34 <HAL_RCC_OscConfig+0x480>)
 80099c6:	2201      	movs	r2, #1
 80099c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ca:	f7fb fd2b 	bl	8005424 <HAL_GetTick>
 80099ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099d0:	e008      	b.n	80099e4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099d2:	f7fb fd27 	bl	8005424 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d901      	bls.n	80099e4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e064      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099e4:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f0      	beq.n	80099d2 <HAL_RCC_OscConfig+0x41e>
 80099f0:	e05c      	b.n	8009aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099f2:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <HAL_RCC_OscConfig+0x480>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f8:	f7fb fd14 	bl	8005424 <HAL_GetTick>
 80099fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099fe:	e008      	b.n	8009a12 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a00:	f7fb fd10 	bl	8005424 <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d901      	bls.n	8009a12 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e04d      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <HAL_RCC_OscConfig+0x478>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1f0      	bne.n	8009a00 <HAL_RCC_OscConfig+0x44c>
 8009a1e:	e045      	b.n	8009aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d107      	bne.n	8009a38 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e040      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	40007000 	.word	0x40007000
 8009a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a38:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <HAL_RCC_OscConfig+0x504>)
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d030      	beq.n	8009aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d129      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d122      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a68:	4013      	ands	r3, r2
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d119      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	3b01      	subs	r3, #1
 8009a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d10f      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d107      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d001      	beq.n	8009aac <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e000      	b.n	8009aae <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	40023800 	.word	0x40023800

08009abc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e066      	b.n	8009ba0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7f5b      	ldrb	r3, [r3, #29]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fa fbf2 	bl	80042cc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	22ca      	movs	r2, #202	; 0xca
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2253      	movs	r2, #83	; 0x53
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fb2a 	bl	800a158 <RTC_EnterInitMode>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d12c      	bne.n	8009b68 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b20:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6899      	ldr	r1, [r3, #8]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68d2      	ldr	r2, [r2, #12]
 8009b48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6919      	ldr	r1, [r3, #16]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	041a      	lsls	r2, r3, #16
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fb31 	bl	800a1c6 <RTC_ExitInitMode>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d113      	bne.n	8009b96 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	699a      	ldr	r2, [r3, #24]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	22ff      	movs	r2, #255	; 0xff
 8009b9c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	7f1b      	ldrb	r3, [r3, #28]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_RTC_SetTime+0x1c>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e087      	b.n	8009cd4 <HAL_RTC_SetTime+0x12c>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d126      	bne.n	8009c24 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d102      	bne.n	8009bea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2200      	movs	r2, #0
 8009be8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fb0e 	bl	800a210 <RTC_ByteToBcd2>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fb07 	bl	800a210 <RTC_ByteToBcd2>
 8009c02:	4603      	mov	r3, r0
 8009c04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	789b      	ldrb	r3, [r3, #2]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 faff 	bl	800a210 <RTC_ByteToBcd2>
 8009c12:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c14:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	78db      	ldrb	r3, [r3, #3]
 8009c1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e018      	b.n	8009c56 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009c44:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009c4a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	78db      	ldrb	r3, [r3, #3]
 8009c50:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009c52:	4313      	orrs	r3, r2
 8009c54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	22ca      	movs	r2, #202	; 0xca
 8009c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2253      	movs	r2, #83	; 0x53
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fa76 	bl	800a158 <RTC_EnterInitMode>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009c70:	7cfb      	ldrb	r3, [r7, #19]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d120      	bne.n	8009cb8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009c80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009c84:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6899      	ldr	r1, [r3, #8]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	68da      	ldr	r2, [r3, #12]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 fa89 	bl	800a1c6 <RTC_ExitInitMode>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009cb8:	7cfb      	ldrb	r3, [r7, #19]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	22ff      	movs	r2, #255	; 0xff
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	771a      	strb	r2, [r3, #28]

  return status;
 8009cd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd90      	pop	{r4, r7, pc}

08009cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cdc:	b590      	push	{r4, r7, lr}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	7f1b      	ldrb	r3, [r3, #28]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_RTC_SetDate+0x1c>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e071      	b.n	8009ddc <HAL_RTC_SetDate+0x100>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2202      	movs	r2, #2
 8009d02:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10e      	bne.n	8009d28 <HAL_RTC_SetDate+0x4c>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	f003 0310 	and.w	r3, r3, #16
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d008      	beq.n	8009d28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	f023 0310 	bic.w	r3, r3, #16
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	330a      	adds	r3, #10
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d11c      	bne.n	8009d68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	78db      	ldrb	r3, [r3, #3]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 fa6c 	bl	800a210 <RTC_ByteToBcd2>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fa65 	bl	800a210 <RTC_ByteToBcd2>
 8009d46:	4603      	mov	r3, r0
 8009d48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	789b      	ldrb	r3, [r3, #2]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fa5d 	bl	800a210 <RTC_ByteToBcd2>
 8009d56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	e00e      	b.n	8009d86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	78db      	ldrb	r3, [r3, #3]
 8009d6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d74:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009d7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d82:	4313      	orrs	r3, r2
 8009d84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	22ca      	movs	r2, #202	; 0xca
 8009d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2253      	movs	r2, #83	; 0x53
 8009d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f9de 	bl	800a158 <RTC_EnterInitMode>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009da0:	7cfb      	ldrb	r3, [r7, #19]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10c      	bne.n	8009dc0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009db0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009db4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fa05 	bl	800a1c6 <RTC_ExitInitMode>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009dc0:	7cfb      	ldrb	r3, [r7, #19]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	22ff      	movs	r2, #255	; 0xff
 8009dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	771a      	strb	r2, [r3, #28]

  return status;
 8009dda:	7cfb      	ldrb	r3, [r7, #19]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd90      	pop	{r4, r7, pc}

08009de4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009de4:	b590      	push	{r4, r7, lr}
 8009de6:	b089      	sub	sp, #36	; 0x24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009df0:	4b9a      	ldr	r3, [pc, #616]	; (800a05c <HAL_RTC_SetAlarm_IT+0x278>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a9a      	ldr	r2, [pc, #616]	; (800a060 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009df6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfa:	0adb      	lsrs	r3, r3, #11
 8009dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e00:	fb02 f303 	mul.w	r3, r2, r3
 8009e04:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	7f1b      	ldrb	r3, [r3, #28]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <HAL_RTC_SetAlarm_IT+0x36>
 8009e16:	2302      	movs	r3, #2
 8009e18:	e11c      	b.n	800a054 <HAL_RTC_SetAlarm_IT+0x270>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2202      	movs	r2, #2
 8009e24:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d137      	bne.n	8009e9c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d102      	bne.n	8009e40 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 f9e3 	bl	800a210 <RTC_ByteToBcd2>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f9dc 	bl	800a210 <RTC_ByteToBcd2>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009e5c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	789b      	ldrb	r3, [r3, #2]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 f9d4 	bl	800a210 <RTC_ByteToBcd2>
 8009e68:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009e6a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	78db      	ldrb	r3, [r3, #3]
 8009e72:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009e74:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 f9c6 	bl	800a210 <RTC_ByteToBcd2>
 8009e84:	4603      	mov	r3, r0
 8009e86:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009e88:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009e90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009e96:	4313      	orrs	r3, r2
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	e023      	b.n	8009ee4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2200      	movs	r2, #0
 8009eae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ebc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009ec2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	78db      	ldrb	r3, [r3, #3]
 8009ec8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009eca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ed2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009ed4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009eda:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009eec:	4313      	orrs	r3, r2
 8009eee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	22ca      	movs	r2, #202	; 0xca
 8009ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2253      	movs	r2, #83	; 0x53
 8009efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f08:	d141      	bne.n	8009f8e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f18:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009f2a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	1e5a      	subs	r2, r3, #1
 8009f30:	617a      	str	r2, [r7, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10b      	bne.n	8009f4e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	22ff      	movs	r2, #255	; 0xff
 8009f3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2203      	movs	r2, #3
 8009f42:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e082      	b.n	800a054 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0e7      	beq.n	8009f2c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	69fa      	ldr	r2, [r7, #28]
 8009f62:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f7a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f8a:	609a      	str	r2, [r3, #8]
 8009f8c:	e04b      	b.n	800a026 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009f9c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009fae:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009fb0:	4b2a      	ldr	r3, [pc, #168]	; (800a05c <HAL_RTC_SetAlarm_IT+0x278>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a2a      	ldr	r2, [pc, #168]	; (800a060 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	0adb      	lsrs	r3, r3, #11
 8009fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	1e5a      	subs	r2, r3, #1
 8009fca:	617a      	str	r2, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10b      	bne.n	8009fe8 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2203      	movs	r2, #3
 8009fdc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e035      	b.n	800a054 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0e7      	beq.n	8009fc6 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a014:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a024:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a026:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <HAL_RTC_SetAlarm_IT+0x280>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a0e      	ldr	r2, [pc, #56]	; (800a064 <HAL_RTC_SetAlarm_IT+0x280>)
 800a02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a030:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <HAL_RTC_SetAlarm_IT+0x280>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	4a0b      	ldr	r2, [pc, #44]	; (800a064 <HAL_RTC_SetAlarm_IT+0x280>)
 800a038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a03c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	22ff      	movs	r2, #255	; 0xff
 800a044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3724      	adds	r7, #36	; 0x24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd90      	pop	{r4, r7, pc}
 800a05c:	20000000 	.word	0x20000000
 800a060:	10624dd3 	.word	0x10624dd3
 800a064:	40013c00 	.word	0x40013c00

0800a068 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d012      	beq.n	800a0a4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f831 	bl	800a0f4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a0a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d012      	beq.n	800a0d8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f8c2 	bl	800a24a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a0d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a0d8:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800a0da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a0de:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	775a      	strb	r2, [r3, #29]
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	40013c00 	.word	0x40013c00

0800a0f4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a122:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a124:	f7fb f97e 	bl	8005424 <HAL_GetTick>
 800a128:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a12a:	e009      	b.n	800a140 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a12c:	f7fb f97a 	bl	8005424 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a13a:	d901      	bls.n	800a140 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e007      	b.n	800a150 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0ee      	beq.n	800a12c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d122      	bne.n	800a1bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a184:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a186:	f7fb f94d 	bl	8005424 <HAL_GetTick>
 800a18a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a18c:	e00c      	b.n	800a1a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a18e:	f7fb f949 	bl	8005424 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a19c:	d904      	bls.n	800a1a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2204      	movs	r2, #4
 800a1a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d102      	bne.n	800a1bc <RTC_EnterInitMode+0x64>
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d1e8      	bne.n	800a18e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff ff89 	bl	800a108 <HAL_RTC_WaitForSynchro>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d004      	beq.n	800a206 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2204      	movs	r2, #4
 800a200:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a206:	7bfb      	ldrb	r3, [r7, #15]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800a21e:	e005      	b.n	800a22c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	3301      	adds	r3, #1
 800a224:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	3b0a      	subs	r3, #10
 800a22a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b09      	cmp	r3, #9
 800a230:	d8f6      	bhi.n	800a220 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	b2da      	uxtb	r2, r3
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	b2db      	uxtb	r3, r3
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e022      	b.n	800a2b6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d105      	bne.n	800a288 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fa f854 	bl	8004330 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2203      	movs	r2, #3
 800a28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f815 	bl	800a2c0 <HAL_SD_InitCard>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e00a      	b.n	800a2b6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2c0:	b5b0      	push	{r4, r5, r7, lr}
 800a2c2:	b08e      	sub	sp, #56	; 0x38
 800a2c4:	af04      	add	r7, sp, #16
 800a2c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a2dc:	2376      	movs	r3, #118	; 0x76
 800a2de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681d      	ldr	r5, [r3, #0]
 800a2e4:	466c      	mov	r4, sp
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a2f2:	f107 0308 	add.w	r3, r7, #8
 800a2f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f003 f961 	bl	800d5c0 <SDIO_Init>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e04f      	b.n	800a3b0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a310:	4b29      	ldr	r3, [pc, #164]	; (800a3b8 <HAL_SD_InitCard+0xf8>)
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f003 f999 	bl	800d652 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a320:	4b25      	ldr	r3, [pc, #148]	; (800a3b8 <HAL_SD_InitCard+0xf8>)
 800a322:	2201      	movs	r2, #1
 800a324:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a326:	2002      	movs	r0, #2
 800a328:	f7fb f888 	bl	800543c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fe69 	bl	800b004 <SD_PowerON>
 800a332:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a334:	6a3b      	ldr	r3, [r7, #32]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00b      	beq.n	800a352 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e02e      	b.n	800a3b0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fd88 	bl	800ae68 <SD_InitCard>
 800a358:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e01b      	b.n	800a3b0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a380:	4618      	mov	r0, r3
 800a382:	f003 f9f8 	bl	800d776 <SDMMC_CmdBlockLength>
 800a386:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00f      	beq.n	800a3ae <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <HAL_SD_InitCard+0xfc>)
 800a394:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e000      	b.n	800a3b0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3728      	adds	r7, #40	; 0x28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bdb0      	pop	{r4, r5, r7, pc}
 800a3b8:	422580a0 	.word	0x422580a0
 800a3bc:	004005ff 	.word	0x004005ff

0800a3c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b092      	sub	sp, #72	; 0x48
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a3ce:	f7fb f829 	bl	8005424 <HAL_GetTick>
 800a3d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d107      	bne.n	800a3f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e1bd      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	f040 81b0 	bne.w	800a760 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	441a      	add	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a410:	429a      	cmp	r2, r3
 800a412:	d907      	bls.n	800a424 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e1a4      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2203      	movs	r2, #3
 800a428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2200      	movs	r2, #0
 800a432:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d002      	beq.n	800a442 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	025b      	lsls	r3, r3, #9
 800a440:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	025b      	lsls	r3, r3, #9
 800a44c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a44e:	2390      	movs	r3, #144	; 0x90
 800a450:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a452:	2302      	movs	r3, #2
 800a454:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a456:	2300      	movs	r3, #0
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a45a:	2301      	movs	r3, #1
 800a45c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f107 0214 	add.w	r2, r7, #20
 800a466:	4611      	mov	r1, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	f003 f958 	bl	800d71e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d90a      	bls.n	800a48a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2202      	movs	r2, #2
 800a478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a480:	4618      	mov	r0, r3
 800a482:	f003 f9bc 	bl	800d7fe <SDMMC_CmdReadMultiBlock>
 800a486:	6478      	str	r0, [r7, #68]	; 0x44
 800a488:	e009      	b.n	800a49e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a496:	4618      	mov	r0, r3
 800a498:	f003 f98f 	bl	800d7ba <SDMMC_CmdReadSingleBlock>
 800a49c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d012      	beq.n	800a4ca <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a7a      	ldr	r2, [pc, #488]	; (800a694 <HAL_SD_ReadBlocks+0x2d4>)
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e151      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800a4ce:	e061      	b.n	800a594 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d03c      	beq.n	800a558 <HAL_SD_ReadBlocks+0x198>
 800a4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d039      	beq.n	800a558 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	643b      	str	r3, [r7, #64]	; 0x40
 800a4e8:	e033      	b.n	800a552 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f003 f891 	bl	800d616 <SDIO_ReadFIFO>
 800a4f4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	3301      	adds	r3, #1
 800a502:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a506:	3b01      	subs	r3, #1
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	0a1b      	lsrs	r3, r3, #8
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a512:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a516:	3301      	adds	r3, #1
 800a518:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a51c:	3b01      	subs	r3, #1
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	0c1b      	lsrs	r3, r3, #16
 800a524:	b2da      	uxtb	r2, r3
 800a526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a528:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52c:	3301      	adds	r3, #1
 800a52e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a532:	3b01      	subs	r3, #1
 800a534:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	0e1b      	lsrs	r3, r3, #24
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	3301      	adds	r3, #1
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a548:	3b01      	subs	r3, #1
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800a54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a54e:	3301      	adds	r3, #1
 800a550:	643b      	str	r3, [r7, #64]	; 0x40
 800a552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a554:	2b07      	cmp	r3, #7
 800a556:	d9c8      	bls.n	800a4ea <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a558:	f7fa ff64 	bl	8005424 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a564:	429a      	cmp	r2, r3
 800a566:	d902      	bls.n	800a56e <HAL_SD_ReadBlocks+0x1ae>
 800a568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d112      	bne.n	800a594 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a48      	ldr	r2, [pc, #288]	; (800a694 <HAL_SD_ReadBlocks+0x2d4>)
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e0ec      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d096      	beq.n	800a4d0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d022      	beq.n	800a5f6 <HAL_SD_ReadBlocks+0x236>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d91f      	bls.n	800a5f6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d01b      	beq.n	800a5f6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f003 f982 	bl	800d8cc <SDMMC_CmdStopTransfer>
 800a5c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d012      	beq.n	800a5f6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a2f      	ldr	r2, [pc, #188]	; (800a694 <HAL_SD_ReadBlocks+0x2d4>)
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e0bb      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5fc:	f003 0308 	and.w	r3, r3, #8
 800a600:	2b00      	cmp	r3, #0
 800a602:	d012      	beq.n	800a62a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a22      	ldr	r2, [pc, #136]	; (800a694 <HAL_SD_ReadBlocks+0x2d4>)
 800a60a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a610:	f043 0208 	orr.w	r2, r3, #8
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e0a1      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d012      	beq.n	800a65e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a15      	ldr	r2, [pc, #84]	; (800a694 <HAL_SD_ReadBlocks+0x2d4>)
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	f043 0202 	orr.w	r2, r3, #2
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e087      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d064      	beq.n	800a736 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a08      	ldr	r2, [pc, #32]	; (800a694 <HAL_SD_ReadBlocks+0x2d4>)
 800a672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a678:	f043 0220 	orr.w	r2, r3, #32
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e06d      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
 800a692:	bf00      	nop
 800a694:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f002 ffba 	bl	800d616 <SDIO_ReadFIFO>
 800a6a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	0a1b      	lsrs	r3, r3, #8
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d0:	0c1b      	lsrs	r3, r3, #16
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6da:	3301      	adds	r3, #1
 800a6dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	0e1b      	lsrs	r3, r3, #24
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a6fa:	f7fa fe93 	bl	8005424 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a706:	429a      	cmp	r2, r3
 800a708:	d902      	bls.n	800a710 <HAL_SD_ReadBlocks+0x350>
 800a70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d112      	bne.n	800a736 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a18      	ldr	r2, [pc, #96]	; (800a778 <HAL_SD_ReadBlocks+0x3b8>)
 800a716:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e01b      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <HAL_SD_ReadBlocks+0x38a>
 800a744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1a6      	bne.n	800a698 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a752:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	e006      	b.n	800a76e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a764:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
  }
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3748      	adds	r7, #72	; 0x48
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	004005ff 	.word	0x004005ff

0800a77c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b092      	sub	sp, #72	; 0x48
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a78a:	f7fa fe4b 	bl	8005424 <HAL_GetTick>
 800a78e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d107      	bne.n	800a7ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e165      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	f040 8158 	bne.w	800aa6c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a7c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	441a      	add	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d907      	bls.n	800a7e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e14c      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2203      	movs	r2, #3
 800a7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d002      	beq.n	800a7fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	025b      	lsls	r3, r3, #9
 800a7fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a802:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	025b      	lsls	r3, r3, #9
 800a808:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a80a:	2390      	movs	r3, #144	; 0x90
 800a80c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a80e:	2300      	movs	r3, #0
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a812:	2300      	movs	r3, #0
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a816:	2301      	movs	r3, #1
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f107 0218 	add.w	r2, r7, #24
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f002 ff7a 	bl	800d71e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d90a      	bls.n	800a846 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a83c:	4618      	mov	r0, r3
 800a83e:	f003 f822 	bl	800d886 <SDMMC_CmdWriteMultiBlock>
 800a842:	6478      	str	r0, [r7, #68]	; 0x44
 800a844:	e009      	b.n	800a85a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2210      	movs	r2, #16
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a852:	4618      	mov	r0, r3
 800a854:	f002 fff5 	bl	800d842 <SDMMC_CmdWriteSingleBlock>
 800a858:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d012      	beq.n	800a886 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a87      	ldr	r2, [pc, #540]	; (800aa84 <HAL_SD_WriteBlocks+0x308>)
 800a866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a86e:	431a      	orrs	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e0f9      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800a88a:	e065      	b.n	800a958 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d040      	beq.n	800a91c <HAL_SD_WriteBlocks+0x1a0>
 800a89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d03d      	beq.n	800a91c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a4:	e037      	b.n	800a916 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	021a      	lsls	r2, r3, #8
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	041a      	lsls	r2, r3, #16
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8de:	3301      	adds	r3, #1
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	061a      	lsls	r2, r3, #24
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f107 0214 	add.w	r2, r7, #20
 800a908:	4611      	mov	r1, r2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f002 fe90 	bl	800d630 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a912:	3301      	adds	r3, #1
 800a914:	643b      	str	r3, [r7, #64]	; 0x40
 800a916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a918:	2b07      	cmp	r3, #7
 800a91a:	d9c4      	bls.n	800a8a6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a91c:	f7fa fd82 	bl	8005424 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a928:	429a      	cmp	r2, r3
 800a92a:	d902      	bls.n	800a932 <HAL_SD_WriteBlocks+0x1b6>
 800a92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d112      	bne.n	800a958 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a53      	ldr	r2, [pc, #332]	; (800aa84 <HAL_SD_WriteBlocks+0x308>)
 800a938:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a940:	431a      	orrs	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e090      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a962:	2b00      	cmp	r3, #0
 800a964:	d092      	beq.n	800a88c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a970:	2b00      	cmp	r3, #0
 800a972:	d022      	beq.n	800a9ba <HAL_SD_WriteBlocks+0x23e>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d91f      	bls.n	800a9ba <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d01b      	beq.n	800a9ba <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4618      	mov	r0, r3
 800a988:	f002 ffa0 	bl	800d8cc <SDMMC_CmdStopTransfer>
 800a98c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a990:	2b00      	cmp	r3, #0
 800a992:	d012      	beq.n	800a9ba <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a3a      	ldr	r2, [pc, #232]	; (800aa84 <HAL_SD_WriteBlocks+0x308>)
 800a99a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e05f      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d012      	beq.n	800a9ee <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a2d      	ldr	r2, [pc, #180]	; (800aa84 <HAL_SD_WriteBlocks+0x308>)
 800a9ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d4:	f043 0208 	orr.w	r2, r3, #8
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e045      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d012      	beq.n	800aa22 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a20      	ldr	r2, [pc, #128]	; (800aa84 <HAL_SD_WriteBlocks+0x308>)
 800aa02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa08:	f043 0202 	orr.w	r2, r3, #2
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e02b      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa28:	f003 0310 	and.w	r3, r3, #16
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d012      	beq.n	800aa56 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a13      	ldr	r2, [pc, #76]	; (800aa84 <HAL_SD_WriteBlocks+0x308>)
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	f043 0210 	orr.w	r2, r3, #16
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e011      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	e006      	b.n	800aa7a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
  }
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3748      	adds	r7, #72	; 0x48
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	004005ff 	.word	0x004005ff

0800aa88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa96:	0f9b      	lsrs	r3, r3, #30
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaa2:	0e9b      	lsrs	r3, r3, #26
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	f003 030f 	and.w	r3, r3, #15
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aab4:	0e1b      	lsrs	r3, r3, #24
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac6:	0c1b      	lsrs	r3, r3, #16
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad2:	0a1b      	lsrs	r3, r3, #8
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aae8:	0d1b      	lsrs	r3, r3, #20
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf4:	0c1b      	lsrs	r3, r3, #16
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	f003 030f 	and.w	r3, r3, #15
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab06:	0bdb      	lsrs	r3, r3, #15
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab18:	0b9b      	lsrs	r3, r3, #14
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab2a:	0b5b      	lsrs	r3, r3, #13
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab3c:	0b1b      	lsrs	r3, r3, #12
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d163      	bne.n	800ac20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5c:	009a      	lsls	r2, r3, #2
 800ab5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab62:	4013      	ands	r3, r2
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ab68:	0f92      	lsrs	r2, r2, #30
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab74:	0edb      	lsrs	r3, r3, #27
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab86:	0e1b      	lsrs	r3, r3, #24
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab98:	0d5b      	lsrs	r3, r3, #21
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abaa:	0c9b      	lsrs	r3, r3, #18
 800abac:	b2db      	uxtb	r3, r3
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbc:	0bdb      	lsrs	r3, r3, #15
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	f003 0307 	and.w	r3, r3, #7
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	7e1b      	ldrb	r3, [r3, #24]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0307 	and.w	r3, r3, #7
 800abde:	3302      	adds	r3, #2
 800abe0:	2201      	movs	r2, #1
 800abe2:	fa02 f303 	lsl.w	r3, r2, r3
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800abea:	fb03 f202 	mul.w	r2, r3, r2
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	7a1b      	ldrb	r3, [r3, #8]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 030f 	and.w	r3, r3, #15
 800abfc:	2201      	movs	r2, #1
 800abfe:	409a      	lsls	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ac0c:	0a52      	lsrs	r2, r2, #9
 800ac0e:	fb03 f202 	mul.w	r2, r3, r2
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac1c:	661a      	str	r2, [r3, #96]	; 0x60
 800ac1e:	e031      	b.n	800ac84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d11d      	bne.n	800ac64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac2c:	041b      	lsls	r3, r3, #16
 800ac2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac36:	0c1b      	lsrs	r3, r3, #16
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	3301      	adds	r3, #1
 800ac44:	029a      	lsls	r2, r3, #10
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	661a      	str	r2, [r3, #96]	; 0x60
 800ac62:	e00f      	b.n	800ac84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a58      	ldr	r2, [pc, #352]	; (800adcc <HAL_SD_GetCardCSD+0x344>)
 800ac6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e09d      	b.n	800adc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	0b9b      	lsrs	r3, r3, #14
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9a:	09db      	lsrs	r3, r3, #7
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acac:	b2db      	uxtb	r3, r3
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acbc:	0fdb      	lsrs	r3, r3, #31
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc8:	0f5b      	lsrs	r3, r3, #29
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f003 0303 	and.w	r3, r3, #3
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acda:	0e9b      	lsrs	r3, r3, #26
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acec:	0d9b      	lsrs	r3, r3, #22
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	f003 030f 	and.w	r3, r3, #15
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfe:	0d5b      	lsrs	r3, r3, #21
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	0c1b      	lsrs	r3, r3, #16
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2e:	0bdb      	lsrs	r3, r3, #15
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	0b9b      	lsrs	r3, r3, #14
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad56:	0b5b      	lsrs	r3, r3, #13
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad6a:	0b1b      	lsrs	r3, r3, #12
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7e:	0a9b      	lsrs	r3, r3, #10
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad92:	0a1b      	lsrs	r3, r3, #8
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada6:	085b      	lsrs	r3, r3, #1
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	004005ff 	.word	0x004005ff

0800add0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ae34:	f107 030c 	add.w	r3, r7, #12
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f970 	bl	800b120 <SD_SendStatus>
 800ae40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	0a5b      	lsrs	r3, r3, #9
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ae5e:	693b      	ldr	r3, [r7, #16]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae68:	b5b0      	push	{r4, r5, r7, lr}
 800ae6a:	b094      	sub	sp, #80	; 0x50
 800ae6c:	af04      	add	r7, sp, #16
 800ae6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ae70:	2301      	movs	r3, #1
 800ae72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f002 fbf8 	bl	800d66e <SDIO_GetPowerState>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ae88:	e0b8      	b.n	800affc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d02f      	beq.n	800aef2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f002 fddf 	bl	800da5a <SDMMC_CmdSendCID>
 800ae9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <SD_InitCard+0x40>
    {
      return errorstate;
 800aea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea6:	e0a9      	b.n	800affc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f002 fc22 	bl	800d6f8 <SDIO_GetResponse>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2104      	movs	r1, #4
 800aec0:	4618      	mov	r0, r3
 800aec2:	f002 fc19 	bl	800d6f8 <SDIO_GetResponse>
 800aec6:	4602      	mov	r2, r0
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2108      	movs	r1, #8
 800aed2:	4618      	mov	r0, r3
 800aed4:	f002 fc10 	bl	800d6f8 <SDIO_GetResponse>
 800aed8:	4602      	mov	r2, r0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	210c      	movs	r1, #12
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 fc07 	bl	800d6f8 <SDIO_GetResponse>
 800aeea:	4602      	mov	r2, r0
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d00d      	beq.n	800af16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f107 020e 	add.w	r2, r7, #14
 800af02:	4611      	mov	r1, r2
 800af04:	4618      	mov	r0, r3
 800af06:	f002 fde5 	bl	800dad4 <SDMMC_CmdSetRelAdd>
 800af0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <SD_InitCard+0xae>
    {
      return errorstate;
 800af12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af14:	e072      	b.n	800affc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d036      	beq.n	800af8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800af1e:	89fb      	ldrh	r3, [r7, #14]
 800af20:	461a      	mov	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af2e:	041b      	lsls	r3, r3, #16
 800af30:	4619      	mov	r1, r3
 800af32:	4610      	mov	r0, r2
 800af34:	f002 fdaf 	bl	800da96 <SDMMC_CmdSendCSD>
 800af38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <SD_InitCard+0xdc>
    {
      return errorstate;
 800af40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af42:	e05b      	b.n	800affc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f002 fbd4 	bl	800d6f8 <SDIO_GetResponse>
 800af50:	4602      	mov	r2, r0
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2104      	movs	r1, #4
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 fbcb 	bl	800d6f8 <SDIO_GetResponse>
 800af62:	4602      	mov	r2, r0
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2108      	movs	r1, #8
 800af6e:	4618      	mov	r0, r3
 800af70:	f002 fbc2 	bl	800d6f8 <SDIO_GetResponse>
 800af74:	4602      	mov	r2, r0
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	210c      	movs	r1, #12
 800af80:	4618      	mov	r0, r3
 800af82:	f002 fbb9 	bl	800d6f8 <SDIO_GetResponse>
 800af86:	4602      	mov	r2, r0
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2104      	movs	r1, #4
 800af92:	4618      	mov	r0, r3
 800af94:	f002 fbb0 	bl	800d6f8 <SDIO_GetResponse>
 800af98:	4603      	mov	r3, r0
 800af9a:	0d1a      	lsrs	r2, r3, #20
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800afa0:	f107 0310 	add.w	r3, r7, #16
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fd6e 	bl	800aa88 <HAL_SD_GetCardCSD>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afb6:	e021      	b.n	800affc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6819      	ldr	r1, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc0:	041b      	lsls	r3, r3, #16
 800afc2:	2200      	movs	r2, #0
 800afc4:	461c      	mov	r4, r3
 800afc6:	4615      	mov	r5, r2
 800afc8:	4622      	mov	r2, r4
 800afca:	462b      	mov	r3, r5
 800afcc:	4608      	mov	r0, r1
 800afce:	f002 fc9f 	bl	800d910 <SDMMC_CmdSelDesel>
 800afd2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800afd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <SD_InitCard+0x176>
  {
    return errorstate;
 800afda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afdc:	e00e      	b.n	800affc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681d      	ldr	r5, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	466c      	mov	r4, sp
 800afe6:	f103 0210 	add.w	r2, r3, #16
 800afea:	ca07      	ldmia	r2, {r0, r1, r2}
 800afec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aff0:	3304      	adds	r3, #4
 800aff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aff4:	4628      	mov	r0, r5
 800aff6:	f002 fae3 	bl	800d5c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3740      	adds	r7, #64	; 0x40
 800b000:	46bd      	mov	sp, r7
 800b002:	bdb0      	pop	{r4, r5, r7, pc}

0800b004 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
 800b014:	2300      	movs	r3, #0
 800b016:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f002 fc9a 	bl	800d956 <SDMMC_CmdGoIdleState>
 800b022:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	e072      	b.n	800b114 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f002 fcad 	bl	800d992 <SDMMC_CmdOperCond>
 800b038:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00d      	beq.n	800b05c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f002 fc83 	bl	800d956 <SDMMC_CmdGoIdleState>
 800b050:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	e05b      	b.n	800b114 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b066:	2b01      	cmp	r3, #1
 800b068:	d137      	bne.n	800b0da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f002 fcad 	bl	800d9d0 <SDMMC_CmdAppCommand>
 800b076:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d02d      	beq.n	800b0da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b07e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b082:	e047      	b.n	800b114 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2100      	movs	r1, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fca0 	bl	800d9d0 <SDMMC_CmdAppCommand>
 800b090:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <SD_PowerON+0x98>
    {
      return errorstate;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	e03b      	b.n	800b114 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	491e      	ldr	r1, [pc, #120]	; (800b11c <SD_PowerON+0x118>)
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f002 fcb6 	bl	800da14 <SDMMC_CmdAppOperCommand>
 800b0a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0b4:	e02e      	b.n	800b114 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 fb1b 	bl	800d6f8 <SDIO_GetResponse>
 800b0c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	0fdb      	lsrs	r3, r3, #31
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d101      	bne.n	800b0d0 <SD_PowerON+0xcc>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e000      	b.n	800b0d2 <SD_PowerON+0xce>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	613b      	str	r3, [r7, #16]

    count++;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d802      	bhi.n	800b0ea <SD_PowerON+0xe6>
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0cc      	beq.n	800b084 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d902      	bls.n	800b0fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b0f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0f8:	e00c      	b.n	800b114 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d003      	beq.n	800b10c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	645a      	str	r2, [r3, #68]	; 0x44
 800b10a:	e002      	b.n	800b112 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	c1100000 	.word	0xc1100000

0800b120 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b134:	e018      	b.n	800b168 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13e:	041b      	lsls	r3, r3, #16
 800b140:	4619      	mov	r1, r3
 800b142:	4610      	mov	r0, r2
 800b144:	f002 fce7 	bl	800db16 <SDMMC_CmdSendStatus>
 800b148:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	e009      	b.n	800b168 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2100      	movs	r1, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f002 facc 	bl	800d6f8 <SDIO_GetResponse>
 800b160:	4602      	mov	r2, r0
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e07b      	b.n	800b27a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	2b00      	cmp	r3, #0
 800b188:	d108      	bne.n	800b19c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b192:	d009      	beq.n	800b1a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	61da      	str	r2, [r3, #28]
 800b19a:	e005      	b.n	800b1a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f9 f954 	bl	8004470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	431a      	orrs	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b218:	431a      	orrs	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a1b      	ldr	r3, [r3, #32]
 800b228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22c:	ea42 0103 	orr.w	r1, r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	0c1b      	lsrs	r3, r3, #16
 800b246:	f003 0104 	and.w	r1, r3, #4
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	f003 0210 	and.w	r2, r3, #16
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	430a      	orrs	r2, r1
 800b258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69da      	ldr	r2, [r3, #28]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e041      	b.n	800b318 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7f9 f929 	bl	8004500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	f000 fcd5 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b01      	cmp	r3, #1
 800b332:	d001      	beq.n	800b338 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e046      	b.n	800b3c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a23      	ldr	r2, [pc, #140]	; (800b3d4 <HAL_TIM_Base_Start+0xb4>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d022      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b352:	d01d      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a1f      	ldr	r2, [pc, #124]	; (800b3d8 <HAL_TIM_Base_Start+0xb8>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d018      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a1e      	ldr	r2, [pc, #120]	; (800b3dc <HAL_TIM_Base_Start+0xbc>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d013      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a1c      	ldr	r2, [pc, #112]	; (800b3e0 <HAL_TIM_Base_Start+0xc0>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00e      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a1b      	ldr	r2, [pc, #108]	; (800b3e4 <HAL_TIM_Base_Start+0xc4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d009      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a19      	ldr	r2, [pc, #100]	; (800b3e8 <HAL_TIM_Base_Start+0xc8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <HAL_TIM_Base_Start+0x70>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a18      	ldr	r2, [pc, #96]	; (800b3ec <HAL_TIM_Base_Start+0xcc>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d111      	bne.n	800b3b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b06      	cmp	r3, #6
 800b3a0:	d010      	beq.n	800b3c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f042 0201 	orr.w	r2, r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b2:	e007      	b.n	800b3c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	40010000 	.word	0x40010000
 800b3d8:	40000400 	.word	0x40000400
 800b3dc:	40000800 	.word	0x40000800
 800b3e0:	40000c00 	.word	0x40000c00
 800b3e4:	40010400 	.word	0x40010400
 800b3e8:	40014000 	.word	0x40014000
 800b3ec:	40001800 	.word	0x40001800

0800b3f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e041      	b.n	800b486 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d106      	bne.n	800b41c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f839 	bl	800b48e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2202      	movs	r2, #2
 800b420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f000 fc1e 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d109      	bne.n	800b4c8 <HAL_TIM_PWM_Start+0x24>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	bf14      	ite	ne
 800b4c0:	2301      	movne	r3, #1
 800b4c2:	2300      	moveq	r3, #0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	e022      	b.n	800b50e <HAL_TIM_PWM_Start+0x6a>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b04      	cmp	r3, #4
 800b4cc:	d109      	bne.n	800b4e2 <HAL_TIM_PWM_Start+0x3e>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	bf14      	ite	ne
 800b4da:	2301      	movne	r3, #1
 800b4dc:	2300      	moveq	r3, #0
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	e015      	b.n	800b50e <HAL_TIM_PWM_Start+0x6a>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d109      	bne.n	800b4fc <HAL_TIM_PWM_Start+0x58>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	bf14      	ite	ne
 800b4f4:	2301      	movne	r3, #1
 800b4f6:	2300      	moveq	r3, #0
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	e008      	b.n	800b50e <HAL_TIM_PWM_Start+0x6a>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b01      	cmp	r3, #1
 800b506:	bf14      	ite	ne
 800b508:	2301      	movne	r3, #1
 800b50a:	2300      	moveq	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e07c      	b.n	800b610 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d104      	bne.n	800b526 <HAL_TIM_PWM_Start+0x82>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2202      	movs	r2, #2
 800b520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b524:	e013      	b.n	800b54e <HAL_TIM_PWM_Start+0xaa>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d104      	bne.n	800b536 <HAL_TIM_PWM_Start+0x92>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b534:	e00b      	b.n	800b54e <HAL_TIM_PWM_Start+0xaa>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d104      	bne.n	800b546 <HAL_TIM_PWM_Start+0xa2>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2202      	movs	r2, #2
 800b540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b544:	e003      	b.n	800b54e <HAL_TIM_PWM_Start+0xaa>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2202      	movs	r2, #2
 800b54a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2201      	movs	r2, #1
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 fe74 	bl	800c244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a2d      	ldr	r2, [pc, #180]	; (800b618 <HAL_TIM_PWM_Start+0x174>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d004      	beq.n	800b570 <HAL_TIM_PWM_Start+0xcc>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a2c      	ldr	r2, [pc, #176]	; (800b61c <HAL_TIM_PWM_Start+0x178>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d101      	bne.n	800b574 <HAL_TIM_PWM_Start+0xd0>
 800b570:	2301      	movs	r3, #1
 800b572:	e000      	b.n	800b576 <HAL_TIM_PWM_Start+0xd2>
 800b574:	2300      	movs	r3, #0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a22      	ldr	r2, [pc, #136]	; (800b618 <HAL_TIM_PWM_Start+0x174>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d022      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59c:	d01d      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a1f      	ldr	r2, [pc, #124]	; (800b620 <HAL_TIM_PWM_Start+0x17c>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d018      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a1d      	ldr	r2, [pc, #116]	; (800b624 <HAL_TIM_PWM_Start+0x180>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d013      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a1c      	ldr	r2, [pc, #112]	; (800b628 <HAL_TIM_PWM_Start+0x184>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d00e      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a16      	ldr	r2, [pc, #88]	; (800b61c <HAL_TIM_PWM_Start+0x178>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d009      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a18      	ldr	r2, [pc, #96]	; (800b62c <HAL_TIM_PWM_Start+0x188>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d004      	beq.n	800b5da <HAL_TIM_PWM_Start+0x136>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a16      	ldr	r2, [pc, #88]	; (800b630 <HAL_TIM_PWM_Start+0x18c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d111      	bne.n	800b5fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f003 0307 	and.w	r3, r3, #7
 800b5e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b06      	cmp	r3, #6
 800b5ea:	d010      	beq.n	800b60e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f042 0201 	orr.w	r2, r2, #1
 800b5fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5fc:	e007      	b.n	800b60e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0201 	orr.w	r2, r2, #1
 800b60c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	40010000 	.word	0x40010000
 800b61c:	40010400 	.word	0x40010400
 800b620:	40000400 	.word	0x40000400
 800b624:	40000800 	.word	0x40000800
 800b628:	40000c00 	.word	0x40000c00
 800b62c:	40014000 	.word	0x40014000
 800b630:	40001800 	.word	0x40001800

0800b634 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e041      	b.n	800b6cc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f839 	bl	800b6d4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2202      	movs	r2, #2
 800b666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3304      	adds	r3, #4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f000 fafb 	bl	800bc70 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 0208 	bic.w	r2, r2, #8
 800b688:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6819      	ldr	r1, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d122      	bne.n	800b744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d11b      	bne.n	800b744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0202 	mvn.w	r2, #2
 800b714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	f003 0303 	and.w	r3, r3, #3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fa81 	bl	800bc32 <HAL_TIM_IC_CaptureCallback>
 800b730:	e005      	b.n	800b73e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa73 	bl	800bc1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fa84 	bl	800bc46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d122      	bne.n	800b798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d11b      	bne.n	800b798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0204 	mvn.w	r2, #4
 800b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2202      	movs	r2, #2
 800b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fa57 	bl	800bc32 <HAL_TIM_IC_CaptureCallback>
 800b784:	e005      	b.n	800b792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fa49 	bl	800bc1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fa5a 	bl	800bc46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0308 	and.w	r3, r3, #8
 800b7a2:	2b08      	cmp	r3, #8
 800b7a4:	d122      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0308 	and.w	r3, r3, #8
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d11b      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f06f 0208 	mvn.w	r2, #8
 800b7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fa2d 	bl	800bc32 <HAL_TIM_IC_CaptureCallback>
 800b7d8:	e005      	b.n	800b7e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa1f 	bl	800bc1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fa30 	bl	800bc46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0310 	and.w	r3, r3, #16
 800b7f6:	2b10      	cmp	r3, #16
 800b7f8:	d122      	bne.n	800b840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0310 	and.w	r3, r3, #16
 800b804:	2b10      	cmp	r3, #16
 800b806:	d11b      	bne.n	800b840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0210 	mvn.w	r2, #16
 800b810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2208      	movs	r2, #8
 800b816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fa03 	bl	800bc32 <HAL_TIM_IC_CaptureCallback>
 800b82c:	e005      	b.n	800b83a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9f5 	bl	800bc1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fa06 	bl	800bc46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d10e      	bne.n	800b86c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d107      	bne.n	800b86c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0201 	mvn.w	r2, #1
 800b864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f9cf 	bl	800bc0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b876:	2b80      	cmp	r3, #128	; 0x80
 800b878:	d10e      	bne.n	800b898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b884:	2b80      	cmp	r3, #128	; 0x80
 800b886:	d107      	bne.n	800b898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fdd4 	bl	800c440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a2:	2b40      	cmp	r3, #64	; 0x40
 800b8a4:	d10e      	bne.n	800b8c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	d107      	bne.n	800b8c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9cb 	bl	800bc5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	f003 0320 	and.w	r3, r3, #32
 800b8ce:	2b20      	cmp	r3, #32
 800b8d0:	d10e      	bne.n	800b8f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f003 0320 	and.w	r3, r3, #32
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	d107      	bne.n	800b8f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f06f 0220 	mvn.w	r2, #32
 800b8e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fd9e 	bl	800c42c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d101      	bne.n	800b916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b912:	2302      	movs	r3, #2
 800b914:	e0ae      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b0c      	cmp	r3, #12
 800b922:	f200 809f 	bhi.w	800ba64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b926:	a201      	add	r2, pc, #4	; (adr r2, 800b92c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92c:	0800b961 	.word	0x0800b961
 800b930:	0800ba65 	.word	0x0800ba65
 800b934:	0800ba65 	.word	0x0800ba65
 800b938:	0800ba65 	.word	0x0800ba65
 800b93c:	0800b9a1 	.word	0x0800b9a1
 800b940:	0800ba65 	.word	0x0800ba65
 800b944:	0800ba65 	.word	0x0800ba65
 800b948:	0800ba65 	.word	0x0800ba65
 800b94c:	0800b9e3 	.word	0x0800b9e3
 800b950:	0800ba65 	.word	0x0800ba65
 800b954:	0800ba65 	.word	0x0800ba65
 800b958:	0800ba65 	.word	0x0800ba65
 800b95c:	0800ba23 	.word	0x0800ba23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68b9      	ldr	r1, [r7, #8]
 800b966:	4618      	mov	r0, r3
 800b968:	f000 fa22 	bl	800bdb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699a      	ldr	r2, [r3, #24]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f042 0208 	orr.w	r2, r2, #8
 800b97a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	699a      	ldr	r2, [r3, #24]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f022 0204 	bic.w	r2, r2, #4
 800b98a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6999      	ldr	r1, [r3, #24]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	691a      	ldr	r2, [r3, #16]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	619a      	str	r2, [r3, #24]
      break;
 800b99e:	e064      	b.n	800ba6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fa72 	bl	800be90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699a      	ldr	r2, [r3, #24]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699a      	ldr	r2, [r3, #24]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6999      	ldr	r1, [r3, #24]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	021a      	lsls	r2, r3, #8
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	619a      	str	r2, [r3, #24]
      break;
 800b9e0:	e043      	b.n	800ba6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fac7 	bl	800bf7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f042 0208 	orr.w	r2, r2, #8
 800b9fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69da      	ldr	r2, [r3, #28]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f022 0204 	bic.w	r2, r2, #4
 800ba0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	69d9      	ldr	r1, [r3, #28]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	61da      	str	r2, [r3, #28]
      break;
 800ba20:	e023      	b.n	800ba6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fb1b 	bl	800c064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69da      	ldr	r2, [r3, #28]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69d9      	ldr	r1, [r3, #28]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	021a      	lsls	r2, r3, #8
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	61da      	str	r2, [r3, #28]
      break;
 800ba62:	e002      	b.n	800ba6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	75fb      	strb	r3, [r7, #23]
      break;
 800ba68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <HAL_TIM_ConfigClockSource+0x1c>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e0b4      	b.n	800bc02 <HAL_TIM_ConfigClockSource+0x186>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800babe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bad0:	d03e      	beq.n	800bb50 <HAL_TIM_ConfigClockSource+0xd4>
 800bad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bad6:	f200 8087 	bhi.w	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800bada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bade:	f000 8086 	beq.w	800bbee <HAL_TIM_ConfigClockSource+0x172>
 800bae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae6:	d87f      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800bae8:	2b70      	cmp	r3, #112	; 0x70
 800baea:	d01a      	beq.n	800bb22 <HAL_TIM_ConfigClockSource+0xa6>
 800baec:	2b70      	cmp	r3, #112	; 0x70
 800baee:	d87b      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800baf0:	2b60      	cmp	r3, #96	; 0x60
 800baf2:	d050      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x11a>
 800baf4:	2b60      	cmp	r3, #96	; 0x60
 800baf6:	d877      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800baf8:	2b50      	cmp	r3, #80	; 0x50
 800bafa:	d03c      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0xfa>
 800bafc:	2b50      	cmp	r3, #80	; 0x50
 800bafe:	d873      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d058      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x13a>
 800bb04:	2b40      	cmp	r3, #64	; 0x40
 800bb06:	d86f      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800bb08:	2b30      	cmp	r3, #48	; 0x30
 800bb0a:	d064      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb0c:	2b30      	cmp	r3, #48	; 0x30
 800bb0e:	d86b      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	d060      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	d867      	bhi.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d05c      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb1c:	2b10      	cmp	r3, #16
 800bb1e:	d05a      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb20:	e062      	b.n	800bbe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	6899      	ldr	r1, [r3, #8]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f000 fb67 	bl	800c204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	609a      	str	r2, [r3, #8]
      break;
 800bb4e:	e04f      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6818      	ldr	r0, [r3, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	6899      	ldr	r1, [r3, #8]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	f000 fb50 	bl	800c204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689a      	ldr	r2, [r3, #8]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb72:	609a      	str	r2, [r3, #8]
      break;
 800bb74:	e03c      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	6859      	ldr	r1, [r3, #4]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	461a      	mov	r2, r3
 800bb84:	f000 fac4 	bl	800c110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2150      	movs	r1, #80	; 0x50
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 fb1d 	bl	800c1ce <TIM_ITRx_SetConfig>
      break;
 800bb94:	e02c      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	6859      	ldr	r1, [r3, #4]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	461a      	mov	r2, r3
 800bba4:	f000 fae3 	bl	800c16e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2160      	movs	r1, #96	; 0x60
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fb0d 	bl	800c1ce <TIM_ITRx_SetConfig>
      break;
 800bbb4:	e01c      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6818      	ldr	r0, [r3, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	6859      	ldr	r1, [r3, #4]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f000 faa4 	bl	800c110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2140      	movs	r1, #64	; 0x40
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fafd 	bl	800c1ce <TIM_ITRx_SetConfig>
      break;
 800bbd4:	e00c      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	f000 faf4 	bl	800c1ce <TIM_ITRx_SetConfig>
      break;
 800bbe6:	e003      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	73fb      	strb	r3, [r7, #15]
      break;
 800bbec:	e000      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bbee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bc12:	bf00      	nop
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc26:	bf00      	nop
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc32:	b480      	push	{r7}
 800bc34:	b083      	sub	sp, #12
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc3a:	bf00      	nop
 800bc3c:	370c      	adds	r7, #12
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b083      	sub	sp, #12
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc62:	bf00      	nop
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a40      	ldr	r2, [pc, #256]	; (800bd84 <TIM_Base_SetConfig+0x114>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d013      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8e:	d00f      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a3d      	ldr	r2, [pc, #244]	; (800bd88 <TIM_Base_SetConfig+0x118>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00b      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a3c      	ldr	r2, [pc, #240]	; (800bd8c <TIM_Base_SetConfig+0x11c>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d007      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a3b      	ldr	r2, [pc, #236]	; (800bd90 <TIM_Base_SetConfig+0x120>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a3a      	ldr	r2, [pc, #232]	; (800bd94 <TIM_Base_SetConfig+0x124>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d108      	bne.n	800bcc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a2f      	ldr	r2, [pc, #188]	; (800bd84 <TIM_Base_SetConfig+0x114>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d02b      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcd0:	d027      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a2c      	ldr	r2, [pc, #176]	; (800bd88 <TIM_Base_SetConfig+0x118>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d023      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a2b      	ldr	r2, [pc, #172]	; (800bd8c <TIM_Base_SetConfig+0x11c>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d01f      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a2a      	ldr	r2, [pc, #168]	; (800bd90 <TIM_Base_SetConfig+0x120>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d01b      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a29      	ldr	r2, [pc, #164]	; (800bd94 <TIM_Base_SetConfig+0x124>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d017      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a28      	ldr	r2, [pc, #160]	; (800bd98 <TIM_Base_SetConfig+0x128>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d013      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a27      	ldr	r2, [pc, #156]	; (800bd9c <TIM_Base_SetConfig+0x12c>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d00f      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a26      	ldr	r2, [pc, #152]	; (800bda0 <TIM_Base_SetConfig+0x130>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00b      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a25      	ldr	r2, [pc, #148]	; (800bda4 <TIM_Base_SetConfig+0x134>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d007      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a24      	ldr	r2, [pc, #144]	; (800bda8 <TIM_Base_SetConfig+0x138>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d003      	beq.n	800bd22 <TIM_Base_SetConfig+0xb2>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a23      	ldr	r2, [pc, #140]	; (800bdac <TIM_Base_SetConfig+0x13c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d108      	bne.n	800bd34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <TIM_Base_SetConfig+0x114>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d003      	beq.n	800bd68 <TIM_Base_SetConfig+0xf8>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a0c      	ldr	r2, [pc, #48]	; (800bd94 <TIM_Base_SetConfig+0x124>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d103      	bne.n	800bd70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	691a      	ldr	r2, [r3, #16]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	615a      	str	r2, [r3, #20]
}
 800bd76:	bf00      	nop
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	40010000 	.word	0x40010000
 800bd88:	40000400 	.word	0x40000400
 800bd8c:	40000800 	.word	0x40000800
 800bd90:	40000c00 	.word	0x40000c00
 800bd94:	40010400 	.word	0x40010400
 800bd98:	40014000 	.word	0x40014000
 800bd9c:	40014400 	.word	0x40014400
 800bda0:	40014800 	.word	0x40014800
 800bda4:	40001800 	.word	0x40001800
 800bda8:	40001c00 	.word	0x40001c00
 800bdac:	40002000 	.word	0x40002000

0800bdb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b087      	sub	sp, #28
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	f023 0201 	bic.w	r2, r3, #1
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f023 0303 	bic.w	r3, r3, #3
 800bde6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f023 0302 	bic.w	r3, r3, #2
 800bdf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	4313      	orrs	r3, r2
 800be02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a20      	ldr	r2, [pc, #128]	; (800be88 <TIM_OC1_SetConfig+0xd8>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d003      	beq.n	800be14 <TIM_OC1_SetConfig+0x64>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a1f      	ldr	r2, [pc, #124]	; (800be8c <TIM_OC1_SetConfig+0xdc>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d10c      	bne.n	800be2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f023 0308 	bic.w	r3, r3, #8
 800be1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	4313      	orrs	r3, r2
 800be24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	f023 0304 	bic.w	r3, r3, #4
 800be2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a15      	ldr	r2, [pc, #84]	; (800be88 <TIM_OC1_SetConfig+0xd8>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d003      	beq.n	800be3e <TIM_OC1_SetConfig+0x8e>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a14      	ldr	r2, [pc, #80]	; (800be8c <TIM_OC1_SetConfig+0xdc>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d111      	bne.n	800be62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4313      	orrs	r3, r2
 800be56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	4313      	orrs	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	621a      	str	r2, [r3, #32]
}
 800be7c:	bf00      	nop
 800be7e:	371c      	adds	r7, #28
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	40010000 	.word	0x40010000
 800be8c:	40010400 	.word	0x40010400

0800be90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	f023 0210 	bic.w	r2, r3, #16
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	021b      	lsls	r3, r3, #8
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f023 0320 	bic.w	r3, r3, #32
 800beda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	011b      	lsls	r3, r3, #4
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a22      	ldr	r2, [pc, #136]	; (800bf74 <TIM_OC2_SetConfig+0xe4>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <TIM_OC2_SetConfig+0x68>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a21      	ldr	r2, [pc, #132]	; (800bf78 <TIM_OC2_SetConfig+0xe8>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d10d      	bne.n	800bf14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800befe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	011b      	lsls	r3, r3, #4
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a17      	ldr	r2, [pc, #92]	; (800bf74 <TIM_OC2_SetConfig+0xe4>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d003      	beq.n	800bf24 <TIM_OC2_SetConfig+0x94>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a16      	ldr	r2, [pc, #88]	; (800bf78 <TIM_OC2_SetConfig+0xe8>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d113      	bne.n	800bf4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	621a      	str	r2, [r3, #32]
}
 800bf66:	bf00      	nop
 800bf68:	371c      	adds	r7, #28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	40010000 	.word	0x40010000
 800bf78:	40010400 	.word	0x40010400

0800bf7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	021b      	lsls	r3, r3, #8
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a21      	ldr	r2, [pc, #132]	; (800c05c <TIM_OC3_SetConfig+0xe0>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d003      	beq.n	800bfe2 <TIM_OC3_SetConfig+0x66>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a20      	ldr	r2, [pc, #128]	; (800c060 <TIM_OC3_SetConfig+0xe4>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d10d      	bne.n	800bffe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a16      	ldr	r2, [pc, #88]	; (800c05c <TIM_OC3_SetConfig+0xe0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d003      	beq.n	800c00e <TIM_OC3_SetConfig+0x92>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a15      	ldr	r2, [pc, #84]	; (800c060 <TIM_OC3_SetConfig+0xe4>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d113      	bne.n	800c036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c01c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	4313      	orrs	r3, r2
 800c028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	4313      	orrs	r3, r2
 800c034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	621a      	str	r2, [r3, #32]
}
 800c050:	bf00      	nop
 800c052:	371c      	adds	r7, #28
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	40010000 	.word	0x40010000
 800c060:	40010400 	.word	0x40010400

0800c064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	021b      	lsls	r3, r3, #8
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	031b      	lsls	r3, r3, #12
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a12      	ldr	r2, [pc, #72]	; (800c108 <TIM_OC4_SetConfig+0xa4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d003      	beq.n	800c0cc <TIM_OC4_SetConfig+0x68>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a11      	ldr	r2, [pc, #68]	; (800c10c <TIM_OC4_SetConfig+0xa8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d109      	bne.n	800c0e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	019b      	lsls	r3, r3, #6
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	621a      	str	r2, [r3, #32]
}
 800c0fa:	bf00      	nop
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	40010000 	.word	0x40010000
 800c10c:	40010400 	.word	0x40010400

0800c110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c110:	b480      	push	{r7}
 800c112:	b087      	sub	sp, #28
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6a1b      	ldr	r3, [r3, #32]
 800c120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	f023 0201 	bic.w	r2, r3, #1
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	4313      	orrs	r3, r2
 800c144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f023 030a 	bic.w	r3, r3, #10
 800c14c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	4313      	orrs	r3, r2
 800c154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	621a      	str	r2, [r3, #32]
}
 800c162:	bf00      	nop
 800c164:	371c      	adds	r7, #28
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c16e:	b480      	push	{r7}
 800c170:	b087      	sub	sp, #28
 800c172:	af00      	add	r7, sp, #0
 800c174:	60f8      	str	r0, [r7, #12]
 800c176:	60b9      	str	r1, [r7, #8]
 800c178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	f023 0210 	bic.w	r2, r3, #16
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	031b      	lsls	r3, r3, #12
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	621a      	str	r2, [r3, #32]
}
 800c1c2:	bf00      	nop
 800c1c4:	371c      	adds	r7, #28
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	f043 0307 	orr.w	r3, r3, #7
 800c1f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	609a      	str	r2, [r3, #8]
}
 800c1f8:	bf00      	nop
 800c1fa:	3714      	adds	r7, #20
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c21e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	021a      	lsls	r2, r3, #8
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	431a      	orrs	r2, r3
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	4313      	orrs	r3, r2
 800c230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	609a      	str	r2, [r3, #8]
}
 800c238:	bf00      	nop
 800c23a:	371c      	adds	r7, #28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c244:	b480      	push	{r7}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	f003 031f 	and.w	r3, r3, #31
 800c256:	2201      	movs	r2, #1
 800c258:	fa02 f303 	lsl.w	r3, r2, r3
 800c25c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6a1a      	ldr	r2, [r3, #32]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	43db      	mvns	r3, r3
 800c266:	401a      	ands	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6a1a      	ldr	r2, [r3, #32]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	f003 031f 	and.w	r3, r3, #31
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	fa01 f303 	lsl.w	r3, r1, r3
 800c27c:	431a      	orrs	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	621a      	str	r2, [r3, #32]
}
 800c282:	bf00      	nop
 800c284:	371c      	adds	r7, #28
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
	...

0800c290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d101      	bne.n	800c2a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	e05a      	b.n	800c35e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a21      	ldr	r2, [pc, #132]	; (800c36c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d022      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f4:	d01d      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a1d      	ldr	r2, [pc, #116]	; (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d018      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a1b      	ldr	r2, [pc, #108]	; (800c374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d013      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a1a      	ldr	r2, [pc, #104]	; (800c378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d00e      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a18      	ldr	r2, [pc, #96]	; (800c37c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d009      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a17      	ldr	r2, [pc, #92]	; (800c380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d004      	beq.n	800c332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a15      	ldr	r2, [pc, #84]	; (800c384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d10c      	bne.n	800c34c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	4313      	orrs	r3, r2
 800c342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40010000 	.word	0x40010000
 800c370:	40000400 	.word	0x40000400
 800c374:	40000800 	.word	0x40000800
 800c378:	40000c00 	.word	0x40000c00
 800c37c:	40010400 	.word	0x40010400
 800c380:	40014000 	.word	0x40014000
 800c384:	40001800 	.word	0x40001800

0800c388 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d101      	bne.n	800c3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	e03d      	b.n	800c420 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	695b      	ldr	r3, [r3, #20]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e03f      	b.n	800c4e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7f8 f90e 	bl	800469c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2224      	movs	r2, #36	; 0x24
 800c484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68da      	ldr	r2, [r3, #12]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fe1d 	bl	800d0d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	691a      	ldr	r2, [r3, #16]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	695a      	ldr	r2, [r3, #20]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68da      	ldr	r2, [r3, #12]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2220      	movs	r2, #32
 800c4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2220      	movs	r2, #32
 800c4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b08a      	sub	sp, #40	; 0x28
 800c4f2:	af02      	add	r7, sp, #8
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	603b      	str	r3, [r7, #0]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b20      	cmp	r3, #32
 800c50c:	d17c      	bne.n	800c608 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <HAL_UART_Transmit+0x2c>
 800c514:	88fb      	ldrh	r3, [r7, #6]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e075      	b.n	800c60a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c524:	2b01      	cmp	r3, #1
 800c526:	d101      	bne.n	800c52c <HAL_UART_Transmit+0x3e>
 800c528:	2302      	movs	r3, #2
 800c52a:	e06e      	b.n	800c60a <HAL_UART_Transmit+0x11c>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2221      	movs	r2, #33	; 0x21
 800c53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c542:	f7f8 ff6f 	bl	8005424 <HAL_GetTick>
 800c546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	88fa      	ldrh	r2, [r7, #6]
 800c54c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	88fa      	ldrh	r2, [r7, #6]
 800c552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c55c:	d108      	bne.n	800c570 <HAL_UART_Transmit+0x82>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d104      	bne.n	800c570 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	e003      	b.n	800c578 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c574:	2300      	movs	r3, #0
 800c576:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c580:	e02a      	b.n	800c5d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2200      	movs	r2, #0
 800c58a:	2180      	movs	r1, #128	; 0x80
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 fb9b 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e036      	b.n	800c60a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10b      	bne.n	800c5ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	3302      	adds	r3, #2
 800c5b6:	61bb      	str	r3, [r7, #24]
 800c5b8:	e007      	b.n	800c5ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	781a      	ldrb	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1cf      	bne.n	800c582 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2140      	movs	r1, #64	; 0x40
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f000 fb6b 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e006      	b.n	800c60a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	e000      	b.n	800c60a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c608:	2302      	movs	r3, #2
  }
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3720      	adds	r7, #32
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b08a      	sub	sp, #40	; 0x28
 800c616:	af02      	add	r7, sp, #8
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	603b      	str	r3, [r7, #0]
 800c61e:	4613      	mov	r3, r2
 800c620:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b20      	cmp	r3, #32
 800c630:	f040 808c 	bne.w	800c74c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <HAL_UART_Receive+0x2e>
 800c63a:	88fb      	ldrh	r3, [r7, #6]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d101      	bne.n	800c644 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	e084      	b.n	800c74e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d101      	bne.n	800c652 <HAL_UART_Receive+0x40>
 800c64e:	2302      	movs	r3, #2
 800c650:	e07d      	b.n	800c74e <HAL_UART_Receive+0x13c>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2222      	movs	r2, #34	; 0x22
 800c664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c66e:	f7f8 fed9 	bl	8005424 <HAL_GetTick>
 800c672:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	88fa      	ldrh	r2, [r7, #6]
 800c678:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	88fa      	ldrh	r2, [r7, #6]
 800c67e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c688:	d108      	bne.n	800c69c <HAL_UART_Receive+0x8a>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d104      	bne.n	800c69c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800c692:	2300      	movs	r3, #0
 800c694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	61bb      	str	r3, [r7, #24]
 800c69a:	e003      	b.n	800c6a4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c6ac:	e043      	b.n	800c736 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2120      	movs	r1, #32
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 fb05 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e042      	b.n	800c74e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10c      	bne.n	800c6e8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	3302      	adds	r3, #2
 800c6e4:	61bb      	str	r3, [r7, #24]
 800c6e6:	e01f      	b.n	800c728 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6f0:	d007      	beq.n	800c702 <HAL_UART_Receive+0xf0>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10a      	bne.n	800c710 <HAL_UART_Receive+0xfe>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	e008      	b.n	800c722 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	b2db      	uxtb	r3, r3
 800c718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	3301      	adds	r3, #1
 800c726:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	3b01      	subs	r3, #1
 800c730:	b29a      	uxth	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1b6      	bne.n	800c6ae <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2220      	movs	r2, #32
 800c744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	e000      	b.n	800c74e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800c74c:	2302      	movs	r3, #2
  }
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3720      	adds	r7, #32
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b0ba      	sub	sp, #232	; 0xe8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c77e:	2300      	movs	r3, #0
 800c780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c784:	2300      	movs	r3, #0
 800c786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78e:	f003 030f 	and.w	r3, r3, #15
 800c792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10f      	bne.n	800c7be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7a2:	f003 0320 	and.w	r3, r3, #32
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d009      	beq.n	800c7be <HAL_UART_IRQHandler+0x66>
 800c7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ae:	f003 0320 	and.w	r3, r3, #32
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fbd3 	bl	800cf62 <UART_Receive_IT>
      return;
 800c7bc:	e256      	b.n	800cc6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c7be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 80de 	beq.w	800c984 <HAL_UART_IRQHandler+0x22c>
 800c7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 80d1 	beq.w	800c984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00b      	beq.n	800c806 <HAL_UART_IRQHandler+0xae>
 800c7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d005      	beq.n	800c806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fe:	f043 0201 	orr.w	r2, r3, #1
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c80a:	f003 0304 	and.w	r3, r3, #4
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00b      	beq.n	800c82a <HAL_UART_IRQHandler+0xd2>
 800c812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d005      	beq.n	800c82a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	f043 0202 	orr.w	r2, r3, #2
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c82e:	f003 0302 	and.w	r3, r3, #2
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00b      	beq.n	800c84e <HAL_UART_IRQHandler+0xf6>
 800c836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d005      	beq.n	800c84e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c846:	f043 0204 	orr.w	r2, r3, #4
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c852:	f003 0308 	and.w	r3, r3, #8
 800c856:	2b00      	cmp	r3, #0
 800c858:	d011      	beq.n	800c87e <HAL_UART_IRQHandler+0x126>
 800c85a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c85e:	f003 0320 	and.w	r3, r3, #32
 800c862:	2b00      	cmp	r3, #0
 800c864:	d105      	bne.n	800c872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c876:	f043 0208 	orr.w	r2, r3, #8
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 81ed 	beq.w	800cc62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c88c:	f003 0320 	and.w	r3, r3, #32
 800c890:	2b00      	cmp	r3, #0
 800c892:	d008      	beq.n	800c8a6 <HAL_UART_IRQHandler+0x14e>
 800c894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c898:	f003 0320 	and.w	r3, r3, #32
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fb5e 	bl	800cf62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b0:	2b40      	cmp	r3, #64	; 0x40
 800c8b2:	bf0c      	ite	eq
 800c8b4:	2301      	moveq	r3, #1
 800c8b6:	2300      	movne	r3, #0
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	f003 0308 	and.w	r3, r3, #8
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d103      	bne.n	800c8d2 <HAL_UART_IRQHandler+0x17a>
 800c8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d04f      	beq.n	800c972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa66 	bl	800cda4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8e2:	2b40      	cmp	r3, #64	; 0x40
 800c8e4:	d141      	bne.n	800c96a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3314      	adds	r3, #20
 800c8ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c8fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3314      	adds	r3, #20
 800c90e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c912:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c91e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1d9      	bne.n	800c8e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	2b00      	cmp	r3, #0
 800c938:	d013      	beq.n	800c962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	4a7d      	ldr	r2, [pc, #500]	; (800cb34 <HAL_UART_IRQHandler+0x3dc>)
 800c940:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	4618      	mov	r0, r3
 800c948:	f7f9 fd5a 	bl	8006400 <HAL_DMA_Abort_IT>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d016      	beq.n	800c980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c95c:	4610      	mov	r0, r2
 800c95e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c960:	e00e      	b.n	800c980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f99a 	bl	800cc9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c968:	e00a      	b.n	800c980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 f996 	bl	800cc9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c970:	e006      	b.n	800c980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f992 	bl	800cc9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c97e:	e170      	b.n	800cc62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c980:	bf00      	nop
    return;
 800c982:	e16e      	b.n	800cc62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c988:	2b01      	cmp	r3, #1
 800c98a:	f040 814a 	bne.w	800cc22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c992:	f003 0310 	and.w	r3, r3, #16
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 8143 	beq.w	800cc22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9a0:	f003 0310 	and.w	r3, r3, #16
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 813c 	beq.w	800cc22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	60bb      	str	r3, [r7, #8]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	60bb      	str	r3, [r7, #8]
 800c9be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ca:	2b40      	cmp	r3, #64	; 0x40
 800c9cc:	f040 80b4 	bne.w	800cb38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 8140 	beq.w	800cc66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	f080 8139 	bcs.w	800cc66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c9fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca06:	f000 8088 	beq.w	800cb1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	330c      	adds	r3, #12
 800ca10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca18:	e853 3f00 	ldrex	r3, [r3]
 800ca1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ca20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	330c      	adds	r3, #12
 800ca32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ca36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca46:	e841 2300 	strex	r3, r2, [r1]
 800ca4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ca4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1d9      	bne.n	800ca0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3314      	adds	r3, #20
 800ca5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca60:	e853 3f00 	ldrex	r3, [r3]
 800ca64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca68:	f023 0301 	bic.w	r3, r3, #1
 800ca6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3314      	adds	r3, #20
 800ca76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ca7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ca82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca86:	e841 2300 	strex	r3, r2, [r1]
 800ca8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ca8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1e1      	bne.n	800ca56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3314      	adds	r3, #20
 800ca98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800caa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3314      	adds	r3, #20
 800cab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cab8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cabc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cabe:	e841 2300 	strex	r3, r2, [r1]
 800cac2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1e3      	bne.n	800ca92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2220      	movs	r2, #32
 800cace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	330c      	adds	r3, #12
 800cade:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae2:	e853 3f00 	ldrex	r3, [r3]
 800cae6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caea:	f023 0310 	bic.w	r3, r3, #16
 800caee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	330c      	adds	r3, #12
 800caf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cafc:	65ba      	str	r2, [r7, #88]	; 0x58
 800cafe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb04:	e841 2300 	strex	r3, r2, [r1]
 800cb08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1e3      	bne.n	800cad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7f9 fc03 	bl	8006320 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f8c0 	bl	800ccb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb30:	e099      	b.n	800cc66 <HAL_UART_IRQHandler+0x50e>
 800cb32:	bf00      	nop
 800cb34:	0800ce6b 	.word	0x0800ce6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 808b 	beq.w	800cc6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cb54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 8086 	beq.w	800cc6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	330c      	adds	r3, #12
 800cb64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	e853 3f00 	ldrex	r3, [r3]
 800cb6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	330c      	adds	r3, #12
 800cb7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cb82:	647a      	str	r2, [r7, #68]	; 0x44
 800cb84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb8a:	e841 2300 	strex	r3, r2, [r1]
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1e3      	bne.n	800cb5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	623b      	str	r3, [r7, #32]
   return(result);
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	f023 0301 	bic.w	r3, r3, #1
 800cbac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3314      	adds	r3, #20
 800cbb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cbba:	633a      	str	r2, [r7, #48]	; 0x30
 800cbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc2:	e841 2300 	strex	r3, r2, [r1]
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1e3      	bne.n	800cb96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	e853 3f00 	ldrex	r3, [r3]
 800cbea:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f023 0310 	bic.w	r3, r3, #16
 800cbf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cc00:	61fa      	str	r2, [r7, #28]
 800cc02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	69b9      	ldr	r1, [r7, #24]
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	617b      	str	r3, [r7, #20]
   return(result);
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e3      	bne.n	800cbdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f848 	bl	800ccb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cc20:	e023      	b.n	800cc6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d009      	beq.n	800cc42 <HAL_UART_IRQHandler+0x4ea>
 800cc2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f929 	bl	800ce92 <UART_Transmit_IT>
    return;
 800cc40:	e014      	b.n	800cc6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00e      	beq.n	800cc6c <HAL_UART_IRQHandler+0x514>
 800cc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d008      	beq.n	800cc6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f969 	bl	800cf32 <UART_EndTransmit_IT>
    return;
 800cc60:	e004      	b.n	800cc6c <HAL_UART_IRQHandler+0x514>
    return;
 800cc62:	bf00      	nop
 800cc64:	e002      	b.n	800cc6c <HAL_UART_IRQHandler+0x514>
      return;
 800cc66:	bf00      	nop
 800cc68:	e000      	b.n	800cc6c <HAL_UART_IRQHandler+0x514>
      return;
 800cc6a:	bf00      	nop
  }
}
 800cc6c:	37e8      	adds	r7, #232	; 0xe8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop

0800cc74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b090      	sub	sp, #64	; 0x40
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccd8:	e050      	b.n	800cd7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce0:	d04c      	beq.n	800cd7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d007      	beq.n	800ccf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cce8:	f7f8 fb9c 	bl	8005424 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d241      	bcs.n	800cd7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	330c      	adds	r3, #12
 800ccfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	e853 3f00 	ldrex	r3, [r3]
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	330c      	adds	r3, #12
 800cd16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd18:	637a      	str	r2, [r7, #52]	; 0x34
 800cd1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd20:	e841 2300 	strex	r3, r2, [r1]
 800cd24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1e5      	bne.n	800ccf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3314      	adds	r3, #20
 800cd32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	e853 3f00 	ldrex	r3, [r3]
 800cd3a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f023 0301 	bic.w	r3, r3, #1
 800cd42:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3314      	adds	r3, #20
 800cd4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd4c:	623a      	str	r2, [r7, #32]
 800cd4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd50:	69f9      	ldr	r1, [r7, #28]
 800cd52:	6a3a      	ldr	r2, [r7, #32]
 800cd54:	e841 2300 	strex	r3, r2, [r1]
 800cd58:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e5      	bne.n	800cd2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2220      	movs	r2, #32
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e00f      	b.n	800cd9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	4013      	ands	r3, r2
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	bf0c      	ite	eq
 800cd8c:	2301      	moveq	r3, #1
 800cd8e:	2300      	movne	r3, #0
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	461a      	mov	r2, r3
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d09f      	beq.n	800ccda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3740      	adds	r7, #64	; 0x40
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b095      	sub	sp, #84	; 0x54
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	330c      	adds	r3, #12
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	e853 3f00 	ldrex	r3, [r3]
 800cdba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	330c      	adds	r3, #12
 800cdca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdcc:	643a      	str	r2, [r7, #64]	; 0x40
 800cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdd4:	e841 2300 	strex	r3, r2, [r1]
 800cdd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1e5      	bne.n	800cdac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3314      	adds	r3, #20
 800cde6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	e853 3f00 	ldrex	r3, [r3]
 800cdee:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	f023 0301 	bic.w	r3, r3, #1
 800cdf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3314      	adds	r3, #20
 800cdfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce08:	e841 2300 	strex	r3, r2, [r1]
 800ce0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e5      	bne.n	800cde0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d119      	bne.n	800ce50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	330c      	adds	r3, #12
 800ce22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	e853 3f00 	ldrex	r3, [r3]
 800ce2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	f023 0310 	bic.w	r3, r3, #16
 800ce32:	647b      	str	r3, [r7, #68]	; 0x44
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	330c      	adds	r3, #12
 800ce3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce3c:	61ba      	str	r2, [r7, #24]
 800ce3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce40:	6979      	ldr	r1, [r7, #20]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	e841 2300 	strex	r3, r2, [r1]
 800ce48:	613b      	str	r3, [r7, #16]
   return(result);
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e5      	bne.n	800ce1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2220      	movs	r2, #32
 800ce54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ce5e:	bf00      	nop
 800ce60:	3754      	adds	r7, #84	; 0x54
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff ff09 	bl	800cc9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce8a:	bf00      	nop
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce92:	b480      	push	{r7}
 800ce94:	b085      	sub	sp, #20
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	2b21      	cmp	r3, #33	; 0x21
 800cea4:	d13e      	bne.n	800cf24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceae:	d114      	bne.n	800ceda <UART_Transmit_IT+0x48>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d110      	bne.n	800ceda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6a1b      	ldr	r3, [r3, #32]
 800cebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	881b      	ldrh	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
 800ced2:	1c9a      	adds	r2, r3, #2
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	621a      	str	r2, [r3, #32]
 800ced8:	e008      	b.n	800ceec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	1c59      	adds	r1, r3, #1
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	6211      	str	r1, [r2, #32]
 800cee4:	781a      	ldrb	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	4619      	mov	r1, r3
 800cefa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10f      	bne.n	800cf20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68da      	ldr	r2, [r3, #12]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	e000      	b.n	800cf26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cf24:	2302      	movs	r3, #2
  }
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b082      	sub	sp, #8
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68da      	ldr	r2, [r3, #12]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7ff fe8e 	bl	800cc74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b08c      	sub	sp, #48	; 0x30
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b22      	cmp	r3, #34	; 0x22
 800cf74:	f040 80ab 	bne.w	800d0ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf80:	d117      	bne.n	800cfb2 <UART_Receive_IT+0x50>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d113      	bne.n	800cfb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfaa:	1c9a      	adds	r2, r3, #2
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	629a      	str	r2, [r3, #40]	; 0x28
 800cfb0:	e026      	b.n	800d000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfc4:	d007      	beq.n	800cfd6 <UART_Receive_IT+0x74>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10a      	bne.n	800cfe4 <UART_Receive_IT+0x82>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe0:	701a      	strb	r2, [r3, #0]
 800cfe2:	e008      	b.n	800cff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d004:	b29b      	uxth	r3, r3
 800d006:	3b01      	subs	r3, #1
 800d008:	b29b      	uxth	r3, r3
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4619      	mov	r1, r3
 800d00e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d010:	2b00      	cmp	r3, #0
 800d012:	d15a      	bne.n	800d0ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68da      	ldr	r2, [r3, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f022 0220 	bic.w	r2, r2, #32
 800d022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68da      	ldr	r2, [r3, #12]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	695a      	ldr	r2, [r3, #20]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0201 	bic.w	r2, r2, #1
 800d042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2220      	movs	r2, #32
 800d048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d050:	2b01      	cmp	r3, #1
 800d052:	d135      	bne.n	800d0c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	330c      	adds	r3, #12
 800d060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	e853 3f00 	ldrex	r3, [r3]
 800d068:	613b      	str	r3, [r7, #16]
   return(result);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	f023 0310 	bic.w	r3, r3, #16
 800d070:	627b      	str	r3, [r7, #36]	; 0x24
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	330c      	adds	r3, #12
 800d078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d07a:	623a      	str	r2, [r7, #32]
 800d07c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07e:	69f9      	ldr	r1, [r7, #28]
 800d080:	6a3a      	ldr	r2, [r7, #32]
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	61bb      	str	r3, [r7, #24]
   return(result);
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e5      	bne.n	800d05a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 0310 	and.w	r3, r3, #16
 800d098:	2b10      	cmp	r3, #16
 800d09a:	d10a      	bne.n	800d0b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d09c:	2300      	movs	r3, #0
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff fdf9 	bl	800ccb0 <HAL_UARTEx_RxEventCallback>
 800d0be:	e002      	b.n	800d0c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7ff fde1 	bl	800cc88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e002      	b.n	800d0d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e000      	b.n	800d0d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d0ce:	2302      	movs	r3, #2
  }
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3730      	adds	r7, #48	; 0x30
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0dc:	b0c0      	sub	sp, #256	; 0x100
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f4:	68d9      	ldr	r1, [r3, #12]
 800d0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	ea40 0301 	orr.w	r3, r0, r1
 800d100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d10c:	691b      	ldr	r3, [r3, #16]
 800d10e:	431a      	orrs	r2, r3
 800d110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	431a      	orrs	r2, r3
 800d118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	4313      	orrs	r3, r2
 800d120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d130:	f021 010c 	bic.w	r1, r1, #12
 800d134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d13e:	430b      	orrs	r3, r1
 800d140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d152:	6999      	ldr	r1, [r3, #24]
 800d154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	ea40 0301 	orr.w	r3, r0, r1
 800d15e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	4b8f      	ldr	r3, [pc, #572]	; (800d3a4 <UART_SetConfig+0x2cc>)
 800d168:	429a      	cmp	r2, r3
 800d16a:	d005      	beq.n	800d178 <UART_SetConfig+0xa0>
 800d16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	4b8d      	ldr	r3, [pc, #564]	; (800d3a8 <UART_SetConfig+0x2d0>)
 800d174:	429a      	cmp	r2, r3
 800d176:	d104      	bne.n	800d182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d178:	f7fb fed8 	bl	8008f2c <HAL_RCC_GetPCLK2Freq>
 800d17c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d180:	e003      	b.n	800d18a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d182:	f7fb febf 	bl	8008f04 <HAL_RCC_GetPCLK1Freq>
 800d186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d18e:	69db      	ldr	r3, [r3, #28]
 800d190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d194:	f040 810c 	bne.w	800d3b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d19c:	2200      	movs	r2, #0
 800d19e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d1a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d1a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	462b      	mov	r3, r5
 800d1ae:	1891      	adds	r1, r2, r2
 800d1b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800d1b2:	415b      	adcs	r3, r3
 800d1b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	eb12 0801 	adds.w	r8, r2, r1
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	eb43 0901 	adc.w	r9, r3, r1
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1da:	4690      	mov	r8, r2
 800d1dc:	4699      	mov	r9, r3
 800d1de:	4623      	mov	r3, r4
 800d1e0:	eb18 0303 	adds.w	r3, r8, r3
 800d1e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d1e8:	462b      	mov	r3, r5
 800d1ea:	eb49 0303 	adc.w	r3, r9, r3
 800d1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d1fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d206:	460b      	mov	r3, r1
 800d208:	18db      	adds	r3, r3, r3
 800d20a:	653b      	str	r3, [r7, #80]	; 0x50
 800d20c:	4613      	mov	r3, r2
 800d20e:	eb42 0303 	adc.w	r3, r2, r3
 800d212:	657b      	str	r3, [r7, #84]	; 0x54
 800d214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d21c:	f7f3 f850 	bl	80002c0 <__aeabi_uldivmod>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	4b61      	ldr	r3, [pc, #388]	; (800d3ac <UART_SetConfig+0x2d4>)
 800d226:	fba3 2302 	umull	r2, r3, r3, r2
 800d22a:	095b      	lsrs	r3, r3, #5
 800d22c:	011c      	lsls	r4, r3, #4
 800d22e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d232:	2200      	movs	r2, #0
 800d234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d23c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d240:	4642      	mov	r2, r8
 800d242:	464b      	mov	r3, r9
 800d244:	1891      	adds	r1, r2, r2
 800d246:	64b9      	str	r1, [r7, #72]	; 0x48
 800d248:	415b      	adcs	r3, r3
 800d24a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d24c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d250:	4641      	mov	r1, r8
 800d252:	eb12 0a01 	adds.w	sl, r2, r1
 800d256:	4649      	mov	r1, r9
 800d258:	eb43 0b01 	adc.w	fp, r3, r1
 800d25c:	f04f 0200 	mov.w	r2, #0
 800d260:	f04f 0300 	mov.w	r3, #0
 800d264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d26c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d270:	4692      	mov	sl, r2
 800d272:	469b      	mov	fp, r3
 800d274:	4643      	mov	r3, r8
 800d276:	eb1a 0303 	adds.w	r3, sl, r3
 800d27a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d27e:	464b      	mov	r3, r9
 800d280:	eb4b 0303 	adc.w	r3, fp, r3
 800d284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d29c:	460b      	mov	r3, r1
 800d29e:	18db      	adds	r3, r3, r3
 800d2a0:	643b      	str	r3, [r7, #64]	; 0x40
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	eb42 0303 	adc.w	r3, r2, r3
 800d2a8:	647b      	str	r3, [r7, #68]	; 0x44
 800d2aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d2ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d2b2:	f7f3 f805 	bl	80002c0 <__aeabi_uldivmod>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4b3b      	ldr	r3, [pc, #236]	; (800d3ac <UART_SetConfig+0x2d4>)
 800d2be:	fba3 2301 	umull	r2, r3, r3, r1
 800d2c2:	095b      	lsrs	r3, r3, #5
 800d2c4:	2264      	movs	r2, #100	; 0x64
 800d2c6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ca:	1acb      	subs	r3, r1, r3
 800d2cc:	00db      	lsls	r3, r3, #3
 800d2ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d2d2:	4b36      	ldr	r3, [pc, #216]	; (800d3ac <UART_SetConfig+0x2d4>)
 800d2d4:	fba3 2302 	umull	r2, r3, r3, r2
 800d2d8:	095b      	lsrs	r3, r3, #5
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d2e0:	441c      	add	r4, r3
 800d2e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d2f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	464b      	mov	r3, r9
 800d2f8:	1891      	adds	r1, r2, r2
 800d2fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800d2fc:	415b      	adcs	r3, r3
 800d2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d304:	4641      	mov	r1, r8
 800d306:	1851      	adds	r1, r2, r1
 800d308:	6339      	str	r1, [r7, #48]	; 0x30
 800d30a:	4649      	mov	r1, r9
 800d30c:	414b      	adcs	r3, r1
 800d30e:	637b      	str	r3, [r7, #52]	; 0x34
 800d310:	f04f 0200 	mov.w	r2, #0
 800d314:	f04f 0300 	mov.w	r3, #0
 800d318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d31c:	4659      	mov	r1, fp
 800d31e:	00cb      	lsls	r3, r1, #3
 800d320:	4651      	mov	r1, sl
 800d322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d326:	4651      	mov	r1, sl
 800d328:	00ca      	lsls	r2, r1, #3
 800d32a:	4610      	mov	r0, r2
 800d32c:	4619      	mov	r1, r3
 800d32e:	4603      	mov	r3, r0
 800d330:	4642      	mov	r2, r8
 800d332:	189b      	adds	r3, r3, r2
 800d334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d338:	464b      	mov	r3, r9
 800d33a:	460a      	mov	r2, r1
 800d33c:	eb42 0303 	adc.w	r3, r2, r3
 800d340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d358:	460b      	mov	r3, r1
 800d35a:	18db      	adds	r3, r3, r3
 800d35c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d35e:	4613      	mov	r3, r2
 800d360:	eb42 0303 	adc.w	r3, r2, r3
 800d364:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d36a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d36e:	f7f2 ffa7 	bl	80002c0 <__aeabi_uldivmod>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4b0d      	ldr	r3, [pc, #52]	; (800d3ac <UART_SetConfig+0x2d4>)
 800d378:	fba3 1302 	umull	r1, r3, r3, r2
 800d37c:	095b      	lsrs	r3, r3, #5
 800d37e:	2164      	movs	r1, #100	; 0x64
 800d380:	fb01 f303 	mul.w	r3, r1, r3
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	3332      	adds	r3, #50	; 0x32
 800d38a:	4a08      	ldr	r2, [pc, #32]	; (800d3ac <UART_SetConfig+0x2d4>)
 800d38c:	fba2 2303 	umull	r2, r3, r2, r3
 800d390:	095b      	lsrs	r3, r3, #5
 800d392:	f003 0207 	and.w	r2, r3, #7
 800d396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4422      	add	r2, r4
 800d39e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d3a0:	e105      	b.n	800d5ae <UART_SetConfig+0x4d6>
 800d3a2:	bf00      	nop
 800d3a4:	40011000 	.word	0x40011000
 800d3a8:	40011400 	.word	0x40011400
 800d3ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d3b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d3ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d3c2:	4642      	mov	r2, r8
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	1891      	adds	r1, r2, r2
 800d3c8:	6239      	str	r1, [r7, #32]
 800d3ca:	415b      	adcs	r3, r3
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3d2:	4641      	mov	r1, r8
 800d3d4:	1854      	adds	r4, r2, r1
 800d3d6:	4649      	mov	r1, r9
 800d3d8:	eb43 0501 	adc.w	r5, r3, r1
 800d3dc:	f04f 0200 	mov.w	r2, #0
 800d3e0:	f04f 0300 	mov.w	r3, #0
 800d3e4:	00eb      	lsls	r3, r5, #3
 800d3e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3ea:	00e2      	lsls	r2, r4, #3
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	4643      	mov	r3, r8
 800d3f2:	18e3      	adds	r3, r4, r3
 800d3f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3f8:	464b      	mov	r3, r9
 800d3fa:	eb45 0303 	adc.w	r3, r5, r3
 800d3fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d40e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d412:	f04f 0200 	mov.w	r2, #0
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d41e:	4629      	mov	r1, r5
 800d420:	008b      	lsls	r3, r1, #2
 800d422:	4621      	mov	r1, r4
 800d424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d428:	4621      	mov	r1, r4
 800d42a:	008a      	lsls	r2, r1, #2
 800d42c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d430:	f7f2 ff46 	bl	80002c0 <__aeabi_uldivmod>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4b60      	ldr	r3, [pc, #384]	; (800d5bc <UART_SetConfig+0x4e4>)
 800d43a:	fba3 2302 	umull	r2, r3, r3, r2
 800d43e:	095b      	lsrs	r3, r3, #5
 800d440:	011c      	lsls	r4, r3, #4
 800d442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d446:	2200      	movs	r2, #0
 800d448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d44c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d454:	4642      	mov	r2, r8
 800d456:	464b      	mov	r3, r9
 800d458:	1891      	adds	r1, r2, r2
 800d45a:	61b9      	str	r1, [r7, #24]
 800d45c:	415b      	adcs	r3, r3
 800d45e:	61fb      	str	r3, [r7, #28]
 800d460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d464:	4641      	mov	r1, r8
 800d466:	1851      	adds	r1, r2, r1
 800d468:	6139      	str	r1, [r7, #16]
 800d46a:	4649      	mov	r1, r9
 800d46c:	414b      	adcs	r3, r1
 800d46e:	617b      	str	r3, [r7, #20]
 800d470:	f04f 0200 	mov.w	r2, #0
 800d474:	f04f 0300 	mov.w	r3, #0
 800d478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d47c:	4659      	mov	r1, fp
 800d47e:	00cb      	lsls	r3, r1, #3
 800d480:	4651      	mov	r1, sl
 800d482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d486:	4651      	mov	r1, sl
 800d488:	00ca      	lsls	r2, r1, #3
 800d48a:	4610      	mov	r0, r2
 800d48c:	4619      	mov	r1, r3
 800d48e:	4603      	mov	r3, r0
 800d490:	4642      	mov	r2, r8
 800d492:	189b      	adds	r3, r3, r2
 800d494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d498:	464b      	mov	r3, r9
 800d49a:	460a      	mov	r2, r1
 800d49c:	eb42 0303 	adc.w	r3, r2, r3
 800d4a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d4b0:	f04f 0200 	mov.w	r2, #0
 800d4b4:	f04f 0300 	mov.w	r3, #0
 800d4b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d4bc:	4649      	mov	r1, r9
 800d4be:	008b      	lsls	r3, r1, #2
 800d4c0:	4641      	mov	r1, r8
 800d4c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d4c6:	4641      	mov	r1, r8
 800d4c8:	008a      	lsls	r2, r1, #2
 800d4ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d4ce:	f7f2 fef7 	bl	80002c0 <__aeabi_uldivmod>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	4b39      	ldr	r3, [pc, #228]	; (800d5bc <UART_SetConfig+0x4e4>)
 800d4d8:	fba3 1302 	umull	r1, r3, r3, r2
 800d4dc:	095b      	lsrs	r3, r3, #5
 800d4de:	2164      	movs	r1, #100	; 0x64
 800d4e0:	fb01 f303 	mul.w	r3, r1, r3
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	011b      	lsls	r3, r3, #4
 800d4e8:	3332      	adds	r3, #50	; 0x32
 800d4ea:	4a34      	ldr	r2, [pc, #208]	; (800d5bc <UART_SetConfig+0x4e4>)
 800d4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d4f0:	095b      	lsrs	r3, r3, #5
 800d4f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4f6:	441c      	add	r4, r3
 800d4f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	673b      	str	r3, [r7, #112]	; 0x70
 800d500:	677a      	str	r2, [r7, #116]	; 0x74
 800d502:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d506:	4642      	mov	r2, r8
 800d508:	464b      	mov	r3, r9
 800d50a:	1891      	adds	r1, r2, r2
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	415b      	adcs	r3, r3
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d516:	4641      	mov	r1, r8
 800d518:	1851      	adds	r1, r2, r1
 800d51a:	6039      	str	r1, [r7, #0]
 800d51c:	4649      	mov	r1, r9
 800d51e:	414b      	adcs	r3, r1
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	f04f 0200 	mov.w	r2, #0
 800d526:	f04f 0300 	mov.w	r3, #0
 800d52a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d52e:	4659      	mov	r1, fp
 800d530:	00cb      	lsls	r3, r1, #3
 800d532:	4651      	mov	r1, sl
 800d534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d538:	4651      	mov	r1, sl
 800d53a:	00ca      	lsls	r2, r1, #3
 800d53c:	4610      	mov	r0, r2
 800d53e:	4619      	mov	r1, r3
 800d540:	4603      	mov	r3, r0
 800d542:	4642      	mov	r2, r8
 800d544:	189b      	adds	r3, r3, r2
 800d546:	66bb      	str	r3, [r7, #104]	; 0x68
 800d548:	464b      	mov	r3, r9
 800d54a:	460a      	mov	r2, r1
 800d54c:	eb42 0303 	adc.w	r3, r2, r3
 800d550:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	663b      	str	r3, [r7, #96]	; 0x60
 800d55c:	667a      	str	r2, [r7, #100]	; 0x64
 800d55e:	f04f 0200 	mov.w	r2, #0
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d56a:	4649      	mov	r1, r9
 800d56c:	008b      	lsls	r3, r1, #2
 800d56e:	4641      	mov	r1, r8
 800d570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d574:	4641      	mov	r1, r8
 800d576:	008a      	lsls	r2, r1, #2
 800d578:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d57c:	f7f2 fea0 	bl	80002c0 <__aeabi_uldivmod>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <UART_SetConfig+0x4e4>)
 800d586:	fba3 1302 	umull	r1, r3, r3, r2
 800d58a:	095b      	lsrs	r3, r3, #5
 800d58c:	2164      	movs	r1, #100	; 0x64
 800d58e:	fb01 f303 	mul.w	r3, r1, r3
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	011b      	lsls	r3, r3, #4
 800d596:	3332      	adds	r3, #50	; 0x32
 800d598:	4a08      	ldr	r2, [pc, #32]	; (800d5bc <UART_SetConfig+0x4e4>)
 800d59a:	fba2 2303 	umull	r2, r3, r2, r3
 800d59e:	095b      	lsrs	r3, r3, #5
 800d5a0:	f003 020f 	and.w	r2, r3, #15
 800d5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4422      	add	r2, r4
 800d5ac:	609a      	str	r2, [r3, #8]
}
 800d5ae:	bf00      	nop
 800d5b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5ba:	bf00      	nop
 800d5bc:	51eb851f 	.word	0x51eb851f

0800d5c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	b480      	push	{r7}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	f107 001c 	add.w	r0, r7, #28
 800d5ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d5d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d5da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d5de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d5e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d5e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d5ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d5fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d5fe:	68fa      	ldr	r2, [r7, #12]
 800d600:	431a      	orrs	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	b004      	add	sp, #16
 800d614:	4770      	bx	lr

0800d616 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d616:	b480      	push	{r7}
 800d618:	b083      	sub	sp, #12
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d624:	4618      	mov	r0, r3
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d652:	b480      	push	{r7}
 800d654:	b083      	sub	sp, #12
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2203      	movs	r2, #3
 800d65e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d66e:	b480      	push	{r7}
 800d670:	b083      	sub	sp, #12
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 0303 	and.w	r3, r3, #3
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d68a:	b480      	push	{r7}
 800d68c:	b085      	sub	sp, #20
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d6ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d6b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d6c4:	f023 030f 	bic.w	r3, r3, #15
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	431a      	orrs	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	b2db      	uxtb	r3, r3
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3314      	adds	r3, #20
 800d706:	461a      	mov	r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	4413      	add	r3, r2
 800d70c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
}  
 800d712:	4618      	mov	r0, r3
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d71e:	b480      	push	{r7}
 800d720:	b085      	sub	sp, #20
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
 800d726:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d744:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d74a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d750:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	4313      	orrs	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	431a      	orrs	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d768:	2300      	movs	r3, #0

}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b088      	sub	sp, #32
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d784:	2310      	movs	r3, #16
 800d786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d788:	2340      	movs	r3, #64	; 0x40
 800d78a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d78c:	2300      	movs	r3, #0
 800d78e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d796:	f107 0308 	add.w	r3, r7, #8
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff ff74 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a6:	2110      	movs	r1, #16
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f9d7 	bl	800db5c <SDMMC_GetCmdResp1>
 800d7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b088      	sub	sp, #32
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d7c8:	2311      	movs	r3, #17
 800d7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7cc:	2340      	movs	r3, #64	; 0x40
 800d7ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7ff ff52 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7ea:	2111      	movs	r1, #17
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f9b5 	bl	800db5c <SDMMC_GetCmdResp1>
 800d7f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f4:	69fb      	ldr	r3, [r7, #28]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3720      	adds	r7, #32
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b088      	sub	sp, #32
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d80c:	2312      	movs	r3, #18
 800d80e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d810:	2340      	movs	r3, #64	; 0x40
 800d812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d814:	2300      	movs	r3, #0
 800d816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d81c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d81e:	f107 0308 	add.w	r3, r7, #8
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7ff ff30 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d82a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d82e:	2112      	movs	r1, #18
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f993 	bl	800db5c <SDMMC_GetCmdResp1>
 800d836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d838:	69fb      	ldr	r3, [r7, #28]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3720      	adds	r7, #32
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b088      	sub	sp, #32
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d850:	2318      	movs	r3, #24
 800d852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d854:	2340      	movs	r3, #64	; 0x40
 800d856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d858:	2300      	movs	r3, #0
 800d85a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d85c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d860:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d862:	f107 0308 	add.w	r3, r7, #8
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff ff0e 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d86e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d872:	2118      	movs	r1, #24
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f971 	bl	800db5c <SDMMC_GetCmdResp1>
 800d87a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d87c:	69fb      	ldr	r3, [r7, #28]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3720      	adds	r7, #32
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b088      	sub	sp, #32
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d894:	2319      	movs	r3, #25
 800d896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d89c:	2300      	movs	r3, #0
 800d89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8a6:	f107 0308 	add.w	r3, r7, #8
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff feec 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8b6:	2119      	movs	r1, #25
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f94f 	bl	800db5c <SDMMC_GetCmdResp1>
 800d8be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8c0:	69fb      	ldr	r3, [r7, #28]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d8d8:	230c      	movs	r3, #12
 800d8da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8dc:	2340      	movs	r3, #64	; 0x40
 800d8de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8ea:	f107 0308 	add.w	r3, r7, #8
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff feca 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d8f6:	4a05      	ldr	r2, [pc, #20]	; (800d90c <SDMMC_CmdStopTransfer+0x40>)
 800d8f8:	210c      	movs	r1, #12
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f92e 	bl	800db5c <SDMMC_GetCmdResp1>
 800d900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d902:	69fb      	ldr	r3, [r7, #28]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	05f5e100 	.word	0x05f5e100

0800d910 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08a      	sub	sp, #40	; 0x28
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d920:	2307      	movs	r3, #7
 800d922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d928:	2300      	movs	r3, #0
 800d92a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d92c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d930:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d932:	f107 0310 	add.w	r3, r7, #16
 800d936:	4619      	mov	r1, r3
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff fea6 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d93e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d942:	2107      	movs	r1, #7
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f000 f909 	bl	800db5c <SDMMC_GetCmdResp1>
 800d94a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3728      	adds	r7, #40	; 0x28
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b088      	sub	sp, #32
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d962:	2300      	movs	r3, #0
 800d964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d966:	2300      	movs	r3, #0
 800d968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d96a:	2300      	movs	r3, #0
 800d96c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d974:	f107 0308 	add.w	r3, r7, #8
 800d978:	4619      	mov	r1, r3
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7ff fe85 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 fb23 	bl	800dfcc <SDMMC_GetCmdError>
 800d986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d988:	69fb      	ldr	r3, [r7, #28]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3720      	adds	r7, #32
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b088      	sub	sp, #32
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d99a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d99e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d9a0:	2308      	movs	r3, #8
 800d9a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9a4:	2340      	movs	r3, #64	; 0x40
 800d9a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9b2:	f107 0308 	add.w	r3, r7, #8
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff fe66 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fab6 	bl	800df30 <SDMMC_GetCmdResp7>
 800d9c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9c6:	69fb      	ldr	r3, [r7, #28]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3720      	adds	r7, #32
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d9de:	2337      	movs	r3, #55	; 0x37
 800d9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9e2:	2340      	movs	r3, #64	; 0x40
 800d9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff fe47 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800da00:	2137      	movs	r1, #55	; 0x37
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f8aa 	bl	800db5c <SDMMC_GetCmdResp1>
 800da08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da0a:	69fb      	ldr	r3, [r7, #28]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800da2a:	2329      	movs	r3, #41	; 0x29
 800da2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da2e:	2340      	movs	r3, #64	; 0x40
 800da30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da32:	2300      	movs	r3, #0
 800da34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da3c:	f107 0308 	add.w	r3, r7, #8
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff fe21 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f9bd 	bl	800ddc8 <SDMMC_GetCmdResp3>
 800da4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da50:	69fb      	ldr	r3, [r7, #28]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3720      	adds	r7, #32
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b088      	sub	sp, #32
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800da66:	2302      	movs	r3, #2
 800da68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800da6a:	23c0      	movs	r3, #192	; 0xc0
 800da6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da6e:	2300      	movs	r3, #0
 800da70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fe03 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 f957 	bl	800dd38 <SDMMC_GetCmdResp2>
 800da8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da8c:	69fb      	ldr	r3, [r7, #28]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3720      	adds	r7, #32
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b088      	sub	sp, #32
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800daa4:	2309      	movs	r3, #9
 800daa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800daa8:	23c0      	movs	r3, #192	; 0xc0
 800daaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daac:	2300      	movs	r3, #0
 800daae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dab6:	f107 0308 	add.w	r3, r7, #8
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7ff fde4 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f938 	bl	800dd38 <SDMMC_GetCmdResp2>
 800dac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daca:	69fb      	ldr	r3, [r7, #28]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3720      	adds	r7, #32
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b088      	sub	sp, #32
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dade:	2300      	movs	r3, #0
 800dae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dae2:	2303      	movs	r3, #3
 800dae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dae6:	2340      	movs	r3, #64	; 0x40
 800dae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daea:	2300      	movs	r3, #0
 800daec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daf4:	f107 0308 	add.w	r3, r7, #8
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff fdc5 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	2103      	movs	r1, #3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f99d 	bl	800de44 <SDMMC_GetCmdResp6>
 800db0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db0c:	69fb      	ldr	r3, [r7, #28]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3720      	adds	r7, #32
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b088      	sub	sp, #32
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800db24:	230d      	movs	r3, #13
 800db26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db28:	2340      	movs	r3, #64	; 0x40
 800db2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db2c:	2300      	movs	r3, #0
 800db2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db36:	f107 0308 	add.w	r3, r7, #8
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff fda4 	bl	800d68a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800db42:	f241 3288 	movw	r2, #5000	; 0x1388
 800db46:	210d      	movs	r1, #13
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f807 	bl	800db5c <SDMMC_GetCmdResp1>
 800db4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db50:	69fb      	ldr	r3, [r7, #28]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3720      	adds	r7, #32
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
	...

0800db5c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b088      	sub	sp, #32
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	460b      	mov	r3, r1
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db6a:	4b70      	ldr	r3, [pc, #448]	; (800dd2c <SDMMC_GetCmdResp1+0x1d0>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a70      	ldr	r2, [pc, #448]	; (800dd30 <SDMMC_GetCmdResp1+0x1d4>)
 800db70:	fba2 2303 	umull	r2, r3, r2, r3
 800db74:	0a5a      	lsrs	r2, r3, #9
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	fb02 f303 	mul.w	r3, r2, r3
 800db7c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	1e5a      	subs	r2, r3, #1
 800db82:	61fa      	str	r2, [r7, #28]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db8c:	e0c9      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db92:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d0ef      	beq.n	800db7e <SDMMC_GetCmdResp1+0x22>
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1ea      	bne.n	800db7e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbba:	2304      	movs	r3, #4
 800dbbc:	e0b1      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d004      	beq.n	800dbd4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0a6      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	22c5      	movs	r2, #197	; 0xc5
 800dbd8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7ff fd7f 	bl	800d6de <SDIO_GetCommandResponse>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	7afb      	ldrb	r3, [r7, #11]
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d001      	beq.n	800dbee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e099      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dbee:	2100      	movs	r1, #0
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff fd81 	bl	800d6f8 <SDIO_GetResponse>
 800dbf6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	4b4e      	ldr	r3, [pc, #312]	; (800dd34 <SDMMC_GetCmdResp1+0x1d8>)
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dc02:	2300      	movs	r3, #0
 800dc04:	e08d      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	da02      	bge.n	800dc12 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dc0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dc10:	e087      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dc1c:	2340      	movs	r3, #64	; 0x40
 800dc1e:	e080      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d001      	beq.n	800dc2e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dc2a:	2380      	movs	r3, #128	; 0x80
 800dc2c:	e079      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dc38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc3c:	e071      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d002      	beq.n	800dc4e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc4c:	e069      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d002      	beq.n	800dc5e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc5c:	e061      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d002      	beq.n	800dc6e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc6c:	e059      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d002      	beq.n	800dc7e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc7c:	e051      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc8c:	e049      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc9c:	e041      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcac:	e039      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dcb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dcbc:	e031      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dcc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dccc:	e029      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dcd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dcdc:	e021      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dce8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dcec:	e019      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dcf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dcfc:	e011      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dd08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dd0c:	e009      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	f003 0308 	and.w	r3, r3, #8
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dd18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dd1c:	e001      	b.n	800dd22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000000 	.word	0x20000000
 800dd30:	10624dd3 	.word	0x10624dd3
 800dd34:	fdffe008 	.word	0xfdffe008

0800dd38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd40:	4b1f      	ldr	r3, [pc, #124]	; (800ddc0 <SDMMC_GetCmdResp2+0x88>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a1f      	ldr	r2, [pc, #124]	; (800ddc4 <SDMMC_GetCmdResp2+0x8c>)
 800dd46:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4a:	0a5b      	lsrs	r3, r3, #9
 800dd4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd50:	fb02 f303 	mul.w	r3, r2, r3
 800dd54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	1e5a      	subs	r2, r3, #1
 800dd5a:	60fa      	str	r2, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d102      	bne.n	800dd66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd64:	e026      	b.n	800ddb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0ef      	beq.n	800dd56 <SDMMC_GetCmdResp2+0x1e>
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1ea      	bne.n	800dd56 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d004      	beq.n	800dd96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2204      	movs	r2, #4
 800dd90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd92:	2304      	movs	r3, #4
 800dd94:	e00e      	b.n	800ddb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9a:	f003 0301 	and.w	r3, r3, #1
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d004      	beq.n	800ddac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e003      	b.n	800ddb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	22c5      	movs	r2, #197	; 0xc5
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	20000000 	.word	0x20000000
 800ddc4:	10624dd3 	.word	0x10624dd3

0800ddc8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ddd0:	4b1a      	ldr	r3, [pc, #104]	; (800de3c <SDMMC_GetCmdResp3+0x74>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a1a      	ldr	r2, [pc, #104]	; (800de40 <SDMMC_GetCmdResp3+0x78>)
 800ddd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddda:	0a5b      	lsrs	r3, r3, #9
 800dddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dde0:	fb02 f303 	mul.w	r3, r2, r3
 800dde4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	1e5a      	subs	r2, r3, #1
 800ddea:	60fa      	str	r2, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d102      	bne.n	800ddf6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddf4:	e01b      	b.n	800de2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddfa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800de02:	2b00      	cmp	r3, #0
 800de04:	d0ef      	beq.n	800dde6 <SDMMC_GetCmdResp3+0x1e>
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1ea      	bne.n	800dde6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2204      	movs	r2, #4
 800de20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de22:	2304      	movs	r3, #4
 800de24:	e003      	b.n	800de2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	22c5      	movs	r2, #197	; 0xc5
 800de2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	20000000 	.word	0x20000000
 800de40:	10624dd3 	.word	0x10624dd3

0800de44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b088      	sub	sp, #32
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	460b      	mov	r3, r1
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de52:	4b35      	ldr	r3, [pc, #212]	; (800df28 <SDMMC_GetCmdResp6+0xe4>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a35      	ldr	r2, [pc, #212]	; (800df2c <SDMMC_GetCmdResp6+0xe8>)
 800de58:	fba2 2303 	umull	r2, r3, r2, r3
 800de5c:	0a5b      	lsrs	r3, r3, #9
 800de5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de62:	fb02 f303 	mul.w	r3, r2, r3
 800de66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	1e5a      	subs	r2, r3, #1
 800de6c:	61fa      	str	r2, [r7, #28]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d102      	bne.n	800de78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de76:	e052      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800de84:	2b00      	cmp	r3, #0
 800de86:	d0ef      	beq.n	800de68 <SDMMC_GetCmdResp6+0x24>
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1ea      	bne.n	800de68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de96:	f003 0304 	and.w	r3, r3, #4
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d004      	beq.n	800dea8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2204      	movs	r2, #4
 800dea2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dea4:	2304      	movs	r3, #4
 800dea6:	e03a      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d004      	beq.n	800debe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2201      	movs	r2, #1
 800deb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800deba:	2301      	movs	r3, #1
 800debc:	e02f      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f7ff fc0d 	bl	800d6de <SDIO_GetCommandResponse>
 800dec4:	4603      	mov	r3, r0
 800dec6:	461a      	mov	r2, r3
 800dec8:	7afb      	ldrb	r3, [r7, #11]
 800deca:	4293      	cmp	r3, r2
 800decc:	d001      	beq.n	800ded2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dece:	2301      	movs	r3, #1
 800ded0:	e025      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	22c5      	movs	r2, #197	; 0xc5
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ded8:	2100      	movs	r1, #0
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f7ff fc0c 	bl	800d6f8 <SDIO_GetResponse>
 800dee0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	0c1b      	lsrs	r3, r3, #16
 800def0:	b29a      	uxth	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800def6:	2300      	movs	r3, #0
 800def8:	e011      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800df04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df08:	e009      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800df14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df18:	e001      	b.n	800df1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800df1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3720      	adds	r7, #32
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	20000000 	.word	0x20000000
 800df2c:	10624dd3 	.word	0x10624dd3

0800df30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df38:	4b22      	ldr	r3, [pc, #136]	; (800dfc4 <SDMMC_GetCmdResp7+0x94>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a22      	ldr	r2, [pc, #136]	; (800dfc8 <SDMMC_GetCmdResp7+0x98>)
 800df3e:	fba2 2303 	umull	r2, r3, r2, r3
 800df42:	0a5b      	lsrs	r3, r3, #9
 800df44:	f241 3288 	movw	r2, #5000	; 0x1388
 800df48:	fb02 f303 	mul.w	r3, r2, r3
 800df4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	1e5a      	subs	r2, r3, #1
 800df52:	60fa      	str	r2, [r7, #12]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df5c:	e02c      	b.n	800dfb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d0ef      	beq.n	800df4e <SDMMC_GetCmdResp7+0x1e>
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1ea      	bne.n	800df4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7c:	f003 0304 	and.w	r3, r3, #4
 800df80:	2b00      	cmp	r3, #0
 800df82:	d004      	beq.n	800df8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2204      	movs	r2, #4
 800df88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df8a:	2304      	movs	r3, #4
 800df8c:	e014      	b.n	800dfb8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df92:	f003 0301 	and.w	r3, r3, #1
 800df96:	2b00      	cmp	r3, #0
 800df98:	d004      	beq.n	800dfa4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2201      	movs	r2, #1
 800df9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e009      	b.n	800dfb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d002      	beq.n	800dfb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2240      	movs	r2, #64	; 0x40
 800dfb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dfb6:	2300      	movs	r3, #0
  
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr
 800dfc4:	20000000 	.word	0x20000000
 800dfc8:	10624dd3 	.word	0x10624dd3

0800dfcc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfd4:	4b11      	ldr	r3, [pc, #68]	; (800e01c <SDMMC_GetCmdError+0x50>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a11      	ldr	r2, [pc, #68]	; (800e020 <SDMMC_GetCmdError+0x54>)
 800dfda:	fba2 2303 	umull	r2, r3, r2, r3
 800dfde:	0a5b      	lsrs	r3, r3, #9
 800dfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe4:	fb02 f303 	mul.w	r3, r2, r3
 800dfe8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	1e5a      	subs	r2, r3, #1
 800dfee:	60fa      	str	r2, [r7, #12]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d102      	bne.n	800dffa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dff8:	e009      	b.n	800e00e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0f1      	beq.n	800dfea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	22c5      	movs	r2, #197	; 0xc5
 800e00a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	20000000 	.word	0x20000000
 800e020:	10624dd3 	.word	0x10624dd3

0800e024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e028:	4904      	ldr	r1, [pc, #16]	; (800e03c <MX_FATFS_Init+0x18>)
 800e02a:	4805      	ldr	r0, [pc, #20]	; (800e040 <MX_FATFS_Init+0x1c>)
 800e02c:	f000 f9d6 	bl	800e3dc <FATFS_LinkDriver>
 800e030:	4603      	mov	r3, r0
 800e032:	461a      	mov	r2, r3
 800e034:	4b03      	ldr	r3, [pc, #12]	; (800e044 <MX_FATFS_Init+0x20>)
 800e036:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e038:	bf00      	nop
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20001250 	.word	0x20001250
 800e040:	0800f0c8 	.word	0x0800f0c8
 800e044:	2000124c 	.word	0x2000124c

0800e048 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e052:	f000 f86b 	bl	800e12c <BSP_SD_IsDetected>
 800e056:	4603      	mov	r3, r0
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d001      	beq.n	800e060 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e005      	b.n	800e06c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e060:	4804      	ldr	r0, [pc, #16]	; (800e074 <BSP_SD_Init+0x2c>)
 800e062:	f7fc f8fc 	bl	800a25e <HAL_SD_Init>
 800e066:	4603      	mov	r3, r0
 800e068:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e06a:	79fb      	ldrb	r3, [r7, #7]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	20000f7c 	.word	0x20000f7c

0800e078 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af02      	add	r7, sp, #8
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
 800e084:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e086:	2300      	movs	r3, #0
 800e088:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	68f9      	ldr	r1, [r7, #12]
 800e094:	4806      	ldr	r0, [pc, #24]	; (800e0b0 <BSP_SD_ReadBlocks+0x38>)
 800e096:	f7fc f993 	bl	800a3c0 <HAL_SD_ReadBlocks>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3718      	adds	r7, #24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20000f7c 	.word	0x20000f7c

0800e0b4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	68f9      	ldr	r1, [r7, #12]
 800e0d0:	4806      	ldr	r0, [pc, #24]	; (800e0ec <BSP_SD_WriteBlocks+0x38>)
 800e0d2:	f7fc fb53 	bl	800a77c <HAL_SD_WriteBlocks>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	20000f7c 	.word	0x20000f7c

0800e0f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e0f4:	4805      	ldr	r0, [pc, #20]	; (800e10c <BSP_SD_GetCardState+0x1c>)
 800e0f6:	f7fc fe97 	bl	800ae28 <HAL_SD_GetCardState>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b04      	cmp	r3, #4
 800e0fe:	bf14      	ite	ne
 800e100:	2301      	movne	r3, #1
 800e102:	2300      	moveq	r3, #0
 800e104:	b2db      	uxtb	r3, r3
}
 800e106:	4618      	mov	r0, r3
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	20000f7c 	.word	0x20000f7c

0800e110 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e118:	6879      	ldr	r1, [r7, #4]
 800e11a:	4803      	ldr	r0, [pc, #12]	; (800e128 <BSP_SD_GetCardInfo+0x18>)
 800e11c:	f7fc fe58 	bl	800add0 <HAL_SD_GetCardInfo>
}
 800e120:	bf00      	nop
 800e122:	3708      	adds	r7, #8
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	20000f7c 	.word	0x20000f7c

0800e12c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e132:	2301      	movs	r3, #1
 800e134:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e136:	f000 f80b 	bl	800e150 <BSP_PlatformIsDetected>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e140:	2300      	movs	r3, #0
 800e142:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e144:	79fb      	ldrb	r3, [r7, #7]
 800e146:	b2db      	uxtb	r3, r3
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e156:	2301      	movs	r3, #1
 800e158:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e15a:	2102      	movs	r1, #2
 800e15c:	4806      	ldr	r0, [pc, #24]	; (800e178 <BSP_PlatformIsDetected+0x28>)
 800e15e:	f7f9 fe95 	bl	8007e8c <HAL_GPIO_ReadPin>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e168:	2300      	movs	r3, #0
 800e16a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e16c:	79fb      	ldrb	r3, [r7, #7]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	40020c00 	.word	0x40020c00

0800e17c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e186:	4b0b      	ldr	r3, [pc, #44]	; (800e1b4 <SD_CheckStatus+0x38>)
 800e188:	2201      	movs	r2, #1
 800e18a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e18c:	f7ff ffb0 	bl	800e0f0 <BSP_SD_GetCardState>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d107      	bne.n	800e1a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e196:	4b07      	ldr	r3, [pc, #28]	; (800e1b4 <SD_CheckStatus+0x38>)
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	f023 0301 	bic.w	r3, r3, #1
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	4b04      	ldr	r3, [pc, #16]	; (800e1b4 <SD_CheckStatus+0x38>)
 800e1a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e1a6:	4b03      	ldr	r3, [pc, #12]	; (800e1b4 <SD_CheckStatus+0x38>)
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	b2db      	uxtb	r3, r3
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20000009 	.word	0x20000009

0800e1b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e1c2:	4b0b      	ldr	r3, [pc, #44]	; (800e1f0 <SD_initialize+0x38>)
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e1c8:	f7ff ff3e 	bl	800e048 <BSP_SD_Init>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d107      	bne.n	800e1e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff ffd1 	bl	800e17c <SD_CheckStatus>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	461a      	mov	r2, r3
 800e1de:	4b04      	ldr	r3, [pc, #16]	; (800e1f0 <SD_initialize+0x38>)
 800e1e0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e1e2:	4b03      	ldr	r3, [pc, #12]	; (800e1f0 <SD_initialize+0x38>)
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	b2db      	uxtb	r3, r3
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	20000009 	.word	0x20000009

0800e1f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e1fe:	79fb      	ldrb	r3, [r7, #7]
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff ffbb 	bl	800e17c <SD_CheckStatus>
 800e206:	4603      	mov	r3, r0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60b9      	str	r1, [r7, #8]
 800e218:	607a      	str	r2, [r7, #4]
 800e21a:	603b      	str	r3, [r7, #0]
 800e21c:	4603      	mov	r3, r0
 800e21e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e224:	f04f 33ff 	mov.w	r3, #4294967295
 800e228:	683a      	ldr	r2, [r7, #0]
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	68b8      	ldr	r0, [r7, #8]
 800e22e:	f7ff ff23 	bl	800e078 <BSP_SD_ReadBlocks>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d107      	bne.n	800e248 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e238:	bf00      	nop
 800e23a:	f7ff ff59 	bl	800e0f0 <BSP_SD_GetCardState>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1fa      	bne.n	800e23a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e248:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b086      	sub	sp, #24
 800e256:	af00      	add	r7, sp, #0
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	607a      	str	r2, [r7, #4]
 800e25c:	603b      	str	r3, [r7, #0]
 800e25e:	4603      	mov	r3, r0
 800e260:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e266:	f04f 33ff 	mov.w	r3, #4294967295
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	68b8      	ldr	r0, [r7, #8]
 800e270:	f7ff ff20 	bl	800e0b4 <BSP_SD_WriteBlocks>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d107      	bne.n	800e28a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e27a:	bf00      	nop
 800e27c:	f7ff ff38 	bl	800e0f0 <BSP_SD_GetCardState>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1fa      	bne.n	800e27c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b08c      	sub	sp, #48	; 0x30
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	603a      	str	r2, [r7, #0]
 800e29e:	71fb      	strb	r3, [r7, #7]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e2aa:	4b25      	ldr	r3, [pc, #148]	; (800e340 <SD_ioctl+0xac>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	f003 0301 	and.w	r3, r3, #1
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <SD_ioctl+0x28>
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	e03c      	b.n	800e336 <SD_ioctl+0xa2>

  switch (cmd)
 800e2bc:	79bb      	ldrb	r3, [r7, #6]
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	d834      	bhi.n	800e32c <SD_ioctl+0x98>
 800e2c2:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <SD_ioctl+0x34>)
 800e2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c8:	0800e2d9 	.word	0x0800e2d9
 800e2cc:	0800e2e1 	.word	0x0800e2e1
 800e2d0:	0800e2f9 	.word	0x0800e2f9
 800e2d4:	0800e313 	.word	0x0800e313
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e2de:	e028      	b.n	800e332 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2e0:	f107 030c 	add.w	r3, r7, #12
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7ff ff13 	bl	800e110 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e2f6:	e01c      	b.n	800e332 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2f8:	f107 030c 	add.w	r3, r7, #12
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7ff ff07 	bl	800e110 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e304:	b29a      	uxth	r2, r3
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e310:	e00f      	b.n	800e332 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e312:	f107 030c 	add.w	r3, r7, #12
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff fefa 	bl	800e110 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	0a5a      	lsrs	r2, r3, #9
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e324:	2300      	movs	r3, #0
 800e326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e32a:	e002      	b.n	800e332 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e32c:	2304      	movs	r3, #4
 800e32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e336:	4618      	mov	r0, r3
 800e338:	3730      	adds	r7, #48	; 0x30
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	20000009 	.word	0x20000009

0800e344 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e344:	b480      	push	{r7}
 800e346:	b087      	sub	sp, #28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	4613      	mov	r3, r2
 800e350:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e352:	2301      	movs	r3, #1
 800e354:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e35a:	4b1f      	ldr	r3, [pc, #124]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e35c:	7a5b      	ldrb	r3, [r3, #9]
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	2b00      	cmp	r3, #0
 800e362:	d131      	bne.n	800e3c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e364:	4b1c      	ldr	r3, [pc, #112]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e366:	7a5b      	ldrb	r3, [r3, #9]
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	461a      	mov	r2, r3
 800e36c:	4b1a      	ldr	r3, [pc, #104]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e36e:	2100      	movs	r1, #0
 800e370:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e372:	4b19      	ldr	r3, [pc, #100]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e374:	7a5b      	ldrb	r3, [r3, #9]
 800e376:	b2db      	uxtb	r3, r3
 800e378:	4a17      	ldr	r2, [pc, #92]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e382:	4b15      	ldr	r3, [pc, #84]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e384:	7a5b      	ldrb	r3, [r3, #9]
 800e386:	b2db      	uxtb	r3, r3
 800e388:	461a      	mov	r2, r3
 800e38a:	4b13      	ldr	r3, [pc, #76]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e38c:	4413      	add	r3, r2
 800e38e:	79fa      	ldrb	r2, [r7, #7]
 800e390:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e392:	4b11      	ldr	r3, [pc, #68]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e394:	7a5b      	ldrb	r3, [r3, #9]
 800e396:	b2db      	uxtb	r3, r3
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	b2d1      	uxtb	r1, r2
 800e39c:	4a0e      	ldr	r2, [pc, #56]	; (800e3d8 <FATFS_LinkDriverEx+0x94>)
 800e39e:	7251      	strb	r1, [r2, #9]
 800e3a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3a2:	7dbb      	ldrb	r3, [r7, #22]
 800e3a4:	3330      	adds	r3, #48	; 0x30
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	223a      	movs	r2, #58	; 0x3a
 800e3b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	3302      	adds	r3, #2
 800e3b8:	222f      	movs	r2, #47	; 0x2f
 800e3ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	3303      	adds	r3, #3
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	371c      	adds	r7, #28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	20001254 	.word	0x20001254

0800e3dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7ff ffaa 	bl	800e344 <FATFS_LinkDriverEx>
 800e3f0:	4603      	mov	r3, r0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <_ZdlPvj>:
 800e3fa:	f000 b806 	b.w	800e40a <_ZdlPv>

0800e3fe <_ZdaPv>:
 800e3fe:	f000 b804 	b.w	800e40a <_ZdlPv>

0800e402 <_ZdaPvj>:
 800e402:	f7ff bffc 	b.w	800e3fe <_ZdaPv>

0800e406 <_Znaj>:
 800e406:	f000 b802 	b.w	800e40e <_Znwj>

0800e40a <_ZdlPv>:
 800e40a:	f000 b853 	b.w	800e4b4 <free>

0800e40e <_Znwj>:
 800e40e:	2801      	cmp	r0, #1
 800e410:	bf38      	it	cc
 800e412:	2001      	movcc	r0, #1
 800e414:	b510      	push	{r4, lr}
 800e416:	4604      	mov	r4, r0
 800e418:	4620      	mov	r0, r4
 800e41a:	f000 f843 	bl	800e4a4 <malloc>
 800e41e:	b930      	cbnz	r0, 800e42e <_Znwj+0x20>
 800e420:	f000 f806 	bl	800e430 <_ZSt15get_new_handlerv>
 800e424:	b908      	cbnz	r0, 800e42a <_Znwj+0x1c>
 800e426:	f000 f80b 	bl	800e440 <abort>
 800e42a:	4780      	blx	r0
 800e42c:	e7f4      	b.n	800e418 <_Znwj+0xa>
 800e42e:	bd10      	pop	{r4, pc}

0800e430 <_ZSt15get_new_handlerv>:
 800e430:	4b02      	ldr	r3, [pc, #8]	; (800e43c <_ZSt15get_new_handlerv+0xc>)
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	f3bf 8f5b 	dmb	ish
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	20001260 	.word	0x20001260

0800e440 <abort>:
 800e440:	b508      	push	{r3, lr}
 800e442:	2006      	movs	r0, #6
 800e444:	f000 f95e 	bl	800e704 <raise>
 800e448:	2001      	movs	r0, #1
 800e44a:	f7f6 fadf 	bl	8004a0c <_exit>
	...

0800e450 <__errno>:
 800e450:	4b01      	ldr	r3, [pc, #4]	; (800e458 <__errno+0x8>)
 800e452:	6818      	ldr	r0, [r3, #0]
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	2000000c 	.word	0x2000000c

0800e45c <__libc_init_array>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	4d0d      	ldr	r5, [pc, #52]	; (800e494 <__libc_init_array+0x38>)
 800e460:	4c0d      	ldr	r4, [pc, #52]	; (800e498 <__libc_init_array+0x3c>)
 800e462:	1b64      	subs	r4, r4, r5
 800e464:	10a4      	asrs	r4, r4, #2
 800e466:	2600      	movs	r6, #0
 800e468:	42a6      	cmp	r6, r4
 800e46a:	d109      	bne.n	800e480 <__libc_init_array+0x24>
 800e46c:	4d0b      	ldr	r5, [pc, #44]	; (800e49c <__libc_init_array+0x40>)
 800e46e:	4c0c      	ldr	r4, [pc, #48]	; (800e4a0 <__libc_init_array+0x44>)
 800e470:	f000 fcf6 	bl	800ee60 <_init>
 800e474:	1b64      	subs	r4, r4, r5
 800e476:	10a4      	asrs	r4, r4, #2
 800e478:	2600      	movs	r6, #0
 800e47a:	42a6      	cmp	r6, r4
 800e47c:	d105      	bne.n	800e48a <__libc_init_array+0x2e>
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
 800e480:	f855 3b04 	ldr.w	r3, [r5], #4
 800e484:	4798      	blx	r3
 800e486:	3601      	adds	r6, #1
 800e488:	e7ee      	b.n	800e468 <__libc_init_array+0xc>
 800e48a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e48e:	4798      	blx	r3
 800e490:	3601      	adds	r6, #1
 800e492:	e7f2      	b.n	800e47a <__libc_init_array+0x1e>
 800e494:	0800f118 	.word	0x0800f118
 800e498:	0800f118 	.word	0x0800f118
 800e49c:	0800f118 	.word	0x0800f118
 800e4a0:	0800f120 	.word	0x0800f120

0800e4a4 <malloc>:
 800e4a4:	4b02      	ldr	r3, [pc, #8]	; (800e4b0 <malloc+0xc>)
 800e4a6:	4601      	mov	r1, r0
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	f000 b87f 	b.w	800e5ac <_malloc_r>
 800e4ae:	bf00      	nop
 800e4b0:	2000000c 	.word	0x2000000c

0800e4b4 <free>:
 800e4b4:	4b02      	ldr	r3, [pc, #8]	; (800e4c0 <free+0xc>)
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	f000 b80b 	b.w	800e4d4 <_free_r>
 800e4be:	bf00      	nop
 800e4c0:	2000000c 	.word	0x2000000c

0800e4c4 <memset>:
 800e4c4:	4402      	add	r2, r0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d100      	bne.n	800e4ce <memset+0xa>
 800e4cc:	4770      	bx	lr
 800e4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800e4d2:	e7f9      	b.n	800e4c8 <memset+0x4>

0800e4d4 <_free_r>:
 800e4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4d6:	2900      	cmp	r1, #0
 800e4d8:	d044      	beq.n	800e564 <_free_r+0x90>
 800e4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4de:	9001      	str	r0, [sp, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e4e6:	bfb8      	it	lt
 800e4e8:	18e4      	addlt	r4, r4, r3
 800e4ea:	f000 f95b 	bl	800e7a4 <__malloc_lock>
 800e4ee:	4a1e      	ldr	r2, [pc, #120]	; (800e568 <_free_r+0x94>)
 800e4f0:	9801      	ldr	r0, [sp, #4]
 800e4f2:	6813      	ldr	r3, [r2, #0]
 800e4f4:	b933      	cbnz	r3, 800e504 <_free_r+0x30>
 800e4f6:	6063      	str	r3, [r4, #4]
 800e4f8:	6014      	str	r4, [r2, #0]
 800e4fa:	b003      	add	sp, #12
 800e4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e500:	f000 b956 	b.w	800e7b0 <__malloc_unlock>
 800e504:	42a3      	cmp	r3, r4
 800e506:	d908      	bls.n	800e51a <_free_r+0x46>
 800e508:	6825      	ldr	r5, [r4, #0]
 800e50a:	1961      	adds	r1, r4, r5
 800e50c:	428b      	cmp	r3, r1
 800e50e:	bf01      	itttt	eq
 800e510:	6819      	ldreq	r1, [r3, #0]
 800e512:	685b      	ldreq	r3, [r3, #4]
 800e514:	1949      	addeq	r1, r1, r5
 800e516:	6021      	streq	r1, [r4, #0]
 800e518:	e7ed      	b.n	800e4f6 <_free_r+0x22>
 800e51a:	461a      	mov	r2, r3
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	b10b      	cbz	r3, 800e524 <_free_r+0x50>
 800e520:	42a3      	cmp	r3, r4
 800e522:	d9fa      	bls.n	800e51a <_free_r+0x46>
 800e524:	6811      	ldr	r1, [r2, #0]
 800e526:	1855      	adds	r5, r2, r1
 800e528:	42a5      	cmp	r5, r4
 800e52a:	d10b      	bne.n	800e544 <_free_r+0x70>
 800e52c:	6824      	ldr	r4, [r4, #0]
 800e52e:	4421      	add	r1, r4
 800e530:	1854      	adds	r4, r2, r1
 800e532:	42a3      	cmp	r3, r4
 800e534:	6011      	str	r1, [r2, #0]
 800e536:	d1e0      	bne.n	800e4fa <_free_r+0x26>
 800e538:	681c      	ldr	r4, [r3, #0]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	6053      	str	r3, [r2, #4]
 800e53e:	4421      	add	r1, r4
 800e540:	6011      	str	r1, [r2, #0]
 800e542:	e7da      	b.n	800e4fa <_free_r+0x26>
 800e544:	d902      	bls.n	800e54c <_free_r+0x78>
 800e546:	230c      	movs	r3, #12
 800e548:	6003      	str	r3, [r0, #0]
 800e54a:	e7d6      	b.n	800e4fa <_free_r+0x26>
 800e54c:	6825      	ldr	r5, [r4, #0]
 800e54e:	1961      	adds	r1, r4, r5
 800e550:	428b      	cmp	r3, r1
 800e552:	bf04      	itt	eq
 800e554:	6819      	ldreq	r1, [r3, #0]
 800e556:	685b      	ldreq	r3, [r3, #4]
 800e558:	6063      	str	r3, [r4, #4]
 800e55a:	bf04      	itt	eq
 800e55c:	1949      	addeq	r1, r1, r5
 800e55e:	6021      	streq	r1, [r4, #0]
 800e560:	6054      	str	r4, [r2, #4]
 800e562:	e7ca      	b.n	800e4fa <_free_r+0x26>
 800e564:	b003      	add	sp, #12
 800e566:	bd30      	pop	{r4, r5, pc}
 800e568:	20001264 	.word	0x20001264

0800e56c <sbrk_aligned>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	4e0e      	ldr	r6, [pc, #56]	; (800e5a8 <sbrk_aligned+0x3c>)
 800e570:	460c      	mov	r4, r1
 800e572:	6831      	ldr	r1, [r6, #0]
 800e574:	4605      	mov	r5, r0
 800e576:	b911      	cbnz	r1, 800e57e <sbrk_aligned+0x12>
 800e578:	f000 f88c 	bl	800e694 <_sbrk_r>
 800e57c:	6030      	str	r0, [r6, #0]
 800e57e:	4621      	mov	r1, r4
 800e580:	4628      	mov	r0, r5
 800e582:	f000 f887 	bl	800e694 <_sbrk_r>
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	d00a      	beq.n	800e5a0 <sbrk_aligned+0x34>
 800e58a:	1cc4      	adds	r4, r0, #3
 800e58c:	f024 0403 	bic.w	r4, r4, #3
 800e590:	42a0      	cmp	r0, r4
 800e592:	d007      	beq.n	800e5a4 <sbrk_aligned+0x38>
 800e594:	1a21      	subs	r1, r4, r0
 800e596:	4628      	mov	r0, r5
 800e598:	f000 f87c 	bl	800e694 <_sbrk_r>
 800e59c:	3001      	adds	r0, #1
 800e59e:	d101      	bne.n	800e5a4 <sbrk_aligned+0x38>
 800e5a0:	f04f 34ff 	mov.w	r4, #4294967295
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	20001268 	.word	0x20001268

0800e5ac <_malloc_r>:
 800e5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b0:	1ccd      	adds	r5, r1, #3
 800e5b2:	f025 0503 	bic.w	r5, r5, #3
 800e5b6:	3508      	adds	r5, #8
 800e5b8:	2d0c      	cmp	r5, #12
 800e5ba:	bf38      	it	cc
 800e5bc:	250c      	movcc	r5, #12
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	4607      	mov	r7, r0
 800e5c2:	db01      	blt.n	800e5c8 <_malloc_r+0x1c>
 800e5c4:	42a9      	cmp	r1, r5
 800e5c6:	d905      	bls.n	800e5d4 <_malloc_r+0x28>
 800e5c8:	230c      	movs	r3, #12
 800e5ca:	603b      	str	r3, [r7, #0]
 800e5cc:	2600      	movs	r6, #0
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d4:	4e2e      	ldr	r6, [pc, #184]	; (800e690 <_malloc_r+0xe4>)
 800e5d6:	f000 f8e5 	bl	800e7a4 <__malloc_lock>
 800e5da:	6833      	ldr	r3, [r6, #0]
 800e5dc:	461c      	mov	r4, r3
 800e5de:	bb34      	cbnz	r4, 800e62e <_malloc_r+0x82>
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	f7ff ffc2 	bl	800e56c <sbrk_aligned>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	d14d      	bne.n	800e68a <_malloc_r+0xde>
 800e5ee:	6834      	ldr	r4, [r6, #0]
 800e5f0:	4626      	mov	r6, r4
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	d140      	bne.n	800e678 <_malloc_r+0xcc>
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	4631      	mov	r1, r6
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	eb04 0803 	add.w	r8, r4, r3
 800e600:	f000 f848 	bl	800e694 <_sbrk_r>
 800e604:	4580      	cmp	r8, r0
 800e606:	d13a      	bne.n	800e67e <_malloc_r+0xd2>
 800e608:	6821      	ldr	r1, [r4, #0]
 800e60a:	3503      	adds	r5, #3
 800e60c:	1a6d      	subs	r5, r5, r1
 800e60e:	f025 0503 	bic.w	r5, r5, #3
 800e612:	3508      	adds	r5, #8
 800e614:	2d0c      	cmp	r5, #12
 800e616:	bf38      	it	cc
 800e618:	250c      	movcc	r5, #12
 800e61a:	4629      	mov	r1, r5
 800e61c:	4638      	mov	r0, r7
 800e61e:	f7ff ffa5 	bl	800e56c <sbrk_aligned>
 800e622:	3001      	adds	r0, #1
 800e624:	d02b      	beq.n	800e67e <_malloc_r+0xd2>
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	442b      	add	r3, r5
 800e62a:	6023      	str	r3, [r4, #0]
 800e62c:	e00e      	b.n	800e64c <_malloc_r+0xa0>
 800e62e:	6822      	ldr	r2, [r4, #0]
 800e630:	1b52      	subs	r2, r2, r5
 800e632:	d41e      	bmi.n	800e672 <_malloc_r+0xc6>
 800e634:	2a0b      	cmp	r2, #11
 800e636:	d916      	bls.n	800e666 <_malloc_r+0xba>
 800e638:	1961      	adds	r1, r4, r5
 800e63a:	42a3      	cmp	r3, r4
 800e63c:	6025      	str	r5, [r4, #0]
 800e63e:	bf18      	it	ne
 800e640:	6059      	strne	r1, [r3, #4]
 800e642:	6863      	ldr	r3, [r4, #4]
 800e644:	bf08      	it	eq
 800e646:	6031      	streq	r1, [r6, #0]
 800e648:	5162      	str	r2, [r4, r5]
 800e64a:	604b      	str	r3, [r1, #4]
 800e64c:	4638      	mov	r0, r7
 800e64e:	f104 060b 	add.w	r6, r4, #11
 800e652:	f000 f8ad 	bl	800e7b0 <__malloc_unlock>
 800e656:	f026 0607 	bic.w	r6, r6, #7
 800e65a:	1d23      	adds	r3, r4, #4
 800e65c:	1af2      	subs	r2, r6, r3
 800e65e:	d0b6      	beq.n	800e5ce <_malloc_r+0x22>
 800e660:	1b9b      	subs	r3, r3, r6
 800e662:	50a3      	str	r3, [r4, r2]
 800e664:	e7b3      	b.n	800e5ce <_malloc_r+0x22>
 800e666:	6862      	ldr	r2, [r4, #4]
 800e668:	42a3      	cmp	r3, r4
 800e66a:	bf0c      	ite	eq
 800e66c:	6032      	streq	r2, [r6, #0]
 800e66e:	605a      	strne	r2, [r3, #4]
 800e670:	e7ec      	b.n	800e64c <_malloc_r+0xa0>
 800e672:	4623      	mov	r3, r4
 800e674:	6864      	ldr	r4, [r4, #4]
 800e676:	e7b2      	b.n	800e5de <_malloc_r+0x32>
 800e678:	4634      	mov	r4, r6
 800e67a:	6876      	ldr	r6, [r6, #4]
 800e67c:	e7b9      	b.n	800e5f2 <_malloc_r+0x46>
 800e67e:	230c      	movs	r3, #12
 800e680:	603b      	str	r3, [r7, #0]
 800e682:	4638      	mov	r0, r7
 800e684:	f000 f894 	bl	800e7b0 <__malloc_unlock>
 800e688:	e7a1      	b.n	800e5ce <_malloc_r+0x22>
 800e68a:	6025      	str	r5, [r4, #0]
 800e68c:	e7de      	b.n	800e64c <_malloc_r+0xa0>
 800e68e:	bf00      	nop
 800e690:	20001264 	.word	0x20001264

0800e694 <_sbrk_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d06      	ldr	r5, [pc, #24]	; (800e6b0 <_sbrk_r+0x1c>)
 800e698:	2300      	movs	r3, #0
 800e69a:	4604      	mov	r4, r0
 800e69c:	4608      	mov	r0, r1
 800e69e:	602b      	str	r3, [r5, #0]
 800e6a0:	f7f6 f9be 	bl	8004a20 <_sbrk>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_sbrk_r+0x1a>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_sbrk_r+0x1a>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	2000126c 	.word	0x2000126c

0800e6b4 <_raise_r>:
 800e6b4:	291f      	cmp	r1, #31
 800e6b6:	b538      	push	{r3, r4, r5, lr}
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	d904      	bls.n	800e6c8 <_raise_r+0x14>
 800e6be:	2316      	movs	r3, #22
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6ca:	b112      	cbz	r2, 800e6d2 <_raise_r+0x1e>
 800e6cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d0:	b94b      	cbnz	r3, 800e6e6 <_raise_r+0x32>
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f000 f830 	bl	800e738 <_getpid_r>
 800e6d8:	462a      	mov	r2, r5
 800e6da:	4601      	mov	r1, r0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e2:	f000 b817 	b.w	800e714 <_kill_r>
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d00a      	beq.n	800e700 <_raise_r+0x4c>
 800e6ea:	1c59      	adds	r1, r3, #1
 800e6ec:	d103      	bne.n	800e6f6 <_raise_r+0x42>
 800e6ee:	2316      	movs	r3, #22
 800e6f0:	6003      	str	r3, [r0, #0]
 800e6f2:	2001      	movs	r0, #1
 800e6f4:	e7e7      	b.n	800e6c6 <_raise_r+0x12>
 800e6f6:	2400      	movs	r4, #0
 800e6f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	4798      	blx	r3
 800e700:	2000      	movs	r0, #0
 800e702:	e7e0      	b.n	800e6c6 <_raise_r+0x12>

0800e704 <raise>:
 800e704:	4b02      	ldr	r3, [pc, #8]	; (800e710 <raise+0xc>)
 800e706:	4601      	mov	r1, r0
 800e708:	6818      	ldr	r0, [r3, #0]
 800e70a:	f7ff bfd3 	b.w	800e6b4 <_raise_r>
 800e70e:	bf00      	nop
 800e710:	2000000c 	.word	0x2000000c

0800e714 <_kill_r>:
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	4d07      	ldr	r5, [pc, #28]	; (800e734 <_kill_r+0x20>)
 800e718:	2300      	movs	r3, #0
 800e71a:	4604      	mov	r4, r0
 800e71c:	4608      	mov	r0, r1
 800e71e:	4611      	mov	r1, r2
 800e720:	602b      	str	r3, [r5, #0]
 800e722:	f7f6 f963 	bl	80049ec <_kill>
 800e726:	1c43      	adds	r3, r0, #1
 800e728:	d102      	bne.n	800e730 <_kill_r+0x1c>
 800e72a:	682b      	ldr	r3, [r5, #0]
 800e72c:	b103      	cbz	r3, 800e730 <_kill_r+0x1c>
 800e72e:	6023      	str	r3, [r4, #0]
 800e730:	bd38      	pop	{r3, r4, r5, pc}
 800e732:	bf00      	nop
 800e734:	2000126c 	.word	0x2000126c

0800e738 <_getpid_r>:
 800e738:	f7f6 b950 	b.w	80049dc <_getpid>

0800e73c <sniprintf>:
 800e73c:	b40c      	push	{r2, r3}
 800e73e:	b530      	push	{r4, r5, lr}
 800e740:	4b17      	ldr	r3, [pc, #92]	; (800e7a0 <sniprintf+0x64>)
 800e742:	1e0c      	subs	r4, r1, #0
 800e744:	681d      	ldr	r5, [r3, #0]
 800e746:	b09d      	sub	sp, #116	; 0x74
 800e748:	da08      	bge.n	800e75c <sniprintf+0x20>
 800e74a:	238b      	movs	r3, #139	; 0x8b
 800e74c:	602b      	str	r3, [r5, #0]
 800e74e:	f04f 30ff 	mov.w	r0, #4294967295
 800e752:	b01d      	add	sp, #116	; 0x74
 800e754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e758:	b002      	add	sp, #8
 800e75a:	4770      	bx	lr
 800e75c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e760:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e764:	bf14      	ite	ne
 800e766:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e76a:	4623      	moveq	r3, r4
 800e76c:	9304      	str	r3, [sp, #16]
 800e76e:	9307      	str	r3, [sp, #28]
 800e770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e774:	9002      	str	r0, [sp, #8]
 800e776:	9006      	str	r0, [sp, #24]
 800e778:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e77c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e77e:	ab21      	add	r3, sp, #132	; 0x84
 800e780:	a902      	add	r1, sp, #8
 800e782:	4628      	mov	r0, r5
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	f000 f875 	bl	800e874 <_svfiprintf_r>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	bfbc      	itt	lt
 800e78e:	238b      	movlt	r3, #139	; 0x8b
 800e790:	602b      	strlt	r3, [r5, #0]
 800e792:	2c00      	cmp	r4, #0
 800e794:	d0dd      	beq.n	800e752 <sniprintf+0x16>
 800e796:	9b02      	ldr	r3, [sp, #8]
 800e798:	2200      	movs	r2, #0
 800e79a:	701a      	strb	r2, [r3, #0]
 800e79c:	e7d9      	b.n	800e752 <sniprintf+0x16>
 800e79e:	bf00      	nop
 800e7a0:	2000000c 	.word	0x2000000c

0800e7a4 <__malloc_lock>:
 800e7a4:	4801      	ldr	r0, [pc, #4]	; (800e7ac <__malloc_lock+0x8>)
 800e7a6:	f000 baf9 	b.w	800ed9c <__retarget_lock_acquire_recursive>
 800e7aa:	bf00      	nop
 800e7ac:	20001270 	.word	0x20001270

0800e7b0 <__malloc_unlock>:
 800e7b0:	4801      	ldr	r0, [pc, #4]	; (800e7b8 <__malloc_unlock+0x8>)
 800e7b2:	f000 baf4 	b.w	800ed9e <__retarget_lock_release_recursive>
 800e7b6:	bf00      	nop
 800e7b8:	20001270 	.word	0x20001270

0800e7bc <__ssputs_r>:
 800e7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c0:	688e      	ldr	r6, [r1, #8]
 800e7c2:	429e      	cmp	r6, r3
 800e7c4:	4682      	mov	sl, r0
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	4690      	mov	r8, r2
 800e7ca:	461f      	mov	r7, r3
 800e7cc:	d838      	bhi.n	800e840 <__ssputs_r+0x84>
 800e7ce:	898a      	ldrh	r2, [r1, #12]
 800e7d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7d4:	d032      	beq.n	800e83c <__ssputs_r+0x80>
 800e7d6:	6825      	ldr	r5, [r4, #0]
 800e7d8:	6909      	ldr	r1, [r1, #16]
 800e7da:	eba5 0901 	sub.w	r9, r5, r1
 800e7de:	6965      	ldr	r5, [r4, #20]
 800e7e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	444b      	add	r3, r9
 800e7ec:	106d      	asrs	r5, r5, #1
 800e7ee:	429d      	cmp	r5, r3
 800e7f0:	bf38      	it	cc
 800e7f2:	461d      	movcc	r5, r3
 800e7f4:	0553      	lsls	r3, r2, #21
 800e7f6:	d531      	bpl.n	800e85c <__ssputs_r+0xa0>
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	f7ff fed7 	bl	800e5ac <_malloc_r>
 800e7fe:	4606      	mov	r6, r0
 800e800:	b950      	cbnz	r0, 800e818 <__ssputs_r+0x5c>
 800e802:	230c      	movs	r3, #12
 800e804:	f8ca 3000 	str.w	r3, [sl]
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e818:	6921      	ldr	r1, [r4, #16]
 800e81a:	464a      	mov	r2, r9
 800e81c:	f000 fac0 	bl	800eda0 <memcpy>
 800e820:	89a3      	ldrh	r3, [r4, #12]
 800e822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e82a:	81a3      	strh	r3, [r4, #12]
 800e82c:	6126      	str	r6, [r4, #16]
 800e82e:	6165      	str	r5, [r4, #20]
 800e830:	444e      	add	r6, r9
 800e832:	eba5 0509 	sub.w	r5, r5, r9
 800e836:	6026      	str	r6, [r4, #0]
 800e838:	60a5      	str	r5, [r4, #8]
 800e83a:	463e      	mov	r6, r7
 800e83c:	42be      	cmp	r6, r7
 800e83e:	d900      	bls.n	800e842 <__ssputs_r+0x86>
 800e840:	463e      	mov	r6, r7
 800e842:	6820      	ldr	r0, [r4, #0]
 800e844:	4632      	mov	r2, r6
 800e846:	4641      	mov	r1, r8
 800e848:	f000 fab8 	bl	800edbc <memmove>
 800e84c:	68a3      	ldr	r3, [r4, #8]
 800e84e:	1b9b      	subs	r3, r3, r6
 800e850:	60a3      	str	r3, [r4, #8]
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	4433      	add	r3, r6
 800e856:	6023      	str	r3, [r4, #0]
 800e858:	2000      	movs	r0, #0
 800e85a:	e7db      	b.n	800e814 <__ssputs_r+0x58>
 800e85c:	462a      	mov	r2, r5
 800e85e:	f000 fac7 	bl	800edf0 <_realloc_r>
 800e862:	4606      	mov	r6, r0
 800e864:	2800      	cmp	r0, #0
 800e866:	d1e1      	bne.n	800e82c <__ssputs_r+0x70>
 800e868:	6921      	ldr	r1, [r4, #16]
 800e86a:	4650      	mov	r0, sl
 800e86c:	f7ff fe32 	bl	800e4d4 <_free_r>
 800e870:	e7c7      	b.n	800e802 <__ssputs_r+0x46>
	...

0800e874 <_svfiprintf_r>:
 800e874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	4698      	mov	r8, r3
 800e87a:	898b      	ldrh	r3, [r1, #12]
 800e87c:	061b      	lsls	r3, r3, #24
 800e87e:	b09d      	sub	sp, #116	; 0x74
 800e880:	4607      	mov	r7, r0
 800e882:	460d      	mov	r5, r1
 800e884:	4614      	mov	r4, r2
 800e886:	d50e      	bpl.n	800e8a6 <_svfiprintf_r+0x32>
 800e888:	690b      	ldr	r3, [r1, #16]
 800e88a:	b963      	cbnz	r3, 800e8a6 <_svfiprintf_r+0x32>
 800e88c:	2140      	movs	r1, #64	; 0x40
 800e88e:	f7ff fe8d 	bl	800e5ac <_malloc_r>
 800e892:	6028      	str	r0, [r5, #0]
 800e894:	6128      	str	r0, [r5, #16]
 800e896:	b920      	cbnz	r0, 800e8a2 <_svfiprintf_r+0x2e>
 800e898:	230c      	movs	r3, #12
 800e89a:	603b      	str	r3, [r7, #0]
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a0:	e0d1      	b.n	800ea46 <_svfiprintf_r+0x1d2>
 800e8a2:	2340      	movs	r3, #64	; 0x40
 800e8a4:	616b      	str	r3, [r5, #20]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e8aa:	2320      	movs	r3, #32
 800e8ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8b4:	2330      	movs	r3, #48	; 0x30
 800e8b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea60 <_svfiprintf_r+0x1ec>
 800e8ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8be:	f04f 0901 	mov.w	r9, #1
 800e8c2:	4623      	mov	r3, r4
 800e8c4:	469a      	mov	sl, r3
 800e8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8ca:	b10a      	cbz	r2, 800e8d0 <_svfiprintf_r+0x5c>
 800e8cc:	2a25      	cmp	r2, #37	; 0x25
 800e8ce:	d1f9      	bne.n	800e8c4 <_svfiprintf_r+0x50>
 800e8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e8d4:	d00b      	beq.n	800e8ee <_svfiprintf_r+0x7a>
 800e8d6:	465b      	mov	r3, fp
 800e8d8:	4622      	mov	r2, r4
 800e8da:	4629      	mov	r1, r5
 800e8dc:	4638      	mov	r0, r7
 800e8de:	f7ff ff6d 	bl	800e7bc <__ssputs_r>
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	f000 80aa 	beq.w	800ea3c <_svfiprintf_r+0x1c8>
 800e8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ea:	445a      	add	r2, fp
 800e8ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f000 80a2 	beq.w	800ea3c <_svfiprintf_r+0x1c8>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e902:	f10a 0a01 	add.w	sl, sl, #1
 800e906:	9304      	str	r3, [sp, #16]
 800e908:	9307      	str	r3, [sp, #28]
 800e90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e90e:	931a      	str	r3, [sp, #104]	; 0x68
 800e910:	4654      	mov	r4, sl
 800e912:	2205      	movs	r2, #5
 800e914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e918:	4851      	ldr	r0, [pc, #324]	; (800ea60 <_svfiprintf_r+0x1ec>)
 800e91a:	f7f1 fc81 	bl	8000220 <memchr>
 800e91e:	9a04      	ldr	r2, [sp, #16]
 800e920:	b9d8      	cbnz	r0, 800e95a <_svfiprintf_r+0xe6>
 800e922:	06d0      	lsls	r0, r2, #27
 800e924:	bf44      	itt	mi
 800e926:	2320      	movmi	r3, #32
 800e928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e92c:	0711      	lsls	r1, r2, #28
 800e92e:	bf44      	itt	mi
 800e930:	232b      	movmi	r3, #43	; 0x2b
 800e932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e936:	f89a 3000 	ldrb.w	r3, [sl]
 800e93a:	2b2a      	cmp	r3, #42	; 0x2a
 800e93c:	d015      	beq.n	800e96a <_svfiprintf_r+0xf6>
 800e93e:	9a07      	ldr	r2, [sp, #28]
 800e940:	4654      	mov	r4, sl
 800e942:	2000      	movs	r0, #0
 800e944:	f04f 0c0a 	mov.w	ip, #10
 800e948:	4621      	mov	r1, r4
 800e94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e94e:	3b30      	subs	r3, #48	; 0x30
 800e950:	2b09      	cmp	r3, #9
 800e952:	d94e      	bls.n	800e9f2 <_svfiprintf_r+0x17e>
 800e954:	b1b0      	cbz	r0, 800e984 <_svfiprintf_r+0x110>
 800e956:	9207      	str	r2, [sp, #28]
 800e958:	e014      	b.n	800e984 <_svfiprintf_r+0x110>
 800e95a:	eba0 0308 	sub.w	r3, r0, r8
 800e95e:	fa09 f303 	lsl.w	r3, r9, r3
 800e962:	4313      	orrs	r3, r2
 800e964:	9304      	str	r3, [sp, #16]
 800e966:	46a2      	mov	sl, r4
 800e968:	e7d2      	b.n	800e910 <_svfiprintf_r+0x9c>
 800e96a:	9b03      	ldr	r3, [sp, #12]
 800e96c:	1d19      	adds	r1, r3, #4
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	9103      	str	r1, [sp, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	bfbb      	ittet	lt
 800e976:	425b      	neglt	r3, r3
 800e978:	f042 0202 	orrlt.w	r2, r2, #2
 800e97c:	9307      	strge	r3, [sp, #28]
 800e97e:	9307      	strlt	r3, [sp, #28]
 800e980:	bfb8      	it	lt
 800e982:	9204      	strlt	r2, [sp, #16]
 800e984:	7823      	ldrb	r3, [r4, #0]
 800e986:	2b2e      	cmp	r3, #46	; 0x2e
 800e988:	d10c      	bne.n	800e9a4 <_svfiprintf_r+0x130>
 800e98a:	7863      	ldrb	r3, [r4, #1]
 800e98c:	2b2a      	cmp	r3, #42	; 0x2a
 800e98e:	d135      	bne.n	800e9fc <_svfiprintf_r+0x188>
 800e990:	9b03      	ldr	r3, [sp, #12]
 800e992:	1d1a      	adds	r2, r3, #4
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	9203      	str	r2, [sp, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	bfb8      	it	lt
 800e99c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9a0:	3402      	adds	r4, #2
 800e9a2:	9305      	str	r3, [sp, #20]
 800e9a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea70 <_svfiprintf_r+0x1fc>
 800e9a8:	7821      	ldrb	r1, [r4, #0]
 800e9aa:	2203      	movs	r2, #3
 800e9ac:	4650      	mov	r0, sl
 800e9ae:	f7f1 fc37 	bl	8000220 <memchr>
 800e9b2:	b140      	cbz	r0, 800e9c6 <_svfiprintf_r+0x152>
 800e9b4:	2340      	movs	r3, #64	; 0x40
 800e9b6:	eba0 000a 	sub.w	r0, r0, sl
 800e9ba:	fa03 f000 	lsl.w	r0, r3, r0
 800e9be:	9b04      	ldr	r3, [sp, #16]
 800e9c0:	4303      	orrs	r3, r0
 800e9c2:	3401      	adds	r4, #1
 800e9c4:	9304      	str	r3, [sp, #16]
 800e9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ca:	4826      	ldr	r0, [pc, #152]	; (800ea64 <_svfiprintf_r+0x1f0>)
 800e9cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9d0:	2206      	movs	r2, #6
 800e9d2:	f7f1 fc25 	bl	8000220 <memchr>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d038      	beq.n	800ea4c <_svfiprintf_r+0x1d8>
 800e9da:	4b23      	ldr	r3, [pc, #140]	; (800ea68 <_svfiprintf_r+0x1f4>)
 800e9dc:	bb1b      	cbnz	r3, 800ea26 <_svfiprintf_r+0x1b2>
 800e9de:	9b03      	ldr	r3, [sp, #12]
 800e9e0:	3307      	adds	r3, #7
 800e9e2:	f023 0307 	bic.w	r3, r3, #7
 800e9e6:	3308      	adds	r3, #8
 800e9e8:	9303      	str	r3, [sp, #12]
 800e9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ec:	4433      	add	r3, r6
 800e9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e9f0:	e767      	b.n	800e8c2 <_svfiprintf_r+0x4e>
 800e9f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	2001      	movs	r0, #1
 800e9fa:	e7a5      	b.n	800e948 <_svfiprintf_r+0xd4>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	3401      	adds	r4, #1
 800ea00:	9305      	str	r3, [sp, #20]
 800ea02:	4619      	mov	r1, r3
 800ea04:	f04f 0c0a 	mov.w	ip, #10
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea0e:	3a30      	subs	r2, #48	; 0x30
 800ea10:	2a09      	cmp	r2, #9
 800ea12:	d903      	bls.n	800ea1c <_svfiprintf_r+0x1a8>
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d0c5      	beq.n	800e9a4 <_svfiprintf_r+0x130>
 800ea18:	9105      	str	r1, [sp, #20]
 800ea1a:	e7c3      	b.n	800e9a4 <_svfiprintf_r+0x130>
 800ea1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea20:	4604      	mov	r4, r0
 800ea22:	2301      	movs	r3, #1
 800ea24:	e7f0      	b.n	800ea08 <_svfiprintf_r+0x194>
 800ea26:	ab03      	add	r3, sp, #12
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	462a      	mov	r2, r5
 800ea2c:	4b0f      	ldr	r3, [pc, #60]	; (800ea6c <_svfiprintf_r+0x1f8>)
 800ea2e:	a904      	add	r1, sp, #16
 800ea30:	4638      	mov	r0, r7
 800ea32:	f3af 8000 	nop.w
 800ea36:	1c42      	adds	r2, r0, #1
 800ea38:	4606      	mov	r6, r0
 800ea3a:	d1d6      	bne.n	800e9ea <_svfiprintf_r+0x176>
 800ea3c:	89ab      	ldrh	r3, [r5, #12]
 800ea3e:	065b      	lsls	r3, r3, #25
 800ea40:	f53f af2c 	bmi.w	800e89c <_svfiprintf_r+0x28>
 800ea44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea46:	b01d      	add	sp, #116	; 0x74
 800ea48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4c:	ab03      	add	r3, sp, #12
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	462a      	mov	r2, r5
 800ea52:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <_svfiprintf_r+0x1f8>)
 800ea54:	a904      	add	r1, sp, #16
 800ea56:	4638      	mov	r0, r7
 800ea58:	f000 f87a 	bl	800eb50 <_printf_i>
 800ea5c:	e7eb      	b.n	800ea36 <_svfiprintf_r+0x1c2>
 800ea5e:	bf00      	nop
 800ea60:	0800f0dc 	.word	0x0800f0dc
 800ea64:	0800f0e6 	.word	0x0800f0e6
 800ea68:	00000000 	.word	0x00000000
 800ea6c:	0800e7bd 	.word	0x0800e7bd
 800ea70:	0800f0e2 	.word	0x0800f0e2

0800ea74 <_printf_common>:
 800ea74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea78:	4616      	mov	r6, r2
 800ea7a:	4699      	mov	r9, r3
 800ea7c:	688a      	ldr	r2, [r1, #8]
 800ea7e:	690b      	ldr	r3, [r1, #16]
 800ea80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea84:	4293      	cmp	r3, r2
 800ea86:	bfb8      	it	lt
 800ea88:	4613      	movlt	r3, r2
 800ea8a:	6033      	str	r3, [r6, #0]
 800ea8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea90:	4607      	mov	r7, r0
 800ea92:	460c      	mov	r4, r1
 800ea94:	b10a      	cbz	r2, 800ea9a <_printf_common+0x26>
 800ea96:	3301      	adds	r3, #1
 800ea98:	6033      	str	r3, [r6, #0]
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	0699      	lsls	r1, r3, #26
 800ea9e:	bf42      	ittt	mi
 800eaa0:	6833      	ldrmi	r3, [r6, #0]
 800eaa2:	3302      	addmi	r3, #2
 800eaa4:	6033      	strmi	r3, [r6, #0]
 800eaa6:	6825      	ldr	r5, [r4, #0]
 800eaa8:	f015 0506 	ands.w	r5, r5, #6
 800eaac:	d106      	bne.n	800eabc <_printf_common+0x48>
 800eaae:	f104 0a19 	add.w	sl, r4, #25
 800eab2:	68e3      	ldr	r3, [r4, #12]
 800eab4:	6832      	ldr	r2, [r6, #0]
 800eab6:	1a9b      	subs	r3, r3, r2
 800eab8:	42ab      	cmp	r3, r5
 800eaba:	dc26      	bgt.n	800eb0a <_printf_common+0x96>
 800eabc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eac0:	1e13      	subs	r3, r2, #0
 800eac2:	6822      	ldr	r2, [r4, #0]
 800eac4:	bf18      	it	ne
 800eac6:	2301      	movne	r3, #1
 800eac8:	0692      	lsls	r2, r2, #26
 800eaca:	d42b      	bmi.n	800eb24 <_printf_common+0xb0>
 800eacc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ead0:	4649      	mov	r1, r9
 800ead2:	4638      	mov	r0, r7
 800ead4:	47c0      	blx	r8
 800ead6:	3001      	adds	r0, #1
 800ead8:	d01e      	beq.n	800eb18 <_printf_common+0xa4>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	68e5      	ldr	r5, [r4, #12]
 800eade:	6832      	ldr	r2, [r6, #0]
 800eae0:	f003 0306 	and.w	r3, r3, #6
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	bf08      	it	eq
 800eae8:	1aad      	subeq	r5, r5, r2
 800eaea:	68a3      	ldr	r3, [r4, #8]
 800eaec:	6922      	ldr	r2, [r4, #16]
 800eaee:	bf0c      	ite	eq
 800eaf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaf4:	2500      	movne	r5, #0
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	bfc4      	itt	gt
 800eafa:	1a9b      	subgt	r3, r3, r2
 800eafc:	18ed      	addgt	r5, r5, r3
 800eafe:	2600      	movs	r6, #0
 800eb00:	341a      	adds	r4, #26
 800eb02:	42b5      	cmp	r5, r6
 800eb04:	d11a      	bne.n	800eb3c <_printf_common+0xc8>
 800eb06:	2000      	movs	r0, #0
 800eb08:	e008      	b.n	800eb1c <_printf_common+0xa8>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	4652      	mov	r2, sl
 800eb0e:	4649      	mov	r1, r9
 800eb10:	4638      	mov	r0, r7
 800eb12:	47c0      	blx	r8
 800eb14:	3001      	adds	r0, #1
 800eb16:	d103      	bne.n	800eb20 <_printf_common+0xac>
 800eb18:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb20:	3501      	adds	r5, #1
 800eb22:	e7c6      	b.n	800eab2 <_printf_common+0x3e>
 800eb24:	18e1      	adds	r1, r4, r3
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	2030      	movs	r0, #48	; 0x30
 800eb2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb2e:	4422      	add	r2, r4
 800eb30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb38:	3302      	adds	r3, #2
 800eb3a:	e7c7      	b.n	800eacc <_printf_common+0x58>
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	4622      	mov	r2, r4
 800eb40:	4649      	mov	r1, r9
 800eb42:	4638      	mov	r0, r7
 800eb44:	47c0      	blx	r8
 800eb46:	3001      	adds	r0, #1
 800eb48:	d0e6      	beq.n	800eb18 <_printf_common+0xa4>
 800eb4a:	3601      	adds	r6, #1
 800eb4c:	e7d9      	b.n	800eb02 <_printf_common+0x8e>
	...

0800eb50 <_printf_i>:
 800eb50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb54:	7e0f      	ldrb	r7, [r1, #24]
 800eb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb58:	2f78      	cmp	r7, #120	; 0x78
 800eb5a:	4691      	mov	r9, r2
 800eb5c:	4680      	mov	r8, r0
 800eb5e:	460c      	mov	r4, r1
 800eb60:	469a      	mov	sl, r3
 800eb62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb66:	d807      	bhi.n	800eb78 <_printf_i+0x28>
 800eb68:	2f62      	cmp	r7, #98	; 0x62
 800eb6a:	d80a      	bhi.n	800eb82 <_printf_i+0x32>
 800eb6c:	2f00      	cmp	r7, #0
 800eb6e:	f000 80d8 	beq.w	800ed22 <_printf_i+0x1d2>
 800eb72:	2f58      	cmp	r7, #88	; 0x58
 800eb74:	f000 80a3 	beq.w	800ecbe <_printf_i+0x16e>
 800eb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb80:	e03a      	b.n	800ebf8 <_printf_i+0xa8>
 800eb82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb86:	2b15      	cmp	r3, #21
 800eb88:	d8f6      	bhi.n	800eb78 <_printf_i+0x28>
 800eb8a:	a101      	add	r1, pc, #4	; (adr r1, 800eb90 <_printf_i+0x40>)
 800eb8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb90:	0800ebe9 	.word	0x0800ebe9
 800eb94:	0800ebfd 	.word	0x0800ebfd
 800eb98:	0800eb79 	.word	0x0800eb79
 800eb9c:	0800eb79 	.word	0x0800eb79
 800eba0:	0800eb79 	.word	0x0800eb79
 800eba4:	0800eb79 	.word	0x0800eb79
 800eba8:	0800ebfd 	.word	0x0800ebfd
 800ebac:	0800eb79 	.word	0x0800eb79
 800ebb0:	0800eb79 	.word	0x0800eb79
 800ebb4:	0800eb79 	.word	0x0800eb79
 800ebb8:	0800eb79 	.word	0x0800eb79
 800ebbc:	0800ed09 	.word	0x0800ed09
 800ebc0:	0800ec2d 	.word	0x0800ec2d
 800ebc4:	0800eceb 	.word	0x0800eceb
 800ebc8:	0800eb79 	.word	0x0800eb79
 800ebcc:	0800eb79 	.word	0x0800eb79
 800ebd0:	0800ed2b 	.word	0x0800ed2b
 800ebd4:	0800eb79 	.word	0x0800eb79
 800ebd8:	0800ec2d 	.word	0x0800ec2d
 800ebdc:	0800eb79 	.word	0x0800eb79
 800ebe0:	0800eb79 	.word	0x0800eb79
 800ebe4:	0800ecf3 	.word	0x0800ecf3
 800ebe8:	682b      	ldr	r3, [r5, #0]
 800ebea:	1d1a      	adds	r2, r3, #4
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	602a      	str	r2, [r5, #0]
 800ebf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e0a3      	b.n	800ed44 <_printf_i+0x1f4>
 800ebfc:	6820      	ldr	r0, [r4, #0]
 800ebfe:	6829      	ldr	r1, [r5, #0]
 800ec00:	0606      	lsls	r6, r0, #24
 800ec02:	f101 0304 	add.w	r3, r1, #4
 800ec06:	d50a      	bpl.n	800ec1e <_printf_i+0xce>
 800ec08:	680e      	ldr	r6, [r1, #0]
 800ec0a:	602b      	str	r3, [r5, #0]
 800ec0c:	2e00      	cmp	r6, #0
 800ec0e:	da03      	bge.n	800ec18 <_printf_i+0xc8>
 800ec10:	232d      	movs	r3, #45	; 0x2d
 800ec12:	4276      	negs	r6, r6
 800ec14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec18:	485e      	ldr	r0, [pc, #376]	; (800ed94 <_printf_i+0x244>)
 800ec1a:	230a      	movs	r3, #10
 800ec1c:	e019      	b.n	800ec52 <_printf_i+0x102>
 800ec1e:	680e      	ldr	r6, [r1, #0]
 800ec20:	602b      	str	r3, [r5, #0]
 800ec22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec26:	bf18      	it	ne
 800ec28:	b236      	sxthne	r6, r6
 800ec2a:	e7ef      	b.n	800ec0c <_printf_i+0xbc>
 800ec2c:	682b      	ldr	r3, [r5, #0]
 800ec2e:	6820      	ldr	r0, [r4, #0]
 800ec30:	1d19      	adds	r1, r3, #4
 800ec32:	6029      	str	r1, [r5, #0]
 800ec34:	0601      	lsls	r1, r0, #24
 800ec36:	d501      	bpl.n	800ec3c <_printf_i+0xec>
 800ec38:	681e      	ldr	r6, [r3, #0]
 800ec3a:	e002      	b.n	800ec42 <_printf_i+0xf2>
 800ec3c:	0646      	lsls	r6, r0, #25
 800ec3e:	d5fb      	bpl.n	800ec38 <_printf_i+0xe8>
 800ec40:	881e      	ldrh	r6, [r3, #0]
 800ec42:	4854      	ldr	r0, [pc, #336]	; (800ed94 <_printf_i+0x244>)
 800ec44:	2f6f      	cmp	r7, #111	; 0x6f
 800ec46:	bf0c      	ite	eq
 800ec48:	2308      	moveq	r3, #8
 800ec4a:	230a      	movne	r3, #10
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec52:	6865      	ldr	r5, [r4, #4]
 800ec54:	60a5      	str	r5, [r4, #8]
 800ec56:	2d00      	cmp	r5, #0
 800ec58:	bfa2      	ittt	ge
 800ec5a:	6821      	ldrge	r1, [r4, #0]
 800ec5c:	f021 0104 	bicge.w	r1, r1, #4
 800ec60:	6021      	strge	r1, [r4, #0]
 800ec62:	b90e      	cbnz	r6, 800ec68 <_printf_i+0x118>
 800ec64:	2d00      	cmp	r5, #0
 800ec66:	d04d      	beq.n	800ed04 <_printf_i+0x1b4>
 800ec68:	4615      	mov	r5, r2
 800ec6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec6e:	fb03 6711 	mls	r7, r3, r1, r6
 800ec72:	5dc7      	ldrb	r7, [r0, r7]
 800ec74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec78:	4637      	mov	r7, r6
 800ec7a:	42bb      	cmp	r3, r7
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	d9f4      	bls.n	800ec6a <_printf_i+0x11a>
 800ec80:	2b08      	cmp	r3, #8
 800ec82:	d10b      	bne.n	800ec9c <_printf_i+0x14c>
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	07de      	lsls	r6, r3, #31
 800ec88:	d508      	bpl.n	800ec9c <_printf_i+0x14c>
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	6861      	ldr	r1, [r4, #4]
 800ec8e:	4299      	cmp	r1, r3
 800ec90:	bfde      	ittt	le
 800ec92:	2330      	movle	r3, #48	; 0x30
 800ec94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec9c:	1b52      	subs	r2, r2, r5
 800ec9e:	6122      	str	r2, [r4, #16]
 800eca0:	f8cd a000 	str.w	sl, [sp]
 800eca4:	464b      	mov	r3, r9
 800eca6:	aa03      	add	r2, sp, #12
 800eca8:	4621      	mov	r1, r4
 800ecaa:	4640      	mov	r0, r8
 800ecac:	f7ff fee2 	bl	800ea74 <_printf_common>
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d14c      	bne.n	800ed4e <_printf_i+0x1fe>
 800ecb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb8:	b004      	add	sp, #16
 800ecba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecbe:	4835      	ldr	r0, [pc, #212]	; (800ed94 <_printf_i+0x244>)
 800ecc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ecc4:	6829      	ldr	r1, [r5, #0]
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800eccc:	6029      	str	r1, [r5, #0]
 800ecce:	061d      	lsls	r5, r3, #24
 800ecd0:	d514      	bpl.n	800ecfc <_printf_i+0x1ac>
 800ecd2:	07df      	lsls	r7, r3, #31
 800ecd4:	bf44      	itt	mi
 800ecd6:	f043 0320 	orrmi.w	r3, r3, #32
 800ecda:	6023      	strmi	r3, [r4, #0]
 800ecdc:	b91e      	cbnz	r6, 800ece6 <_printf_i+0x196>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	f023 0320 	bic.w	r3, r3, #32
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	2310      	movs	r3, #16
 800ece8:	e7b0      	b.n	800ec4c <_printf_i+0xfc>
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	f043 0320 	orr.w	r3, r3, #32
 800ecf0:	6023      	str	r3, [r4, #0]
 800ecf2:	2378      	movs	r3, #120	; 0x78
 800ecf4:	4828      	ldr	r0, [pc, #160]	; (800ed98 <_printf_i+0x248>)
 800ecf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecfa:	e7e3      	b.n	800ecc4 <_printf_i+0x174>
 800ecfc:	0659      	lsls	r1, r3, #25
 800ecfe:	bf48      	it	mi
 800ed00:	b2b6      	uxthmi	r6, r6
 800ed02:	e7e6      	b.n	800ecd2 <_printf_i+0x182>
 800ed04:	4615      	mov	r5, r2
 800ed06:	e7bb      	b.n	800ec80 <_printf_i+0x130>
 800ed08:	682b      	ldr	r3, [r5, #0]
 800ed0a:	6826      	ldr	r6, [r4, #0]
 800ed0c:	6961      	ldr	r1, [r4, #20]
 800ed0e:	1d18      	adds	r0, r3, #4
 800ed10:	6028      	str	r0, [r5, #0]
 800ed12:	0635      	lsls	r5, r6, #24
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	d501      	bpl.n	800ed1c <_printf_i+0x1cc>
 800ed18:	6019      	str	r1, [r3, #0]
 800ed1a:	e002      	b.n	800ed22 <_printf_i+0x1d2>
 800ed1c:	0670      	lsls	r0, r6, #25
 800ed1e:	d5fb      	bpl.n	800ed18 <_printf_i+0x1c8>
 800ed20:	8019      	strh	r1, [r3, #0]
 800ed22:	2300      	movs	r3, #0
 800ed24:	6123      	str	r3, [r4, #16]
 800ed26:	4615      	mov	r5, r2
 800ed28:	e7ba      	b.n	800eca0 <_printf_i+0x150>
 800ed2a:	682b      	ldr	r3, [r5, #0]
 800ed2c:	1d1a      	adds	r2, r3, #4
 800ed2e:	602a      	str	r2, [r5, #0]
 800ed30:	681d      	ldr	r5, [r3, #0]
 800ed32:	6862      	ldr	r2, [r4, #4]
 800ed34:	2100      	movs	r1, #0
 800ed36:	4628      	mov	r0, r5
 800ed38:	f7f1 fa72 	bl	8000220 <memchr>
 800ed3c:	b108      	cbz	r0, 800ed42 <_printf_i+0x1f2>
 800ed3e:	1b40      	subs	r0, r0, r5
 800ed40:	6060      	str	r0, [r4, #4]
 800ed42:	6863      	ldr	r3, [r4, #4]
 800ed44:	6123      	str	r3, [r4, #16]
 800ed46:	2300      	movs	r3, #0
 800ed48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed4c:	e7a8      	b.n	800eca0 <_printf_i+0x150>
 800ed4e:	6923      	ldr	r3, [r4, #16]
 800ed50:	462a      	mov	r2, r5
 800ed52:	4649      	mov	r1, r9
 800ed54:	4640      	mov	r0, r8
 800ed56:	47d0      	blx	sl
 800ed58:	3001      	adds	r0, #1
 800ed5a:	d0ab      	beq.n	800ecb4 <_printf_i+0x164>
 800ed5c:	6823      	ldr	r3, [r4, #0]
 800ed5e:	079b      	lsls	r3, r3, #30
 800ed60:	d413      	bmi.n	800ed8a <_printf_i+0x23a>
 800ed62:	68e0      	ldr	r0, [r4, #12]
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	4298      	cmp	r0, r3
 800ed68:	bfb8      	it	lt
 800ed6a:	4618      	movlt	r0, r3
 800ed6c:	e7a4      	b.n	800ecb8 <_printf_i+0x168>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	4632      	mov	r2, r6
 800ed72:	4649      	mov	r1, r9
 800ed74:	4640      	mov	r0, r8
 800ed76:	47d0      	blx	sl
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d09b      	beq.n	800ecb4 <_printf_i+0x164>
 800ed7c:	3501      	adds	r5, #1
 800ed7e:	68e3      	ldr	r3, [r4, #12]
 800ed80:	9903      	ldr	r1, [sp, #12]
 800ed82:	1a5b      	subs	r3, r3, r1
 800ed84:	42ab      	cmp	r3, r5
 800ed86:	dcf2      	bgt.n	800ed6e <_printf_i+0x21e>
 800ed88:	e7eb      	b.n	800ed62 <_printf_i+0x212>
 800ed8a:	2500      	movs	r5, #0
 800ed8c:	f104 0619 	add.w	r6, r4, #25
 800ed90:	e7f5      	b.n	800ed7e <_printf_i+0x22e>
 800ed92:	bf00      	nop
 800ed94:	0800f0ed 	.word	0x0800f0ed
 800ed98:	0800f0fe 	.word	0x0800f0fe

0800ed9c <__retarget_lock_acquire_recursive>:
 800ed9c:	4770      	bx	lr

0800ed9e <__retarget_lock_release_recursive>:
 800ed9e:	4770      	bx	lr

0800eda0 <memcpy>:
 800eda0:	440a      	add	r2, r1
 800eda2:	4291      	cmp	r1, r2
 800eda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800eda8:	d100      	bne.n	800edac <memcpy+0xc>
 800edaa:	4770      	bx	lr
 800edac:	b510      	push	{r4, lr}
 800edae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edb6:	4291      	cmp	r1, r2
 800edb8:	d1f9      	bne.n	800edae <memcpy+0xe>
 800edba:	bd10      	pop	{r4, pc}

0800edbc <memmove>:
 800edbc:	4288      	cmp	r0, r1
 800edbe:	b510      	push	{r4, lr}
 800edc0:	eb01 0402 	add.w	r4, r1, r2
 800edc4:	d902      	bls.n	800edcc <memmove+0x10>
 800edc6:	4284      	cmp	r4, r0
 800edc8:	4623      	mov	r3, r4
 800edca:	d807      	bhi.n	800eddc <memmove+0x20>
 800edcc:	1e43      	subs	r3, r0, #1
 800edce:	42a1      	cmp	r1, r4
 800edd0:	d008      	beq.n	800ede4 <memmove+0x28>
 800edd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edda:	e7f8      	b.n	800edce <memmove+0x12>
 800eddc:	4402      	add	r2, r0
 800edde:	4601      	mov	r1, r0
 800ede0:	428a      	cmp	r2, r1
 800ede2:	d100      	bne.n	800ede6 <memmove+0x2a>
 800ede4:	bd10      	pop	{r4, pc}
 800ede6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edee:	e7f7      	b.n	800ede0 <memmove+0x24>

0800edf0 <_realloc_r>:
 800edf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf4:	4680      	mov	r8, r0
 800edf6:	4614      	mov	r4, r2
 800edf8:	460e      	mov	r6, r1
 800edfa:	b921      	cbnz	r1, 800ee06 <_realloc_r+0x16>
 800edfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	4611      	mov	r1, r2
 800ee02:	f7ff bbd3 	b.w	800e5ac <_malloc_r>
 800ee06:	b92a      	cbnz	r2, 800ee14 <_realloc_r+0x24>
 800ee08:	f7ff fb64 	bl	800e4d4 <_free_r>
 800ee0c:	4625      	mov	r5, r4
 800ee0e:	4628      	mov	r0, r5
 800ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee14:	f000 f81b 	bl	800ee4e <_malloc_usable_size_r>
 800ee18:	4284      	cmp	r4, r0
 800ee1a:	4607      	mov	r7, r0
 800ee1c:	d802      	bhi.n	800ee24 <_realloc_r+0x34>
 800ee1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee22:	d812      	bhi.n	800ee4a <_realloc_r+0x5a>
 800ee24:	4621      	mov	r1, r4
 800ee26:	4640      	mov	r0, r8
 800ee28:	f7ff fbc0 	bl	800e5ac <_malloc_r>
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d0ed      	beq.n	800ee0e <_realloc_r+0x1e>
 800ee32:	42bc      	cmp	r4, r7
 800ee34:	4622      	mov	r2, r4
 800ee36:	4631      	mov	r1, r6
 800ee38:	bf28      	it	cs
 800ee3a:	463a      	movcs	r2, r7
 800ee3c:	f7ff ffb0 	bl	800eda0 <memcpy>
 800ee40:	4631      	mov	r1, r6
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7ff fb46 	bl	800e4d4 <_free_r>
 800ee48:	e7e1      	b.n	800ee0e <_realloc_r+0x1e>
 800ee4a:	4635      	mov	r5, r6
 800ee4c:	e7df      	b.n	800ee0e <_realloc_r+0x1e>

0800ee4e <_malloc_usable_size_r>:
 800ee4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee52:	1f18      	subs	r0, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	bfbc      	itt	lt
 800ee58:	580b      	ldrlt	r3, [r1, r0]
 800ee5a:	18c0      	addlt	r0, r0, r3
 800ee5c:	4770      	bx	lr
	...

0800ee60 <_init>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	bf00      	nop
 800ee64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee66:	bc08      	pop	{r3}
 800ee68:	469e      	mov	lr, r3
 800ee6a:	4770      	bx	lr

0800ee6c <_fini>:
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	bf00      	nop
 800ee70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee72:	bc08      	pop	{r3}
 800ee74:	469e      	mov	lr, r3
 800ee76:	4770      	bx	lr
