
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08010ba8  08010ba8  00020ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e74  08010e74  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08010e74  08010e74  00020e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e7c  08010e7c  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010e7c  08010e7c  00020e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010e84  08010e84  00020e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08010e8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  20000074  08010f00  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001598  08010f00  00031598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036359  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007659  00000000  00000000  000663fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a0  00000000  00000000  0006da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024d0  00000000  00000000  000701f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e75b  00000000  00000000  000726c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000350f5  00000000  00000000  000a0e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee955  00000000  00000000  000d5f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c486d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b12c  00000000  00000000  001c48c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010b8c 	.word	0x08010b8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08010b8c 	.word	0x08010b8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin>:
 *      Author: Daxxn
 */

#include <RotaryEncoder.h>

RotaryEncoder::RotaryEncoder(GPIO_TypeDef *portA, uint16_t pinA, GPIO_TypeDef *portB, uint16_t pinB, Pin switchPin)
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin+0x70>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffe4 	bl	8000f3c <_ZN3PinC1Ev>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	765a      	strb	r2, [r3, #25]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	769a      	strb	r2, [r3, #26]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	76da      	strb	r2, [r3, #27]
{
	this->portA = portA;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	605a      	str	r2, [r3, #4]
	this->portB = portB;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	609a      	str	r2, [r3, #8]
	this->pinA = pinA;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	819a      	strh	r2, [r3, #12]
	this->pinB = pinB;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8b3a      	ldrh	r2, [r7, #24]
 8000fa2:	81da      	strh	r2, [r3, #14]
	this->switchPin = switchPin;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3310      	adds	r3, #16
 8000fa8:	f107 021c 	add.w	r2, r7, #28
 8000fac:	6810      	ldr	r0, [r2, #0]
 8000fae:	6018      	str	r0, [r3, #0]
 8000fb0:	8891      	ldrh	r1, [r2, #4]
 8000fb2:	7992      	ldrb	r2, [r2, #6]
 8000fb4:	8099      	strh	r1, [r3, #4]
 8000fb6:	719a      	strb	r2, [r3, #6]
}
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08010ce4 	.word	0x08010ce4

08000fc8 <_ZN13RotaryEncoderD1Ev>:

RotaryEncoder::~RotaryEncoder()
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <_ZN13RotaryEncoderD1Ev+0x1c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
{
}
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	08010ce4 	.word	0x08010ce4

08000fe8 <_ZN13RotaryEncoderD0Ev>:
RotaryEncoder::~RotaryEncoder()
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
}
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ffe9 	bl	8000fc8 <_ZN13RotaryEncoderD1Ev>
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f00e f94c 	bl	800f296 <_ZdlPvj>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN13RotaryEncoder4InitEv>:

HAL_StatusTypeDef RotaryEncoder::Init()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	prevStateA = HAL_GPIO_ReadPin(portA, pinA);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	899b      	ldrh	r3, [r3, #12]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f007 fe8e 	bl	8008d3c <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	761a      	strb	r2, [r3, #24]
	prevStateB = HAL_GPIO_ReadPin(portB, pinB);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	89db      	ldrh	r3, [r3, #14]
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f007 fe82 	bl	8008d3c <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	765a      	strb	r2, [r3, #25]
	return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZN13RotaryEncoder6DecodeEv>:

void RotaryEncoder::Decode()
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	this->currStateA = HAL_GPIO_ReadPin(this->portA, this->pinA);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	899b      	ldrh	r3, [r3, #12]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f007 fe6d 	bl	8008d3c <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	769a      	strb	r2, [r3, #26]
	this->currStateB = HAL_GPIO_ReadPin(this->portB, this->pinB);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	89db      	ldrh	r3, [r3, #14]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f007 fe61 	bl	8008d3c <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	76da      	strb	r2, [r3, #27]

	if (this->currStateA == 1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7e9b      	ldrb	r3, [r3, #26]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d11c      	bne.n	80010c4 <_ZN13RotaryEncoder6DecodeEv+0x7a>
	{
		if (this->currStateA != this->prevStateA)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e9a      	ldrb	r2, [r3, #26]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7e1b      	ldrb	r3, [r3, #24]
 8001092:	429a      	cmp	r2, r3
 8001094:	d016      	beq.n	80010c4 <_ZN13RotaryEncoder6DecodeEv+0x7a>
		{
			if (this->currStateB == 0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7edb      	ldrb	r3, [r3, #27]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <_ZN13RotaryEncoder6DecodeEv+0x68>
			{
				this->position++;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8b9b      	ldrh	r3, [r3, #28]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	839a      	strh	r2, [r3, #28]
				this->direction = CW;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	779a      	strb	r2, [r3, #30]
 80010b0:	e008      	b.n	80010c4 <_ZN13RotaryEncoder6DecodeEv+0x7a>
			}
			else
			{
				this->position--;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8b9b      	ldrh	r3, [r3, #28]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	839a      	strh	r2, [r3, #28]
				this->direction = CCW;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	22ff      	movs	r2, #255	; 0xff
 80010c2:	779a      	strb	r2, [r3, #30]
			}
		}
	}

	this->prevStateA = this->currStateA;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7e9a      	ldrb	r2, [r3, #26]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	761a      	strb	r2, [r3, #24]
	this->prevStateB = this->currStateB;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7eda      	ldrb	r2, [r3, #27]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	765a      	strb	r2, [r3, #25]
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f007 fe32 	bl	8008d6c <HAL_GPIO_WritePin>
	};
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef *port, uint16_t pin, GPIO_Default_State defaultState)
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	4611      	mov	r1, r2
 800111e:	461a      	mov	r2, r3
 8001120:	460b      	mov	r3, r1
 8001122:	80fb      	strh	r3, [r7, #6]
 8001124:	4613      	mov	r3, r2
 8001126:	717b      	strb	r3, [r7, #5]
	{
		this->port = port;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	797a      	ldrb	r2, [r7, #5]
 8001138:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, (GPIO_PinState)defaultState);
 800113a:	797a      	ldrb	r2, [r7, #5]
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4619      	mov	r1, r3
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f007 fe13 	bl	8008d6c <HAL_GPIO_WritePin>
	}
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZN12StripCurrentC1Ev>:
 *
 */
class StripCurrent
{
public:
	StripCurrent() {};
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <_ZN9ShiftRegsC1Ev+0x2c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3308      	adds	r3, #8
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fede 	bl	8000f3c <_ZN3PinC1Ev>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3310      	adds	r3, #16
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fed9 	bl	8000f3c <_ZN3PinC1Ev>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08010d18 	.word	0x08010d18

08001198 <_ZN15PCA9634SettingsC1Ev>:
	uint8_t green = 0;
	uint8_t blue = 0;
	bool en = 1;
};

struct PCA9634Settings
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	719a      	strb	r2, [r3, #6]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	71da      	strb	r2, [r3, #7]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	721a      	strb	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	725a      	strb	r2, [r3, #9]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_ZN7PCA9634C1Ev>:
 *
 */
class PCA9634
{
public:
	PCA9634() {};
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	227f      	movs	r2, #127	; 0x7f
 80011d2:	741a      	strb	r2, [r3, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3311      	adds	r3, #17
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffdd 	bl	8001198 <_ZN15PCA9634SettingsC1Ev>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	331c      	adds	r3, #28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff feaa 	bl	8000f3c <_ZN3PinC1Ev>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZN12StripControlC1Ev>:
 *
 */
class StripControl
{
public:
	StripControl() {};
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a10      	ldr	r2, [pc, #64]	; (8001240 <_ZN12StripControlC1Ev+0x4c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3310      	adds	r3, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe98 	bl	8000f3c <_ZN3PinC1Ev>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3318      	adds	r3, #24
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe93 	bl	8000f3c <_ZN3PinC1Ev>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3320      	adds	r3, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe8e 	bl	8000f3c <_ZN3PinC1Ev>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3328      	adds	r3, #40	; 0x28
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fe89 	bl	8000f3c <_ZN3PinC1Ev>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3330      	adds	r3, #48	; 0x30
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe84 	bl	8000f3c <_ZN3PinC1Ev>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08010d28 	.word	0x08010d28

08001244 <_ZN9ComponentC1EP7Nextionh>:
 *
 */
class Component
{
public:
	Component(Nextion *next, uint8_t id) { nxt = next; ID = id; };
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <_ZN9ComponentC1EP7Nextionh+0x34>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	715a      	strb	r2, [r3, #5]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	711a      	strb	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	08010d70 	.word	0x08010d70

0800127c <_ZN7ControlC1EP7NextionhPKchh>:
 *
 */
class Control : public Component
{
public:
	Control(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY): Component(nxt, id) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffd6 	bl	8001244 <_ZN9ComponentC1EP7Nextionh>
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <_ZN7ControlC1EP7NextionhPKchh+0x40>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]
		ObjName = name;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	60da      	str	r2, [r3, #12]
		navXIndex = navX;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	7e3a      	ldrb	r2, [r7, #24]
 80012a8:	741a      	strb	r2, [r3, #16]
		navYIndex = navY;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	7f3a      	ldrb	r2, [r7, #28]
 80012ae:	745a      	strb	r2, [r3, #17]
	};
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08010d84 	.word	0x08010d84

080012c0 <_ZN7ControlC1EP7NextionhPKc>:
	Control(Nextion *nxt, uint8_t id, const char* name): Component(nxt, id) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffb4 	bl	8001244 <_ZN9ComponentC1EP7Nextionh>
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <_ZN7ControlC1EP7NextionhPKc+0x38>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]
		navXIndex = IGNORE_NAV;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	741a      	strb	r2, [r3, #16]
		navYIndex = IGNORE_NAV;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	745a      	strb	r2, [r3, #17]
	}
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	08010d84 	.word	0x08010d84

080012fc <_ZN6ButtonC1EP7NextionhPKchh>:
 *
 */
class Button : public Control
{
public:
	Button(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY): Control(nxt, id, name, navX, navY) {};
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	7f3b      	ldrb	r3, [r7, #28]
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	7e3b      	ldrb	r3, [r7, #24]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	f7ff ffae 	bl	800127c <_ZN7ControlC1EP7NextionhPKchh>
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_ZN6ButtonC1EP7NextionhPKchh+0x3c>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	08010d50 	.word	0x08010d50

0800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>:
 *
 */
class PageButton : public Control
{
public:
	PageButton(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY, uint8_t pageID, ChangePageCallback callback): Control(nxt, id, name, navX, navY) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	7f3b      	ldrb	r3, [r7, #28]
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	7e3b      	ldrb	r3, [r7, #24]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	f7ff ff8e 	bl	800127c <_ZN7ControlC1EP7NextionhPKchh>
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE+0x44>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]
		this->pageID = pageID;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f897 2020 	ldrb.w	r2, [r7, #32]
 800136c:	749a      	strb	r2, [r3, #18]
		this->callback = callback;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001372:	615a      	str	r2, [r3, #20]
	};
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08010db8 	.word	0x08010db8

08001384 <_ZN11ProgressBarC1EP7NextionhPKc>:
 *
 */
class ProgressBar : public Control
{
public:
	ProgressBar(Nextion *nxt, uint8_t id, const char* name): Control(nxt, id, name) {};
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	4613      	mov	r3, r2
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	f7ff ff90 	bl	80012c0 <_ZN7ControlC1EP7NextionhPKc>
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <_ZN11ProgressBarC1EP7NextionhPKc+0x2c>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	08010dd8 	.word	0x08010dd8

080013b4 <_ZN13ScreenControlC1Ev>:
 * Screen Controller used for this specific project.
 */
class ScreenControl
{
public:
	ScreenControl() {};
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <_ZN13ScreenControlC1Ev+0x24>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	741a      	strb	r2, [r3, #16]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	08010d08 	.word	0x08010d08

080013dc <_ZN13RotaryEncoderC1Ev>:
 *
 */
class RotaryEncoder
{
public:
	RotaryEncoder() {};
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <_ZN13RotaryEncoderC1Ev+0x3c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3310      	adds	r3, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fda4 	bl	8000f3c <_ZN3PinC1Ev>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	765a      	strb	r2, [r3, #25]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	769a      	strb	r2, [r3, #26]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	76da      	strb	r2, [r3, #27]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08010ce4 	.word	0x08010ce4

0800141c <_Z20ScreenChangeCallbackh>:

/* Screen Components ---------------------------------------------------------*/
ScreenControl screenCtrl;

void ScreenChangeCallback(uint8_t pageID)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	screenCtrl.ChangePage(pageID);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4619      	mov	r1, r3
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <_Z20ScreenChangeCallbackh+0x1c>)
 800142c:	f001 ffb4 	bl	8003398 <_ZN13ScreenControl10ChangePageEh>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200003d8 	.word	0x200003d8

0800143c <_ZN9ComponentC1ERKS_>:
class Component
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <_ZN9ComponentC1ERKS_+0x38>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	791a      	ldrb	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	711a      	strb	r2, [r3, #4]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	795a      	ldrb	r2, [r3, #5]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	715a      	strb	r2, [r3, #5]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	08010d70 	.word	0x08010d70

08001478 <_ZN7ControlC1ERKS_>:
class Control : public Component
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffd7 	bl	800143c <_ZN9ComponentC1ERKS_>
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <_ZN7ControlC1ERKS_+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	7c1a      	ldrb	r2, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	741a      	strb	r2, [r3, #16]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	7c5a      	ldrb	r2, [r3, #17]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	745a      	strb	r2, [r3, #17]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08010d84 	.word	0x08010d84

080014bc <_ZN10PageButtonC1ERKS_>:
class PageButton : public Control
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffd3 	bl	8001478 <_ZN7ControlC1ERKS_>
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <_ZN10PageButtonC1ERKS_+0x38>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	7c9a      	ldrb	r2, [r3, #18]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	749a      	strb	r2, [r3, #18]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08010db8 	.word	0x08010db8

080014f8 <_ZN4PageC1ERKS_>:
#include "ProgressBar.h"

/*
 *
 */
class Page : public Component
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff97 	bl	800143c <_ZN9ComponentC1ERKS_>
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <_ZN4PageC1ERKS_+0xa0>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7b1a      	ldrb	r2, [r3, #12]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	731a      	strb	r2, [r3, #12]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	7b5a      	ldrb	r2, [r3, #13]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	735a      	strb	r2, [r3, #13]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	61da      	str	r2, [r3, #28]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	08010da4 	.word	0x08010da4

0800159c <_ZN6ButtonC1ERKS_>:
class Button : public Control
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff63 	bl	8001478 <_ZN7ControlC1ERKS_>
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <_ZN6ButtonC1ERKS_+0x38>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	7c9a      	ldrb	r2, [r3, #18]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	749a      	strb	r2, [r3, #18]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08010d50 	.word	0x08010d50

080015d8 <_ZN11ProgressBarC1ERKS_>:
class ProgressBar : public Control
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff45 	bl	8001478 <_ZN7ControlC1ERKS_>
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <_ZN11ProgressBarC1ERKS_+0x30>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7c9a      	ldrb	r2, [r3, #18]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	749a      	strb	r2, [r3, #18]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08010dd8 	.word	0x08010dd8

0800160c <_Z7RMSTestv>:

float rms = 0;
float sum = 0;
int rmsI = 0;
void RMSTest()
{
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	af00      	add	r7, sp, #0
	sum = 0;
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <_Z7RMSTestv+0xc8>)
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
	for (rmsI = 0; rmsI < AUDIO_HALF_BUFFER_SIZE; rmsI += 2) {
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <_Z7RMSTestv+0xcc>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <_Z7RMSTestv+0xcc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b3f      	cmp	r3, #63	; 0x3f
 8001624:	dc24      	bgt.n	8001670 <_Z7RMSTestv+0x64>
		sum += pow(audioBuffer[rmsI], 2);
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <_Z7RMSTestv+0xcc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <_Z7RMSTestv+0xd0>)
 800162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001630:	2102      	movs	r1, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fbec 	bl	8001e10 <_ZSt3powImiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001638:	ec55 4b10 	vmov	r4, r5, d0
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <_Z7RMSTestv+0xc8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ffa1 	bl	8000588 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4620      	mov	r0, r4
 800164c:	4629      	mov	r1, r5
 800164e:	f7fe fe3d 	bl	80002cc <__adddf3>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fa9d 	bl	8000b98 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <_Z7RMSTestv+0xc8>)
 8001662:	6013      	str	r3, [r2, #0]
	for (rmsI = 0; rmsI < AUDIO_HALF_BUFFER_SIZE; rmsI += 2) {
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <_Z7RMSTestv+0xcc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3302      	adds	r3, #2
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <_Z7RMSTestv+0xcc>)
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e7d6      	b.n	800161e <_Z7RMSTestv+0x12>
	}
	rms = sqrt(1.0 / (float)AUDIO_HALF_BUFFER_SIZE * sum) + TEST_OFFSET;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <_Z7RMSTestv+0xc8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff87 	bl	8000588 <__aeabi_f2d>
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <_Z7RMSTestv+0xd4>)
 8001680:	f7fe ffda 	bl	8000638 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	ec43 2b17 	vmov	d7, r2, r3
 800168c:	eeb0 0a47 	vmov.f32	s0, s14
 8001690:	eef0 0a67 	vmov.f32	s1, s15
 8001694:	f00d fe92 	bl	800f3bc <sqrt>
 8001698:	ec51 0b10 	vmov	r0, r1, d0
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_Z7RMSTestv+0xd8>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa73 	bl	8000b98 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <_Z7RMSTestv+0xdc>)
 80016b6:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, (uint32_t)rms);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <_Z7RMSTestv+0xdc>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <_Z7RMSTestv+0xe0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c8:	ee17 2a90 	vmov	r2, s15
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016ce:	bf00      	nop
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000ff8 	.word	0x20000ff8
 80016d8:	20000ffc 	.word	0x20000ffc
 80016dc:	20000194 	.word	0x20000194
 80016e0:	3f900000 	.word	0x3f900000
 80016e4:	40df4000 	.word	0x40df4000
 80016e8:	20000ff4 	.word	0x20000ff4
 80016ec:	200000b4 	.word	0x200000b4

080016f0 <AudioFullCallback>:

void AudioFullCallback()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	RMSTest();
 80016f4:	f7ff ff8a 	bl	800160c <_Z7RMSTestv>
//			max += audioBuffer[i];
//		}
//	}
//	uint32_t avg = max / AUDIO_BUFFER_SIZE;
//	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, avg);
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <CurrentConvFullCallback>:
{

}

void CurrentConvFullCallback()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	stripCurr.Calc();
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <CurrentConvFullCallback+0x10>)
 8001702:	f002 f90f 	bl	8003924 <_ZN12StripCurrent4CalcEv>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000114 	.word	0x20000114

08001710 <_Z24PageChangeCallbackHandleh>:

void PageChangeCallbackHandle(uint8_t pageNumber)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	screenCtrl.ChangePageEvent(pageNumber);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4619      	mov	r1, r3
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <_Z24PageChangeCallbackHandleh+0x1c>)
 8001720:	f001 fe21 	bl	8003366 <_ZN13ScreenControl15ChangePageEventEh>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200003d8 	.word	0x200003d8

08001730 <_Z24TouchEventCallbackHandlehhh>:

void TouchEventCallbackHandle(uint8_t pageID, uint8_t compID, uint8_t event)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	460b      	mov	r3, r1
 800173c:	71bb      	strb	r3, [r7, #6]
 800173e:	4613      	mov	r3, r2
 8001740:	717b      	strb	r3, [r7, #5]
	screenCtrl.TouchEvent(pageID, compID, event);
 8001742:	797b      	ldrb	r3, [r7, #5]
 8001744:	79ba      	ldrb	r2, [r7, #6]
 8001746:	79f9      	ldrb	r1, [r7, #7]
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <_Z24TouchEventCallbackHandlehhh+0x28>)
 800174a:	f001 fe68 	bl	800341e <_ZN13ScreenControl10TouchEventEhhh>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200003d8 	.word	0x200003d8

0800175c <_Z25StripCurrentAlertCallback18StripCurrentStatus>:
{
	next.Receive();
}

void StripCurrentAlertCallback(StripCurrentStatus status)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]

}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_ZN13RotaryEncoderaSERKS_>:
class RotaryEncoder
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	899a      	ldrh	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	819a      	strh	r2, [r3, #12]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	89da      	ldrh	r2, [r3, #14]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	81da      	strh	r2, [r3, #14]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	3310      	adds	r3, #16
 80017a2:	3210      	adds	r2, #16
 80017a4:	6811      	ldr	r1, [r2, #0]
 80017a6:	6019      	str	r1, [r3, #0]
 80017a8:	8891      	ldrh	r1, [r2, #4]
 80017aa:	7992      	ldrb	r2, [r2, #6]
 80017ac:	8099      	strh	r1, [r3, #4]
 80017ae:	719a      	strb	r2, [r3, #6]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7e1a      	ldrb	r2, [r3, #24]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	761a      	strb	r2, [r3, #24]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	7e5a      	ldrb	r2, [r3, #25]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	765a      	strb	r2, [r3, #25]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	7e9a      	ldrb	r2, [r3, #26]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	769a      	strb	r2, [r3, #26]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	7eda      	ldrb	r2, [r3, #27]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	76da      	strb	r2, [r3, #27]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	8b9a      	ldrh	r2, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	839a      	strh	r2, [r3, #28]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f993 201e 	ldrsb.w	r2, [r3, #30]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	779a      	strb	r2, [r3, #30]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	7fda      	ldrb	r2, [r3, #31]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	77da      	strb	r2, [r3, #31]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	3308      	adds	r3, #8
 8001810:	3208      	adds	r2, #8
 8001812:	6811      	ldr	r1, [r2, #0]
 8001814:	6019      	str	r1, [r3, #0]
 8001816:	8891      	ldrh	r1, [r2, #4]
 8001818:	7992      	ldrb	r2, [r2, #6]
 800181a:	8099      	strh	r1, [r3, #4]
 800181c:	719a      	strb	r2, [r3, #6]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	3310      	adds	r3, #16
 8001824:	3210      	adds	r2, #16
 8001826:	6811      	ldr	r1, [r2, #0]
 8001828:	6019      	str	r1, [r3, #0]
 800182a:	8891      	ldrh	r1, [r2, #4]
 800182c:	7992      	ldrb	r2, [r2, #6]
 800182e:	8099      	strh	r1, [r3, #4]
 8001830:	719a      	strb	r2, [r3, #6]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	8b1a      	ldrh	r2, [r3, #24]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	831a      	strh	r2, [r3, #24]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	61da      	str	r2, [r3, #28]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6a1a      	ldr	r2, [r3, #32]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	621a      	str	r2, [r3, #32]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZN12StripControlaSERKS_>:
class StripControl
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	7a1a      	ldrb	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	721a      	strb	r2, [r3, #8]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	7a5a      	ldrb	r2, [r3, #9]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	725a      	strb	r2, [r3, #9]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	7a9a      	ldrb	r2, [r3, #10]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	729a      	strb	r2, [r3, #10]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	7ada      	ldrb	r2, [r3, #11]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	72da      	strb	r2, [r3, #11]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	7b1a      	ldrb	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	731a      	strb	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	3310      	adds	r3, #16
 8001898:	3210      	adds	r2, #16
 800189a:	6811      	ldr	r1, [r2, #0]
 800189c:	6019      	str	r1, [r3, #0]
 800189e:	8891      	ldrh	r1, [r2, #4]
 80018a0:	7992      	ldrb	r2, [r2, #6]
 80018a2:	8099      	strh	r1, [r3, #4]
 80018a4:	719a      	strb	r2, [r3, #6]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	3318      	adds	r3, #24
 80018ac:	3218      	adds	r2, #24
 80018ae:	6811      	ldr	r1, [r2, #0]
 80018b0:	6019      	str	r1, [r3, #0]
 80018b2:	8891      	ldrh	r1, [r2, #4]
 80018b4:	7992      	ldrb	r2, [r2, #6]
 80018b6:	8099      	strh	r1, [r3, #4]
 80018b8:	719a      	strb	r2, [r3, #6]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	3320      	adds	r3, #32
 80018c0:	3220      	adds	r2, #32
 80018c2:	6811      	ldr	r1, [r2, #0]
 80018c4:	6019      	str	r1, [r3, #0]
 80018c6:	8891      	ldrh	r1, [r2, #4]
 80018c8:	7992      	ldrb	r2, [r2, #6]
 80018ca:	8099      	strh	r1, [r3, #4]
 80018cc:	719a      	strb	r2, [r3, #6]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	3228      	adds	r2, #40	; 0x28
 80018d6:	6811      	ldr	r1, [r2, #0]
 80018d8:	6019      	str	r1, [r3, #0]
 80018da:	8891      	ldrh	r1, [r2, #4]
 80018dc:	7992      	ldrb	r2, [r2, #6]
 80018de:	8099      	strh	r1, [r3, #4]
 80018e0:	719a      	strb	r2, [r3, #6]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	3330      	adds	r3, #48	; 0x30
 80018e8:	3230      	adds	r2, #48	; 0x30
 80018ea:	6811      	ldr	r1, [r2, #0]
 80018ec:	6019      	str	r1, [r3, #0]
 80018ee:	8891      	ldrh	r1, [r2, #4]
 80018f0:	7992      	ldrb	r2, [r2, #6]
 80018f2:	8099      	strh	r1, [r3, #4]
 80018f4:	719a      	strb	r2, [r3, #6]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <Init>:
		UART_HandleTypeDef   *in_huart3,

		RTC_HandleTypeDef    *in_hrtc,
		SD_HandleTypeDef     *in_hsd
	)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b0ce      	sub	sp, #312	; 0x138
 8001908:	af04      	add	r7, sp, #16
 800190a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800190e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001912:	6020      	str	r0, [r4, #0]
 8001914:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001918:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800191c:	6001      	str	r1, [r0, #0]
 800191e:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001922:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8001926:	600a      	str	r2, [r1, #0]
 8001928:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800192c:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001930:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(in_htim3, TIM_CHANNEL_4);
 8001932:	210c      	movs	r1, #12
 8001934:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8001938:	f00a fd02 	bl	800c340 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(in_htim3, TIM_CHANNEL_4, UINT16_HALF);
 800193c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 8001948:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800194c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001950:	49a8      	ldr	r1, [pc, #672]	; (8001bf4 <Init+0x2f0>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fbc2 	bl	80010dc <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 8001958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800195c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001960:	49a4      	ldr	r1, [pc, #656]	; (8001bf4 <Init+0x2f0>)
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fbba 	bl	80010dc <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin pwmOE = Pin(PWM_OE_GPIO_Port, PWM_OE_Pin, ACTIVE_LOW);
 8001968:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800196c:	2301      	movs	r3, #1
 800196e:	2240      	movs	r2, #64	; 0x40
 8001970:	49a1      	ldr	r1, [pc, #644]	; (8001bf8 <Init+0x2f4>)
 8001972:	f7ff fbce 	bl	8001112 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	Pin enc1Sw = Pin(ENC1_SW_GPIO_Port, ENC1_SW_Pin, ACTIVE_LOW);
 8001976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800197a:	2301      	movs	r3, #1
 800197c:	2220      	movs	r2, #32
 800197e:	499d      	ldr	r1, [pc, #628]	; (8001bf4 <Init+0x2f0>)
 8001980:	f7ff fbc7 	bl	8001112 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
	Pin enc2Sw = Pin(ENC2_SW_GPIO_Port, ENC2_SW_Pin, ACTIVE_LOW);
 8001984:	f107 001c 	add.w	r0, r7, #28
 8001988:	2301      	movs	r3, #1
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	4999      	ldr	r1, [pc, #612]	; (8001bf4 <Init+0x2f0>)
 8001990:	f7ff fbbf 	bl	8001112 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	currentADCHandle = in_hadc1;
 8001994:	4a99      	ldr	r2, [pc, #612]	; (8001bfc <Init+0x2f8>)
 8001996:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800199a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6013      	str	r3, [r2, #0]
	currentADC_DMAHandle = in_hdma_adc1;
 80019a2:	4a97      	ldr	r2, [pc, #604]	; (8001c00 <Init+0x2fc>)
 80019a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6013      	str	r3, [r2, #0]

	stripI2cHandle = in_hfmpi2c1;
 80019b0:	4a94      	ldr	r2, [pc, #592]	; (8001c04 <Init+0x300>)
 80019b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 80019be:	4a92      	ldr	r2, [pc, #584]	; (8001c08 <Init+0x304>)
 80019c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6013      	str	r3, [r2, #0]

	i2cHandle = in_hi2c1;
 80019cc:	4a8f      	ldr	r2, [pc, #572]	; (8001c0c <Init+0x308>)
 80019ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019d2:	6013      	str	r3, [r2, #0]

	audioHandle = in_hi2s5;
 80019d4:	4a8e      	ldr	r2, [pc, #568]	; (8001c10 <Init+0x30c>)
 80019d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019da:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = hdma_spi5_rx;
 80019dc:	4a8d      	ldr	r2, [pc, #564]	; (8001c14 <Init+0x310>)
 80019de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80019e2:	6013      	str	r3, [r2, #0]

	rtcHandle = in_hrtc;
 80019e4:	4a8c      	ldr	r2, [pc, #560]	; (8001c18 <Init+0x314>)
 80019e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019ea:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 80019ec:	4a8b      	ldr	r2, [pc, #556]	; (8001c1c <Init+0x318>)
 80019ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80019f2:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 80019f4:	4a8a      	ldr	r2, [pc, #552]	; (8001c20 <Init+0x31c>)
 80019f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80019fa:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 80019fc:	4a89      	ldr	r2, [pc, #548]	; (8001c24 <Init+0x320>)
 80019fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001a02:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8001a04:	4a88      	ldr	r2, [pc, #544]	; (8001c28 <Init+0x324>)
 8001a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a0a:	6013      	str	r3, [r2, #0]
	adcTimHandle = in_htim8;
 8001a0c:	4a87      	ldr	r2, [pc, #540]	; (8001c2c <Init+0x328>)
 8001a0e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a12:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 8001a14:	4a86      	ldr	r2, [pc, #536]	; (8001c30 <Init+0x32c>)
 8001a16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a1a:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 8001a1c:	4a85      	ldr	r2, [pc, #532]	; (8001c34 <Init+0x330>)
 8001a1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a22:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 8001a24:	4a84      	ldr	r2, [pc, #528]	; (8001c38 <Init+0x334>)
 8001a26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a2a:	6013      	str	r3, [r2, #0]


	encoder1 = RotaryEncoder(ENC1_A_GPIO_Port, ENC1_A_Pin, ENC1_B_GPIO_Port, ENC1_B_Pin, enc1Sw);
 8001a2c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001a30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a34:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001a38:	ab01      	add	r3, sp, #4
 8001a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <Init+0x2f0>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4e:	497b      	ldr	r1, [pc, #492]	; (8001c3c <Init+0x338>)
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff fa7f 	bl	8000f54 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin>
 8001a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4878      	ldr	r0, [pc, #480]	; (8001c40 <Init+0x33c>)
 8001a5e:	f7ff fe88 	bl	8001772 <_ZN13RotaryEncoderaSERKS_>
 8001a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff faae 	bl	8000fc8 <_ZN13RotaryEncoderD1Ev>
	encoder2 = RotaryEncoder(ENC2_A_GPIO_Port, ENC2_A_Pin, ENC2_B_GPIO_Port, ENC2_B_Pin, enc2Sw);
 8001a6c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001a70:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a74:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001a78:	ab01      	add	r3, sp, #4
 8001a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4b6c      	ldr	r3, [pc, #432]	; (8001c3c <Init+0x338>)
 8001a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8e:	496b      	ldr	r1, [pc, #428]	; (8001c3c <Init+0x338>)
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff fa5f 	bl	8000f54 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin>
 8001a96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4869      	ldr	r0, [pc, #420]	; (8001c44 <Init+0x340>)
 8001a9e:	f7ff fe68 	bl	8001772 <_ZN13RotaryEncoderaSERKS_>
 8001aa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fa8e 	bl	8000fc8 <_ZN13RotaryEncoderD1Ev>

	encoder1.Init();
 8001aac:	4864      	ldr	r0, [pc, #400]	; (8001c40 <Init+0x33c>)
 8001aae:	f7ff faab 	bl	8001008 <_ZN13RotaryEncoder4InitEv>
	encoder2.Init();
 8001ab2:	4864      	ldr	r0, [pc, #400]	; (8001c44 <Init+0x340>)
 8001ab4:	f7ff faa8 	bl	8001008 <_ZN13RotaryEncoder4InitEv>

	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <Init+0x31c>)
 8001aba:	681d      	ldr	r5, [r3, #0]
 8001abc:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8001ac0:	466a      	mov	r2, sp
 8001ac2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ac6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aca:	e882 0003 	stmia.w	r2, {r0, r1}
 8001ace:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad2:	cb0c      	ldmia	r3, {r2, r3}
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f001 fcf2 	bl	80034c0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 8001adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4859      	ldr	r0, [pc, #356]	; (8001c48 <Init+0x344>)
 8001ae4:	f7ff fe88 	bl	80017f8 <_ZN9ShiftRegsaSERKS_>
 8001ae8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fd29 	bl	8003544 <_ZN9ShiftRegsD1Ev>
	stripCurr = StripCurrent(currentADCHandle, adcTimHandle, StripCurrentAlertCallback);
 8001af2:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <Init+0x2f8>)
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <Init+0x328>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <Init+0x348>)
 8001b00:	f001 feaa 	bl	8003858 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefPFv18StripCurrentStatusE>
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <Init+0x34c>)
 8001b06:	461d      	mov	r5, r3
 8001b08:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b18:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fec5 	bl	80038ac <_ZN12StripCurrentD1Ev>
	stripCtrl = StripControl(&stripCurr);
 8001b22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b26:	494a      	ldr	r1, [pc, #296]	; (8001c50 <Init+0x34c>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fd9f 	bl	800366c <_ZN12StripControlC1EP12StripCurrent>
 8001b2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b32:	4619      	mov	r1, r3
 8001b34:	4847      	ldr	r0, [pc, #284]	; (8001c54 <Init+0x350>)
 8001b36:	f7ff fe8f 	bl	8001858 <_ZN12StripControlaSERKS_>
 8001b3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fe18 	bl	8003774 <_ZN12StripControlD1Ev>
	ledA = PCA9634(0x2A, stripI2cHandle, pwmOE);
 8001b44:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <Init+0x300>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	212a      	movs	r1, #42	; 0x2a
 8001b54:	f001 fa5e 	bl	8003014 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <Init+0x354>)
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8001b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	602b      	str	r3, [r5, #0]
 8001b6c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fa8d 	bl	8003090 <_ZN7PCA9634D1Ev>

	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_1);
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <Init+0x320>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00a fbdf 	bl	800c340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_3);
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <Init+0x320>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2108      	movs	r1, #8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00a fbd9 	bl	800c340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_1);
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <Init+0x324>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00a fbd3 	bl	800c340 <HAL_TIM_PWM_Start>


//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);

	settings = PCA9634Settings();
 8001b9a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	811a      	strh	r2, [r3, #8]
 8001ba6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff faf4 	bl	8001198 <_ZN15PCA9634SettingsC1Ev>
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <Init+0x358>)
 8001bb2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb8:	c303      	stmia	r3!, {r0, r1}
 8001bba:	801a      	strh	r2, [r3, #0]
	settings.Driver = PCA9634_OUTPUT_DRIVER::TOTEM_POLE;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <Init+0x358>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	711a      	strb	r2, [r3, #4]
	settings.Invert = PCA9634_OUTPUT_LOGIC::INVERTED;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <Init+0x358>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	709a      	strb	r2, [r3, #2]
	ledA.ChangeSettings(settings);
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <Init+0x358>)
 8001bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bcc:	4822      	ldr	r0, [pc, #136]	; (8001c58 <Init+0x354>)
 8001bce:	f001 fa71 	bl	80030b4 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>

	shiftReg.Init();
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <Init+0x344>)
 8001bd4:	f001 fcde 	bl	8003594 <_ZN9ShiftRegs4InitEv>

	if (stripCurr.Init() != HAL_OK)
 8001bd8:	481d      	ldr	r0, [pc, #116]	; (8001c50 <Init+0x34c>)
 8001bda:	f001 fe82 	bl	80038e2 <_ZN12StripCurrent4InitEv>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d038      	beq.n	8001c60 <Init+0x35c>
	{
		return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06d      	b.n	8001cce <Init+0x3ca>
 8001bf2:	bf00      	nop
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	20000090 	.word	0x20000090
 8001c00:	20000094 	.word	0x20000094
 8001c04:	20000098 	.word	0x20000098
 8001c08:	2000009c 	.word	0x2000009c
 8001c0c:	200000a0 	.word	0x200000a0
 8001c10:	200000a4 	.word	0x200000a4
 8001c14:	200000a8 	.word	0x200000a8
 8001c18:	200000c8 	.word	0x200000c8
 8001c1c:	200000cc 	.word	0x200000cc
 8001c20:	200000ac 	.word	0x200000ac
 8001c24:	200000b0 	.word	0x200000b0
 8001c28:	200000b4 	.word	0x200000b4
 8001c2c:	200000b8 	.word	0x200000b8
 8001c30:	200000bc 	.word	0x200000bc
 8001c34:	200000c0 	.word	0x200000c0
 8001c38:	200000c4 	.word	0x200000c4
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	20000398 	.word	0x20000398
 8001c44:	200003b8 	.word	0x200003b8
 8001c48:	200000d0 	.word	0x200000d0
 8001c4c:	0800175d 	.word	0x0800175d
 8001c50:	20000114 	.word	0x20000114
 8001c54:	2000012c 	.word	0x2000012c
 8001c58:	20000164 	.word	0x20000164
 8001c5c:	20000188 	.word	0x20000188
	}

	stripCtrl.Init();
 8001c60:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <Init+0x3d4>)
 8001c62:	f001 fdab 	bl	80037bc <_ZN12StripControl4InitEv>

	NextionCallbacks callbacks = NextionCallbacks();
 8001c66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
	callbacks.PageChange = PageChangeCallbackHandle;
 8001c7e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <Init+0x3d8>)
 8001c88:	601a      	str	r2, [r3, #0]
	callbacks.TouchEvent = TouchEventCallbackHandle;
 8001c8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <Init+0x3dc>)
 8001c94:	605a      	str	r2, [r3, #4]

	next.Startup(screenHandle, callbacks);
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <Init+0x3e0>)
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ca2:	cb0c      	ldmia	r3, {r2, r3}
 8001ca4:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <Init+0x3e4>)
 8001ca6:	f001 f889 	bl	8002dbc <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks>
	screenCtrl.Init(&next, pages);
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <Init+0x3e8>)
 8001cac:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <Init+0x3e4>)
 8001cae:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <Init+0x3ec>)
 8001cb0:	f001 fb22 	bl	80032f8 <_ZN13ScreenControl4InitEP7NextionP4Page>
	screenCtrl.HomePage();
 8001cb4:	480e      	ldr	r0, [pc, #56]	; (8001cf0 <Init+0x3ec>)
 8001cb6:	f001 fba6 	bl	8003406 <_ZN13ScreenControl8HomePageEv>

	stripCtrl.Power(GPIO_PIN_SET);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <Init+0x3d4>)
 8001cbe:	f001 fdb1 	bl	8003824 <_ZN12StripControl5PowerE13GPIO_PinState>

//	HAL_I2S_Receive_DMA(audioHandle, (uint16_t*)audioBuffer, AUDIO_BUFFER_SIZE);

	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, 0);
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <Init+0x3f0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
	return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd8:	2000012c 	.word	0x2000012c
 8001cdc:	08001711 	.word	0x08001711
 8001ce0:	08001731 	.word	0x08001731
 8001ce4:	200000bc 	.word	0x200000bc
 8001ce8:	200000f4 	.word	0x200000f4
 8001cec:	20000ea4 	.word	0x20000ea4
 8001cf0:	200003d8 	.word	0x200003d8
 8001cf4:	200000b4 	.word	0x200000b4

08001cf8 <InitTest>:

void InitTest()
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
//	shiftReg.IndicatorTest();
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	indicator = !indicator;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <Main+0x4c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <Main+0x4c>)
 8001d18:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_1, indicator ? UINT16_MAX / 2 : 0);
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <Main+0x4c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <Main+0x20>
 8001d22:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d26:	e000      	b.n	8001d2a <Main+0x22>
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <Main+0x50>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_3, !indicator ? UINT16_MAX : 0);
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <Main+0x4c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <Main+0x36>
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	e001      	b.n	8001d42 <Main+0x3a>
 8001d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <Main+0x50>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c
//
//	ReadCurrent();
//	shiftReg.Update();

//	next.CheckForTouchEvents();
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	20000394 	.word	0x20000394
 8001d58:	200000b0 	.word	0x200000b0

08001d5c <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_UP_IND);
	screenCtrl.NavigateVert(-1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <MenuUpInterruptCallback+0x14>)
 8001d66:	f001 faec 	bl	8003342 <_ZN13ScreenControl12NavigateVertEa>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003d8 	.word	0x200003d8

08001d74 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_DOWN_IND);
	screenCtrl.NavigateVert(1);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <MenuDownInterruptCallback+0x10>)
 8001d7c:	f001 fae1 	bl	8003342 <_ZN13ScreenControl12NavigateVertEa>
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200003d8 	.word	0x200003d8

08001d88 <MenuLeftInterruptCallback>:
void MenuLeftInterruptCallback()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	screenCtrl.NavigateHorz(-1);
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <MenuLeftInterruptCallback+0x14>)
 8001d92:	f001 fac4 	bl	800331e <_ZN13ScreenControl12NavigateHorzEa>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003d8 	.word	0x200003d8

08001da0 <MenuRightInterruptCallback>:
void MenuRightInterruptCallback()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_RIGHT_IND);
	screenCtrl.NavigateHorz(1);
 8001da4:	2101      	movs	r1, #1
 8001da6:	4802      	ldr	r0, [pc, #8]	; (8001db0 <MenuRightInterruptCallback+0x10>)
 8001da8:	f001 fab9 	bl	800331e <_ZN13ScreenControl12NavigateHorzEa>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200003d8 	.word	0x200003d8

08001db4 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 8001db8:	2108      	movs	r1, #8
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MenuActInterruptCallback+0x18>)
 8001dbc:	f001 fc29 	bl	8003612 <_ZN9ShiftRegs11ToggleValueEj>
	screenCtrl.Act();
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MenuActInterruptCallback+0x1c>)
 8001dc2:	f001 fb57 	bl	8003474 <_ZN13ScreenControl3ActEv>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200000d0 	.word	0x200000d0
 8001dd0:	200003d8 	.word	0x200003d8

08001dd4 <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	screenCtrl.HomePage();
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <MenuBackInterruptCallback+0x10>)
 8001dda:	f001 fb14 	bl	8003406 <_ZN13ScreenControl8HomePageEv>
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200003d8 	.word	0x200003d8

08001de8 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	encoder1.Decode();
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <Enc1TurnInterruptCallback+0x10>)
 8001dee:	f7ff f92c 	bl	800104a <_ZN13RotaryEncoder6DecodeEv>
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000398 	.word	0x20000398

08001dfc <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	encoder2.Decode();
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <Enc2TurnInterruptCallback+0x10>)
 8001e02:	f7ff f922 	bl	800104a <_ZN13RotaryEncoder6DecodeEv>
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200003b8 	.word	0x200003b8

08001e10 <_ZSt3powImiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fb92 	bl	8000544 <__aeabi_ui2d>
 8001e20:	4604      	mov	r4, r0
 8001e22:	460d      	mov	r5, r1
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f7fe fb9d 	bl	8000564 <__aeabi_i2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	ec43 2b11 	vmov	d1, r2, r3
 8001e32:	ec45 4b10 	vmov	d0, r4, r5
 8001e36:	f00d fa51 	bl	800f2dc <pow>
 8001e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e3e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001e42:	eeb0 0a47 	vmov.f32	s0, s14
 8001e46:	eef0 0a67 	vmov.f32	s1, s15
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}

08001e50 <_Z41__static_initialization_and_destruction_0ii>:
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af06      	add	r7, sp, #24
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 84a8 	bne.w	80027b2 <_Z41__static_initialization_and_destruction_0ii+0x962>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	f040 84a2 	bne.w	80027b2 <_Z41__static_initialization_and_destruction_0ii+0x962>
ShiftRegs shiftReg;
 8001e6e:	48ab      	ldr	r0, [pc, #684]	; (800211c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8001e70:	f7ff f97a 	bl	8001168 <_ZN9ShiftRegsC1Ev>
Nextion next = Nextion();
 8001e74:	48aa      	ldr	r0, [pc, #680]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001e76:	f000 ff2b 	bl	8002cd0 <_ZN7NextionC1Ev>
StripCurrent stripCurr;
 8001e7a:	48aa      	ldr	r0, [pc, #680]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8001e7c:	f7ff f968 	bl	8001150 <_ZN12StripCurrentC1Ev>
StripControl stripCtrl;
 8001e80:	48a9      	ldr	r0, [pc, #676]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8001e82:	f7ff f9b7 	bl	80011f4 <_ZN12StripControlC1Ev>
PCA9634 ledA;
 8001e86:	48a9      	ldr	r0, [pc, #676]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8001e88:	f7ff f99d 	bl	80011c6 <_ZN7PCA9634C1Ev>
PCA9634Settings settings;
 8001e8c:	48a8      	ldr	r0, [pc, #672]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8001e8e:	f7ff f983 	bl	8001198 <_ZN15PCA9634SettingsC1Ev>
RotaryEncoder encoder1;
 8001e92:	48a8      	ldr	r0, [pc, #672]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8001e94:	f7ff faa2 	bl	80013dc <_ZN13RotaryEncoderC1Ev>
RotaryEncoder encoder2;
 8001e98:	48a7      	ldr	r0, [pc, #668]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8001e9a:	f7ff fa9f 	bl	80013dc <_ZN13RotaryEncoderC1Ev>
ScreenControl screenCtrl;
 8001e9e:	48a7      	ldr	r0, [pc, #668]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8001ea0:	f7ff fa88 	bl	80013b4 <_ZN13ScreenControlC1Ev>
PageButton homeBtn = PageButton(&next, 1, "pb1", 0, 0, 1, ScreenChangeCallback);
 8001ea4:	4ba6      	ldr	r3, [pc, #664]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001ea6:	9303      	str	r3, [sp, #12]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9302      	str	r3, [sp, #8]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4999      	ldr	r1, [pc, #612]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001eba:	48a3      	ldr	r0, [pc, #652]	; (8002148 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001ebc:	f7ff fa3e 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton settingsBtn = PageButton(&next, 2, "pb5", 1, 0, 5, ScreenChangeCallback);
 8001ec0:	4b9f      	ldr	r3, [pc, #636]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001ec2:	9303      	str	r3, [sp, #12]
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4b9e      	ldr	r3, [pc, #632]	; (800214c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4992      	ldr	r1, [pc, #584]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001ed6:	489e      	ldr	r0, [pc, #632]	; (8002150 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8001ed8:	f7ff fa30 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8001edc:	4c9d      	ldr	r4, [pc, #628]	; (8002154 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8001ede:	499a      	ldr	r1, [pc, #616]	; (8002148 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff faeb 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001ee6:	f104 0318 	add.w	r3, r4, #24
 8001eea:	4999      	ldr	r1, [pc, #612]	; (8002150 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fae5 	bl	80014bc <_ZN10PageButtonC1ERKS_>
PageButton mainPageBtn   = PageButton(&next, 7, "pb1", 0, 0, 2, ScreenChangeCallback);
 8001ef2:	4b93      	ldr	r3, [pc, #588]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001ef4:	9303      	str	r3, [sp, #12]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4b90      	ldr	r3, [pc, #576]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	4986      	ldr	r1, [pc, #536]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001f08:	4893      	ldr	r0, [pc, #588]	; (8002158 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8001f0a:	f7ff fa17 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chnPageBtn    = PageButton(&next, 1, "pb2", 0, 1, 3, ScreenChangeCallback);
 8001f0e:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001f10:	9303      	str	r3, [sp, #12]
 8001f12:	2303      	movs	r3, #3
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2301      	movs	r3, #1
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	4b8f      	ldr	r3, [pc, #572]	; (800215c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	497f      	ldr	r1, [pc, #508]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001f24:	488e      	ldr	r0, [pc, #568]	; (8002160 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8001f26:	f7ff fa09 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chCfgPageBtn  = PageButton(&next, 6, "pb3", 0, 2, 4, ScreenChangeCallback);
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001f2c:	9303      	str	r3, [sp, #12]
 8001f2e:	2304      	movs	r3, #4
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2302      	movs	r3, #2
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8001f3c:	2206      	movs	r2, #6
 8001f3e:	4978      	ldr	r1, [pc, #480]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001f40:	4889      	ldr	r0, [pc, #548]	; (8002168 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8001f42:	f7ff f9fb 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton audPageBtn    = PageButton(&next, 4, "pb5", 0, 3, 6, ScreenChangeCallback);
 8001f46:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001f48:	9303      	str	r3, [sp, #12]
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	2303      	movs	r3, #3
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2300      	movs	r3, #0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4971      	ldr	r1, [pc, #452]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001f5c:	4883      	ldr	r0, [pc, #524]	; (800216c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8001f5e:	f7ff f9ed 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton patPageBtn    = PageButton(&next, 5, "pb7", 1, 1, 8, ScreenChangeCallback);
 8001f62:	4b77      	ldr	r3, [pc, #476]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001f64:	9303      	str	r3, [sp, #12]
 8001f66:	2308      	movs	r3, #8
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8001f74:	2205      	movs	r2, #5
 8001f76:	496a      	ldr	r1, [pc, #424]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001f78:	487e      	ldr	r0, [pc, #504]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8001f7a:	f7ff f9df 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton colPageBtn    = PageButton(&next, 8, "pb6", 1, 2, 7, ScreenChangeCallback);
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001f80:	9303      	str	r3, [sp, #12]
 8001f82:	2307      	movs	r3, #7
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	2302      	movs	r3, #2
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8001f90:	2208      	movs	r2, #8
 8001f92:	4963      	ldr	r1, [pc, #396]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001f94:	4879      	ldr	r0, [pc, #484]	; (800217c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8001f96:	f7ff f9d1 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton settPageBtn   = PageButton(&next, 2, "pb4", 1, 3, 5, ScreenChangeCallback);
 8001f9a:	4b69      	ldr	r3, [pc, #420]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001f9c:	9303      	str	r3, [sp, #12]
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4b75      	ldr	r3, [pc, #468]	; (8002180 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	495c      	ldr	r1, [pc, #368]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001fb0:	4874      	ldr	r0, [pc, #464]	; (8002184 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8001fb2:	f7ff f9c3 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8001fb6:	4c74      	ldr	r4, [pc, #464]	; (8002188 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8001fb8:	4967      	ldr	r1, [pc, #412]	; (8002158 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7ff fa7e 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001fc0:	3418      	adds	r4, #24
 8001fc2:	4967      	ldr	r1, [pc, #412]	; (8002160 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff fa79 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001fca:	3418      	adds	r4, #24
 8001fcc:	4966      	ldr	r1, [pc, #408]	; (8002168 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff fa74 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001fd4:	3418      	adds	r4, #24
 8001fd6:	4965      	ldr	r1, [pc, #404]	; (800216c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fa6f 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001fde:	3418      	adds	r4, #24
 8001fe0:	4964      	ldr	r1, [pc, #400]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff fa6a 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001fe8:	3418      	adds	r4, #24
 8001fea:	4964      	ldr	r1, [pc, #400]	; (800217c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8001fec:	4620      	mov	r0, r4
 8001fee:	f7ff fa65 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8001ff2:	f104 0318 	add.w	r3, r4, #24
 8001ff6:	4963      	ldr	r1, [pc, #396]	; (8002184 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fa5f 	bl	80014bc <_ZN10PageButtonC1ERKS_>
Page homePage = Page(&next, 1, NULL, 0, mainBtns, 7);
 8001ffe:	2307      	movs	r3, #7
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	4b61      	ldr	r3, [pc, #388]	; (8002188 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2300      	movs	r3, #0
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	2201      	movs	r2, #1
 800200e:	4944      	ldr	r1, [pc, #272]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002010:	485e      	ldr	r0, [pc, #376]	; (800218c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8002012:	f003 fd0b 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button runBtn = Button(&next, 2, "b0", 0, 1);
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	2300      	movs	r3, #0
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8002020:	2202      	movs	r2, #2
 8002022:	493f      	ldr	r1, [pc, #252]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002024:	485b      	ldr	r0, [pc, #364]	; (8002194 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8002026:	f7ff f969 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
};
 800202a:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800202c:	4959      	ldr	r1, [pc, #356]	; (8002194 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fab4 	bl	800159c <_ZN6ButtonC1ERKS_>
PageButton runHomeBtn = PageButton(&next, 2, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8002036:	9303      	str	r3, [sp, #12]
 8002038:	2301      	movs	r3, #1
 800203a:	9302      	str	r3, [sp, #8]
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2300      	movs	r3, #0
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8002046:	2202      	movs	r2, #2
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800204a:	4854      	ldr	r0, [pc, #336]	; (800219c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800204c:	f7ff f976 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton runSettingsBtn = PageButton(&next, 3, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8002052:	9303      	str	r3, [sp, #12]
 8002054:	2305      	movs	r3, #5
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	2300      	movs	r3, #0
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	2301      	movs	r3, #1
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8002062:	2203      	movs	r2, #3
 8002064:	492e      	ldr	r1, [pc, #184]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002066:	484e      	ldr	r0, [pc, #312]	; (80021a0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8002068:	f7ff f968 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 800206c:	4c4d      	ldr	r4, [pc, #308]	; (80021a4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800206e:	494b      	ldr	r1, [pc, #300]	; (800219c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff fa23 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8002076:	f104 0318 	add.w	r3, r4, #24
 800207a:	4949      	ldr	r1, [pc, #292]	; (80021a0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fa1d 	bl	80014bc <_ZN10PageButtonC1ERKS_>
Page runPage = Page(&next, 2, runBtns, 1, runPageBtns, 2);
 8002082:	2302      	movs	r3, #2
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2301      	movs	r3, #1
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4b42      	ldr	r3, [pc, #264]	; (8002198 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8002090:	2202      	movs	r2, #2
 8002092:	4923      	ldr	r1, [pc, #140]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002094:	4844      	ldr	r0, [pc, #272]	; (80021a8 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8002096:	f003 fcc9 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button srcCh1Btn = Button(&next, 3, "b0", 0, 1);
 800209a:	2301      	movs	r3, #1
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	2300      	movs	r3, #0
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80020a4:	2203      	movs	r2, #3
 80020a6:	491e      	ldr	r1, [pc, #120]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80020a8:	4840      	ldr	r0, [pc, #256]	; (80021ac <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80020aa:	f7ff f927 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh2Btn = Button(&next, 21, "b1", 1, 1);
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2301      	movs	r3, #1
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80020b8:	2215      	movs	r2, #21
 80020ba:	4919      	ldr	r1, [pc, #100]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80020bc:	483d      	ldr	r0, [pc, #244]	; (80021b4 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80020be:	f7ff f91d 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh3Btn = Button(&next, 22, "b2", 2, 1);
 80020c2:	2301      	movs	r3, #1
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	2302      	movs	r3, #2
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80020cc:	2216      	movs	r2, #22
 80020ce:	4914      	ldr	r1, [pc, #80]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80020d0:	483a      	ldr	r0, [pc, #232]	; (80021bc <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80020d2:	f7ff f913 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh4Btn = Button(&next, 23, "b3", 3, 1);
 80020d6:	2301      	movs	r3, #1
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2303      	movs	r3, #3
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80020e0:	2217      	movs	r2, #23
 80020e2:	490f      	ldr	r1, [pc, #60]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80020e4:	4837      	ldr	r0, [pc, #220]	; (80021c4 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80020e6:	f7ff f909 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh5Btn = Button(&next, 24, "b4", 4, 1);
 80020ea:	2301      	movs	r3, #1
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2304      	movs	r3, #4
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80020f4:	2218      	movs	r2, #24
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80020f8:	4834      	ldr	r0, [pc, #208]	; (80021cc <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80020fa:	f7ff f8ff 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh6Btn = Button(&next, 25, "b5", 5, 1);
 80020fe:	2301      	movs	r3, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2305      	movs	r3, #5
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8002108:	2219      	movs	r2, #25
 800210a:	4905      	ldr	r1, [pc, #20]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800210c:	4831      	ldr	r0, [pc, #196]	; (80021d4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800210e:	f7ff f8f5 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh7Btn = Button(&next, 26, "b6", 6, 1);
 8002112:	2301      	movs	r3, #1
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	2306      	movs	r3, #6
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	e05d      	b.n	80021d8 <_Z41__static_initialization_and_destruction_0ii+0x388>
 800211c:	200000d0 	.word	0x200000d0
 8002120:	200000f4 	.word	0x200000f4
 8002124:	20000114 	.word	0x20000114
 8002128:	2000012c 	.word	0x2000012c
 800212c:	20000164 	.word	0x20000164
 8002130:	20000188 	.word	0x20000188
 8002134:	20000398 	.word	0x20000398
 8002138:	200003b8 	.word	0x200003b8
 800213c:	200003d8 	.word	0x200003d8
 8002140:	0800141d 	.word	0x0800141d
 8002144:	08010ba8 	.word	0x08010ba8
 8002148:	200003ec 	.word	0x200003ec
 800214c:	08010bac 	.word	0x08010bac
 8002150:	20000404 	.word	0x20000404
 8002154:	2000041c 	.word	0x2000041c
 8002158:	2000044c 	.word	0x2000044c
 800215c:	08010bb0 	.word	0x08010bb0
 8002160:	20000464 	.word	0x20000464
 8002164:	08010bb4 	.word	0x08010bb4
 8002168:	2000047c 	.word	0x2000047c
 800216c:	20000494 	.word	0x20000494
 8002170:	08010bb8 	.word	0x08010bb8
 8002174:	200004ac 	.word	0x200004ac
 8002178:	08010bbc 	.word	0x08010bbc
 800217c:	200004c4 	.word	0x200004c4
 8002180:	08010bc0 	.word	0x08010bc0
 8002184:	200004dc 	.word	0x200004dc
 8002188:	200004f4 	.word	0x200004f4
 800218c:	2000059c 	.word	0x2000059c
 8002190:	08010bc4 	.word	0x08010bc4
 8002194:	200005cc 	.word	0x200005cc
 8002198:	200005e4 	.word	0x200005e4
 800219c:	200005fc 	.word	0x200005fc
 80021a0:	20000614 	.word	0x20000614
 80021a4:	2000062c 	.word	0x2000062c
 80021a8:	2000065c 	.word	0x2000065c
 80021ac:	2000068c 	.word	0x2000068c
 80021b0:	08010bc8 	.word	0x08010bc8
 80021b4:	200006a4 	.word	0x200006a4
 80021b8:	08010bcc 	.word	0x08010bcc
 80021bc:	200006bc 	.word	0x200006bc
 80021c0:	08010bd0 	.word	0x08010bd0
 80021c4:	200006d4 	.word	0x200006d4
 80021c8:	08010bd4 	.word	0x08010bd4
 80021cc:	200006ec 	.word	0x200006ec
 80021d0:	08010bd8 	.word	0x08010bd8
 80021d4:	20000704 	.word	0x20000704
 80021d8:	4bb4      	ldr	r3, [pc, #720]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80021da:	221a      	movs	r2, #26
 80021dc:	49b4      	ldr	r1, [pc, #720]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80021de:	48b5      	ldr	r0, [pc, #724]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80021e0:	f7ff f88c 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh8Btn = Button(&next, 27, "b7", 7, 1);
 80021e4:	2301      	movs	r3, #1
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2307      	movs	r3, #7
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4bb2      	ldr	r3, [pc, #712]	; (80024b8 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80021ee:	221b      	movs	r2, #27
 80021f0:	49af      	ldr	r1, [pc, #700]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80021f2:	48b2      	ldr	r0, [pc, #712]	; (80024bc <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80021f4:	f7ff f882 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
ProgressBar ch1Bar = ProgressBar(&next, 1, "j0");
 80021f8:	4bb1      	ldr	r3, [pc, #708]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	49ac      	ldr	r1, [pc, #688]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80021fe:	48b1      	ldr	r0, [pc, #708]	; (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8002200:	f7ff f8c0 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch2Bar = ProgressBar(&next, 4, "j1");
 8002204:	4bb0      	ldr	r3, [pc, #704]	; (80024c8 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002206:	2204      	movs	r2, #4
 8002208:	49a9      	ldr	r1, [pc, #676]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800220a:	48b0      	ldr	r0, [pc, #704]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 800220c:	f7ff f8ba 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch3Bar = ProgressBar(&next, 6, "j2");
 8002210:	4baf      	ldr	r3, [pc, #700]	; (80024d0 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8002212:	2206      	movs	r2, #6
 8002214:	49a6      	ldr	r1, [pc, #664]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002216:	48af      	ldr	r0, [pc, #700]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8002218:	f7ff f8b4 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch4Bar = ProgressBar(&next, 8, "j3");
 800221c:	4bae      	ldr	r3, [pc, #696]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 800221e:	2208      	movs	r2, #8
 8002220:	49a3      	ldr	r1, [pc, #652]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002222:	48ae      	ldr	r0, [pc, #696]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 8002224:	f7ff f8ae 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch5Bar = ProgressBar(&next, 10, "j4");
 8002228:	4bad      	ldr	r3, [pc, #692]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800222a:	220a      	movs	r2, #10
 800222c:	49a0      	ldr	r1, [pc, #640]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800222e:	48ad      	ldr	r0, [pc, #692]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8002230:	f7ff f8a8 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch6Bar = ProgressBar(&next, 12, "j5");
 8002234:	4bac      	ldr	r3, [pc, #688]	; (80024e8 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8002236:	220c      	movs	r2, #12
 8002238:	499d      	ldr	r1, [pc, #628]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800223a:	48ac      	ldr	r0, [pc, #688]	; (80024ec <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800223c:	f7ff f8a2 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch7Bar = ProgressBar(&next, 14, "j6");
 8002240:	4bab      	ldr	r3, [pc, #684]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8002242:	220e      	movs	r2, #14
 8002244:	499a      	ldr	r1, [pc, #616]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002246:	48ab      	ldr	r0, [pc, #684]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8002248:	f7ff f89c 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch8Bar = ProgressBar(&next, 16, "j7");
 800224c:	4baa      	ldr	r3, [pc, #680]	; (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 800224e:	2210      	movs	r2, #16
 8002250:	4997      	ldr	r1, [pc, #604]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002252:	48aa      	ldr	r0, [pc, #680]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8002254:	f7ff f896 	bl	8001384 <_ZN11ProgressBarC1EP7NextionhPKc>
PageButton chVisHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002258:	4ba9      	ldr	r3, [pc, #676]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	2301      	movs	r3, #1
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2300      	movs	r3, #0
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4ba6      	ldr	r3, [pc, #664]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800226a:	2212      	movs	r2, #18
 800226c:	4990      	ldr	r1, [pc, #576]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800226e:	48a6      	ldr	r0, [pc, #664]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8002270:	f7ff f864 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chVisSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002274:	4ba2      	ldr	r3, [pc, #648]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	2305      	movs	r3, #5
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2300      	movs	r3, #0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2301      	movs	r3, #1
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4ba1      	ldr	r3, [pc, #644]	; (800250c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8002286:	2213      	movs	r2, #19
 8002288:	4989      	ldr	r1, [pc, #548]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800228a:	48a1      	ldr	r0, [pc, #644]	; (8002510 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800228c:	f7ff f856 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8002290:	4ca0      	ldr	r4, [pc, #640]	; (8002514 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8002292:	499d      	ldr	r1, [pc, #628]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff f911 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 800229a:	f104 0318 	add.w	r3, r4, #24
 800229e:	499c      	ldr	r1, [pc, #624]	; (8002510 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f90b 	bl	80014bc <_ZN10PageButtonC1ERKS_>
};
 80022a6:	4c9c      	ldr	r4, [pc, #624]	; (8002518 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80022a8:	499c      	ldr	r1, [pc, #624]	; (800251c <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff f976 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022b0:	3418      	adds	r4, #24
 80022b2:	499b      	ldr	r1, [pc, #620]	; (8002520 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff f971 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022ba:	3418      	adds	r4, #24
 80022bc:	4999      	ldr	r1, [pc, #612]	; (8002524 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff f96c 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022c4:	3418      	adds	r4, #24
 80022c6:	4998      	ldr	r1, [pc, #608]	; (8002528 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff f967 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022ce:	3418      	adds	r4, #24
 80022d0:	4996      	ldr	r1, [pc, #600]	; (800252c <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff f962 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022d8:	3418      	adds	r4, #24
 80022da:	4995      	ldr	r1, [pc, #596]	; (8002530 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff f95d 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022e2:	3418      	adds	r4, #24
 80022e4:	4973      	ldr	r1, [pc, #460]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff f958 	bl	800159c <_ZN6ButtonC1ERKS_>
 80022ec:	f104 0318 	add.w	r3, r4, #24
 80022f0:	4972      	ldr	r1, [pc, #456]	; (80024bc <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f952 	bl	800159c <_ZN6ButtonC1ERKS_>
};
 80022f8:	4c8e      	ldr	r4, [pc, #568]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 80022fa:	4972      	ldr	r1, [pc, #456]	; (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7ff f96b 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 8002302:	3414      	adds	r4, #20
 8002304:	4971      	ldr	r1, [pc, #452]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff f966 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 800230c:	3414      	adds	r4, #20
 800230e:	4971      	ldr	r1, [pc, #452]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff f961 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 8002316:	3414      	adds	r4, #20
 8002318:	4970      	ldr	r1, [pc, #448]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff f95c 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 8002320:	3414      	adds	r4, #20
 8002322:	4970      	ldr	r1, [pc, #448]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff f957 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 800232a:	3414      	adds	r4, #20
 800232c:	496f      	ldr	r1, [pc, #444]	; (80024ec <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff f952 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 8002334:	3414      	adds	r4, #20
 8002336:	496f      	ldr	r1, [pc, #444]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff f94d 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
 800233e:	f104 0314 	add.w	r3, r4, #20
 8002342:	496e      	ldr	r1, [pc, #440]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f947 	bl	80015d8 <_ZN11ProgressBarC1ERKS_>
Page channelVisPage = Page(&next, 3, chVisBtns, 8, chVisPageBtns, 2, progBars, 8);
 800234a:	2308      	movs	r3, #8
 800234c:	9304      	str	r3, [sp, #16]
 800234e:	4b79      	ldr	r3, [pc, #484]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 8002350:	9303      	str	r3, [sp, #12]
 8002352:	2302      	movs	r3, #2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2308      	movs	r3, #8
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8002360:	2203      	movs	r2, #3
 8002362:	4953      	ldr	r1, [pc, #332]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002364:	4874      	ldr	r0, [pc, #464]	; (8002538 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 8002366:	f003 fc05 	bl	8005b74 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari>
Button ch1Btn = Button(&next, 13, "b0", 0, 2);
 800236a:	2302      	movs	r3, #2
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4b72      	ldr	r3, [pc, #456]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 8002374:	220d      	movs	r2, #13
 8002376:	494e      	ldr	r1, [pc, #312]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002378:	4871      	ldr	r0, [pc, #452]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800237a:	f7fe ffbf 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch2Btn = Button(&next, 13, "b1", 1, 2);
 800237e:	2302      	movs	r3, #2
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	2301      	movs	r3, #1
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 8002388:	220d      	movs	r2, #13
 800238a:	4949      	ldr	r1, [pc, #292]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800238c:	486e      	ldr	r0, [pc, #440]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 800238e:	f7fe ffb5 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch3Btn = Button(&next, 13, "b2", 2, 2);
 8002392:	2302      	movs	r3, #2
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4b6c      	ldr	r3, [pc, #432]	; (800254c <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 800239c:	220d      	movs	r2, #13
 800239e:	4944      	ldr	r1, [pc, #272]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80023a0:	486b      	ldr	r0, [pc, #428]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 80023a2:	f7fe ffab 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch4Btn = Button(&next, 13, "b3", 3, 2);
 80023a6:	2302      	movs	r3, #2
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2303      	movs	r3, #3
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4b69      	ldr	r3, [pc, #420]	; (8002554 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 80023b0:	220d      	movs	r2, #13
 80023b2:	493f      	ldr	r1, [pc, #252]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80023b4:	4868      	ldr	r0, [pc, #416]	; (8002558 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 80023b6:	f7fe ffa1 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch5Btn = Button(&next, 13, "b4", 4, 2);
 80023ba:	2302      	movs	r3, #2
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2304      	movs	r3, #4
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	4b66      	ldr	r3, [pc, #408]	; (800255c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 80023c4:	220d      	movs	r2, #13
 80023c6:	493a      	ldr	r1, [pc, #232]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80023c8:	4865      	ldr	r0, [pc, #404]	; (8002560 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 80023ca:	f7fe ff97 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch6Btn = Button(&next, 13, "b5", 5, 2);
 80023ce:	2302      	movs	r3, #2
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2305      	movs	r3, #5
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <_Z41__static_initialization_and_destruction_0ii+0x714>)
 80023d8:	220d      	movs	r2, #13
 80023da:	4935      	ldr	r1, [pc, #212]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80023dc:	4862      	ldr	r0, [pc, #392]	; (8002568 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 80023de:	f7fe ff8d 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch7Btn = Button(&next, 13, "b6", 6, 2);
 80023e2:	2302      	movs	r3, #2
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2306      	movs	r3, #6
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4b30      	ldr	r3, [pc, #192]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80023ec:	220d      	movs	r2, #13
 80023ee:	4930      	ldr	r1, [pc, #192]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80023f0:	485e      	ldr	r0, [pc, #376]	; (800256c <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 80023f2:	f7fe ff83 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button ch8Btn = Button(&next, 13, "b7", 7, 2);
 80023f6:	2302      	movs	r3, #2
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	2307      	movs	r3, #7
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8002400:	220d      	movs	r2, #13
 8002402:	492b      	ldr	r1, [pc, #172]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002404:	485a      	ldr	r0, [pc, #360]	; (8002570 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 8002406:	f7fe ff79 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
PageButton chCfgHomeBtn = PageButton(&next, 3, "pb1", 0, 0, 1, ScreenChangeCallback);
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 800240c:	9303      	str	r3, [sp, #12]
 800240e:	2301      	movs	r3, #1
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	2300      	movs	r3, #0
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800241c:	2203      	movs	r2, #3
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8002420:	4854      	ldr	r0, [pc, #336]	; (8002574 <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8002422:	f7fe ff8b 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chCfgSettingsBtn = PageButton(&next, 4, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8002428:	9303      	str	r3, [sp, #12]
 800242a:	2305      	movs	r3, #5
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	2300      	movs	r3, #0
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	2301      	movs	r3, #1
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8002438:	2204      	movs	r2, #4
 800243a:	491d      	ldr	r1, [pc, #116]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800243c:	484e      	ldr	r0, [pc, #312]	; (8002578 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800243e:	f7fe ff7d 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8002442:	4c4e      	ldr	r4, [pc, #312]	; (800257c <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 8002444:	494b      	ldr	r1, [pc, #300]	; (8002574 <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8002446:	4620      	mov	r0, r4
 8002448:	f7ff f838 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 800244c:	f104 0318 	add.w	r3, r4, #24
 8002450:	4949      	ldr	r1, [pc, #292]	; (8002578 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f832 	bl	80014bc <_ZN10PageButtonC1ERKS_>
};
 8002458:	4c49      	ldr	r4, [pc, #292]	; (8002580 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 800245a:	4939      	ldr	r1, [pc, #228]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff f89d 	bl	800159c <_ZN6ButtonC1ERKS_>
 8002462:	3418      	adds	r4, #24
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff f898 	bl	800159c <_ZN6ButtonC1ERKS_>
 800246c:	3418      	adds	r4, #24
 800246e:	4938      	ldr	r1, [pc, #224]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff f893 	bl	800159c <_ZN6ButtonC1ERKS_>
 8002476:	3418      	adds	r4, #24
 8002478:	4937      	ldr	r1, [pc, #220]	; (8002558 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 800247a:	4620      	mov	r0, r4
 800247c:	f7ff f88e 	bl	800159c <_ZN6ButtonC1ERKS_>
 8002480:	3418      	adds	r4, #24
 8002482:	4937      	ldr	r1, [pc, #220]	; (8002560 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff f889 	bl	800159c <_ZN6ButtonC1ERKS_>
 800248a:	3418      	adds	r4, #24
 800248c:	4936      	ldr	r1, [pc, #216]	; (8002568 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff f884 	bl	800159c <_ZN6ButtonC1ERKS_>
 8002494:	3418      	adds	r4, #24
 8002496:	4935      	ldr	r1, [pc, #212]	; (800256c <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff f87f 	bl	800159c <_ZN6ButtonC1ERKS_>
 800249e:	f104 0318 	add.w	r3, r4, #24
 80024a2:	4933      	ldr	r1, [pc, #204]	; (8002570 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f879 	bl	800159c <_ZN6ButtonC1ERKS_>
 80024aa:	e06b      	b.n	8002584 <_Z41__static_initialization_and_destruction_0ii+0x734>
 80024ac:	08010bdc 	.word	0x08010bdc
 80024b0:	200000f4 	.word	0x200000f4
 80024b4:	2000071c 	.word	0x2000071c
 80024b8:	08010be0 	.word	0x08010be0
 80024bc:	20000734 	.word	0x20000734
 80024c0:	08010be4 	.word	0x08010be4
 80024c4:	2000074c 	.word	0x2000074c
 80024c8:	08010be8 	.word	0x08010be8
 80024cc:	20000760 	.word	0x20000760
 80024d0:	08010bec 	.word	0x08010bec
 80024d4:	20000774 	.word	0x20000774
 80024d8:	08010bf0 	.word	0x08010bf0
 80024dc:	20000788 	.word	0x20000788
 80024e0:	08010bf4 	.word	0x08010bf4
 80024e4:	2000079c 	.word	0x2000079c
 80024e8:	08010bf8 	.word	0x08010bf8
 80024ec:	200007b0 	.word	0x200007b0
 80024f0:	08010bfc 	.word	0x08010bfc
 80024f4:	200007c4 	.word	0x200007c4
 80024f8:	08010c00 	.word	0x08010c00
 80024fc:	200007d8 	.word	0x200007d8
 8002500:	0800141d 	.word	0x0800141d
 8002504:	08010ba8 	.word	0x08010ba8
 8002508:	200007ec 	.word	0x200007ec
 800250c:	08010bac 	.word	0x08010bac
 8002510:	20000804 	.word	0x20000804
 8002514:	2000081c 	.word	0x2000081c
 8002518:	2000084c 	.word	0x2000084c
 800251c:	2000068c 	.word	0x2000068c
 8002520:	200006a4 	.word	0x200006a4
 8002524:	200006bc 	.word	0x200006bc
 8002528:	200006d4 	.word	0x200006d4
 800252c:	200006ec 	.word	0x200006ec
 8002530:	20000704 	.word	0x20000704
 8002534:	2000090c 	.word	0x2000090c
 8002538:	200009ac 	.word	0x200009ac
 800253c:	08010bc4 	.word	0x08010bc4
 8002540:	200009dc 	.word	0x200009dc
 8002544:	08010bc8 	.word	0x08010bc8
 8002548:	200009f4 	.word	0x200009f4
 800254c:	08010bcc 	.word	0x08010bcc
 8002550:	20000a0c 	.word	0x20000a0c
 8002554:	08010bd0 	.word	0x08010bd0
 8002558:	20000a24 	.word	0x20000a24
 800255c:	08010bd4 	.word	0x08010bd4
 8002560:	20000a3c 	.word	0x20000a3c
 8002564:	08010bd8 	.word	0x08010bd8
 8002568:	20000a54 	.word	0x20000a54
 800256c:	20000a6c 	.word	0x20000a6c
 8002570:	20000a84 	.word	0x20000a84
 8002574:	20000a9c 	.word	0x20000a9c
 8002578:	20000ab4 	.word	0x20000ab4
 800257c:	20000acc 	.word	0x20000acc
 8002580:	20000afc 	.word	0x20000afc
Page channelConfigPage = Page(&next, 4, chCfgBtns, 8, chCfgPageBtns, 2);
 8002584:	2302      	movs	r3, #2
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	4ba4      	ldr	r3, [pc, #656]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x9cc>)
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2308      	movs	r3, #8
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4ba3      	ldr	r3, [pc, #652]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x9d0>)
 8002592:	2204      	movs	r2, #4
 8002594:	49a3      	ldr	r1, [pc, #652]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 8002596:	48a4      	ldr	r0, [pc, #656]	; (8002828 <_Z41__static_initialization_and_destruction_0ii+0x9d8>)
 8002598:	f003 fa48 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button saveBtn = Button(&next, 0, "b0", 0, 2);
 800259c:	2302      	movs	r3, #2
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4ba1      	ldr	r3, [pc, #644]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x9dc>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	499e      	ldr	r1, [pc, #632]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80025aa:	48a1      	ldr	r0, [pc, #644]	; (8002830 <_Z41__static_initialization_and_destruction_0ii+0x9e0>)
 80025ac:	f7fe fea6 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
};
 80025b0:	4ba0      	ldr	r3, [pc, #640]	; (8002834 <_Z41__static_initialization_and_destruction_0ii+0x9e4>)
 80025b2:	499f      	ldr	r1, [pc, #636]	; (8002830 <_Z41__static_initialization_and_destruction_0ii+0x9e0>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fff1 	bl	800159c <_ZN6ButtonC1ERKS_>
};
 80025ba:	4b9f      	ldr	r3, [pc, #636]	; (8002838 <_Z41__static_initialization_and_destruction_0ii+0x9e8>)
 80025bc:	499f      	ldr	r1, [pc, #636]	; (800283c <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ff7c 	bl	80014bc <_ZN10PageButtonC1ERKS_>
Page settingsPage = Page(&next, 5, settBtns, 1, settPageBtns, 1);
 80025c4:	2301      	movs	r3, #1
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	4b9b      	ldr	r3, [pc, #620]	; (8002838 <_Z41__static_initialization_and_destruction_0ii+0x9e8>)
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	2301      	movs	r3, #1
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4b98      	ldr	r3, [pc, #608]	; (8002834 <_Z41__static_initialization_and_destruction_0ii+0x9e4>)
 80025d2:	2205      	movs	r2, #5
 80025d4:	4993      	ldr	r1, [pc, #588]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80025d6:	489a      	ldr	r0, [pc, #616]	; (8002840 <_Z41__static_initialization_and_destruction_0ii+0x9f0>)
 80025d8:	f003 fa28 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button audSrcXlrBtn = Button(&next, 12, "b7", 2, 1);
 80025dc:	2301      	movs	r3, #1
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	2302      	movs	r3, #2
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4b97      	ldr	r3, [pc, #604]	; (8002844 <_Z41__static_initialization_and_destruction_0ii+0x9f4>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	498e      	ldr	r1, [pc, #568]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80025ea:	4897      	ldr	r0, [pc, #604]	; (8002848 <_Z41__static_initialization_and_destruction_0ii+0x9f8>)
 80025ec:	f7fe fe86 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
Button audSrcJackBtn = Button(&next, 13, "b0", 3, 1);
 80025f0:	2301      	movs	r3, #1
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	2303      	movs	r3, #3
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x9dc>)
 80025fa:	220d      	movs	r2, #13
 80025fc:	4989      	ldr	r1, [pc, #548]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80025fe:	4893      	ldr	r0, [pc, #588]	; (800284c <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 8002600:	f7fe fe7c 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
PageButton audHomeBtn = PageButton(&next, 15, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002604:	4b92      	ldr	r3, [pc, #584]	; (8002850 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 8002606:	9303      	str	r3, [sp, #12]
 8002608:	2301      	movs	r3, #1
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	2300      	movs	r3, #0
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	2300      	movs	r3, #0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 8002616:	220f      	movs	r2, #15
 8002618:	4982      	ldr	r1, [pc, #520]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 800261a:	488f      	ldr	r0, [pc, #572]	; (8002858 <_Z41__static_initialization_and_destruction_0ii+0xa08>)
 800261c:	f7fe fe8e 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton audSettingsBtn = PageButton(&next, 16, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002620:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	2305      	movs	r3, #5
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2300      	movs	r3, #0
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2301      	movs	r3, #1
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4b8a      	ldr	r3, [pc, #552]	; (800285c <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 8002632:	2210      	movs	r2, #16
 8002634:	497b      	ldr	r1, [pc, #492]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 8002636:	488a      	ldr	r0, [pc, #552]	; (8002860 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 8002638:	f7fe fe80 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 800263c:	4c89      	ldr	r4, [pc, #548]	; (8002864 <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 800263e:	4986      	ldr	r1, [pc, #536]	; (8002858 <_Z41__static_initialization_and_destruction_0ii+0xa08>)
 8002640:	4620      	mov	r0, r4
 8002642:	f7fe ff3b 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8002646:	f104 0318 	add.w	r3, r4, #24
 800264a:	4985      	ldr	r1, [pc, #532]	; (8002860 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe ff35 	bl	80014bc <_ZN10PageButtonC1ERKS_>
};
 8002652:	4c85      	ldr	r4, [pc, #532]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 8002654:	497c      	ldr	r1, [pc, #496]	; (8002848 <_Z41__static_initialization_and_destruction_0ii+0x9f8>)
 8002656:	4620      	mov	r0, r4
 8002658:	f7fe ffa0 	bl	800159c <_ZN6ButtonC1ERKS_>
 800265c:	f104 0318 	add.w	r3, r4, #24
 8002660:	497a      	ldr	r1, [pc, #488]	; (800284c <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe ff9a 	bl	800159c <_ZN6ButtonC1ERKS_>
Page audioPage = Page(&next, 6, audBtns, 2, audPageBtns, 2);
 8002668:	2302      	movs	r3, #2
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	2302      	movs	r3, #2
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4b7c      	ldr	r3, [pc, #496]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 8002676:	2206      	movs	r2, #6
 8002678:	496a      	ldr	r1, [pc, #424]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 800267a:	487c      	ldr	r0, [pc, #496]	; (800286c <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 800267c:	f003 f9d6 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button colChSelBtn = Button(&next, 0, "b0", 0, 2);
 8002680:	2302      	movs	r3, #2
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <_Z41__static_initialization_and_destruction_0ii+0x9dc>)
 800268a:	2200      	movs	r2, #0
 800268c:	4965      	ldr	r1, [pc, #404]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 800268e:	4878      	ldr	r0, [pc, #480]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 8002690:	f7fe fe34 	bl	80012fc <_ZN6ButtonC1EP7NextionhPKchh>
};
 8002694:	4b77      	ldr	r3, [pc, #476]	; (8002874 <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 8002696:	4976      	ldr	r1, [pc, #472]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe ff7f 	bl	800159c <_ZN6ButtonC1ERKS_>
PageButton colHomeBtn = PageButton(&next, 5, "pb1", 0, 0, 1, ScreenChangeCallback);
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 80026a0:	9303      	str	r3, [sp, #12]
 80026a2:	2301      	movs	r3, #1
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4b69      	ldr	r3, [pc, #420]	; (8002854 <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 80026b0:	2205      	movs	r2, #5
 80026b2:	495c      	ldr	r1, [pc, #368]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80026b4:	4870      	ldr	r0, [pc, #448]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 80026b6:	f7fe fe41 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton colSettingsBtn = PageButton(&next, 6, "pb5", 1, 0, 5, ScreenChangeCallback);
 80026ba:	4b65      	ldr	r3, [pc, #404]	; (8002850 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 80026bc:	9303      	str	r3, [sp, #12]
 80026be:	2305      	movs	r3, #5
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2301      	movs	r3, #1
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4b64      	ldr	r3, [pc, #400]	; (800285c <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 80026cc:	2206      	movs	r2, #6
 80026ce:	4955      	ldr	r1, [pc, #340]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80026d0:	486a      	ldr	r0, [pc, #424]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 80026d2:	f7fe fe33 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 80026d6:	4c6a      	ldr	r4, [pc, #424]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 80026d8:	4967      	ldr	r1, [pc, #412]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 80026da:	4620      	mov	r0, r4
 80026dc:	f7fe feee 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 80026e0:	f104 0318 	add.w	r3, r4, #24
 80026e4:	4965      	ldr	r1, [pc, #404]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fee8 	bl	80014bc <_ZN10PageButtonC1ERKS_>
Page colorPage = Page(&next, 7, colorBtns, 0, colPageBtns, 2);
 80026ec:	2302      	movs	r3, #2
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 80026fa:	2207      	movs	r2, #7
 80026fc:	4949      	ldr	r1, [pc, #292]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 80026fe:	4861      	ldr	r0, [pc, #388]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 8002700:	f003 f994 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
PageButton patHomeBtn = PageButton(&next, 4, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002704:	4b52      	ldr	r3, [pc, #328]	; (8002850 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 8002706:	9303      	str	r3, [sp, #12]
 8002708:	2301      	movs	r3, #1
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	2300      	movs	r3, #0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	2300      	movs	r3, #0
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 8002716:	2204      	movs	r2, #4
 8002718:	4942      	ldr	r1, [pc, #264]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 800271a:	485b      	ldr	r0, [pc, #364]	; (8002888 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 800271c:	f7fe fe0e 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton patSettingsBtn = PageButton(&next, 5, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 8002722:	9303      	str	r3, [sp, #12]
 8002724:	2305      	movs	r3, #5
 8002726:	9302      	str	r3, [sp, #8]
 8002728:	2300      	movs	r3, #0
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2301      	movs	r3, #1
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4b4a      	ldr	r3, [pc, #296]	; (800285c <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 8002732:	2205      	movs	r2, #5
 8002734:	493b      	ldr	r1, [pc, #236]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 8002736:	4855      	ldr	r0, [pc, #340]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 8002738:	f7fe fe00 	bl	800133c <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 800273c:	4c54      	ldr	r4, [pc, #336]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 800273e:	4952      	ldr	r1, [pc, #328]	; (8002888 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 8002740:	4620      	mov	r0, r4
 8002742:	f7fe febb 	bl	80014bc <_ZN10PageButtonC1ERKS_>
 8002746:	f104 0318 	add.w	r3, r4, #24
 800274a:	4950      	ldr	r1, [pc, #320]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe feb5 	bl	80014bc <_ZN10PageButtonC1ERKS_>
Page patternPage = Page(&next, 7, NULL, 0, patPageBtns, 2);
 8002752:	2302      	movs	r3, #2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	2300      	movs	r3, #0
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2300      	movs	r3, #0
 8002760:	2207      	movs	r2, #7
 8002762:	4930      	ldr	r1, [pc, #192]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x9d4>)
 8002764:	484b      	ldr	r0, [pc, #300]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0xa44>)
 8002766:	f003 f961 	bl	8005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
};
 800276a:	4c4b      	ldr	r4, [pc, #300]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0xa48>)
 800276c:	494b      	ldr	r1, [pc, #300]	; (800289c <_Z41__static_initialization_and_destruction_0ii+0xa4c>)
 800276e:	4620      	mov	r0, r4
 8002770:	f7fe fec2 	bl	80014f8 <_ZN4PageC1ERKS_>
 8002774:	3430      	adds	r4, #48	; 0x30
 8002776:	494a      	ldr	r1, [pc, #296]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0xa50>)
 8002778:	4620      	mov	r0, r4
 800277a:	f7fe febd 	bl	80014f8 <_ZN4PageC1ERKS_>
 800277e:	3430      	adds	r4, #48	; 0x30
 8002780:	4948      	ldr	r1, [pc, #288]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0xa54>)
 8002782:	4620      	mov	r0, r4
 8002784:	f7fe feb8 	bl	80014f8 <_ZN4PageC1ERKS_>
 8002788:	3430      	adds	r4, #48	; 0x30
 800278a:	4927      	ldr	r1, [pc, #156]	; (8002828 <_Z41__static_initialization_and_destruction_0ii+0x9d8>)
 800278c:	4620      	mov	r0, r4
 800278e:	f7fe feb3 	bl	80014f8 <_ZN4PageC1ERKS_>
 8002792:	3430      	adds	r4, #48	; 0x30
 8002794:	492a      	ldr	r1, [pc, #168]	; (8002840 <_Z41__static_initialization_and_destruction_0ii+0x9f0>)
 8002796:	4620      	mov	r0, r4
 8002798:	f7fe feae 	bl	80014f8 <_ZN4PageC1ERKS_>
 800279c:	3430      	adds	r4, #48	; 0x30
 800279e:	4933      	ldr	r1, [pc, #204]	; (800286c <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7fe fea9 	bl	80014f8 <_ZN4PageC1ERKS_>
 80027a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fea3 	bl	80014f8 <_ZN4PageC1ERKS_>
Page pages[] = {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 81c3 	bne.w	8002b40 <_Z41__static_initialization_and_destruction_0ii+0xcf0>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f040 81bd 	bne.w	8002b40 <_Z41__static_initialization_and_destruction_0ii+0xcf0>
 80027c6:	4c38      	ldr	r4, [pc, #224]	; (80028a8 <_Z41__static_initialization_and_destruction_0ii+0xa58>)
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0xa48>)
 80027ca:	429c      	cmp	r4, r3
 80027cc:	d005      	beq.n	80027da <_Z41__static_initialization_and_destruction_0ii+0x98a>
 80027ce:	3c30      	subs	r4, #48	; 0x30
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4620      	mov	r0, r4
 80027d6:	4798      	blx	r3
 80027d8:	e7f6      	b.n	80027c8 <_Z41__static_initialization_and_destruction_0ii+0x978>
Page patternPage = Page(&next, 7, NULL, 0, patPageBtns, 2);
 80027da:	482e      	ldr	r0, [pc, #184]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0xa44>)
 80027dc:	f003 fa62 	bl	8005ca4 <_ZN4PageD1Ev>
PageButton patPageBtns[] = {
 80027e0:	4c32      	ldr	r4, [pc, #200]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0xa5c>)
 80027e2:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 80027e4:	429c      	cmp	r4, r3
 80027e6:	d005      	beq.n	80027f4 <_Z41__static_initialization_and_destruction_0ii+0x9a4>
 80027e8:	3c18      	subs	r4, #24
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4620      	mov	r0, r4
 80027f0:	4798      	blx	r3
 80027f2:	e7f6      	b.n	80027e2 <_Z41__static_initialization_and_destruction_0ii+0x992>
PageButton patSettingsBtn = PageButton(&next, 5, "pb5", 1, 0, 5, ScreenChangeCallback);
 80027f4:	4825      	ldr	r0, [pc, #148]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 80027f6:	f003 fc5f 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton patHomeBtn = PageButton(&next, 4, "pb1", 0, 0, 1, ScreenChangeCallback);
 80027fa:	4823      	ldr	r0, [pc, #140]	; (8002888 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 80027fc:	f003 fc5c 	bl	80060b8 <_ZN10PageButtonD1Ev>
Page colorPage = Page(&next, 7, colorBtns, 0, colPageBtns, 2);
 8002800:	4820      	ldr	r0, [pc, #128]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 8002802:	f003 fa4f 	bl	8005ca4 <_ZN4PageD1Ev>
PageButton colPageBtns[] = {
 8002806:	4c2a      	ldr	r4, [pc, #168]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0xa60>)
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 800280a:	429c      	cmp	r4, r3
 800280c:	d052      	beq.n	80028b4 <_Z41__static_initialization_and_destruction_0ii+0xa64>
 800280e:	3c18      	subs	r4, #24
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4620      	mov	r0, r4
 8002816:	4798      	blx	r3
 8002818:	e7f6      	b.n	8002808 <_Z41__static_initialization_and_destruction_0ii+0x9b8>
 800281a:	bf00      	nop
 800281c:	20000acc 	.word	0x20000acc
 8002820:	20000afc 	.word	0x20000afc
 8002824:	200000f4 	.word	0x200000f4
 8002828:	20000bbc 	.word	0x20000bbc
 800282c:	08010bc4 	.word	0x08010bc4
 8002830:	20000bec 	.word	0x20000bec
 8002834:	20000c04 	.word	0x20000c04
 8002838:	20000c1c 	.word	0x20000c1c
 800283c:	200003ec 	.word	0x200003ec
 8002840:	20000c34 	.word	0x20000c34
 8002844:	08010be0 	.word	0x08010be0
 8002848:	20000c64 	.word	0x20000c64
 800284c:	20000c7c 	.word	0x20000c7c
 8002850:	0800141d 	.word	0x0800141d
 8002854:	08010ba8 	.word	0x08010ba8
 8002858:	20000c94 	.word	0x20000c94
 800285c:	08010bac 	.word	0x08010bac
 8002860:	20000cac 	.word	0x20000cac
 8002864:	20000cc4 	.word	0x20000cc4
 8002868:	20000cf4 	.word	0x20000cf4
 800286c:	20000d24 	.word	0x20000d24
 8002870:	20000d54 	.word	0x20000d54
 8002874:	20000d6c 	.word	0x20000d6c
 8002878:	20000d84 	.word	0x20000d84
 800287c:	20000d9c 	.word	0x20000d9c
 8002880:	20000db4 	.word	0x20000db4
 8002884:	20000de4 	.word	0x20000de4
 8002888:	20000e14 	.word	0x20000e14
 800288c:	20000e2c 	.word	0x20000e2c
 8002890:	20000e44 	.word	0x20000e44
 8002894:	20000e74 	.word	0x20000e74
 8002898:	20000ea4 	.word	0x20000ea4
 800289c:	2000059c 	.word	0x2000059c
 80028a0:	2000065c 	.word	0x2000065c
 80028a4:	200009ac 	.word	0x200009ac
 80028a8:	20000ff4 	.word	0x20000ff4
 80028ac:	20000e74 	.word	0x20000e74
 80028b0:	20000de4 	.word	0x20000de4
PageButton colSettingsBtn = PageButton(&next, 6, "pb5", 1, 0, 5, ScreenChangeCallback);
 80028b4:	48a4      	ldr	r0, [pc, #656]	; (8002b48 <_Z41__static_initialization_and_destruction_0ii+0xcf8>)
 80028b6:	f003 fbff 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton colHomeBtn = PageButton(&next, 5, "pb1", 0, 0, 1, ScreenChangeCallback);
 80028ba:	48a4      	ldr	r0, [pc, #656]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0xcfc>)
 80028bc:	f003 fbfc 	bl	80060b8 <_ZN10PageButtonD1Ev>
Button colorBtns[] = {
 80028c0:	4ca3      	ldr	r4, [pc, #652]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0xd00>)
 80028c2:	4ba4      	ldr	r3, [pc, #656]	; (8002b54 <_Z41__static_initialization_and_destruction_0ii+0xd04>)
 80028c4:	429c      	cmp	r4, r3
 80028c6:	d005      	beq.n	80028d4 <_Z41__static_initialization_and_destruction_0ii+0xa84>
 80028c8:	3c18      	subs	r4, #24
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4620      	mov	r0, r4
 80028d0:	4798      	blx	r3
 80028d2:	e7f6      	b.n	80028c2 <_Z41__static_initialization_and_destruction_0ii+0xa72>
Button colChSelBtn = Button(&next, 0, "b0", 0, 2);
 80028d4:	48a0      	ldr	r0, [pc, #640]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0xd08>)
 80028d6:	f002 ffad 	bl	8005834 <_ZN6ButtonD1Ev>
Page audioPage = Page(&next, 6, audBtns, 2, audPageBtns, 2);
 80028da:	48a0      	ldr	r0, [pc, #640]	; (8002b5c <_Z41__static_initialization_and_destruction_0ii+0xd0c>)
 80028dc:	f003 f9e2 	bl	8005ca4 <_ZN4PageD1Ev>
Button audBtns[] = {
 80028e0:	4c9f      	ldr	r4, [pc, #636]	; (8002b60 <_Z41__static_initialization_and_destruction_0ii+0xd10>)
 80028e2:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <_Z41__static_initialization_and_destruction_0ii+0xd14>)
 80028e4:	429c      	cmp	r4, r3
 80028e6:	d005      	beq.n	80028f4 <_Z41__static_initialization_and_destruction_0ii+0xaa4>
 80028e8:	3c18      	subs	r4, #24
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4620      	mov	r0, r4
 80028f0:	4798      	blx	r3
 80028f2:	e7f6      	b.n	80028e2 <_Z41__static_initialization_and_destruction_0ii+0xa92>
PageButton audPageBtns[] = {
 80028f4:	4c9c      	ldr	r4, [pc, #624]	; (8002b68 <_Z41__static_initialization_and_destruction_0ii+0xd18>)
 80028f6:	4b9d      	ldr	r3, [pc, #628]	; (8002b6c <_Z41__static_initialization_and_destruction_0ii+0xd1c>)
 80028f8:	429c      	cmp	r4, r3
 80028fa:	d005      	beq.n	8002908 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 80028fc:	3c18      	subs	r4, #24
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4620      	mov	r0, r4
 8002904:	4798      	blx	r3
 8002906:	e7f6      	b.n	80028f6 <_Z41__static_initialization_and_destruction_0ii+0xaa6>
PageButton audSettingsBtn = PageButton(&next, 16, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002908:	4899      	ldr	r0, [pc, #612]	; (8002b70 <_Z41__static_initialization_and_destruction_0ii+0xd20>)
 800290a:	f003 fbd5 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton audHomeBtn = PageButton(&next, 15, "pb1", 0, 0, 1, ScreenChangeCallback);
 800290e:	4899      	ldr	r0, [pc, #612]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0xd24>)
 8002910:	f003 fbd2 	bl	80060b8 <_ZN10PageButtonD1Ev>
Button audSrcJackBtn = Button(&next, 13, "b0", 3, 1);
 8002914:	4898      	ldr	r0, [pc, #608]	; (8002b78 <_Z41__static_initialization_and_destruction_0ii+0xd28>)
 8002916:	f002 ff8d 	bl	8005834 <_ZN6ButtonD1Ev>
Button audSrcXlrBtn = Button(&next, 12, "b7", 2, 1);
 800291a:	4898      	ldr	r0, [pc, #608]	; (8002b7c <_Z41__static_initialization_and_destruction_0ii+0xd2c>)
 800291c:	f002 ff8a 	bl	8005834 <_ZN6ButtonD1Ev>
Page settingsPage = Page(&next, 5, settBtns, 1, settPageBtns, 1);
 8002920:	4897      	ldr	r0, [pc, #604]	; (8002b80 <_Z41__static_initialization_and_destruction_0ii+0xd30>)
 8002922:	f003 f9bf 	bl	8005ca4 <_ZN4PageD1Ev>
PageButton settPageBtns[] = {
 8002926:	4c97      	ldr	r4, [pc, #604]	; (8002b84 <_Z41__static_initialization_and_destruction_0ii+0xd34>)
 8002928:	4b97      	ldr	r3, [pc, #604]	; (8002b88 <_Z41__static_initialization_and_destruction_0ii+0xd38>)
 800292a:	429c      	cmp	r4, r3
 800292c:	d005      	beq.n	800293a <_Z41__static_initialization_and_destruction_0ii+0xaea>
 800292e:	3c18      	subs	r4, #24
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4620      	mov	r0, r4
 8002936:	4798      	blx	r3
 8002938:	e7f6      	b.n	8002928 <_Z41__static_initialization_and_destruction_0ii+0xad8>
Button settBtns[] = {
 800293a:	4c94      	ldr	r4, [pc, #592]	; (8002b8c <_Z41__static_initialization_and_destruction_0ii+0xd3c>)
 800293c:	4b94      	ldr	r3, [pc, #592]	; (8002b90 <_Z41__static_initialization_and_destruction_0ii+0xd40>)
 800293e:	429c      	cmp	r4, r3
 8002940:	d005      	beq.n	800294e <_Z41__static_initialization_and_destruction_0ii+0xafe>
 8002942:	3c18      	subs	r4, #24
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4620      	mov	r0, r4
 800294a:	4798      	blx	r3
 800294c:	e7f6      	b.n	800293c <_Z41__static_initialization_and_destruction_0ii+0xaec>
Button saveBtn = Button(&next, 0, "b0", 0, 2);
 800294e:	4891      	ldr	r0, [pc, #580]	; (8002b94 <_Z41__static_initialization_and_destruction_0ii+0xd44>)
 8002950:	f002 ff70 	bl	8005834 <_ZN6ButtonD1Ev>
Page channelConfigPage = Page(&next, 4, chCfgBtns, 8, chCfgPageBtns, 2);
 8002954:	4890      	ldr	r0, [pc, #576]	; (8002b98 <_Z41__static_initialization_and_destruction_0ii+0xd48>)
 8002956:	f003 f9a5 	bl	8005ca4 <_ZN4PageD1Ev>
Button chCfgBtns[] = {
 800295a:	4c90      	ldr	r4, [pc, #576]	; (8002b9c <_Z41__static_initialization_and_destruction_0ii+0xd4c>)
 800295c:	4b90      	ldr	r3, [pc, #576]	; (8002ba0 <_Z41__static_initialization_and_destruction_0ii+0xd50>)
 800295e:	429c      	cmp	r4, r3
 8002960:	d005      	beq.n	800296e <_Z41__static_initialization_and_destruction_0ii+0xb1e>
 8002962:	3c18      	subs	r4, #24
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4620      	mov	r0, r4
 800296a:	4798      	blx	r3
 800296c:	e7f6      	b.n	800295c <_Z41__static_initialization_and_destruction_0ii+0xb0c>
PageButton chCfgPageBtns[] = {
 800296e:	4c8d      	ldr	r4, [pc, #564]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0xd54>)
 8002970:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0xd58>)
 8002972:	429c      	cmp	r4, r3
 8002974:	d005      	beq.n	8002982 <_Z41__static_initialization_and_destruction_0ii+0xb32>
 8002976:	3c18      	subs	r4, #24
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4620      	mov	r0, r4
 800297e:	4798      	blx	r3
 8002980:	e7f6      	b.n	8002970 <_Z41__static_initialization_and_destruction_0ii+0xb20>
PageButton chCfgSettingsBtn = PageButton(&next, 4, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002982:	488a      	ldr	r0, [pc, #552]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0xd5c>)
 8002984:	f003 fb98 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton chCfgHomeBtn = PageButton(&next, 3, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002988:	4889      	ldr	r0, [pc, #548]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0xd60>)
 800298a:	f003 fb95 	bl	80060b8 <_ZN10PageButtonD1Ev>
Button ch8Btn = Button(&next, 13, "b7", 7, 2);
 800298e:	4889      	ldr	r0, [pc, #548]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0xd64>)
 8002990:	f002 ff50 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch7Btn = Button(&next, 13, "b6", 6, 2);
 8002994:	4888      	ldr	r0, [pc, #544]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xd68>)
 8002996:	f002 ff4d 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch6Btn = Button(&next, 13, "b5", 5, 2);
 800299a:	4888      	ldr	r0, [pc, #544]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xd6c>)
 800299c:	f002 ff4a 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch5Btn = Button(&next, 13, "b4", 4, 2);
 80029a0:	4887      	ldr	r0, [pc, #540]	; (8002bc0 <_Z41__static_initialization_and_destruction_0ii+0xd70>)
 80029a2:	f002 ff47 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch4Btn = Button(&next, 13, "b3", 3, 2);
 80029a6:	4887      	ldr	r0, [pc, #540]	; (8002bc4 <_Z41__static_initialization_and_destruction_0ii+0xd74>)
 80029a8:	f002 ff44 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch3Btn = Button(&next, 13, "b2", 2, 2);
 80029ac:	4886      	ldr	r0, [pc, #536]	; (8002bc8 <_Z41__static_initialization_and_destruction_0ii+0xd78>)
 80029ae:	f002 ff41 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch2Btn = Button(&next, 13, "b1", 1, 2);
 80029b2:	4886      	ldr	r0, [pc, #536]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xd7c>)
 80029b4:	f002 ff3e 	bl	8005834 <_ZN6ButtonD1Ev>
Button ch1Btn = Button(&next, 13, "b0", 0, 2);
 80029b8:	4885      	ldr	r0, [pc, #532]	; (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0xd80>)
 80029ba:	f002 ff3b 	bl	8005834 <_ZN6ButtonD1Ev>
Page channelVisPage = Page(&next, 3, chVisBtns, 8, chVisPageBtns, 2, progBars, 8);
 80029be:	4885      	ldr	r0, [pc, #532]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xd84>)
 80029c0:	f003 f970 	bl	8005ca4 <_ZN4PageD1Ev>
ProgressBar progBars[] = {
 80029c4:	4c84      	ldr	r4, [pc, #528]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0xd88>)
 80029c6:	4b85      	ldr	r3, [pc, #532]	; (8002bdc <_Z41__static_initialization_and_destruction_0ii+0xd8c>)
 80029c8:	429c      	cmp	r4, r3
 80029ca:	d005      	beq.n	80029d8 <_Z41__static_initialization_and_destruction_0ii+0xb88>
 80029cc:	3c14      	subs	r4, #20
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4620      	mov	r0, r4
 80029d4:	4798      	blx	r3
 80029d6:	e7f6      	b.n	80029c6 <_Z41__static_initialization_and_destruction_0ii+0xb76>
Button chVisBtns[] = {
 80029d8:	4c81      	ldr	r4, [pc, #516]	; (8002be0 <_Z41__static_initialization_and_destruction_0ii+0xd90>)
 80029da:	4b82      	ldr	r3, [pc, #520]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0xd94>)
 80029dc:	429c      	cmp	r4, r3
 80029de:	d005      	beq.n	80029ec <_Z41__static_initialization_and_destruction_0ii+0xb9c>
 80029e0:	3c18      	subs	r4, #24
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4620      	mov	r0, r4
 80029e8:	4798      	blx	r3
 80029ea:	e7f6      	b.n	80029da <_Z41__static_initialization_and_destruction_0ii+0xb8a>
PageButton chVisPageBtns[] = {
 80029ec:	4c7e      	ldr	r4, [pc, #504]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0xd98>)
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0xd9c>)
 80029f0:	429c      	cmp	r4, r3
 80029f2:	d005      	beq.n	8002a00 <_Z41__static_initialization_and_destruction_0ii+0xbb0>
 80029f4:	3c18      	subs	r4, #24
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4620      	mov	r0, r4
 80029fc:	4798      	blx	r3
 80029fe:	e7f6      	b.n	80029ee <_Z41__static_initialization_and_destruction_0ii+0xb9e>
PageButton chVisSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002a00:	487b      	ldr	r0, [pc, #492]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0xda0>)
 8002a02:	f003 fb59 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton chVisHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002a06:	487b      	ldr	r0, [pc, #492]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0xda4>)
 8002a08:	f003 fb56 	bl	80060b8 <_ZN10PageButtonD1Ev>
ProgressBar ch8Bar = ProgressBar(&next, 16, "j7");
 8002a0c:	487a      	ldr	r0, [pc, #488]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0xda8>)
 8002a0e:	f003 fb95 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch7Bar = ProgressBar(&next, 14, "j6");
 8002a12:	487a      	ldr	r0, [pc, #488]	; (8002bfc <_Z41__static_initialization_and_destruction_0ii+0xdac>)
 8002a14:	f003 fb92 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch6Bar = ProgressBar(&next, 12, "j5");
 8002a18:	4879      	ldr	r0, [pc, #484]	; (8002c00 <_Z41__static_initialization_and_destruction_0ii+0xdb0>)
 8002a1a:	f003 fb8f 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch5Bar = ProgressBar(&next, 10, "j4");
 8002a1e:	4879      	ldr	r0, [pc, #484]	; (8002c04 <_Z41__static_initialization_and_destruction_0ii+0xdb4>)
 8002a20:	f003 fb8c 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch4Bar = ProgressBar(&next, 8, "j3");
 8002a24:	4878      	ldr	r0, [pc, #480]	; (8002c08 <_Z41__static_initialization_and_destruction_0ii+0xdb8>)
 8002a26:	f003 fb89 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch3Bar = ProgressBar(&next, 6, "j2");
 8002a2a:	4878      	ldr	r0, [pc, #480]	; (8002c0c <_Z41__static_initialization_and_destruction_0ii+0xdbc>)
 8002a2c:	f003 fb86 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch2Bar = ProgressBar(&next, 4, "j1");
 8002a30:	4877      	ldr	r0, [pc, #476]	; (8002c10 <_Z41__static_initialization_and_destruction_0ii+0xdc0>)
 8002a32:	f003 fb83 	bl	800613c <_ZN11ProgressBarD1Ev>
ProgressBar ch1Bar = ProgressBar(&next, 1, "j0");
 8002a36:	4877      	ldr	r0, [pc, #476]	; (8002c14 <_Z41__static_initialization_and_destruction_0ii+0xdc4>)
 8002a38:	f003 fb80 	bl	800613c <_ZN11ProgressBarD1Ev>
Button srcCh8Btn = Button(&next, 27, "b7", 7, 1);
 8002a3c:	4876      	ldr	r0, [pc, #472]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0xdc8>)
 8002a3e:	f002 fef9 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh7Btn = Button(&next, 26, "b6", 6, 1);
 8002a42:	4876      	ldr	r0, [pc, #472]	; (8002c1c <_Z41__static_initialization_and_destruction_0ii+0xdcc>)
 8002a44:	f002 fef6 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh6Btn = Button(&next, 25, "b5", 5, 1);
 8002a48:	4875      	ldr	r0, [pc, #468]	; (8002c20 <_Z41__static_initialization_and_destruction_0ii+0xdd0>)
 8002a4a:	f002 fef3 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh5Btn = Button(&next, 24, "b4", 4, 1);
 8002a4e:	4875      	ldr	r0, [pc, #468]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0xdd4>)
 8002a50:	f002 fef0 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh4Btn = Button(&next, 23, "b3", 3, 1);
 8002a54:	4874      	ldr	r0, [pc, #464]	; (8002c28 <_Z41__static_initialization_and_destruction_0ii+0xdd8>)
 8002a56:	f002 feed 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh3Btn = Button(&next, 22, "b2", 2, 1);
 8002a5a:	4874      	ldr	r0, [pc, #464]	; (8002c2c <_Z41__static_initialization_and_destruction_0ii+0xddc>)
 8002a5c:	f002 feea 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh2Btn = Button(&next, 21, "b1", 1, 1);
 8002a60:	4873      	ldr	r0, [pc, #460]	; (8002c30 <_Z41__static_initialization_and_destruction_0ii+0xde0>)
 8002a62:	f002 fee7 	bl	8005834 <_ZN6ButtonD1Ev>
Button srcCh1Btn = Button(&next, 3, "b0", 0, 1);
 8002a66:	4873      	ldr	r0, [pc, #460]	; (8002c34 <_Z41__static_initialization_and_destruction_0ii+0xde4>)
 8002a68:	f002 fee4 	bl	8005834 <_ZN6ButtonD1Ev>
Page runPage = Page(&next, 2, runBtns, 1, runPageBtns, 2);
 8002a6c:	4872      	ldr	r0, [pc, #456]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0xde8>)
 8002a6e:	f003 f919 	bl	8005ca4 <_ZN4PageD1Ev>
PageButton runPageBtns[] = {
 8002a72:	4c72      	ldr	r4, [pc, #456]	; (8002c3c <_Z41__static_initialization_and_destruction_0ii+0xdec>)
 8002a74:	4b72      	ldr	r3, [pc, #456]	; (8002c40 <_Z41__static_initialization_and_destruction_0ii+0xdf0>)
 8002a76:	429c      	cmp	r4, r3
 8002a78:	d005      	beq.n	8002a86 <_Z41__static_initialization_and_destruction_0ii+0xc36>
 8002a7a:	3c18      	subs	r4, #24
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4620      	mov	r0, r4
 8002a82:	4798      	blx	r3
 8002a84:	e7f6      	b.n	8002a74 <_Z41__static_initialization_and_destruction_0ii+0xc24>
PageButton runSettingsBtn = PageButton(&next, 3, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002a86:	486f      	ldr	r0, [pc, #444]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0xdf4>)
 8002a88:	f003 fb16 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton runHomeBtn = PageButton(&next, 2, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002a8c:	486e      	ldr	r0, [pc, #440]	; (8002c48 <_Z41__static_initialization_and_destruction_0ii+0xdf8>)
 8002a8e:	f003 fb13 	bl	80060b8 <_ZN10PageButtonD1Ev>
Button runBtns[] = {
 8002a92:	4c6e      	ldr	r4, [pc, #440]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0xdfc>)
 8002a94:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <_Z41__static_initialization_and_destruction_0ii+0xe00>)
 8002a96:	429c      	cmp	r4, r3
 8002a98:	d005      	beq.n	8002aa6 <_Z41__static_initialization_and_destruction_0ii+0xc56>
 8002a9a:	3c18      	subs	r4, #24
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4798      	blx	r3
 8002aa4:	e7f6      	b.n	8002a94 <_Z41__static_initialization_and_destruction_0ii+0xc44>
Button runBtn = Button(&next, 2, "b0", 0, 1);
 8002aa6:	486b      	ldr	r0, [pc, #428]	; (8002c54 <_Z41__static_initialization_and_destruction_0ii+0xe04>)
 8002aa8:	f002 fec4 	bl	8005834 <_ZN6ButtonD1Ev>
Page homePage = Page(&next, 1, NULL, 0, mainBtns, 7);
 8002aac:	486a      	ldr	r0, [pc, #424]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0xe08>)
 8002aae:	f003 f8f9 	bl	8005ca4 <_ZN4PageD1Ev>
PageButton mainBtns[] = {
 8002ab2:	4c6a      	ldr	r4, [pc, #424]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0xe0c>)
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <_Z41__static_initialization_and_destruction_0ii+0xe10>)
 8002ab6:	429c      	cmp	r4, r3
 8002ab8:	d005      	beq.n	8002ac6 <_Z41__static_initialization_and_destruction_0ii+0xc76>
 8002aba:	3c18      	subs	r4, #24
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	4798      	blx	r3
 8002ac4:	e7f6      	b.n	8002ab4 <_Z41__static_initialization_and_destruction_0ii+0xc64>
PageButton settPageBtn   = PageButton(&next, 2, "pb4", 1, 3, 5, ScreenChangeCallback);
 8002ac6:	4867      	ldr	r0, [pc, #412]	; (8002c64 <_Z41__static_initialization_and_destruction_0ii+0xe14>)
 8002ac8:	f003 faf6 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton colPageBtn    = PageButton(&next, 8, "pb6", 1, 2, 7, ScreenChangeCallback);
 8002acc:	4866      	ldr	r0, [pc, #408]	; (8002c68 <_Z41__static_initialization_and_destruction_0ii+0xe18>)
 8002ace:	f003 faf3 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton patPageBtn    = PageButton(&next, 5, "pb7", 1, 1, 8, ScreenChangeCallback);
 8002ad2:	4866      	ldr	r0, [pc, #408]	; (8002c6c <_Z41__static_initialization_and_destruction_0ii+0xe1c>)
 8002ad4:	f003 faf0 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton audPageBtn    = PageButton(&next, 4, "pb5", 0, 3, 6, ScreenChangeCallback);
 8002ad8:	4865      	ldr	r0, [pc, #404]	; (8002c70 <_Z41__static_initialization_and_destruction_0ii+0xe20>)
 8002ada:	f003 faed 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton chCfgPageBtn  = PageButton(&next, 6, "pb3", 0, 2, 4, ScreenChangeCallback);
 8002ade:	4865      	ldr	r0, [pc, #404]	; (8002c74 <_Z41__static_initialization_and_destruction_0ii+0xe24>)
 8002ae0:	f003 faea 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton chnPageBtn    = PageButton(&next, 1, "pb2", 0, 1, 3, ScreenChangeCallback);
 8002ae4:	4864      	ldr	r0, [pc, #400]	; (8002c78 <_Z41__static_initialization_and_destruction_0ii+0xe28>)
 8002ae6:	f003 fae7 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton mainPageBtn   = PageButton(&next, 7, "pb1", 0, 0, 2, ScreenChangeCallback);
 8002aea:	4864      	ldr	r0, [pc, #400]	; (8002c7c <_Z41__static_initialization_and_destruction_0ii+0xe2c>)
 8002aec:	f003 fae4 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton subMenuPageBtns[] = {
 8002af0:	4c63      	ldr	r4, [pc, #396]	; (8002c80 <_Z41__static_initialization_and_destruction_0ii+0xe30>)
 8002af2:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <_Z41__static_initialization_and_destruction_0ii+0xe34>)
 8002af4:	429c      	cmp	r4, r3
 8002af6:	d005      	beq.n	8002b04 <_Z41__static_initialization_and_destruction_0ii+0xcb4>
 8002af8:	3c18      	subs	r4, #24
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4620      	mov	r0, r4
 8002b00:	4798      	blx	r3
 8002b02:	e7f6      	b.n	8002af2 <_Z41__static_initialization_and_destruction_0ii+0xca2>
PageButton settingsBtn = PageButton(&next, 2, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002b04:	4860      	ldr	r0, [pc, #384]	; (8002c88 <_Z41__static_initialization_and_destruction_0ii+0xe38>)
 8002b06:	f003 fad7 	bl	80060b8 <_ZN10PageButtonD1Ev>
PageButton homeBtn = PageButton(&next, 1, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002b0a:	4860      	ldr	r0, [pc, #384]	; (8002c8c <_Z41__static_initialization_and_destruction_0ii+0xe3c>)
 8002b0c:	f003 fad4 	bl	80060b8 <_ZN10PageButtonD1Ev>
ScreenControl screenCtrl;
 8002b10:	485f      	ldr	r0, [pc, #380]	; (8002c90 <_Z41__static_initialization_and_destruction_0ii+0xe40>)
 8002b12:	f000 fba7 	bl	8003264 <_ZN13ScreenControlD1Ev>
RotaryEncoder encoder2;
 8002b16:	485f      	ldr	r0, [pc, #380]	; (8002c94 <_Z41__static_initialization_and_destruction_0ii+0xe44>)
 8002b18:	f7fe fa56 	bl	8000fc8 <_ZN13RotaryEncoderD1Ev>
RotaryEncoder encoder1;
 8002b1c:	485e      	ldr	r0, [pc, #376]	; (8002c98 <_Z41__static_initialization_and_destruction_0ii+0xe48>)
 8002b1e:	f7fe fa53 	bl	8000fc8 <_ZN13RotaryEncoderD1Ev>
PCA9634 ledA;
 8002b22:	485e      	ldr	r0, [pc, #376]	; (8002c9c <_Z41__static_initialization_and_destruction_0ii+0xe4c>)
 8002b24:	f000 fab4 	bl	8003090 <_ZN7PCA9634D1Ev>
StripControl stripCtrl;
 8002b28:	485d      	ldr	r0, [pc, #372]	; (8002ca0 <_Z41__static_initialization_and_destruction_0ii+0xe50>)
 8002b2a:	f000 fe23 	bl	8003774 <_ZN12StripControlD1Ev>
StripCurrent stripCurr;
 8002b2e:	485d      	ldr	r0, [pc, #372]	; (8002ca4 <_Z41__static_initialization_and_destruction_0ii+0xe54>)
 8002b30:	f000 febc 	bl	80038ac <_ZN12StripCurrentD1Ev>
Nextion next = Nextion();
 8002b34:	485c      	ldr	r0, [pc, #368]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0xe58>)
 8002b36:	f000 f907 	bl	8002d48 <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 8002b3a:	485c      	ldr	r0, [pc, #368]	; (8002cac <_Z41__static_initialization_and_destruction_0ii+0xe5c>)
 8002b3c:	f000 fd02 	bl	8003544 <_ZN9ShiftRegsD1Ev>
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd90      	pop	{r4, r7, pc}
 8002b48:	20000d9c 	.word	0x20000d9c
 8002b4c:	20000d84 	.word	0x20000d84
 8002b50:	20000d84 	.word	0x20000d84
 8002b54:	20000d6c 	.word	0x20000d6c
 8002b58:	20000d54 	.word	0x20000d54
 8002b5c:	20000d24 	.word	0x20000d24
 8002b60:	20000d24 	.word	0x20000d24
 8002b64:	20000cf4 	.word	0x20000cf4
 8002b68:	20000cf4 	.word	0x20000cf4
 8002b6c:	20000cc4 	.word	0x20000cc4
 8002b70:	20000cac 	.word	0x20000cac
 8002b74:	20000c94 	.word	0x20000c94
 8002b78:	20000c7c 	.word	0x20000c7c
 8002b7c:	20000c64 	.word	0x20000c64
 8002b80:	20000c34 	.word	0x20000c34
 8002b84:	20000c34 	.word	0x20000c34
 8002b88:	20000c1c 	.word	0x20000c1c
 8002b8c:	20000c1c 	.word	0x20000c1c
 8002b90:	20000c04 	.word	0x20000c04
 8002b94:	20000bec 	.word	0x20000bec
 8002b98:	20000bbc 	.word	0x20000bbc
 8002b9c:	20000bbc 	.word	0x20000bbc
 8002ba0:	20000afc 	.word	0x20000afc
 8002ba4:	20000afc 	.word	0x20000afc
 8002ba8:	20000acc 	.word	0x20000acc
 8002bac:	20000ab4 	.word	0x20000ab4
 8002bb0:	20000a9c 	.word	0x20000a9c
 8002bb4:	20000a84 	.word	0x20000a84
 8002bb8:	20000a6c 	.word	0x20000a6c
 8002bbc:	20000a54 	.word	0x20000a54
 8002bc0:	20000a3c 	.word	0x20000a3c
 8002bc4:	20000a24 	.word	0x20000a24
 8002bc8:	20000a0c 	.word	0x20000a0c
 8002bcc:	200009f4 	.word	0x200009f4
 8002bd0:	200009dc 	.word	0x200009dc
 8002bd4:	200009ac 	.word	0x200009ac
 8002bd8:	200009ac 	.word	0x200009ac
 8002bdc:	2000090c 	.word	0x2000090c
 8002be0:	2000090c 	.word	0x2000090c
 8002be4:	2000084c 	.word	0x2000084c
 8002be8:	2000084c 	.word	0x2000084c
 8002bec:	2000081c 	.word	0x2000081c
 8002bf0:	20000804 	.word	0x20000804
 8002bf4:	200007ec 	.word	0x200007ec
 8002bf8:	200007d8 	.word	0x200007d8
 8002bfc:	200007c4 	.word	0x200007c4
 8002c00:	200007b0 	.word	0x200007b0
 8002c04:	2000079c 	.word	0x2000079c
 8002c08:	20000788 	.word	0x20000788
 8002c0c:	20000774 	.word	0x20000774
 8002c10:	20000760 	.word	0x20000760
 8002c14:	2000074c 	.word	0x2000074c
 8002c18:	20000734 	.word	0x20000734
 8002c1c:	2000071c 	.word	0x2000071c
 8002c20:	20000704 	.word	0x20000704
 8002c24:	200006ec 	.word	0x200006ec
 8002c28:	200006d4 	.word	0x200006d4
 8002c2c:	200006bc 	.word	0x200006bc
 8002c30:	200006a4 	.word	0x200006a4
 8002c34:	2000068c 	.word	0x2000068c
 8002c38:	2000065c 	.word	0x2000065c
 8002c3c:	2000065c 	.word	0x2000065c
 8002c40:	2000062c 	.word	0x2000062c
 8002c44:	20000614 	.word	0x20000614
 8002c48:	200005fc 	.word	0x200005fc
 8002c4c:	200005fc 	.word	0x200005fc
 8002c50:	200005e4 	.word	0x200005e4
 8002c54:	200005cc 	.word	0x200005cc
 8002c58:	2000059c 	.word	0x2000059c
 8002c5c:	2000059c 	.word	0x2000059c
 8002c60:	200004f4 	.word	0x200004f4
 8002c64:	200004dc 	.word	0x200004dc
 8002c68:	200004c4 	.word	0x200004c4
 8002c6c:	200004ac 	.word	0x200004ac
 8002c70:	20000494 	.word	0x20000494
 8002c74:	2000047c 	.word	0x2000047c
 8002c78:	20000464 	.word	0x20000464
 8002c7c:	2000044c 	.word	0x2000044c
 8002c80:	2000044c 	.word	0x2000044c
 8002c84:	2000041c 	.word	0x2000041c
 8002c88:	20000404 	.word	0x20000404
 8002c8c:	200003ec 	.word	0x200003ec
 8002c90:	200003d8 	.word	0x200003d8
 8002c94:	200003b8 	.word	0x200003b8
 8002c98:	20000398 	.word	0x20000398
 8002c9c:	20000164 	.word	0x20000164
 8002ca0:	2000012c 	.word	0x2000012c
 8002ca4:	20000114 	.word	0x20000114
 8002ca8:	200000f4 	.word	0x200000f4
 8002cac:	200000d0 	.word	0x200000d0

08002cb0 <_GLOBAL__sub_I_currentADCHandle>:
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7ff f8c9 	bl	8001e50 <_Z41__static_initialization_and_destruction_0ii>
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_GLOBAL__sub_D_currentADCHandle>:
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7ff f8c1 	bl	8001e50 <_Z41__static_initialization_and_destruction_0ii>
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <_ZN7NextionC1Ev+0x74>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8002cde:	2010      	movs	r0, #16
 8002ce0:	f00c fadf 	bl	800f2a2 <_Znaj>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8002cec:	2010      	movs	r0, #16
 8002cee:	f00c fad8 	bl	800f2a2 <_Znaj>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 8002cfa:	2010      	movs	r0, #16
 8002cfc:	f00c fad1 	bl	800f2a2 <_Znaj>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]
	memset(this->cmdBuffer, 0, NEXTION_BUFFER);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f00d fa6d 	bl	80101f0 <memset>
	memset(this->recBuffer, 0, NEXTION_REC_SIZE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00d fa66 	bl	80101f0 <memset>
	memset(this->buffer, 0, NEXTION_BUFFER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f00d fa5f 	bl	80101f0 <memset>
	this->index = 0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	719a      	strb	r2, [r3, #6]
}
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	08010cf8 	.word	0x08010cf8

08002d48 <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <_ZN7NextionD1Ev+0x50>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
{
	delete[] this->cmdBuffer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <_ZN7NextionD1Ev+0x20>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f00c fa99 	bl	800f29a <_ZdaPv>
	delete[] this->recBuffer;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <_ZN7NextionD1Ev+0x32>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00c fa90 	bl	800f29a <_ZdaPv>
	delete[] this->buffer;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <_ZN7NextionD1Ev+0x44>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f00c fa87 	bl	800f29a <_ZdaPv>
}
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	08010cf8 	.word	0x08010cf8

08002d9c <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
}
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffcf 	bl	8002d48 <_ZN7NextionD1Ev>
 8002daa:	2120      	movs	r1, #32
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f00c fa72 	bl	800f296 <_ZdlPvj>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks>:

void Nextion::Startup(UART_HandleTypeDef *uart, NextionCallbacks callbacks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	4639      	mov	r1, r7
 8002dc8:	e881 000c 	stmia.w	r1, {r2, r3}
	this->uart = uart;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	615a      	str	r2, [r3, #20]
	this->callbacks = callbacks;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3318      	adds	r3, #24
 8002dd6:	463a      	mov	r2, r7
 8002dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ddc:	e883 0003 	stmia.w	r3, {r0, r1}
//	SetBaud(BAUD_RATE, false);
	HAL_UART_Receive(uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68d9      	ldr	r1, [r3, #12]
 8002de4:	2364      	movs	r3, #100	; 0x64
 8002de6:	2210      	movs	r2, #16
 8002de8:	68b8      	ldr	r0, [r7, #8]
 8002dea:	f00a fb60 	bl	800d4ae <HAL_UART_Receive>
	SendCommand("bkcmd=2");
 8002dee:	4907      	ldr	r1, [pc, #28]	; (8002e0c <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks+0x50>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f841 	bl	8002e78 <_ZN7Nextion11SendCommandEPKc>
#if DISABLE_TOUCH == 1
	// There doesnt seem to be a global "Disable Touch" command...
	SendCommand("");
#endif
	HAL_Delay(50);
 8002df6:	2032      	movs	r0, #50	; 0x32
 8002df8:	f003 fa5c 	bl	80062b4 <HAL_Delay>
	this->Reset();
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f807 	bl	8002e10 <_ZN7Nextion5ResetEv>
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	08010c04 	.word	0x08010c04

08002e10 <_ZN7Nextion5ResetEv>:

void Nextion::Reset()
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	SendCommand("rest");
 8002e18:	4905      	ldr	r1, [pc, #20]	; (8002e30 <_ZN7Nextion5ResetEv+0x20>)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f82c 	bl	8002e78 <_ZN7Nextion11SendCommandEPKc>
	HAL_Delay(250);
 8002e20:	20fa      	movs	r0, #250	; 0xfa
 8002e22:	f003 fa47 	bl	80062b4 <HAL_Delay>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	08010c0c 	.word	0x08010c0c

08002e34 <_ZN7Nextion11SendCommandEv>:
	}
	return false;
}

bool Nextion::SendCommand()
{
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(this->uart, (unsigned char*)this->buffer, strlen(this->buffer), UART_TIMEOUT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695c      	ldr	r4, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691d      	ldr	r5, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd f9e1 	bl	8000210 <strlen>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	2364      	movs	r3, #100	; 0x64
 8002e54:	4629      	mov	r1, r5
 8002e56:	4620      	mov	r0, r4
 8002e58:	f00a fa97 	bl	800d38a <HAL_UART_Transmit>
	HAL_UART_Transmit(this->uart, NEXT_END, 3, UART_TIMEOUT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6958      	ldr	r0, [r3, #20]
 8002e60:	2364      	movs	r3, #100	; 0x64
 8002e62:	2203      	movs	r2, #3
 8002e64:	4903      	ldr	r1, [pc, #12]	; (8002e74 <_ZN7Nextion11SendCommandEv+0x40>)
 8002e66:	f00a fa90 	bl	800d38a <HAL_UART_Transmit>
//	HAL_UART_Receive(this->uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
//	return CommandCheck();
}
 8002e6a:	bf00      	nop
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bdb0      	pop	{r4, r5, r7, pc}
 8002e74:	08010cec 	.word	0x08010cec

08002e78 <_ZN7Nextion11SendCommandEPKc>:

bool Nextion::SendCommand(const char *buffer)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(this->uart, (unsigned char*)buffer, strlen(buffer), UART_TIMEOUT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695c      	ldr	r4, [r3, #20]
 8002e86:	6838      	ldr	r0, [r7, #0]
 8002e88:	f7fd f9c2 	bl	8000210 <strlen>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	2364      	movs	r3, #100	; 0x64
 8002e92:	6839      	ldr	r1, [r7, #0]
 8002e94:	4620      	mov	r0, r4
 8002e96:	f00a fa78 	bl	800d38a <HAL_UART_Transmit>
	HAL_UART_Transmit(this->uart, NEXT_END, 3, UART_TIMEOUT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6958      	ldr	r0, [r3, #20]
 8002e9e:	2364      	movs	r3, #100	; 0x64
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <_ZN7Nextion11SendCommandEPKc+0x3c>)
 8002ea4:	f00a fa71 	bl	800d38a <HAL_UART_Transmit>
//	HAL_UART_Receive(this->uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
//	return CommandCheck();
}
 8002ea8:	bf00      	nop
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	08010cec 	.word	0x08010cec

08002eb8 <_ZN7Nextion7SetPageEh>:
{
	SetPage(0);
}

void Nextion::SetPage(uint8_t id)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
	snprintf(this->buffer, 8, "page %d", id);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6918      	ldr	r0, [r3, #16]
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <_ZN7Nextion7SetPageEh+0x28>)
 8002ecc:	2108      	movs	r1, #8
 8002ece:	f00d facb 	bl	8010468 <sniprintf>
	SendCommand();
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffae 	bl	8002e34 <_ZN7Nextion11SendCommandEv>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	08010c38 	.word	0x08010c38

08002ee4 <_ZN7Nextion14SetProgressBarEhh>:
	snprintf(this->buffer, 12, "%s.val=%d", objId, value);
	SendCommand();
}

void Nextion::SetProgressBar(uint8_t objId, uint8_t value)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	70bb      	strb	r3, [r7, #2]
	snprintf(this->buffer, 10, "j%d.val=%d", objId, value);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6918      	ldr	r0, [r3, #16]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	78bb      	ldrb	r3, [r7, #2]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_ZN7Nextion14SetProgressBarEhh+0x34>)
 8002f02:	210a      	movs	r1, #10
 8002f04:	f00d fab0 	bl	8010468 <sniprintf>
	SendCommand();
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff93 	bl	8002e34 <_ZN7Nextion11SendCommandEv>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08010c64 	.word	0x08010c64

08002f1c <_ZN7Nextion8SetClickEhb>:
	snprintf(this->buffer, 11, "%s.dis=%d", objId, scale);
	SendCommand();
}

void Nextion::SetClick(uint8_t id, bool en)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	70bb      	strb	r3, [r7, #2]
	snprintf(this->buffer, 10, "click %d,%d", id, (uint8_t)en);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6918      	ldr	r0, [r3, #16]
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	78bb      	ldrb	r3, [r7, #2]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <_ZN7Nextion8SetClickEhb+0x34>)
 8002f3a:	210a      	movs	r1, #10
 8002f3c:	f00d fa94 	bl	8010468 <sniprintf>
	SendCommand();
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff77 	bl	8002e34 <_ZN7Nextion11SendCommandEv>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	08010ccc 	.word	0x08010ccc

08002f54 <_ZN15PCA9634Settings7ToBytesEPhj>:
 * @brief Convert settings into two bytes and add them to the buffer.
 * @param buffer The buffer to store the settings in.
 * @param offset sets an offset from the start of the buffer to save the settings. Default = 0.
 */
void PCA9634Settings::ToBytes(uint8_t *buffer, size_t offset = 0)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
	uint8_t upper = (uint8_t)this->Enable;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	795b      	ldrb	r3, [r3, #5]
 8002f64:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Driver << 2;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	791b      	ldrb	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Change << 3;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	78db      	ldrb	r3, [r3, #3]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	b25a      	sxtb	r2, r3
 8002f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Invert << 4;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	789b      	ldrb	r3, [r3, #2]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	b25a      	sxtb	r2, r3
 8002f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->GroupCtrl << 5;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	015b      	lsls	r3, r3, #5
 8002fa2:	b25a      	sxtb	r2, r3
 8002fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	75fb      	strb	r3, [r7, #23]

	uint8_t lower = (uint8_t)this->AllCallEnable;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	799b      	ldrb	r3, [r3, #6]
 8002fb2:	75bb      	strb	r3, [r7, #22]
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	79db      	ldrb	r3, [r3, #7]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7a1b      	ldrb	r3, [r3, #8]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	b2db      	uxtb	r3, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn3 << 3);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	7a5b      	ldrb	r3, [r3, #9]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	b2db      	uxtb	r3, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	b25a      	sxtb	r2, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 8002fd6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	75bb      	strb	r3, [r7, #22]
	lower |= (uint8_t)this->Sleep << 4;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	b25a      	sxtb	r2, r3
 8002fe8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	75bb      	strb	r3, [r7, #22]

	buffer[0 + offset] = lower;
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	7dba      	ldrb	r2, [r7, #22]
 8002ffa:	701a      	strb	r2, [r3, #0]
	buffer[1 + offset] = upper;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3301      	adds	r3, #1
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	4413      	add	r3, r2
 8003004:	7dfa      	ldrb	r2, [r7, #23]
 8003006:	701a      	strb	r2, [r3, #0]
}
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>:
	return result;
}

/* PCA9634 Class Methods -----------------------------------------------------*/

PCA9634::PCA9634(uint8_t address, FMPI2C_HandleTypeDef *i2cBus, Pin oePin)
 8003014:	b082      	sub	sp, #8
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	460b      	mov	r3, r1
 8003024:	72fb      	strb	r3, [r7, #11]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	227f      	movs	r2, #127	; 0x7f
 800302a:	741a      	strb	r2, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3311      	adds	r3, #17
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe f8b1 	bl	8001198 <_ZN15PCA9634SettingsC1Ev>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	331c      	adds	r3, #28
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd ff7e 	bl	8000f3c <_ZN3PinC1Ev>
{
	this->address = address << 1;
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	701a      	strb	r2, [r3, #0]
	this->i2cBus = i2cBus;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]
	this->channels = new uint8_t[RGB_CHANNELS];
 8003050:	2008      	movs	r0, #8
 8003052:	f00c f926 	bl	800f2a2 <_Znaj>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	609a      	str	r2, [r3, #8]
	this->channelState = new PCA9634_LEDOUT[RGB_CHANNELS];
 800305e:	2008      	movs	r0, #8
 8003060:	f00c f91f 	bl	800f2a2 <_Znaj>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	60da      	str	r2, [r3, #12]
	this->oePin = oePin;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	331c      	adds	r3, #28
 8003070:	f107 021c 	add.w	r2, r7, #28
 8003074:	6810      	ldr	r0, [r2, #0]
 8003076:	6018      	str	r0, [r3, #0]
 8003078:	8891      	ldrh	r1, [r2, #4]
 800307a:	7992      	ldrb	r2, [r2, #6]
 800307c:	8099      	strh	r1, [r3, #4]
 800307e:	719a      	strb	r2, [r3, #6]
}
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800308c:	b002      	add	sp, #8
 800308e:	4770      	bx	lr

08003090 <_ZN7PCA9634D1Ev>:

PCA9634::~PCA9634()
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
{
	delete[] channels;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <_ZN7PCA9634D1Ev+0x1a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f00c f8f8 	bl	800f29a <_ZdaPv>
}
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>:
 * @brief Update the current settings and send it to the PCA9634.
 * @param settings The new esttings to apply.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::ChangeSettings(PCA9634Settings settings)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4638      	mov	r0, r7
 80030be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (SendSettings(settings) == HAL_OK)
 80030c2:	463b      	mov	r3, r7
 80030c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f818 	bl	80030fc <_ZN7PCA963412SendSettingsE15PCA9634Settings>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x3e>
	{
		this->settings = settings;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f103 0211 	add.w	r2, r3, #17
 80030e2:	463b      	mov	r3, r7
 80030e4:	cb03      	ldmia	r3!, {r0, r1}
 80030e6:	6010      	str	r0, [r2, #0]
 80030e8:	6051      	str	r1, [r2, #4]
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	8113      	strh	r3, [r2, #8]
		return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x40>
	}
	return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZN7PCA963412SendSettingsE15PCA9634Settings>:
 * @brief PRIVATE - Sends the provided settings to the PCA9634.
 * @param settings The new esttings to send.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::SendSettings(PCA9634Settings settings)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	4638      	mov	r0, r7
 8003106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buffer[3] = {0,0,0};
 800310a:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <_ZN7PCA963412SendSettingsE15PCA9634Settings+0x4c>)
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4611      	mov	r1, r2
 8003114:	8019      	strh	r1, [r3, #0]
 8003116:	3302      	adds	r3, #2
 8003118:	0c12      	lsrs	r2, r2, #16
 800311a:	701a      	strb	r2, [r3, #0]
	settings.ToBytes(buffer, 1);
 800311c:	f107 0114 	add.w	r1, r7, #20
 8003120:	463b      	mov	r3, r7
 8003122:	2201      	movs	r2, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff15 	bl	8002f54 <_ZN15PCA9634Settings7ToBytesEPhj>
	return WriteBytes(PCA9634_AUTO_INC::ALL_REGS, PCA9634_CTRL_REGISTER::MODE1, buffer, 3);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	2203      	movs	r2, #3
 8003130:	9200      	str	r2, [sp, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	2104      	movs	r1, #4
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f808 	bl	800314c <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08010cd8 	.word	0x08010cd8

0800314c <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>:
 * @param inc Auto-Increment register option.
 * @param reg The starting register to send to.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::WriteBytes(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg, uint8_t *bytes, size_t len)
{
 800314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003150:	b08a      	sub	sp, #40	; 0x28
 8003152:	af02      	add	r7, sp, #8
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	72fb      	strb	r3, [r7, #11]
 800315c:	4613      	mov	r3, r2
 800315e:	72bb      	strb	r3, [r7, #10]
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
		temp[j] = bytes[i];
	}
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 8003160:	466b      	mov	r3, sp
 8003162:	469a      	mov	sl, r3
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
 8003164:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8003166:	617e      	str	r6, [r7, #20]
 8003168:	4633      	mov	r3, r6
 800316a:	3301      	adds	r3, #1
 800316c:	2200      	movs	r2, #0
 800316e:	4698      	mov	r8, r3
 8003170:	4691      	mov	r9, r2
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003186:	4633      	mov	r3, r6
 8003188:	3301      	adds	r3, #1
 800318a:	2200      	movs	r2, #0
 800318c:	461c      	mov	r4, r3
 800318e:	4615      	mov	r5, r2
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	00eb      	lsls	r3, r5, #3
 800319a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319e:	00e2      	lsls	r2, r4, #3
 80031a0:	4633      	mov	r3, r6
 80031a2:	3301      	adds	r3, #1
 80031a4:	3307      	adds	r3, #7
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	ebad 0d03 	sub.w	sp, sp, r3
 80031ae:	ab02      	add	r3, sp, #8
 80031b0:	3300      	adds	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693c      	ldr	r4, [r7, #16]
 80031b6:	7aba      	ldrb	r2, [r7, #10]
 80031b8:	7afb      	ldrb	r3, [r7, #11]
 80031ba:	4619      	mov	r1, r3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f83a 	bl	8003236 <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>
 80031c2:	4603      	mov	r3, r0
 80031c4:	7023      	strb	r3, [r4, #0]
 80031c6:	1c62      	adds	r2, r4, #1
 80031c8:	1e73      	subs	r3, r6, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	db04      	blt.n	80031d8 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x8c>
 80031ce:	2100      	movs	r1, #0
 80031d0:	7011      	strb	r1, [r2, #0]
 80031d2:	3201      	adds	r2, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	e7f8      	b.n	80031ca <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x7e>
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80031d8:	2301      	movs	r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	3301      	adds	r3, #1
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d20f      	bcs.n	800320a <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0xbe>
		temp[j] = bytes[i];
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	4413      	add	r3, r2
 80031f0:	7819      	ldrb	r1, [r3, #0]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	460a      	mov	r2, r1
 80031fa:	701a      	strb	r2, [r3, #0]
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	3301      	adds	r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e7ea      	b.n	80031e0 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x94>
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6858      	ldr	r0, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b299      	uxth	r1, r3
 8003214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003216:	b29b      	uxth	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	b29b      	uxth	r3, r3
 800321c:	22c8      	movs	r2, #200	; 0xc8
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	f004 fb6f 	bl	8007904 <HAL_FMPI2C_Master_Transmit>
 8003226:	4603      	mov	r3, r0
 8003228:	bf00      	nop
 800322a:	46d5      	mov	sp, sl
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003236 <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>:
 * @param inc Auto-Increment register option.
 * @param reg Desired register.
 * @retval HAL status
 */
uint8_t PCA9634::CombineCommand(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	70fb      	strb	r3, [r7, #3]
 8003242:	4613      	mov	r3, r2
 8003244:	70bb      	strb	r3, [r7, #2]
	return (uint8_t)reg | ((uint8_t)inc << 5);
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	b25a      	sxtb	r2, r3
 800324c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003250:	4313      	orrs	r3, r2
 8003252:	b25b      	sxtb	r3, r3
 8003254:	b2db      	uxtb	r3, r3
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <_ZN13ScreenControlD1Ev>:
 *      Author: Daxxn
 */

#include "ScreenControl.h"

ScreenControl::~ScreenControl()
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <_ZN13ScreenControlD1Ev+0x70>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
{
	this->nxt = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
	delete[] this->pages;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d024      	beq.n	80032ca <_ZN13ScreenControlD1Ev+0x66>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	3b04      	subs	r3, #4
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	18cc      	adds	r4, r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	429c      	cmp	r4, r3
 800329c:	d005      	beq.n	80032aa <_ZN13ScreenControlD1Ev+0x46>
 800329e:	3c30      	subs	r4, #48	; 0x30
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4620      	mov	r0, r4
 80032a6:	4798      	blx	r3
 80032a8:	e7f5      	b.n	8003296 <_ZN13ScreenControlD1Ev+0x32>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f1a3 0008 	sub.w	r0, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	3b04      	subs	r3, #4
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	3308      	adds	r3, #8
 80032c4:	4619      	mov	r1, r3
 80032c6:	f00b ffea 	bl	800f29e <_ZdaPvj>
}
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	08010d08 	.word	0x08010d08

080032d8 <_ZN13ScreenControlD0Ev>:
ScreenControl::~ScreenControl()
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
}
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ffbf 	bl	8003264 <_ZN13ScreenControlD1Ev>
 80032e6:	2114      	movs	r1, #20
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f00b ffd4 	bl	800f296 <_ZdlPvj>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN13ScreenControl4InitEP7NextionP4Page>:

HAL_StatusTypeDef ScreenControl::Init(Nextion *nxt, Page *pages)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
	this->nxt = nxt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	605a      	str	r2, [r3, #4]
	this->pages = pages;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <_ZN13ScreenControl12NavigateHorzEa>:

void ScreenControl::NavigateHorz(int8_t x)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
	this->currentPage->Navigate(x, 0);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8003332:	2200      	movs	r2, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f002 fd59 	bl	8005dec <_ZN4Page8NavigateEaa>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZN13ScreenControl12NavigateVertEa>:

void ScreenControl::NavigateVert(int8_t y)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	70fb      	strb	r3, [r7, #3]
	this->currentPage->Navigate(0, y);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fd47 	bl	8005dec <_ZN4Page8NavigateEaa>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <_ZN13ScreenControl15ChangePageEventEh>:
{
	this->currentPage->Navigate(x, y);
}

void ScreenControl::ChangePageEvent(uint8_t pageID)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
	this->currentPage = &this->pages[pageID];
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	18ca      	adds	r2, r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60da      	str	r2, [r3, #12]
	this->currentPage->Init();
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f002 fe28 	bl	8005fe0 <_ZN4Page4InitEv>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <_ZN13ScreenControl10ChangePageEh>:

void ScreenControl::ChangePage(uint8_t pageID)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < PAGE_COUNT; ++i) {
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	dc28      	bgt.n	8003400 <_ZN13ScreenControl10ChangePageEh+0x68>
		if (this->pages[i].ID == pageID)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	440b      	add	r3, r1
 80033be:	791b      	ldrb	r3, [r3, #4]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d118      	bne.n	80033f8 <_ZN13ScreenControl10ChangePageEh+0x60>
		{
			if (this->currentPage != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <_ZN13ScreenControl10ChangePageEh+0x40>
			{
				this->prevPage = this->currentPage->ID;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	791a      	ldrb	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	741a      	strb	r2, [r3, #16]
			}
			this->currentPage = &this->pages[i];
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	18ca      	adds	r2, r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
			this->currentPage->Init();
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 fdf5 	bl	8005fe0 <_ZN4Page4InitEv>
			return;
 80033f6:	e003      	b.n	8003400 <_ZN13ScreenControl10ChangePageEh+0x68>
	for (int i = 0; i < PAGE_COUNT; ++i) {
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e7d3      	b.n	80033a8 <_ZN13ScreenControl10ChangePageEh+0x10>
		}
	}
}
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_ZN13ScreenControl8HomePageEv>:
		this->ChangePage(this->prevPage);
	}
}

void ScreenControl::HomePage()
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	this->ChangePage(HOME_PAGE);
 800340e:	2101      	movs	r1, #1
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffc1 	bl	8003398 <_ZN13ScreenControl10ChangePageEh>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <_ZN13ScreenControl10TouchEventEhhh>:
	this->currentPage = &this->pages[index];
	this->currentPage->Init();
}

void ScreenControl::TouchEvent(uint8_t pageID, uint8_t compID, uint8_t event)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	4608      	mov	r0, r1
 8003428:	4611      	mov	r1, r2
 800342a:	461a      	mov	r2, r3
 800342c:	4603      	mov	r3, r0
 800342e:	70fb      	strb	r3, [r7, #3]
 8003430:	460b      	mov	r3, r1
 8003432:	70bb      	strb	r3, [r7, #2]
 8003434:	4613      	mov	r3, r2
 8003436:	707b      	strb	r3, [r7, #1]
	if (this->CheckPage(pageID))
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f82a 	bl	8003496 <_ZN13ScreenControl9CheckPageEh>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d011      	beq.n	800346c <_ZN13ScreenControl10TouchEventEhhh+0x4e>
	{
		Control* ctrl = this->currentPage->FindControl(compID);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	78ba      	ldrb	r2, [r7, #2]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f002 fdea 	bl	800602a <_ZN4Page11FindControlEh>
 8003456:	60f8      	str	r0, [r7, #12]
		if (ctrl != NULL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <_ZN13ScreenControl10TouchEventEhhh+0x4e>
		{
			ctrl->Act();
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3308      	adds	r3, #8
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4610      	mov	r0, r2
 800346a:	4798      	blx	r3
		}
	}
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <_ZN13ScreenControl3ActEv>:

void ScreenControl::Act()
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	this->currentPage->Act();
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4610      	mov	r0, r2
 800348c:	4798      	blx	r3
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_ZN13ScreenControl9CheckPageEh>:
{
	this->nxt->SetText(objId, text, len);
}

bool ScreenControl::CheckPage(uint8_t pageID)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
	return this->currentPage->ID == pageID;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	791b      	ldrb	r3, [r3, #4]
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	4639      	mov	r1, r7
 80034cc:	e881 000c 	stmia.w	r1, {r2, r3}
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3308      	adds	r3, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fd2e 	bl	8000f3c <_ZN3PinC1Ev>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3310      	adds	r3, #16
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fd29 	bl	8000f3c <_ZN3PinC1Ev>
{
	this->_spi = spi;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3308      	adds	r3, #8
 80034f4:	463a      	mov	r2, r7
 80034f6:	6810      	ldr	r0, [r2, #0]
 80034f8:	6018      	str	r0, [r3, #0]
 80034fa:	8891      	ldrh	r1, [r2, #4]
 80034fc:	7992      	ldrb	r2, [r2, #6]
 80034fe:	8099      	strh	r1, [r3, #4]
 8003500:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3310      	adds	r3, #16
 8003506:	f107 0218 	add.w	r2, r7, #24
 800350a:	6810      	ldr	r0, [r2, #0]
 800350c:	6018      	str	r0, [r3, #0]
 800350e:	8891      	ldrh	r1, [r2, #4]
 8003510:	7992      	ldrb	r2, [r2, #6]
 8003512:	8099      	strh	r1, [r3, #4]
 8003514:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8003516:	2002      	movs	r0, #2
 8003518:	f00b fec3 	bl	800f2a2 <_Znaj>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	4613      	mov	r3, r2
 8003522:	2100      	movs	r1, #0
 8003524:	7019      	strb	r1, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	2100      	movs	r1, #0
 800352a:	7019      	strb	r1, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	831a      	strh	r2, [r3, #24]
}
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	08010d18 	.word	0x08010d18

08003544 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	4a08      	ldr	r2, [pc, #32]	; (8003570 <_ZN9ShiftRegsD1Ev+0x2c>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <_ZN9ShiftRegsD1Ev+0x20>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4618      	mov	r0, r3
 8003560:	f00b fe9b 	bl	800f29a <_ZdaPv>
}
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	08010d18 	.word	0x08010d18

08003574 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
}
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ffe1 	bl	8003544 <_ZN9ShiftRegsD1Ev>
 8003582:	2124      	movs	r1, #36	; 0x24
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f00b fe86 	bl	800f296 <_ZdlPvj>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3308      	adds	r3, #8
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa33 	bl	8003a0c <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3310      	adds	r3, #16
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fa2e 	bl	8003a0c <_ZN3Pin5ClearEv>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	460b      	mov	r3, r1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10d      	bne.n	80035e8 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8b1b      	ldrh	r3, [r3, #24]
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	2101      	movs	r1, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	b21b      	sxth	r3, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 80035e6:	e00e      	b.n	8003606 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8b1b      	ldrh	r3, [r3, #24]
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	2101      	movs	r1, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	4013      	ands	r3, r2
 80035fe:	b21b      	sxth	r3, r3
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	831a      	strh	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f80f 	bl	8003642 <_ZN9ShiftRegs8GetValueEj>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffbf 	bl	80035b8 <_ZN9ShiftRegs8SetValueEhj>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8b1b      	ldrh	r3, [r3, #24]
 8003650:	461a      	mov	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	fa42 f303 	asr.w	r3, r2, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_ZN12StripControlC1EP12StripCurrent>:
 *      Author: Daxxn
 */

#include "StripControl.h"

StripControl::StripControl(StripCurrent *stripCurrent)
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <_ZN12StripControlC1EP12StripCurrent+0xfc>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3310      	adds	r3, #16
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd fc5b 	bl	8000f3c <_ZN3PinC1Ev>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3318      	adds	r3, #24
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fc56 	bl	8000f3c <_ZN3PinC1Ev>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3320      	adds	r3, #32
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fc51 	bl	8000f3c <_ZN3PinC1Ev>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3328      	adds	r3, #40	; 0x28
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fc4c 	bl	8000f3c <_ZN3PinC1Ev>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3330      	adds	r3, #48	; 0x30
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fc47 	bl	8000f3c <_ZN3PinC1Ev>
{
	this->stripCurrent = stripCurrent;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]
//	this->stripEShdnPin = Pin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin);
	this->stripEShdnPin = Pin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, ACTIVE_LOW);
 80036b4:	f107 0008 	add.w	r0, r7, #8
 80036b8:	2301      	movs	r3, #1
 80036ba:	2201      	movs	r2, #1
 80036bc:	492b      	ldr	r1, [pc, #172]	; (800376c <_ZN12StripControlC1EP12StripCurrent+0x100>)
 80036be:	f7fd fd28 	bl	8001112 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3320      	adds	r3, #32
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	6810      	ldr	r0, [r2, #0]
 80036cc:	6018      	str	r0, [r3, #0]
 80036ce:	8891      	ldrh	r1, [r2, #4]
 80036d0:	7992      	ldrb	r2, [r2, #6]
 80036d2:	8099      	strh	r1, [r3, #4]
 80036d4:	719a      	strb	r2, [r3, #6]
	this->stripPGoodPin = Pin(STRIP_PG_GPIO_Port, STRIP_PG_Pin);
 80036d6:	f107 0310 	add.w	r3, r7, #16
 80036da:	2208      	movs	r2, #8
 80036dc:	4923      	ldr	r1, [pc, #140]	; (800376c <_ZN12StripControlC1EP12StripCurrent+0x100>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fcfc 	bl	80010dc <_ZN3PinC1EP12GPIO_TypeDeft>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3318      	adds	r3, #24
 80036e8:	f107 0210 	add.w	r2, r7, #16
 80036ec:	6810      	ldr	r0, [r2, #0]
 80036ee:	6018      	str	r0, [r3, #0]
 80036f0:	8891      	ldrh	r1, [r2, #4]
 80036f2:	7992      	ldrb	r2, [r2, #6]
 80036f4:	8099      	strh	r1, [r3, #4]
 80036f6:	719a      	strb	r2, [r3, #6]
	this->stripPowerPin = Pin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin);
 80036f8:	f107 0318 	add.w	r3, r7, #24
 80036fc:	2201      	movs	r2, #1
 80036fe:	491c      	ldr	r1, [pc, #112]	; (8003770 <_ZN12StripControlC1EP12StripCurrent+0x104>)
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fceb 	bl	80010dc <_ZN3PinC1EP12GPIO_TypeDeft>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3310      	adds	r3, #16
 800370a:	f107 0218 	add.w	r2, r7, #24
 800370e:	6810      	ldr	r0, [r2, #0]
 8003710:	6018      	str	r0, [r3, #0]
 8003712:	8891      	ldrh	r1, [r2, #4]
 8003714:	7992      	ldrb	r2, [r2, #6]
 8003716:	8099      	strh	r1, [r3, #4]
 8003718:	719a      	strb	r2, [r3, #6]
	this->vddPGoodPin = Pin(VDD_PG_GPIO_Port, VDD_PG_Pin);
 800371a:	f107 0320 	add.w	r3, r7, #32
 800371e:	2202      	movs	r2, #2
 8003720:	4912      	ldr	r1, [pc, #72]	; (800376c <_ZN12StripControlC1EP12StripCurrent+0x100>)
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fcda 	bl	80010dc <_ZN3PinC1EP12GPIO_TypeDeft>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3328      	adds	r3, #40	; 0x28
 800372c:	f107 0220 	add.w	r2, r7, #32
 8003730:	6810      	ldr	r0, [r2, #0]
 8003732:	6018      	str	r0, [r3, #0]
 8003734:	8891      	ldrh	r1, [r2, #4]
 8003736:	7992      	ldrb	r2, [r2, #6]
 8003738:	8099      	strh	r1, [r3, #4]
 800373a:	719a      	strb	r2, [r3, #6]
	this->vaaPGoodPin = Pin(VAA_PG_GPIO_Port, VAA_PG_Pin);
 800373c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003740:	2204      	movs	r2, #4
 8003742:	490a      	ldr	r1, [pc, #40]	; (800376c <_ZN12StripControlC1EP12StripCurrent+0x100>)
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fcc9 	bl	80010dc <_ZN3PinC1EP12GPIO_TypeDeft>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3330      	adds	r3, #48	; 0x30
 800374e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003752:	6810      	ldr	r0, [r2, #0]
 8003754:	6018      	str	r0, [r3, #0]
 8003756:	8891      	ldrh	r1, [r2, #4]
 8003758:	7992      	ldrb	r2, [r2, #6]
 800375a:	8099      	strh	r1, [r3, #4]
 800375c:	719a      	strb	r2, [r3, #6]
}
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	3730      	adds	r7, #48	; 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08010d28 	.word	0x08010d28
 800376c:	40020800 	.word	0x40020800
 8003770:	40020c00 	.word	0x40020c00

08003774 <_ZN12StripControlD1Ev>:

StripControl::~StripControl()
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	4a06      	ldr	r2, [pc, #24]	; (8003798 <_ZN12StripControlD1Ev+0x24>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
{
	this->stripCurrent = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
}
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	08010d28 	.word	0x08010d28

0800379c <_ZN12StripControlD0Ev>:
StripControl::~StripControl()
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
}
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffe5 	bl	8003774 <_ZN12StripControlD1Ev>
 80037aa:	2138      	movs	r1, #56	; 0x38
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f00b fd72 	bl	800f296 <_ZdlPvj>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_ZN12StripControl4InitEv>:

HAL_StatusTypeDef StripControl::Init()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	this->stripPowerPin.Clear();
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3310      	adds	r3, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f91f 	bl	8003a0c <_ZN3Pin5ClearEv>
	this->stripEShdnPin.Clear();
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3320      	adds	r3, #32
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f91a 	bl	8003a0c <_ZN3Pin5ClearEv>
	this->vddPGood   = this->vddPGoodPin.Read();
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3328      	adds	r3, #40	; 0x28
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f904 	bl	80039ea <_ZN3Pin4ReadEv>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	729a      	strb	r2, [r3, #10]
	this->vaaPGood   = this->vaaPGoodPin.Read();
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3330      	adds	r3, #48	; 0x30
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f8fb 	bl	80039ea <_ZN3Pin4ReadEv>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	72da      	strb	r2, [r3, #11]
	this->stripPGood = this->stripPGoodPin.Read();
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3318      	adds	r3, #24
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f8f2 	bl	80039ea <_ZN3Pin4ReadEv>
 8003806:	4603      	mov	r3, r0
 8003808:	461a      	mov	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	725a      	strb	r2, [r3, #9]
	this->stripEShdnPin.Write(GPIO_PIN_RESET);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3320      	adds	r3, #32
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f8cb 	bl	80039b0 <_ZN3Pin5WriteE13GPIO_PinState>
	return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <_ZN12StripControl5PowerE13GPIO_PinState>:

void StripControl::Power(GPIO_PinState enable)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
	if (this->enable == enable)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7a1b      	ldrb	r3, [r3, #8]
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	429a      	cmp	r2, r3
 8003838:	d00a      	beq.n	8003850 <_ZN12StripControl5PowerE13GPIO_PinState+0x2c>
	{
		return;
	}

//	this->pGood = this->stripPGoodPin.Read() == GPIO_PIN_SET;
	this->enable = enable;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	721a      	strb	r2, [r3, #8]
	this->stripPowerPin.Write(enable);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3310      	adds	r3, #16
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f8b1 	bl	80039b0 <_ZN3Pin5WriteE13GPIO_PinState>
 800384e:	e000      	b.n	8003852 <_ZN12StripControl5PowerE13GPIO_PinState+0x2e>
		return;
 8003850:	bf00      	nop
}
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefPFv18StripCurrentStatusE>:

#include "main.h"
#include "string.h"
#include "StripCurrent.h"

StripCurrent::StripCurrent(ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *timer, pStripCurrentAlertTypeDef callback)
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
{
	this->buffer = new uint8_t[STRIP_CURR_BUFFER_LEN];
 8003866:	206e      	movs	r0, #110	; 0x6e
 8003868:	f00b fd1b 	bl	800f2a2 <_Znaj>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	60da      	str	r2, [r3, #12]
	this->adc = adcHandle;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	605a      	str	r2, [r3, #4]
	this->timer = timer;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	609a      	str	r2, [r3, #8]
	this->averages = new uint8_t[ADC_CHANNELS];
 8003880:	200b      	movs	r0, #11
 8003882:	f00b fd0e 	bl	800f2a2 <_Znaj>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	615a      	str	r2, [r3, #20]
	memset(this->averages, 0, ADC_CHANNELS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	220b      	movs	r2, #11
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f00c fcaa 	bl	80101f0 <memset>
	this->alertCallback = callback;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	601a      	str	r2, [r3, #0]
//	HAL_ADC_RegisterCallback(adc, HAL_ADC_CONVERSION_COMPLETE_CB_ID, callback);
}
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
{
	delete[] this->buffer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <_ZN12StripCurrentD1Ev+0x1a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00b fcea 	bl	800f29a <_ZdaPv>
	delete[] this->averages;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <_ZN12StripCurrentD1Ev+0x2c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f00b fce1 	bl	800f29a <_ZdaPv>
}
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZN12StripCurrent4InitEv>:

HAL_StatusTypeDef StripCurrent::Init()
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(this->adc, (uint32_t *)this->buffer, STRIP_CURR_BUFFER_LEN) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6858      	ldr	r0, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	226e      	movs	r2, #110	; 0x6e
 80038f4:	4619      	mov	r1, r3
 80038f6:	f002 fe7b 	bl	80065f0 <HAL_ADC_Start_DMA>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <_ZN12StripCurrent4InitEv+0x2c>
	{
		return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e006      	b.n	800391c <_ZN12StripCurrent4InitEv+0x3a>
	}
	return HAL_TIM_Base_Start(this->timer);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f008 fc52 	bl	800c1bc <HAL_TIM_Base_Start>
 8003918:	4603      	mov	r3, r0
 800391a:	bf00      	nop
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_ZN12StripCurrent4CalcEv>:
{
	return buffer[ch];
}

void StripCurrent::Calc()
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	// Get each channels value from the DMA buffer
	// and calc the average.
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b0a      	cmp	r3, #10
 8003934:	dc27      	bgt.n	8003986 <_ZN12StripCurrent4CalcEv+0x62>
		static uint16_t sum;
		for (int offset = 0; offset < STRIP_CURR_BUFFER_LEN; offset += ADC_CHANNELS) {
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b6d      	cmp	r3, #109	; 0x6d
 800393e:	dc11      	bgt.n	8003964 <_ZN12StripCurrent4CalcEv+0x40>
			sum += buffer[i + offset];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	440a      	add	r2, r1
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b29a      	uxth	r2, r3
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <_ZN12StripCurrent4CalcEv+0x84>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	4413      	add	r3, r2
 8003956:	b29a      	uxth	r2, r3
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <_ZN12StripCurrent4CalcEv+0x84>)
 800395a:	801a      	strh	r2, [r3, #0]
		for (int offset = 0; offset < STRIP_CURR_BUFFER_LEN; offset += ADC_CHANNELS) {
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	330b      	adds	r3, #11
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	e7ea      	b.n	800393a <_ZN12StripCurrent4CalcEv+0x16>
		}
		averages[i] = sum / SAMPLE_SIZE;
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <_ZN12StripCurrent4CalcEv+0x84>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	4a10      	ldr	r2, [pc, #64]	; (80039ac <_ZN12StripCurrent4CalcEv+0x88>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	08db      	lsrs	r3, r3, #3
 8003970:	b299      	uxth	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	b2ca      	uxtb	r2, r1
 800397c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e7d4      	b.n	8003930 <_ZN12StripCurrent4CalcEv+0xc>
//		averages[i] += *buffer + (i * 8);
//		uint8_t aver = buffer[i * SAMPLE_SIZE];
//		averages[i] += buffer[i * SAMPLE_SIZE];
	}
	this->temp = averages[TEMP_INDEX];
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	7a5a      	ldrb	r2, [r3, #9]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	74da      	strb	r2, [r3, #19]
	this->vref = averages[VREF_INDEX];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	7a9a      	ldrb	r2, [r3, #10]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	749a      	strb	r2, [r3, #18]
//	this->CheckCurrents();
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20001000 	.word	0x20001000
 80039ac:	cccccccd 	.word	0xcccccccd

080039b0 <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8899      	ldrh	r1, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	799b      	ldrb	r3, [r3, #6]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d106      	bne.n	80039da <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e000      	b.n	80039dc <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	461a      	mov	r2, r3
 80039de:	f005 f9c5 	bl	8008d6c <HAL_GPIO_WritePin>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZN3Pin4ReadEv>:

GPIO_PinState Pin::Read()
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	889b      	ldrh	r3, [r3, #4]
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f005 f99d 	bl	8008d3c <HAL_GPIO_ReadPin>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8899      	ldrh	r1, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	799b      	ldrb	r3, [r3, #6]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f005 f9a3 	bl	8008d6c <HAL_GPIO_WritePin>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_IncTick+0x2c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_IncTick+0x30>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <HAL_IncTick+0x30>)
 8003a42:	6013      	str	r3, [r2, #0]
  if (uwTick == 0)
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x30>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <HAL_IncTick+0x22>
  {
	  prevTick = 0;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_IncTick+0x34>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
  }
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	2000000c 	.word	0x2000000c
 8003a60:	2000156c 	.word	0x2000156c
 8003a64:	20001560 	.word	0x20001560

08003a68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
	currentTick = HAL_GetTick();
 8003a72:	f002 fc13 	bl	800629c <HAL_GetTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4a3d      	ldr	r2, [pc, #244]	; (8003b70 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a7a:	6013      	str	r3, [r2, #0]
	checkTick = prevTick + MENU_DEBOUNCE_WAIT < currentTick;
 8003a7c:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	bf34      	ite	cc
 8003a8a:	2301      	movcc	r3, #1
 8003a8c:	2300      	movcs	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003a94:	701a      	strb	r2, [r3, #0]
	prevTick = currentTick;
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_GPIO_EXTI_Callback+0x108>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a36      	ldr	r2, [pc, #216]	; (8003b74 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003a9c:	6013      	str	r3, [r2, #0]
	switch (GPIO_Pin) {
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa4:	d03a      	beq.n	8003b1c <HAL_GPIO_EXTI_Callback+0xb4>
 8003aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aaa:	dc52      	bgt.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab0:	d020      	beq.n	8003af4 <HAL_GPIO_EXTI_Callback+0x8c>
 8003ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab6:	dc4c      	bgt.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abc:	d01d      	beq.n	8003afa <HAL_GPIO_EXTI_Callback+0x92>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac2:	dc46      	bgt.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d01a      	beq.n	8003b00 <HAL_GPIO_EXTI_Callback+0x98>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	dc40      	bgt.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
 8003ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad4:	d037      	beq.n	8003b46 <HAL_GPIO_EXTI_Callback+0xde>
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	dc3a      	bgt.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d02a      	beq.n	8003b38 <HAL_GPIO_EXTI_Callback+0xd0>
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	dc34      	bgt.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d010      	beq.n	8003b0e <HAL_GPIO_EXTI_Callback+0xa6>
 8003aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af0:	d01b      	beq.n	8003b2a <HAL_GPIO_EXTI_Callback+0xc2>
			if (checkTick)
			{
				MenuBackInterruptCallback();
			}
		default:
			break;
 8003af2:	e02e      	b.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
			Enc1TurnInterruptCallback();
 8003af4:	f7fe f978 	bl	8001de8 <Enc1TurnInterruptCallback>
			break;
 8003af8:	e036      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			Enc2TurnInterruptCallback();
 8003afa:	f7fe f97f 	bl	8001dfc <Enc2TurnInterruptCallback>
			break;
 8003afe:	e033      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			if (checkTick)
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d026      	beq.n	8003b56 <HAL_GPIO_EXTI_Callback+0xee>
				MenuUpInterruptCallback();
 8003b08:	f7fe f928 	bl	8001d5c <MenuUpInterruptCallback>
			break;
 8003b0c:	e023      	b.n	8003b56 <HAL_GPIO_EXTI_Callback+0xee>
			if (checkTick)
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d021      	beq.n	8003b5a <HAL_GPIO_EXTI_Callback+0xf2>
				MenuDownInterruptCallback();
 8003b16:	f7fe f92d 	bl	8001d74 <MenuDownInterruptCallback>
			break;
 8003b1a:	e01e      	b.n	8003b5a <HAL_GPIO_EXTI_Callback+0xf2>
			if (checkTick)
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01c      	beq.n	8003b5e <HAL_GPIO_EXTI_Callback+0xf6>
				MenuLeftInterruptCallback();
 8003b24:	f7fe f930 	bl	8001d88 <MenuLeftInterruptCallback>
			break;
 8003b28:	e019      	b.n	8003b5e <HAL_GPIO_EXTI_Callback+0xf6>
			if (checkTick)
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_GPIO_EXTI_Callback+0xfa>
				MenuRightInterruptCallback();
 8003b32:	f7fe f935 	bl	8001da0 <MenuRightInterruptCallback>
			break;
 8003b36:	e014      	b.n	8003b62 <HAL_GPIO_EXTI_Callback+0xfa>
			if (checkTick)
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <HAL_GPIO_EXTI_Callback+0xfe>
				MenuActInterruptCallback();
 8003b40:	f7fe f938 	bl	8001db4 <MenuActInterruptCallback>
			break;
 8003b44:	e00f      	b.n	8003b66 <HAL_GPIO_EXTI_Callback+0xfe>
			if (checkTick)
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x110>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_GPIO_EXTI_Callback+0xea>
				MenuBackInterruptCallback();
 8003b4e:	f7fe f941 	bl	8001dd4 <MenuBackInterruptCallback>
			break;
 8003b52:	bf00      	nop
 8003b54:	e008      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003b56:	bf00      	nop
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003b5a:	bf00      	nop
 8003b5c:	e004      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003b5e:	bf00      	nop
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003b66:	bf00      	nop
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000000 	.word	0x20000000
 8003b74:	20001560 	.word	0x20001560
 8003b78:	20001564 	.word	0x20001564

08003b7c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	AudioFullCallback();
 8003b84:	f7fd fdb4 	bl	80016f0 <AudioFullCallback>
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_I2S_RxCpltCallback>:
//{
//	AudioHalfFullCallback();
//}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	AudioFullCallback();
 8003b98:	f7fd fdaa 	bl	80016f0 <AudioFullCallback>
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	CurrentConvFullCallback();
 8003bac:	f7fd fda6 	bl	80016fc <CurrentConvFullCallback>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bbe:	f002 fb1b 	bl	80061f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bc2:	f000 f86d 	bl	8003ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc6:	f000 fe17 	bl	80047f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bca:	f000 fdd7 	bl	800477c <MX_DMA_Init>
  MX_ADC1_Init();
 8003bce:	f000 f8d3 	bl	8003d78 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003bd2:	f000 fa03 	bl	8003fdc <MX_I2C1_Init>
  MX_TIM3_Init();
 8003bd6:	f000 fbf5 	bl	80043c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003bda:	f000 fd51 	bl	8004680 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003bde:	f000 fd79 	bl	80046d4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003be2:	f000 fc71 	bl	80044c8 <MX_TIM6_Init>
  MX_RTC_Init();
 8003be6:	f000 fa55 	bl	8004094 <MX_RTC_Init>
  MX_SPI4_Init();
 8003bea:	f000 fb05 	bl	80041f8 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8003bee:	f000 f9b9 	bl	8003f64 <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8003bf2:	f000 fd99 	bl	8004728 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003bf6:	f000 fb35 	bl	8004264 <MX_TIM1_Init>
  MX_I2S5_Init();
 8003bfa:	f000 fa1d 	bl	8004038 <MX_I2S5_Init>
  MX_SDIO_SD_Init();
 8003bfe:	f000 fadb 	bl	80041b8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003c02:	f00b f95d 	bl	800eec0 <MX_FATFS_Init>
  MX_TIM8_Init();
 8003c06:	f000 fc9d 	bl	8004544 <MX_TIM8_Init>
  MX_CRC_Init();
 8003c0a:	f000 f997 	bl	8003f3c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */


//  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_RESET);
  if (Init(
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <main+0xa8>)
 8003c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <main+0xac>)
 8003c14:	930a      	str	r3, [sp, #40]	; 0x28
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <main+0xb0>)
 8003c18:	9309      	str	r3, [sp, #36]	; 0x24
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <main+0xb4>)
 8003c1c:	9308      	str	r3, [sp, #32]
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <main+0xb8>)
 8003c20:	9307      	str	r3, [sp, #28]
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <main+0xbc>)
 8003c24:	9306      	str	r3, [sp, #24]
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <main+0xc0>)
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <main+0xc4>)
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <main+0xc8>)
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <main+0xcc>)
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <main+0xd0>)
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <main+0xd4>)
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <main+0xd8>)
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <main+0xdc>)
 8003c42:	4915      	ldr	r1, [pc, #84]	; (8003c98 <main+0xe0>)
 8003c44:	4815      	ldr	r0, [pc, #84]	; (8003c9c <main+0xe4>)
 8003c46:	f7fd fe5d 	bl	8001904 <Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <main+0x9c>

		  &hrtc,
		  &hsd
  ) != HAL_OK)
  {
	  Error_Handler();
 8003c50:	f000 ff1a 	bl	8004a88 <Error_Handler>
  }

  // For Init tests
  InitTest();
 8003c54:	f7fe f850 	bl	8001cf8 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8003c58:	f7fe f856 	bl	8001d08 <Main>
 8003c5c:	e7fc      	b.n	8003c58 <main+0xa0>
 8003c5e:	bf00      	nop
 8003c60:	20001298 	.word	0x20001298
 8003c64:	20001278 	.word	0x20001278
 8003c68:	2000151c 	.word	0x2000151c
 8003c6c:	200014d8 	.word	0x200014d8
 8003c70:	20001494 	.word	0x20001494
 8003c74:	2000144c 	.word	0x2000144c
 8003c78:	200013bc 	.word	0x200013bc
 8003c7c:	20001374 	.word	0x20001374
 8003c80:	2000131c 	.word	0x2000131c
 8003c84:	20001218 	.word	0x20001218
 8003c88:	200011d0 	.word	0x200011d0
 8003c8c:	2000117c 	.word	0x2000117c
 8003c90:	2000111c 	.word	0x2000111c
 8003c94:	200010d0 	.word	0x200010d0
 8003c98:	20001068 	.word	0x20001068
 8003c9c:	20001004 	.word	0x20001004

08003ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b094      	sub	sp, #80	; 0x50
 8003ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	2234      	movs	r2, #52	; 0x34
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f00c fa9e 	bl	80101f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <SystemClock_Config+0xd0>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <SystemClock_Config+0xd0>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd4:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <SystemClock_Config+0xd0>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <SystemClock_Config+0xd4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <SystemClock_Config+0xd4>)
 8003cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <SystemClock_Config+0xd4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003d06:	2301      	movs	r3, #1
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d14:	2308      	movs	r3, #8
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003d18:	2350      	movs	r3, #80	; 0x50
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d20:	2304      	movs	r3, #4
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003d24:	2302      	movs	r3, #2
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f006 fb8f 	bl	800a450 <HAL_RCC_OscConfig>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003d38:	f000 fea6 	bl	8004a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d3c:	230f      	movs	r3, #15
 8003d3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d40:	2302      	movs	r3, #2
 8003d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	2102      	movs	r1, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f005 fe2b 	bl	80099b4 <HAL_RCC_ClockConfig>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003d64:	f000 fe90 	bl	8004a88 <Error_Handler>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3750      	adds	r7, #80	; 0x50
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000

08003d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d7e:	463b      	mov	r3, r7
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d8a:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	; (8003f38 <MX_ADC1_Init+0x1c0>)
 8003d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d90:	4b68      	ldr	r3, [pc, #416]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003d98:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003da0:	4b64      	ldr	r3, [pc, #400]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003da6:	4b63      	ldr	r3, [pc, #396]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003dac:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003db4:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8003dbc:	4b5d      	ldr	r3, [pc, #372]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003dbe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dc4:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8003dca:	4b5a      	ldr	r3, [pc, #360]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003dcc:	220b      	movs	r2, #11
 8003dce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003dd0:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003dd8:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003dde:	4855      	ldr	r0, [pc, #340]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003de0:	f002 fa8c 	bl	80062fc <HAL_ADC_Init>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8003dea:	f000 fe4d 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003dee:	2304      	movs	r3, #4
 8003df0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	484d      	ldr	r0, [pc, #308]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003e00:	f002 fd04 	bl	800680c <HAL_ADC_ConfigChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8003e0a:	f000 fe3d 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003e0e:	2305      	movs	r3, #5
 8003e10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e12:	2302      	movs	r3, #2
 8003e14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e16:	463b      	mov	r3, r7
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4846      	ldr	r0, [pc, #280]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003e1c:	f002 fcf6 	bl	800680c <HAL_ADC_ConfigChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003e26:	f000 fe2f 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003e2a:	2306      	movs	r3, #6
 8003e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e32:	463b      	mov	r3, r7
 8003e34:	4619      	mov	r1, r3
 8003e36:	483f      	ldr	r0, [pc, #252]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003e38:	f002 fce8 	bl	800680c <HAL_ADC_ConfigChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8003e42:	f000 fe21 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e46:	2307      	movs	r3, #7
 8003e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e4e:	463b      	mov	r3, r7
 8003e50:	4619      	mov	r1, r3
 8003e52:	4838      	ldr	r0, [pc, #224]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003e54:	f002 fcda 	bl	800680c <HAL_ADC_ConfigChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8003e5e:	f000 fe13 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e62:	2308      	movs	r3, #8
 8003e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003e66:	2305      	movs	r3, #5
 8003e68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4831      	ldr	r0, [pc, #196]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003e70:	f002 fccc 	bl	800680c <HAL_ADC_ConfigChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003e7a:	f000 fe05 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003e7e:	2309      	movs	r3, #9
 8003e80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003e82:	2306      	movs	r3, #6
 8003e84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e86:	463b      	mov	r3, r7
 8003e88:	4619      	mov	r1, r3
 8003e8a:	482a      	ldr	r0, [pc, #168]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003e8c:	f002 fcbe 	bl	800680c <HAL_ADC_ConfigChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8003e96:	f000 fdf7 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003e9a:	230e      	movs	r3, #14
 8003e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4823      	ldr	r0, [pc, #140]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003ea8:	f002 fcb0 	bl	800680c <HAL_ADC_ConfigChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8003eb2:	f000 fde9 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003eb6:	230f      	movs	r3, #15
 8003eb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003eba:	2308      	movs	r3, #8
 8003ebc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	481c      	ldr	r0, [pc, #112]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003ec4:	f002 fca2 	bl	800680c <HAL_ADC_ConfigChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8003ece:	f000 fddb 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eda:	463b      	mov	r3, r7
 8003edc:	4619      	mov	r1, r3
 8003ede:	4815      	ldr	r0, [pc, #84]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003ee0:	f002 fc94 	bl	800680c <HAL_ADC_ConfigChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 8003eea:	f000 fdcd 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003eee:	2310      	movs	r3, #16
 8003ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	4619      	mov	r1, r3
 8003efa:	480e      	ldr	r0, [pc, #56]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003efc:	f002 fc86 	bl	800680c <HAL_ADC_ConfigChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8003f06:	f000 fdbf 	bl	8004a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003f0a:	2311      	movs	r3, #17
 8003f0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003f0e:	230b      	movs	r3, #11
 8003f10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003f12:	2301      	movs	r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f16:	463b      	mov	r3, r7
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4806      	ldr	r0, [pc, #24]	; (8003f34 <MX_ADC1_Init+0x1bc>)
 8003f1c:	f002 fc76 	bl	800680c <HAL_ADC_ConfigChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8003f26:	f000 fdaf 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20001004 	.word	0x20001004
 8003f38:	40012000 	.word	0x40012000

08003f3c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <MX_CRC_Init+0x20>)
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <MX_CRC_Init+0x24>)
 8003f44:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003f46:	4805      	ldr	r0, [pc, #20]	; (8003f5c <MX_CRC_Init+0x20>)
 8003f48:	f003 f81f 	bl	8006f8a <HAL_CRC_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003f52:	f000 fd99 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200010c8 	.word	0x200010c8
 8003f60:	40023000 	.word	0x40023000

08003f64 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <MX_FMPI2C1_Init+0x70>)
 8003f6c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00100618;
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f70:	4a19      	ldr	r2, [pc, #100]	; (8003fd8 <MX_FMPI2C1_Init+0x74>)
 8003f72:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003fa0:	f003 fc20 	bl	80077e4 <HAL_FMPI2C_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8003faa:	f000 fd6d 	bl	8004a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4807      	ldr	r0, [pc, #28]	; (8003fd0 <MX_FMPI2C1_Init+0x6c>)
 8003fb2:	f004 fcd1 	bl	8008958 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8003fbc:	f000 fd64 	bl	8004a88 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f004 fd15 	bl	80089f0 <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f004 fd12 	bl	80089f0 <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	200010d0 	.word	0x200010d0
 8003fd4:	40006000 	.word	0x40006000
 8003fd8:	00100618 	.word	0x00100618

08003fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <MX_I2C1_Init+0x50>)
 8003fe2:	4a13      	ldr	r2, [pc, #76]	; (8004030 <MX_I2C1_Init+0x54>)
 8003fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <MX_I2C1_Init+0x50>)
 8003fe8:	4a12      	ldr	r2, [pc, #72]	; (8004034 <MX_I2C1_Init+0x58>)
 8003fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <MX_I2C1_Init+0x50>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	; (800402c <MX_I2C1_Init+0x50>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <MX_I2C1_Init+0x50>)
 8003ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <MX_I2C1_Init+0x50>)
 8004002:	2200      	movs	r2, #0
 8004004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <MX_I2C1_Init+0x50>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <MX_I2C1_Init+0x50>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <MX_I2C1_Init+0x50>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004018:	4804      	ldr	r0, [pc, #16]	; (800402c <MX_I2C1_Init+0x50>)
 800401a:	f004 fed9 	bl	8008dd0 <HAL_I2C_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004024:	f000 fd30 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	2000117c 	.word	0x2000117c
 8004030:	40005400 	.word	0x40005400
 8004034:	000186a0 	.word	0x000186a0

08004038 <MX_I2S5_Init>:
  * @brief I2S5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S5_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S5_Init 0 */

  /* USER CODE BEGIN I2S5_Init 1 */

  /* USER CODE END I2S5_Init 1 */
  hi2s5.Instance = SPI5;
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <MX_I2S5_Init+0x54>)
 800403e:	4a14      	ldr	r2, [pc, #80]	; (8004090 <MX_I2S5_Init+0x58>)
 8004040:	601a      	str	r2, [r3, #0]
  hi2s5.Init.Mode = I2S_MODE_MASTER_RX;
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <MX_I2S5_Init+0x54>)
 8004044:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004048:	605a      	str	r2, [r3, #4]
  hi2s5.Init.Standard = I2S_STANDARD_MSB;
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <MX_I2S5_Init+0x54>)
 800404c:	2210      	movs	r2, #16
 800404e:	609a      	str	r2, [r3, #8]
  hi2s5.Init.DataFormat = I2S_DATAFORMAT_32B;
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <MX_I2S5_Init+0x54>)
 8004052:	2205      	movs	r2, #5
 8004054:	60da      	str	r2, [r3, #12]
  hi2s5.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <MX_I2S5_Init+0x54>)
 8004058:	2200      	movs	r2, #0
 800405a:	611a      	str	r2, [r3, #16]
  hi2s5.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <MX_I2S5_Init+0x54>)
 800405e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004062:	615a      	str	r2, [r3, #20]
  hi2s5.Init.CPOL = I2S_CPOL_LOW;
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <MX_I2S5_Init+0x54>)
 8004066:	2200      	movs	r2, #0
 8004068:	619a      	str	r2, [r3, #24]
  hi2s5.Init.ClockSource = I2S_CLOCK_PLL;
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <MX_I2S5_Init+0x54>)
 800406c:	2200      	movs	r2, #0
 800406e:	61da      	str	r2, [r3, #28]
  hi2s5.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <MX_I2S5_Init+0x54>)
 8004072:	2200      	movs	r2, #0
 8004074:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s5) != HAL_OK)
 8004076:	4805      	ldr	r0, [pc, #20]	; (800408c <MX_I2S5_Init+0x54>)
 8004078:	f004 ffee 	bl	8009058 <HAL_I2S_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_I2S5_Init+0x4e>
  {
    Error_Handler();
 8004082:	f000 fd01 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S5_Init 2 */

  /* USER CODE END I2S5_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200011d0 	.word	0x200011d0
 8004090:	40015000 	.word	0x40015000

08004094 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b090      	sub	sp, #64	; 0x40
 8004098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800409a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80040ae:	463b      	mov	r3, r7
 80040b0:	2228      	movs	r2, #40	; 0x28
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f00c f89b 	bl	80101f0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040bc:	4a3d      	ldr	r2, [pc, #244]	; (80041b4 <MX_RTC_Init+0x120>)
 80040be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040c2:	2240      	movs	r2, #64	; 0x40
 80040c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80040c6:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040c8:	227f      	movs	r2, #127	; 0x7f
 80040ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80040cc:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80040de:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80040e4:	4832      	ldr	r0, [pc, #200]	; (80041b0 <MX_RTC_Init+0x11c>)
 80040e6:	f006 fc37 	bl	800a958 <HAL_RTC_Init>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80040f0:	f000 fcca 	bl	8004a88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8004100:	2300      	movs	r3, #0
 8004102:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8004106:	2300      	movs	r3, #0
 8004108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800410c:	2300      	movs	r3, #0
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004118:	2201      	movs	r2, #1
 800411a:	4619      	mov	r1, r3
 800411c:	4824      	ldr	r0, [pc, #144]	; (80041b0 <MX_RTC_Init+0x11c>)
 800411e:	f006 fc91 	bl	800aa44 <HAL_RTC_SetTime>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8004128:	f000 fcae 	bl	8004a88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004148:	2201      	movs	r2, #1
 800414a:	4619      	mov	r1, r3
 800414c:	4818      	ldr	r0, [pc, #96]	; (80041b0 <MX_RTC_Init+0x11c>)
 800414e:	f006 fd13 	bl	800ab78 <HAL_RTC_SetDate>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8004158:	f000 fc96 	bl	8004a88 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800415c:	2301      	movs	r3, #1
 800415e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8004160:	2301      	movs	r3, #1
 8004162:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8004164:	2300      	movs	r3, #0
 8004166:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800416c:	2300      	movs	r3, #0
 800416e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800418a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004190:	463b      	mov	r3, r7
 8004192:	2201      	movs	r2, #1
 8004194:	4619      	mov	r1, r3
 8004196:	4806      	ldr	r0, [pc, #24]	; (80041b0 <MX_RTC_Init+0x11c>)
 8004198:	f006 fd72 	bl	800ac80 <HAL_RTC_SetAlarm_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80041a2:	f000 fc71 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80041a6:	bf00      	nop
 80041a8:	3740      	adds	r7, #64	; 0x40
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20001278 	.word	0x20001278
 80041b4:	40002800 	.word	0x40002800

080041b8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041be:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <MX_SDIO_SD_Init+0x3c>)
 80041c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041dc:	2200      	movs	r2, #0
 80041de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <MX_SDIO_SD_Init+0x38>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	20001298 	.word	0x20001298
 80041f4:	40012c00 	.word	0x40012c00

080041f8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <MX_SPI4_Init+0x64>)
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <MX_SPI4_Init+0x68>)
 8004200:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <MX_SPI4_Init+0x64>)
 8004204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004208:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <MX_SPI4_Init+0x64>)
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004210:	4b12      	ldr	r3, [pc, #72]	; (800425c <MX_SPI4_Init+0x64>)
 8004212:	2200      	movs	r2, #0
 8004214:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <MX_SPI4_Init+0x64>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <MX_SPI4_Init+0x64>)
 800421e:	2200      	movs	r2, #0
 8004220:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <MX_SPI4_Init+0x64>)
 8004224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004228:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <MX_SPI4_Init+0x64>)
 800422c:	2200      	movs	r2, #0
 800422e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <MX_SPI4_Init+0x64>)
 8004232:	2200      	movs	r2, #0
 8004234:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <MX_SPI4_Init+0x64>)
 8004238:	2200      	movs	r2, #0
 800423a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <MX_SPI4_Init+0x64>)
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <MX_SPI4_Init+0x64>)
 8004244:	220a      	movs	r2, #10
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004248:	4804      	ldr	r0, [pc, #16]	; (800425c <MX_SPI4_Init+0x64>)
 800424a:	f007 fedf 	bl	800c00c <HAL_SPI_Init>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004254:	f000 fc18 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	2000131c 	.word	0x2000131c
 8004260:	40013400 	.word	0x40013400

08004264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b096      	sub	sp, #88	; 0x58
 8004268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800426a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004278:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	611a      	str	r2, [r3, #16]
 8004292:	615a      	str	r2, [r3, #20]
 8004294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	2220      	movs	r2, #32
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f00b ffa7 	bl	80101f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042a2:	4b46      	ldr	r3, [pc, #280]	; (80043bc <MX_TIM1_Init+0x158>)
 80042a4:	4a46      	ldr	r2, [pc, #280]	; (80043c0 <MX_TIM1_Init+0x15c>)
 80042a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042a8:	4b44      	ldr	r3, [pc, #272]	; (80043bc <MX_TIM1_Init+0x158>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <MX_TIM1_Init+0x158>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80042b4:	4b41      	ldr	r3, [pc, #260]	; (80043bc <MX_TIM1_Init+0x158>)
 80042b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042bc:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <MX_TIM1_Init+0x158>)
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <MX_TIM1_Init+0x158>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042c8:	4b3c      	ldr	r3, [pc, #240]	; (80043bc <MX_TIM1_Init+0x158>)
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042ce:	483b      	ldr	r0, [pc, #236]	; (80043bc <MX_TIM1_Init+0x158>)
 80042d0:	f007 ff25 	bl	800c11e <HAL_TIM_Base_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80042da:	f000 fbd5 	bl	8004a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042e8:	4619      	mov	r1, r3
 80042ea:	4834      	ldr	r0, [pc, #208]	; (80043bc <MX_TIM1_Init+0x158>)
 80042ec:	f008 fb14 	bl	800c918 <HAL_TIM_ConfigClockSource>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80042f6:	f000 fbc7 	bl	8004a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042fa:	4830      	ldr	r0, [pc, #192]	; (80043bc <MX_TIM1_Init+0x158>)
 80042fc:	f007 ffc6 	bl	800c28c <HAL_TIM_PWM_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004306:	f000 fbbf 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800430e:	2300      	movs	r3, #0
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004316:	4619      	mov	r1, r3
 8004318:	4828      	ldr	r0, [pc, #160]	; (80043bc <MX_TIM1_Init+0x158>)
 800431a:	f008 ff07 	bl	800d12c <HAL_TIMEx_MasterConfigSynchronization>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004324:	f000 fbb0 	bl	8004a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004328:	2360      	movs	r3, #96	; 0x60
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004330:	2300      	movs	r3, #0
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004334:	2300      	movs	r3, #0
 8004336:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004348:	2200      	movs	r2, #0
 800434a:	4619      	mov	r1, r3
 800434c:	481b      	ldr	r0, [pc, #108]	; (80043bc <MX_TIM1_Init+0x158>)
 800434e:	f008 fa21 	bl	800c794 <HAL_TIM_PWM_ConfigChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004358:	f000 fb96 	bl	8004a88 <Error_Handler>
  }
  sConfigOC.Pulse = 32000;
 800435c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004366:	2208      	movs	r2, #8
 8004368:	4619      	mov	r1, r3
 800436a:	4814      	ldr	r0, [pc, #80]	; (80043bc <MX_TIM1_Init+0x158>)
 800436c:	f008 fa12 	bl	800c794 <HAL_TIM_PWM_ConfigChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004376:	f000 fb87 	bl	8004a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800438e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004394:	2300      	movs	r3, #0
 8004396:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	4619      	mov	r1, r3
 800439c:	4807      	ldr	r0, [pc, #28]	; (80043bc <MX_TIM1_Init+0x158>)
 800439e:	f008 ff41 	bl	800d224 <HAL_TIMEx_ConfigBreakDeadTime>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80043a8:	f000 fb6e 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80043ac:	4803      	ldr	r0, [pc, #12]	; (80043bc <MX_TIM1_Init+0x158>)
 80043ae:	f000 ffaf 	bl	8005310 <HAL_TIM_MspPostInit>

}
 80043b2:	bf00      	nop
 80043b4:	3758      	adds	r7, #88	; 0x58
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20001374 	.word	0x20001374
 80043c0:	40010000 	.word	0x40010000

080043c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d8:	f107 0320 	add.w	r3, r7, #32
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]
 80043f0:	615a      	str	r2, [r3, #20]
 80043f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043f4:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <MX_TIM3_Init+0xfc>)
 80043f6:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <MX_TIM3_Init+0x100>)
 80043f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <MX_TIM3_Init+0xfc>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004402:	2200      	movs	r2, #0
 8004404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004406:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800440c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800440e:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004414:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800441a:	4829      	ldr	r0, [pc, #164]	; (80044c0 <MX_TIM3_Init+0xfc>)
 800441c:	f007 fe7f 	bl	800c11e <HAL_TIM_Base_Init>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004426:	f000 fb2f 	bl	8004a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800442a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004434:	4619      	mov	r1, r3
 8004436:	4822      	ldr	r0, [pc, #136]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004438:	f008 fa6e 	bl	800c918 <HAL_TIM_ConfigClockSource>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004442:	f000 fb21 	bl	8004a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004446:	481e      	ldr	r0, [pc, #120]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004448:	f007 ff20 	bl	800c28c <HAL_TIM_PWM_Init>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004452:	f000 fb19 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800445e:	f107 0320 	add.w	r3, r7, #32
 8004462:	4619      	mov	r1, r3
 8004464:	4816      	ldr	r0, [pc, #88]	; (80044c0 <MX_TIM3_Init+0xfc>)
 8004466:	f008 fe61 	bl	800d12c <HAL_TIMEx_MasterConfigSynchronization>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004470:	f000 fb0a 	bl	8004a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004474:	2360      	movs	r3, #96	; 0x60
 8004476:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	2200      	movs	r2, #0
 8004488:	4619      	mov	r1, r3
 800448a:	480d      	ldr	r0, [pc, #52]	; (80044c0 <MX_TIM3_Init+0xfc>)
 800448c:	f008 f982 	bl	800c794 <HAL_TIM_PWM_ConfigChannel>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004496:	f000 faf7 	bl	8004a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	220c      	movs	r2, #12
 800449e:	4619      	mov	r1, r3
 80044a0:	4807      	ldr	r0, [pc, #28]	; (80044c0 <MX_TIM3_Init+0xfc>)
 80044a2:	f008 f977 	bl	800c794 <HAL_TIM_PWM_ConfigChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80044ac:	f000 faec 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80044b0:	4803      	ldr	r0, [pc, #12]	; (80044c0 <MX_TIM3_Init+0xfc>)
 80044b2:	f000 ff2d 	bl	8005310 <HAL_TIM_MspPostInit>

}
 80044b6:	bf00      	nop
 80044b8:	3738      	adds	r7, #56	; 0x38
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200013bc 	.word	0x200013bc
 80044c4:	40000400 	.word	0x40000400

080044c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ce:	463b      	mov	r3, r7
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <MX_TIM6_Init+0x74>)
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <MX_TIM6_Init+0x78>)
 80044da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <MX_TIM6_Init+0x74>)
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <MX_TIM6_Init+0x74>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <MX_TIM6_Init+0x74>)
 80044ea:	22ff      	movs	r2, #255	; 0xff
 80044ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <MX_TIM6_Init+0x74>)
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80044f4:	4811      	ldr	r0, [pc, #68]	; (800453c <MX_TIM6_Init+0x74>)
 80044f6:	f007 fe12 	bl	800c11e <HAL_TIM_Base_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004500:	f000 fac2 	bl	8004a88 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8004504:	2108      	movs	r1, #8
 8004506:	480d      	ldr	r0, [pc, #52]	; (800453c <MX_TIM6_Init+0x74>)
 8004508:	f007 ffe2 	bl	800c4d0 <HAL_TIM_OnePulse_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 8004512:	f000 fab9 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004516:	2320      	movs	r3, #32
 8004518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800451e:	463b      	mov	r3, r7
 8004520:	4619      	mov	r1, r3
 8004522:	4806      	ldr	r0, [pc, #24]	; (800453c <MX_TIM6_Init+0x74>)
 8004524:	f008 fe02 	bl	800d12c <HAL_TIMEx_MasterConfigSynchronization>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 800452e:	f000 faab 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20001404 	.word	0x20001404
 8004540:	40001000 	.word	0x40001000

08004544 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b096      	sub	sp, #88	; 0x58
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800454a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	615a      	str	r2, [r3, #20]
 8004574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	2220      	movs	r2, #32
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00b fe37 	bl	80101f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <MX_TIM8_Init+0x134>)
 8004584:	4a3d      	ldr	r2, [pc, #244]	; (800467c <MX_TIM8_Init+0x138>)
 8004586:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5000-1;
 8004588:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <MX_TIM8_Init+0x134>)
 800458a:	f241 3287 	movw	r2, #4999	; 0x1387
 800458e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004590:	4b39      	ldr	r3, [pc, #228]	; (8004678 <MX_TIM8_Init+0x134>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 8004596:	4b38      	ldr	r3, [pc, #224]	; (8004678 <MX_TIM8_Init+0x134>)
 8004598:	22f9      	movs	r2, #249	; 0xf9
 800459a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <MX_TIM8_Init+0x134>)
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80045a2:	4b35      	ldr	r3, [pc, #212]	; (8004678 <MX_TIM8_Init+0x134>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045a8:	4b33      	ldr	r3, [pc, #204]	; (8004678 <MX_TIM8_Init+0x134>)
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80045ae:	4832      	ldr	r0, [pc, #200]	; (8004678 <MX_TIM8_Init+0x134>)
 80045b0:	f007 fdb5 	bl	800c11e <HAL_TIM_Base_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80045ba:	f000 fa65 	bl	8004a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80045c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045c8:	4619      	mov	r1, r3
 80045ca:	482b      	ldr	r0, [pc, #172]	; (8004678 <MX_TIM8_Init+0x134>)
 80045cc:	f008 f9a4 	bl	800c918 <HAL_TIM_ConfigClockSource>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80045d6:	f000 fa57 	bl	8004a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80045da:	4827      	ldr	r0, [pc, #156]	; (8004678 <MX_TIM8_Init+0x134>)
 80045dc:	f007 fe56 	bl	800c28c <HAL_TIM_PWM_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80045e6:	f000 fa4f 	bl	8004a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045ea:	2320      	movs	r3, #32
 80045ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80045f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045f6:	4619      	mov	r1, r3
 80045f8:	481f      	ldr	r0, [pc, #124]	; (8004678 <MX_TIM8_Init+0x134>)
 80045fa:	f008 fd97 	bl	800d12c <HAL_TIMEx_MasterConfigSynchronization>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004604:	f000 fa40 	bl	8004a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004608:	2360      	movs	r3, #96	; 0x60
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004610:	2300      	movs	r3, #0
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004614:	2300      	movs	r3, #0
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800461c:	2300      	movs	r3, #0
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004628:	2200      	movs	r2, #0
 800462a:	4619      	mov	r1, r3
 800462c:	4812      	ldr	r0, [pc, #72]	; (8004678 <MX_TIM8_Init+0x134>)
 800462e:	f008 f8b1 	bl	800c794 <HAL_TIM_PWM_ConfigChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004638:	f000 fa26 	bl	8004a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004654:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4806      	ldr	r0, [pc, #24]	; (8004678 <MX_TIM8_Init+0x134>)
 8004660:	f008 fde0 	bl	800d224 <HAL_TIMEx_ConfigBreakDeadTime>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800466a:	f000 fa0d 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800466e:	bf00      	nop
 8004670:	3758      	adds	r7, #88	; 0x58
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	2000144c 	.word	0x2000144c
 800467c:	40010400 	.word	0x40010400

08004680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <MX_USART1_UART_Init+0x50>)
 8004688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 800468c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 800469a:	2200      	movs	r2, #0
 800469c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 80046a6:	220c      	movs	r2, #12
 80046a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046b6:	4805      	ldr	r0, [pc, #20]	; (80046cc <MX_USART1_UART_Init+0x4c>)
 80046b8:	f008 fe1a 	bl	800d2f0 <HAL_UART_Init>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80046c2:	f000 f9e1 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20001494 	.word	0x20001494
 80046d0:	40011000 	.word	0x40011000

080046d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <MX_USART2_UART_Init+0x50>)
 80046dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 80046e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 80046fa:	220c      	movs	r2, #12
 80046fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 8004706:	2200      	movs	r2, #0
 8004708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800470a:	4805      	ldr	r0, [pc, #20]	; (8004720 <MX_USART2_UART_Init+0x4c>)
 800470c:	f008 fdf0 	bl	800d2f0 <HAL_UART_Init>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004716:	f000 f9b7 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200014d8 	.word	0x200014d8
 8004724:	40004400 	.word	0x40004400

08004728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <MX_USART3_UART_Init+0x50>)
 8004730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 8004734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 8004742:	2200      	movs	r2, #0
 8004744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 8004748:	2200      	movs	r2, #0
 800474a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 800474e:	220c      	movs	r2, #12
 8004750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 8004754:	2200      	movs	r2, #0
 8004756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800475e:	4805      	ldr	r0, [pc, #20]	; (8004774 <MX_USART3_UART_Init+0x4c>)
 8004760:	f008 fdc6 	bl	800d2f0 <HAL_UART_Init>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800476a:	f000 f98d 	bl	8004a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000151c 	.word	0x2000151c
 8004778:	40004800 	.word	0x40004800

0800477c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <MX_DMA_Init+0x78>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <MX_DMA_Init+0x78>)
 800478c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <MX_DMA_Init+0x78>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <MX_DMA_Init+0x78>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <MX_DMA_Init+0x78>)
 80047a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047ac:	6313      	str	r3, [r2, #48]	; 0x30
 80047ae:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <MX_DMA_Init+0x78>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	200c      	movs	r0, #12
 80047c0:	f002 fbad 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80047c4:	200c      	movs	r0, #12
 80047c6:	f002 fbc6 	bl	8006f56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	2038      	movs	r0, #56	; 0x38
 80047d0:	f002 fba5 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80047d4:	2038      	movs	r0, #56	; 0x38
 80047d6:	f002 fbbe 	bl	8006f56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	203b      	movs	r0, #59	; 0x3b
 80047e0:	f002 fb9d 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80047e4:	203b      	movs	r0, #59	; 0x3b
 80047e6:	f002 fbb6 	bl	8006f56 <HAL_NVIC_EnableIRQ>

}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800

080047f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fe:	f107 031c 	add.w	r3, r7, #28
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	4b98      	ldr	r3, [pc, #608]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	4a97      	ldr	r2, [pc, #604]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004818:	f043 0310 	orr.w	r3, r3, #16
 800481c:	6313      	str	r3, [r2, #48]	; 0x30
 800481e:	4b95      	ldr	r3, [pc, #596]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	4b91      	ldr	r3, [pc, #580]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a90      	ldr	r2, [pc, #576]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b8e      	ldr	r3, [pc, #568]	; (8004a74 <MX_GPIO_Init+0x27c>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	4b8a      	ldr	r3, [pc, #552]	; (8004a74 <MX_GPIO_Init+0x27c>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	4a89      	ldr	r2, [pc, #548]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004854:	6313      	str	r3, [r2, #48]	; 0x30
 8004856:	4b87      	ldr	r3, [pc, #540]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	4b83      	ldr	r3, [pc, #524]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4a82      	ldr	r2, [pc, #520]	; (8004a74 <MX_GPIO_Init+0x27c>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6313      	str	r3, [r2, #48]	; 0x30
 8004872:	4b80      	ldr	r3, [pc, #512]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	4b7c      	ldr	r3, [pc, #496]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4a7b      	ldr	r2, [pc, #492]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	6313      	str	r3, [r2, #48]	; 0x30
 800488e:	4b79      	ldr	r3, [pc, #484]	; (8004a74 <MX_GPIO_Init+0x27c>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	4b75      	ldr	r3, [pc, #468]	; (8004a74 <MX_GPIO_Init+0x27c>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	4a74      	ldr	r2, [pc, #464]	; (8004a74 <MX_GPIO_Init+0x27c>)
 80048a4:	f043 0308 	orr.w	r3, r3, #8
 80048a8:	6313      	str	r3, [r2, #48]	; 0x30
 80048aa:	4b72      	ldr	r3, [pc, #456]	; (8004a74 <MX_GPIO_Init+0x27c>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STRIP_ESHDN_Pin|DMX_EN_Pin, GPIO_PIN_RESET);
 80048b6:	2200      	movs	r2, #0
 80048b8:	f240 4101 	movw	r1, #1025	; 0x401
 80048bc:	486e      	ldr	r0, [pc, #440]	; (8004a78 <MX_GPIO_Init+0x280>)
 80048be:	f004 fa55 	bl	8008d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 80048c2:	2200      	movs	r2, #0
 80048c4:	f24e 0101 	movw	r1, #57345	; 0xe001
 80048c8:	486c      	ldr	r0, [pc, #432]	; (8004a7c <MX_GPIO_Init+0x284>)
 80048ca:	f004 fa4f 	bl	8008d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 80048ce:	2201      	movs	r2, #1
 80048d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048d4:	4868      	ldr	r0, [pc, #416]	; (8004a78 <MX_GPIO_Init+0x280>)
 80048d6:	f004 fa49 	bl	8008d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LGT_EN3_GPIO_Port, LGT_EN3_Pin, GPIO_PIN_RESET);
 80048da:	2200      	movs	r2, #0
 80048dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048e0:	4867      	ldr	r0, [pc, #412]	; (8004a80 <MX_GPIO_Init+0x288>)
 80048e2:	f004 fa43 	bl	8008d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LGT_EN2_Pin|LGT_EN1_Pin, GPIO_PIN_RESET);
 80048e6:	2200      	movs	r2, #0
 80048e8:	2103      	movs	r1, #3
 80048ea:	4866      	ldr	r0, [pc, #408]	; (8004a84 <MX_GPIO_Init+0x28c>)
 80048ec:	f004 fa3e 	bl	8008d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JACK_SW_Pin */
  GPIO_InitStruct.Pin = JACK_SW_Pin;
 80048f0:	2308      	movs	r3, #8
 80048f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048f4:	2300      	movs	r3, #0
 80048f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JACK_SW_GPIO_Port, &GPIO_InitStruct);
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	4619      	mov	r1, r3
 8004902:	4860      	ldr	r0, [pc, #384]	; (8004a84 <MX_GPIO_Init+0x28c>)
 8004904:	f004 f896 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin DMX_EN_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin|DMX_EN_Pin;
 8004908:	f240 5301 	movw	r3, #1281	; 0x501
 800490c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490e:	2301      	movs	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800491a:	f107 031c 	add.w	r3, r7, #28
 800491e:	4619      	mov	r1, r3
 8004920:	4855      	ldr	r0, [pc, #340]	; (8004a78 <MX_GPIO_Init+0x280>)
 8004922:	f004 f887 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VAA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VAA_PG_Pin|STRIP_PG_Pin;
 8004926:	230e      	movs	r3, #14
 8004928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800492a:	2300      	movs	r3, #0
 800492c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004932:	f107 031c 	add.w	r3, r7, #28
 8004936:	4619      	mov	r1, r3
 8004938:	484f      	ldr	r0, [pc, #316]	; (8004a78 <MX_GPIO_Init+0x280>)
 800493a:	f004 f87b 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 800493e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004944:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800494a:	2301      	movs	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 800494e:	f107 031c 	add.w	r3, r7, #28
 8004952:	4619      	mov	r1, r3
 8004954:	484b      	ldr	r0, [pc, #300]	; (8004a84 <MX_GPIO_Init+0x28c>)
 8004956:	f004 f86d 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 800495a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8004968:	f107 031c 	add.w	r3, r7, #28
 800496c:	4619      	mov	r1, r3
 800496e:	4844      	ldr	r0, [pc, #272]	; (8004a80 <MX_GPIO_Init+0x288>)
 8004970:	f004 f860 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8004974:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800497a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800497e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	4619      	mov	r1, r3
 800498a:	483d      	ldr	r0, [pc, #244]	; (8004a80 <MX_GPIO_Init+0x288>)
 800498c:	f004 f852 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 8004990:	f641 7328 	movw	r3, #7976	; 0x1f28
 8004994:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004996:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800499a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800499c:	2301      	movs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049a0:	f107 031c 	add.w	r3, r7, #28
 80049a4:	4619      	mov	r1, r3
 80049a6:	4835      	ldr	r0, [pc, #212]	; (8004a7c <MX_GPIO_Init+0x284>)
 80049a8:	f004 f844 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 80049ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80049b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049b2:	2301      	movs	r3, #1
 80049b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ba:	2302      	movs	r3, #2
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049be:	f107 031c 	add.w	r3, r7, #28
 80049c2:	4619      	mov	r1, r3
 80049c4:	482d      	ldr	r0, [pc, #180]	; (8004a7c <MX_GPIO_Init+0x284>)
 80049c6:	f004 f835 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 80049ca:	f244 0301 	movw	r3, #16385	; 0x4001
 80049ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049d0:	2301      	movs	r3, #1
 80049d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d8:	2300      	movs	r3, #0
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049dc:	f107 031c 	add.w	r3, r7, #28
 80049e0:	4619      	mov	r1, r3
 80049e2:	4826      	ldr	r0, [pc, #152]	; (8004a7c <MX_GPIO_Init+0x284>)
 80049e4:	f004 f826 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80049e8:	2302      	movs	r3, #2
 80049ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ec:	2300      	movs	r3, #0
 80049ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80049f4:	f107 031c 	add.w	r3, r7, #28
 80049f8:	4619      	mov	r1, r3
 80049fa:	4820      	ldr	r0, [pc, #128]	; (8004a7c <MX_GPIO_Init+0x284>)
 80049fc:	f004 f81a 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LGT_EN3_Pin */
  GPIO_InitStruct.Pin = LGT_EN3_Pin;
 8004a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a06:	2301      	movs	r3, #1
 8004a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LGT_EN3_GPIO_Port, &GPIO_InitStruct);
 8004a12:	f107 031c 	add.w	r3, r7, #28
 8004a16:	4619      	mov	r1, r3
 8004a18:	4819      	ldr	r0, [pc, #100]	; (8004a80 <MX_GPIO_Init+0x288>)
 8004a1a:	f004 f80b 	bl	8008a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LGT_EN2_Pin LGT_EN1_Pin */
  GPIO_InitStruct.Pin = LGT_EN2_Pin|LGT_EN1_Pin;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a22:	2301      	movs	r3, #1
 8004a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a2e:	f107 031c 	add.w	r3, r7, #28
 8004a32:	4619      	mov	r1, r3
 8004a34:	4813      	ldr	r0, [pc, #76]	; (8004a84 <MX_GPIO_Init+0x28c>)
 8004a36:	f003 fffd 	bl	8008a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2009      	movs	r0, #9
 8004a40:	f002 fa6d 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004a44:	2009      	movs	r0, #9
 8004a46:	f002 fa86 	bl	8006f56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2017      	movs	r0, #23
 8004a50:	f002 fa65 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a54:	2017      	movs	r0, #23
 8004a56:	f002 fa7e 	bl	8006f56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2028      	movs	r0, #40	; 0x28
 8004a60:	f002 fa5d 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a64:	2028      	movs	r0, #40	; 0x28
 8004a66:	f002 fa76 	bl	8006f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004a6a:	bf00      	nop
 8004a6c:	3730      	adds	r7, #48	; 0x30
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020c00 	.word	0x40020c00
 8004a80:	40020400 	.word	0x40020400
 8004a84:	40021000 	.word	0x40021000

08004a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a8c:	b672      	cpsid	i
}
 8004a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <Error_Handler+0x1c>)
 8004a98:	f004 f968 	bl	8008d6c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8004a9c:	20c8      	movs	r0, #200	; 0xc8
 8004a9e:	f001 fc09 	bl	80062b4 <HAL_Delay>
	  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8004aa2:	e7f5      	b.n	8004a90 <Error_Handler+0x8>
 8004aa4:	40020800 	.word	0x40020800

08004aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <HAL_MspInit+0x58>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <HAL_MspInit+0x58>)
 8004ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004abc:	6453      	str	r3, [r2, #68]	; 0x44
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_MspInit+0x58>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_MspInit+0x58>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <HAL_MspInit+0x58>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_MspInit+0x58>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2100      	movs	r1, #0
 8004aea:	2005      	movs	r0, #5
 8004aec:	f002 fa17 	bl	8006f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004af0:	2005      	movs	r0, #5
 8004af2:	f002 fa30 	bl	8006f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800

08004b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0c:	f107 031c 	add.w	r3, r7, #28
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a4d      	ldr	r2, [pc, #308]	; (8004c58 <HAL_ADC_MspInit+0x154>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f040 8093 	bne.w	8004c4e <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	4b4b      	ldr	r3, [pc, #300]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	4a4a      	ldr	r2, [pc, #296]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b36:	6453      	str	r3, [r2, #68]	; 0x44
 8004b38:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	4b44      	ldr	r3, [pc, #272]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	4a43      	ldr	r2, [pc, #268]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6313      	str	r3, [r2, #48]	; 0x30
 8004b54:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b70:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	4a35      	ldr	r2, [pc, #212]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b86:	f043 0302 	orr.w	r3, r3, #2
 8004b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8c:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <HAL_ADC_MspInit+0x158>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOLID_LGTS_MON_Pin|STRIP_MON2_Pin|STRIP_MON1_Pin|STRIP_MON6_Pin
 8004b98:	23f1      	movs	r3, #241	; 0xf1
 8004b9a:	61fb      	str	r3, [r7, #28]
                          |STRIP_MON5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	f107 031c 	add.w	r3, r7, #28
 8004ba8:	4619      	mov	r1, r3
 8004baa:	482d      	ldr	r0, [pc, #180]	; (8004c60 <HAL_ADC_MspInit+0x15c>)
 8004bac:	f003 ff42 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON4_Pin|STRIP_MON3_Pin;
 8004bb0:	2330      	movs	r3, #48	; 0x30
 8004bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bbc:	f107 031c 	add.w	r3, r7, #28
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4828      	ldr	r0, [pc, #160]	; (8004c64 <HAL_ADC_MspInit+0x160>)
 8004bc4:	f003 ff36 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON8_Pin|STRIP_MON7_Pin;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4823      	ldr	r0, [pc, #140]	; (8004c68 <HAL_ADC_MspInit+0x164>)
 8004bdc:	f003 ff2a 	bl	8008a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004be0:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004be2:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <HAL_ADC_MspInit+0x16c>)
 8004be4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004be6:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bec:	4b1f      	ldr	r3, [pc, #124]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c06:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c14:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c22:	4812      	ldr	r0, [pc, #72]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c24:	f002 f9ce 	bl	8006fc4 <HAL_DMA_Init>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8004c2e:	f7ff ff2b 	bl	8004a88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
 8004c38:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <HAL_ADC_MspInit+0x168>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	2012      	movs	r0, #18
 8004c44:	f002 f96b 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004c48:	2012      	movs	r0, #18
 8004c4a:	f002 f984 	bl	8006f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c4e:	bf00      	nop
 8004c50:	3730      	adds	r7, #48	; 0x30
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40012000 	.word	0x40012000
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020000 	.word	0x40020000
 8004c64:	40020800 	.word	0x40020800
 8004c68:	40020400 	.word	0x40020400
 8004c6c:	20001068 	.word	0x20001068
 8004c70:	40026410 	.word	0x40026410

08004c74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0b      	ldr	r2, [pc, #44]	; (8004cb0 <HAL_CRC_MspInit+0x3c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10d      	bne.n	8004ca2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_CRC_MspInit+0x40>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <HAL_CRC_MspInit+0x40>)
 8004c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <HAL_CRC_MspInit+0x40>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40023000 	.word	0x40023000
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b09a      	sub	sp, #104	; 0x68
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cd0:	f107 0318 	add.w	r3, r7, #24
 8004cd4:	223c      	movs	r2, #60	; 0x3c
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f00b fa89 	bl	80101f0 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a50      	ldr	r2, [pc, #320]	; (8004e24 <HAL_FMPI2C_MspInit+0x16c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f040 8098 	bne.w	8004e1a <HAL_FMPI2C_MspInit+0x162>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8004cea:	2310      	movs	r3, #16
 8004cec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cf2:	f107 0318 	add.w	r3, r7, #24
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f005 f87a 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8004d02:	f7ff fec1 	bl	8004a88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a46      	ldr	r2, [pc, #280]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a3f      	ldr	r2, [pc, #252]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d42:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d44:	2312      	movs	r3, #18
 8004d46:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8004d50:	2304      	movs	r3, #4
 8004d52:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4834      	ldr	r0, [pc, #208]	; (8004e2c <HAL_FMPI2C_MspInit+0x174>)
 8004d5c:	f003 fe6a 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d64:	2312      	movs	r3, #18
 8004d66:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8004d70:	2304      	movs	r3, #4
 8004d72:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d78:	4619      	mov	r1, r3
 8004d7a:	482d      	ldr	r0, [pc, #180]	; (8004e30 <HAL_FMPI2C_MspInit+0x178>)
 8004d7c:	f003 fe5a 	bl	8008a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_FMPI2C_MspInit+0x170>)
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004d9e:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <HAL_FMPI2C_MspInit+0x180>)
 8004da0:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8004da2:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004da4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004da8:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004daa:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004db0:	4b20      	ldr	r3, [pc, #128]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004db6:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dbc:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dd6:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 8004dde:	4815      	ldr	r0, [pc, #84]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004de0:	f002 f8f0 	bl	8006fc4 <HAL_DMA_Init>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_FMPI2C_MspInit+0x136>
    {
      Error_Handler();
 8004dea:	f7ff fe4d 	bl	8004a88 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
 8004df4:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <HAL_FMPI2C_MspInit+0x17c>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	205f      	movs	r0, #95	; 0x5f
 8004e00:	f002 f88d 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 8004e04:	205f      	movs	r0, #95	; 0x5f
 8004e06:	f002 f8a6 	bl	8006f56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	2060      	movs	r0, #96	; 0x60
 8004e10:	f002 f885 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 8004e14:	2060      	movs	r0, #96	; 0x60
 8004e16:	f002 f89e 	bl	8006f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8004e1a:	bf00      	nop
 8004e1c:	3768      	adds	r7, #104	; 0x68
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40006000 	.word	0x40006000
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40020400 	.word	0x40020400
 8004e30:	40020800 	.word	0x40020800
 8004e34:	2000111c 	.word	0x2000111c
 8004e38:	40026028 	.word	0x40026028

08004e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e44:	f107 0314 	add.w	r3, r7, #20
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_I2C_MspInit+0x84>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d12b      	bne.n	8004eb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <HAL_I2C_MspInit+0x88>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_I2C_MspInit+0x88>)
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <HAL_I2C_MspInit+0x88>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e7a:	23c0      	movs	r3, #192	; 0xc0
 8004e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e7e:	2312      	movs	r3, #18
 8004e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e86:	2303      	movs	r3, #3
 8004e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8e:	f107 0314 	add.w	r3, r7, #20
 8004e92:	4619      	mov	r1, r3
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <HAL_I2C_MspInit+0x8c>)
 8004e96:	f003 fdcd 	bl	8008a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_I2C_MspInit+0x88>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <HAL_I2C_MspInit+0x88>)
 8004ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_I2C_MspInit+0x88>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004eb6:	bf00      	nop
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40005400 	.word	0x40005400
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40020400 	.word	0x40020400

08004ecc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b098      	sub	sp, #96	; 0x60
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ee4:	f107 0310 	add.w	r3, r7, #16
 8004ee8:	223c      	movs	r2, #60	; 0x3c
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f00b f97f 	bl	80101f0 <memset>
  if(hi2s->Instance==SPI5)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a3f      	ldr	r2, [pc, #252]	; (8004ff4 <HAL_I2S_MspInit+0x128>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d176      	bne.n	8004fea <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB2;
 8004efc:	2382      	movs	r3, #130	; 0x82
 8004efe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 52;
 8004f00:	2334      	movs	r3, #52	; 0x34
 8004f02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8004f04:	2308      	movs	r3, #8
 8004f06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8004f14:	2300      	movs	r3, #0
 8004f16:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f18:	f107 0310 	add.w	r3, r7, #16
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f004 ff67 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 8004f28:	f7ff fdae 	bl	8004a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <HAL_I2S_MspInit+0x12c>)
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	4a30      	ldr	r2, [pc, #192]	; (8004ff8 <HAL_I2S_MspInit+0x12c>)
 8004f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ff8 <HAL_I2S_MspInit+0x12c>)
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <HAL_I2S_MspInit+0x12c>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	4a29      	ldr	r2, [pc, #164]	; (8004ff8 <HAL_I2S_MspInit+0x12c>)
 8004f52:	f043 0310 	orr.w	r3, r3, #16
 8004f56:	6313      	str	r3, [r2, #48]	; 0x30
 8004f58:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_I2S_MspInit+0x12c>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	68bb      	ldr	r3, [r7, #8]
    /**I2S5 GPIO Configuration
    PE11     ------> I2S5_WS
    PE12     ------> I2S5_CK
    PE14     ------> I2S5_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8004f64:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8004f68:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f72:	2300      	movs	r3, #0
 8004f74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004f76:	2306      	movs	r3, #6
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f7e:	4619      	mov	r1, r3
 8004f80:	481e      	ldr	r0, [pc, #120]	; (8004ffc <HAL_I2S_MspInit+0x130>)
 8004f82:	f003 fd57 	bl	8008a34 <HAL_GPIO_Init>

    /* I2S5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 8004f86:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004f88:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_I2S_MspInit+0x138>)
 8004f8a:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004f8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f92:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f9a:	4b19      	ldr	r3, [pc, #100]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa6:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fae:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fb6:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fbe:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004fc6:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8004fce:	480c      	ldr	r0, [pc, #48]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fd0:	f001 fff8 	bl	8006fc4 <HAL_DMA_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 8004fda:	f7ff fd55 	bl	8004a88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi5_rx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a07      	ldr	r2, [pc, #28]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fe2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fe4:	4a06      	ldr	r2, [pc, #24]	; (8005000 <HAL_I2S_MspInit+0x134>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004fea:	bf00      	nop
 8004fec:	3760      	adds	r7, #96	; 0x60
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40015000 	.word	0x40015000
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40021000 	.word	0x40021000
 8005000:	20001218 	.word	0x20001218
 8005004:	40026458 	.word	0x40026458

08005008 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b092      	sub	sp, #72	; 0x48
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	223c      	movs	r2, #60	; 0x3c
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f00b f8e9 	bl	80101f0 <memset>
  if(hrtc->Instance==RTC)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a10      	ldr	r2, [pc, #64]	; (8005064 <HAL_RTC_MspInit+0x5c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d119      	bne.n	800505c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005028:	2308      	movs	r3, #8
 800502a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800502c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f004 feda 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005042:	f7ff fd21 	bl	8004a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <HAL_RTC_MspInit+0x60>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800504c:	2200      	movs	r2, #0
 800504e:	2100      	movs	r1, #0
 8005050:	2029      	movs	r0, #41	; 0x29
 8005052:	f001 ff64 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005056:	2029      	movs	r0, #41	; 0x29
 8005058:	f001 ff7d 	bl	8006f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800505c:	bf00      	nop
 800505e:	3748      	adds	r7, #72	; 0x48
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40002800 	.word	0x40002800
 8005068:	42470e3c 	.word	0x42470e3c

0800506c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b09a      	sub	sp, #104	; 0x68
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005084:	f107 0318 	add.w	r3, r7, #24
 8005088:	223c      	movs	r2, #60	; 0x3c
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f00b f8af 	bl	80101f0 <memset>
  if(hsd->Instance==SDIO)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a40      	ldr	r2, [pc, #256]	; (8005198 <HAL_SD_MspInit+0x12c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d178      	bne.n	800518e <HAL_SD_MspInit+0x122>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800509c:	2360      	movs	r3, #96	; 0x60
 800509e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80050a0:	2300      	movs	r3, #0
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80050a4:	2300      	movs	r3, #0
 80050a6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050a8:	f107 0318 	add.w	r3, r7, #24
 80050ac:	4618      	mov	r0, r3
 80050ae:	f004 fe9f 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80050b8:	f7ff fce6 	bl	8004a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	4b36      	ldr	r3, [pc, #216]	; (800519c <HAL_SD_MspInit+0x130>)
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	4a35      	ldr	r2, [pc, #212]	; (800519c <HAL_SD_MspInit+0x130>)
 80050c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050ca:	6453      	str	r3, [r2, #68]	; 0x44
 80050cc:	4b33      	ldr	r3, [pc, #204]	; (800519c <HAL_SD_MspInit+0x130>)
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_SD_MspInit+0x130>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	4a2e      	ldr	r2, [pc, #184]	; (800519c <HAL_SD_MspInit+0x130>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6313      	str	r3, [r2, #48]	; 0x30
 80050e8:	4b2c      	ldr	r3, [pc, #176]	; (800519c <HAL_SD_MspInit+0x130>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	4b28      	ldr	r3, [pc, #160]	; (800519c <HAL_SD_MspInit+0x130>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <HAL_SD_MspInit+0x130>)
 80050fe:	f043 0308 	orr.w	r3, r3, #8
 8005102:	6313      	str	r3, [r2, #48]	; 0x30
 8005104:	4b25      	ldr	r3, [pc, #148]	; (800519c <HAL_SD_MspInit+0x130>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	4b21      	ldr	r3, [pc, #132]	; (800519c <HAL_SD_MspInit+0x130>)
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	4a20      	ldr	r2, [pc, #128]	; (800519c <HAL_SD_MspInit+0x130>)
 800511a:	f043 0302 	orr.w	r3, r3, #2
 800511e:	6313      	str	r3, [r2, #48]	; 0x30
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <HAL_SD_MspInit+0x130>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800512c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005130:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005132:	2302      	movs	r3, #2
 8005134:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2300      	movs	r3, #0
 8005138:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800513a:	2303      	movs	r3, #3
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800513e:	230c      	movs	r3, #12
 8005140:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005142:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005146:	4619      	mov	r1, r3
 8005148:	4815      	ldr	r0, [pc, #84]	; (80051a0 <HAL_SD_MspInit+0x134>)
 800514a:	f003 fc73 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800514e:	2304      	movs	r3, #4
 8005150:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005152:	2302      	movs	r3, #2
 8005154:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515a:	2303      	movs	r3, #3
 800515c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800515e:	230c      	movs	r3, #12
 8005160:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005166:	4619      	mov	r1, r3
 8005168:	480e      	ldr	r0, [pc, #56]	; (80051a4 <HAL_SD_MspInit+0x138>)
 800516a:	f003 fc63 	bl	8008a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800516e:	2310      	movs	r3, #16
 8005170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	2302      	movs	r3, #2
 8005174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005176:	2300      	movs	r3, #0
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800517a:	2303      	movs	r3, #3
 800517c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800517e:	230c      	movs	r3, #12
 8005180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005186:	4619      	mov	r1, r3
 8005188:	4807      	ldr	r0, [pc, #28]	; (80051a8 <HAL_SD_MspInit+0x13c>)
 800518a:	f003 fc53 	bl	8008a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800518e:	bf00      	nop
 8005190:	3768      	adds	r7, #104	; 0x68
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40023800 	.word	0x40023800
 80051a0:	40020800 	.word	0x40020800
 80051a4:	40020c00 	.word	0x40020c00
 80051a8:	40020400 	.word	0x40020400

080051ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_SPI_MspInit+0x84>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d12b      	bne.n	8005226 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051dc:	6453      	str	r3, [r2, #68]	; 0x44
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051f4:	f043 0310 	orr.w	r3, r3, #16
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GRAPH_CLK_Pin|GRAPH_SDI_Pin;
 8005206:	2344      	movs	r3, #68	; 0x44
 8005208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520a:	2302      	movs	r3, #2
 800520c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005212:	2303      	movs	r3, #3
 8005214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005216:	2305      	movs	r3, #5
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800521a:	f107 0314 	add.w	r3, r7, #20
 800521e:	4619      	mov	r1, r3
 8005220:	4805      	ldr	r0, [pc, #20]	; (8005238 <HAL_SPI_MspInit+0x8c>)
 8005222:	f003 fc07 	bl	8008a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005226:	bf00      	nop
 8005228:	3728      	adds	r7, #40	; 0x28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40013400 	.word	0x40013400
 8005234:	40023800 	.word	0x40023800
 8005238:	40021000 	.word	0x40021000

0800523c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <HAL_TIM_Base_MspInit+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10e      	bne.n	800526c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6453      	str	r3, [r2, #68]	; 0x44
 800525e:	4b28      	ldr	r3, [pc, #160]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800526a:	e042      	b.n	80052f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a24      	ldr	r2, [pc, #144]	; (8005304 <HAL_TIM_Base_MspInit+0xc8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
}
 8005292:	e02e      	b.n	80052f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIM_Base_MspInit+0xcc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d116      	bne.n	80052cc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 80052a8:	f043 0310 	orr.w	r3, r3, #16
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	2036      	movs	r0, #54	; 0x36
 80052c0:	f001 fe2d 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80052c4:	2036      	movs	r0, #54	; 0x36
 80052c6:	f001 fe46 	bl	8006f56 <HAL_NVIC_EnableIRQ>
}
 80052ca:	e012      	b.n	80052f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0e      	ldr	r2, [pc, #56]	; (800530c <HAL_TIM_Base_MspInit+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10d      	bne.n	80052f2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	6453      	str	r3, [r2, #68]	; 0x44
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_TIM_Base_MspInit+0xc4>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40023800 	.word	0x40023800
 8005304:	40000400 	.word	0x40000400
 8005308:	40001000 	.word	0x40001000
 800530c:	40010400 	.word	0x40010400

08005310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	; 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <HAL_TIM_MspPostInit+0xb4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d11f      	bne.n	8005372 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_TIM_MspPostInit+0xb8>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <HAL_TIM_MspPostInit+0xb8>)
 800533c:	f043 0310 	orr.w	r3, r3, #16
 8005340:	6313      	str	r3, [r2, #48]	; 0x30
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <HAL_TIM_MspPostInit+0xb8>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = XLR_SEL_IND_Pin|HP_SEL_IND_Pin;
 800534e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8005352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535c:	2300      	movs	r3, #0
 800535e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005360:	2301      	movs	r3, #1
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	4619      	mov	r1, r3
 800536a:	4818      	ldr	r0, [pc, #96]	; (80053cc <HAL_TIM_MspPostInit+0xbc>)
 800536c:	f003 fb62 	bl	8008a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005370:	e023      	b.n	80053ba <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <HAL_TIM_MspPostInit+0xc0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d11e      	bne.n	80053ba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <HAL_TIM_MspPostInit+0xb8>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <HAL_TIM_MspPostInit+0xb8>)
 8005386:	f043 0304 	orr.w	r3, r3, #4
 800538a:	6313      	str	r3, [r2, #48]	; 0x30
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <HAL_TIM_MspPostInit+0xb8>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 8005398:	f44f 7310 	mov.w	r3, #576	; 0x240
 800539c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539e:	2302      	movs	r3, #2
 80053a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a6:	2300      	movs	r3, #0
 80053a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053aa:	2302      	movs	r3, #2
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ae:	f107 0314 	add.w	r3, r7, #20
 80053b2:	4619      	mov	r1, r3
 80053b4:	4807      	ldr	r0, [pc, #28]	; (80053d4 <HAL_TIM_MspPostInit+0xc4>)
 80053b6:	f003 fb3d 	bl	8008a34 <HAL_GPIO_Init>
}
 80053ba:	bf00      	nop
 80053bc:	3728      	adds	r7, #40	; 0x28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40020800 	.word	0x40020800

080053d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08e      	sub	sp, #56	; 0x38
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_UART_MspInit+0x1bc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d135      	bne.n	8005466 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	4b66      	ldr	r3, [pc, #408]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	4a65      	ldr	r2, [pc, #404]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005404:	f043 0310 	orr.w	r3, r3, #16
 8005408:	6453      	str	r3, [r2, #68]	; 0x44
 800540a:	4b63      	ldr	r3, [pc, #396]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	4b5f      	ldr	r3, [pc, #380]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a5e      	ldr	r2, [pc, #376]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b5c      	ldr	r3, [pc, #368]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 8005432:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005438:	2302      	movs	r3, #2
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543c:	2300      	movs	r3, #0
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005440:	2303      	movs	r3, #3
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005444:	2307      	movs	r3, #7
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544c:	4619      	mov	r1, r3
 800544e:	4853      	ldr	r0, [pc, #332]	; (800559c <HAL_UART_MspInit+0x1c4>)
 8005450:	f003 faf0 	bl	8008a34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005454:	2200      	movs	r2, #0
 8005456:	2100      	movs	r1, #0
 8005458:	2025      	movs	r0, #37	; 0x25
 800545a:	f001 fd60 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800545e:	2025      	movs	r0, #37	; 0x25
 8005460:	f001 fd79 	bl	8006f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005464:	e092      	b.n	800558c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4d      	ldr	r2, [pc, #308]	; (80055a0 <HAL_UART_MspInit+0x1c8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d134      	bne.n	80054da <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	4b48      	ldr	r3, [pc, #288]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	4a47      	ldr	r2, [pc, #284]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 800547a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547e:	6413      	str	r3, [r2, #64]	; 0x40
 8005480:	4b45      	ldr	r3, [pc, #276]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	4b41      	ldr	r3, [pc, #260]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4a40      	ldr	r2, [pc, #256]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6313      	str	r3, [r2, #48]	; 0x30
 800549c:	4b3e      	ldr	r3, [pc, #248]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 80054a8:	230c      	movs	r3, #12
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ac:	2302      	movs	r3, #2
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054b4:	2303      	movs	r3, #3
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054b8:	2307      	movs	r3, #7
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c0:	4619      	mov	r1, r3
 80054c2:	4836      	ldr	r0, [pc, #216]	; (800559c <HAL_UART_MspInit+0x1c4>)
 80054c4:	f003 fab6 	bl	8008a34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2100      	movs	r1, #0
 80054cc:	2026      	movs	r0, #38	; 0x26
 80054ce:	f001 fd26 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054d2:	2026      	movs	r0, #38	; 0x26
 80054d4:	f001 fd3f 	bl	8006f56 <HAL_NVIC_EnableIRQ>
}
 80054d8:	e058      	b.n	800558c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_UART_MspInit+0x1cc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d153      	bne.n	800558c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 80054ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f2:	6413      	str	r3, [r2, #64]	; 0x40
 80054f4:	4b28      	ldr	r3, [pc, #160]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 800550a:	f043 0302 	orr.w	r3, r3, #2
 800550e:	6313      	str	r3, [r2, #48]	; 0x30
 8005510:	4b21      	ldr	r3, [pc, #132]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800551c:	2300      	movs	r3, #0
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 8005526:	f043 0304 	orr.w	r3, r3, #4
 800552a:	6313      	str	r3, [r2, #48]	; 0x30
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_UART_MspInit+0x1c0>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8005538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553e:	2302      	movs	r3, #2
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005542:	2300      	movs	r3, #0
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005546:	2303      	movs	r3, #3
 8005548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800554a:	2307      	movs	r3, #7
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 800554e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005552:	4619      	mov	r1, r3
 8005554:	4814      	ldr	r0, [pc, #80]	; (80055a8 <HAL_UART_MspInit+0x1d0>)
 8005556:	f003 fa6d 	bl	8008a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 800555a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005560:	2302      	movs	r3, #2
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005564:	2300      	movs	r3, #0
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005568:	2303      	movs	r3, #3
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800556c:	2307      	movs	r3, #7
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 8005570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005574:	4619      	mov	r1, r3
 8005576:	480d      	ldr	r0, [pc, #52]	; (80055ac <HAL_UART_MspInit+0x1d4>)
 8005578:	f003 fa5c 	bl	8008a34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800557c:	2200      	movs	r2, #0
 800557e:	2100      	movs	r1, #0
 8005580:	2027      	movs	r0, #39	; 0x27
 8005582:	f001 fccc 	bl	8006f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005586:	2027      	movs	r0, #39	; 0x27
 8005588:	f001 fce5 	bl	8006f56 <HAL_NVIC_EnableIRQ>
}
 800558c:	bf00      	nop
 800558e:	3738      	adds	r7, #56	; 0x38
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40011000 	.word	0x40011000
 8005598:	40023800 	.word	0x40023800
 800559c:	40020000 	.word	0x40020000
 80055a0:	40004400 	.word	0x40004400
 80055a4:	40004800 	.word	0x40004800
 80055a8:	40020400 	.word	0x40020400
 80055ac:	40020800 	.word	0x40020800

080055b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055b4:	e7fe      	b.n	80055b4 <NMI_Handler+0x4>

080055b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  Error_Handler();
 80055ba:	f7ff fa65 	bl	8004a88 <Error_Handler>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055be:	e7fe      	b.n	80055be <HardFault_Handler+0x8>

080055c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055c4:	e7fe      	b.n	80055c4 <MemManage_Handler+0x4>

080055c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  Error_Handler();
 80055ca:	f7ff fa5d 	bl	8004a88 <Error_Handler>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ce:	e7fe      	b.n	80055ce <BusFault_Handler+0x8>

080055d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  Error_Handler();
 80055d4:	f7ff fa58 	bl	8004a88 <Error_Handler>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055d8:	e7fe      	b.n	80055d8 <UsageFault_Handler+0x8>

080055da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005608:	f7fe fa12 	bl	8003a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800560c:	bf00      	nop
 800560e:	bd80      	pop	{r7, pc}

08005610 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 8005622:	2008      	movs	r0, #8
 8005624:	f003 fbbc 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8005628:	bf00      	nop
 800562a:	bd80      	pop	{r7, pc}

0800562c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 8005630:	4802      	ldr	r0, [pc, #8]	; (800563c <DMA1_Stream1_IRQHandler+0x10>)
 8005632:	f001 fe5f 	bl	80072f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	2000111c 	.word	0x2000111c

08005640 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005644:	4802      	ldr	r0, [pc, #8]	; (8005650 <ADC_IRQHandler+0x10>)
 8005646:	f000 febf 	bl	80063c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20001004 	.word	0x20001004

08005654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 8005658:	2020      	movs	r0, #32
 800565a:	f003 fba1 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 800565e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005662:	f003 fb9d 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 8005666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800566a:	f003 fb99 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005678:	4802      	ldr	r0, [pc, #8]	; (8005684 <USART1_IRQHandler+0x10>)
 800567a:	f007 ffbb 	bl	800d5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20001494 	.word	0x20001494

08005688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800568c:	4802      	ldr	r0, [pc, #8]	; (8005698 <USART2_IRQHandler+0x10>)
 800568e:	f007 ffb1 	bl	800d5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	200014d8 	.word	0x200014d8

0800569c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80056a0:	4802      	ldr	r0, [pc, #8]	; (80056ac <USART3_IRQHandler+0x10>)
 80056a2:	f007 ffa7 	bl	800d5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	2000151c 	.word	0x2000151c

080056b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 80056b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056b8:	f003 fb72 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 80056bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056c0:	f003 fb6e 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 80056c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80056c8:	f003 fb6a 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80056cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056d0:	f003 fb66 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 80056d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056d8:	f003 fb62 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 80056dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056e0:	f003 fb5e 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056e4:	bf00      	nop
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <RTC_Alarm_IRQHandler+0x10>)
 80056ee:	f005 fc09 	bl	800af04 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20001278 	.word	0x20001278

080056fc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <TIM6_IRQHandler+0x10>)
 8005702:	f006 ff3f 	bl	800c584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20001404 	.word	0x20001404

08005710 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005714:	4802      	ldr	r0, [pc, #8]	; (8005720 <DMA2_Stream0_IRQHandler+0x10>)
 8005716:	f001 fded 	bl	80072f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20001068 	.word	0x20001068

08005724 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <DMA2_Stream3_IRQHandler+0x10>)
 800572a:	f001 fde3 	bl	80072f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20001218 	.word	0x20001218

08005738 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 800573c:	4802      	ldr	r0, [pc, #8]	; (8005748 <FMPI2C1_EV_IRQHandler+0x10>)
 800573e:	f002 f9d5 	bl	8007aec <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8005742:	bf00      	nop
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200010d0 	.word	0x200010d0

0800574c <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <FMPI2C1_ER_IRQHandler+0x10>)
 8005752:	f002 f9e5 	bl	8007b20 <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200010d0 	.word	0x200010d0

08005760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return 1;
 8005764:	2301      	movs	r3, #1
}
 8005766:	4618      	mov	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_kill>:

int _kill(int pid, int sig)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800577a:	f00a fcff 	bl	801017c <__errno>
 800577e:	4603      	mov	r3, r0
 8005780:	2216      	movs	r2, #22
 8005782:	601a      	str	r2, [r3, #0]
  return -1;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <_exit>:

void _exit (int status)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005798:	f04f 31ff 	mov.w	r1, #4294967295
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ffe7 	bl	8005770 <_kill>
  while (1) {}    /* Make sure we hang here */
 80057a2:	e7fe      	b.n	80057a2 <_exit+0x12>

080057a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057ac:	4a14      	ldr	r2, [pc, #80]	; (8005800 <_sbrk+0x5c>)
 80057ae:	4b15      	ldr	r3, [pc, #84]	; (8005804 <_sbrk+0x60>)
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057b8:	4b13      	ldr	r3, [pc, #76]	; (8005808 <_sbrk+0x64>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <_sbrk+0x64>)
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <_sbrk+0x68>)
 80057c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <_sbrk+0x64>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d207      	bcs.n	80057e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057d4:	f00a fcd2 	bl	801017c <__errno>
 80057d8:	4603      	mov	r3, r0
 80057da:	220c      	movs	r2, #12
 80057dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	e009      	b.n	80057f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057e4:	4b08      	ldr	r3, [pc, #32]	; (8005808 <_sbrk+0x64>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <_sbrk+0x64>)
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	4a05      	ldr	r2, [pc, #20]	; (8005808 <_sbrk+0x64>)
 80057f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20040000 	.word	0x20040000
 8005804:	00000400 	.word	0x00000400
 8005808:	20001568 	.word	0x20001568
 800580c:	20001598 	.word	0x20001598

08005810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <SystemInit+0x20>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <SystemInit+0x20>)
 800581c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005824:	bf00      	nop
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <_ZN6ButtonD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Button.h>

Button::~Button()
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	4a05      	ldr	r2, [pc, #20]	; (8005854 <_ZN6ButtonD1Ev+0x20>)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f86b 	bl	8005920 <_ZN7ControlD1Ev>
{
}
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	08010d50 	.word	0x08010d50

08005858 <_ZN6ButtonD0Ev>:
Button::~Button()
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
}
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ffe7 	bl	8005834 <_ZN6ButtonD1Ev>
 8005866:	2118      	movs	r1, #24
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f009 fd14 	bl	800f296 <_ZdlPvj>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <_ZN6Button11UpdateStateEv>:
{
	this->pressActive = press;
}

void Button::UpdateState()
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	this->nxt->SetClick(this->ID, this->pressActive);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6898      	ldr	r0, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7919      	ldrb	r1, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	7c9b      	ldrb	r3, [r3, #18]
 800588c:	461a      	mov	r2, r3
 800588e:	f7fd fb45 	bl	8002f1c <_ZN7Nextion8SetClickEhb>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <_ZN6Button3ActEv>:

void Button::Act()
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
	if (this->btnAction != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <_ZN6Button3ActEv+0x16>
	{
		this->btnAction();
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	4798      	blx	r3
	}
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <_ZN9Component3ActEv>:
	virtual ~Component();

	uint8_t ID;
	bool IsActive = false;

	virtual void Act() {};
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <_ZN7Control11UpdateStateEv>:
	bool CheckNav(uint8_t &x, uint8_t &y) { return x == this->navXIndex && y == this->navYIndex; };

	uint8_t GetNavX() { return this->navXIndex; };
	uint8_t GetNavY() { return this->navYIndex; };

	virtual void UpdateState() {};
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <_ZN9ComponentD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Component.h>

Component::~Component()
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	4a04      	ldr	r2, [pc, #16]	; (80058fc <_ZN9ComponentD1Ev+0x1c>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
{
}
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	08010d70 	.word	0x08010d70

08005900 <_ZN9ComponentD0Ev>:
Component::~Component()
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
}
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ffe9 	bl	80058e0 <_ZN9ComponentD1Ev>
 800590e:	210c      	movs	r1, #12
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f009 fcc0 	bl	800f296 <_ZdlPvj>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <_ZN7ControlD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Control.h>

Control::~Control()
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	4a05      	ldr	r2, [pc, #20]	; (8005940 <_ZN7ControlD1Ev+0x20>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff ffd5 	bl	80058e0 <_ZN9ComponentD1Ev>
{
}
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	08010d84 	.word	0x08010d84

08005944 <_ZN7ControlD0Ev>:
Control::~Control()
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
}
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ffe7 	bl	8005920 <_ZN7ControlD1Ev>
 8005952:	2114      	movs	r1, #20
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f009 fc9e 	bl	800f296 <_ZdlPvj>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZN7Control6SetNavEv>:

void Control::SetNav()
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	if (!this->IsActive) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	795b      	ldrb	r3, [r3, #5]
 8005970:	f083 0301 	eor.w	r3, r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <_ZN7Control6SetNavEv+0x2c>
		this->IsActive = true;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	715a      	strb	r2, [r3, #5]
		this->nxt->SetClick(ID, true);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6898      	ldr	r0, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	4619      	mov	r1, r3
 800598c:	f7fd fac6 	bl	8002f1c <_ZN7Nextion8SetClickEhb>
	}
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <_ZN7Control8ClearNavEv>:

void Control::ClearNav()
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	if (this->IsActive)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	795b      	ldrb	r3, [r3, #5]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <_ZN7Control8ClearNavEv+0x26>
	{
		this->IsActive = false;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	715a      	strb	r2, [r3, #5]
		this->nxt->SetClick(ID, false);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6898      	ldr	r0, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	791b      	ldrb	r3, [r3, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	4619      	mov	r1, r3
 80059ba:	f7fd faaf 	bl	8002f1c <_ZN7Nextion8SetClickEhb>
	}
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <_ZN7Control8CheckNavERhS0_>:
	bool CheckNav(uint8_t &x, uint8_t &y) { return x == this->navXIndex && y == this->navYIndex; };
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	7c1b      	ldrb	r3, [r3, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d107      	bne.n	80059ee <_ZN7Control8CheckNavERhS0_+0x28>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	7c5b      	ldrb	r3, [r3, #17]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d101      	bne.n	80059ee <_ZN7Control8CheckNavERhS0_+0x28>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <_ZN7Control8CheckNavERhS0_+0x2a>
 80059ee:	2300      	movs	r3, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <_ZN7Control7GetNavXEv>:
	uint8_t GetNavX() { return this->navXIndex; };
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7c1b      	ldrb	r3, [r3, #16]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <_ZN7Control7GetNavYEv>:
	uint8_t GetNavY() { return this->navYIndex; };
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7c5b      	ldrb	r3, [r3, #17]
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>:
 *      Author: Daxxn
 */

#include <Screen/Page.h>

Page::Page(Nextion *nxt, uint8_t id, Button *btns, int btnCount, PageButton *pageBtns, int pageBtnCount): Component(nxt, id)
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	71fb      	strb	r3, [r7, #7]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	79fa      	ldrb	r2, [r7, #7]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fb fbfe 	bl	8001244 <_ZN9ComponentC1EP7Nextionh>
 8005a48:	4a49      	ldr	r2, [pc, #292]	; (8005b70 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x144>)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]
{
	this->buttons = btns;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	619a      	str	r2, [r3, #24]
	this->pageButtons = pageBtns;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a58:	615a      	str	r2, [r3, #20]
	this->pageBtnCount = pageBtnCount;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24
	this->btnCount = btnCount;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	621a      	str	r2, [r3, #32]
	this->progBars = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	61da      	str	r2, [r3, #28]
	this->pbCount = 0;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28

	this->CurrentControl = &btns[0];
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	611a      	str	r2, [r3, #16]

	uint8_t temp1 = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	74bb      	strb	r3, [r7, #18]
	int i = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
	for (i = 0; i < btnCount; ++i) {
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	da31      	bge.n	8005af4 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xc8>
		temp1 = this->buttons[i].GetNavX();
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6999      	ldr	r1, [r3, #24]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4613      	mov	r3, r2
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff ffab 	bl	80059fc <_ZN7Control7GetNavXEv>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	74fb      	strb	r3, [r7, #19]
		if (this->maxXNav < temp1)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005ab0:	7cfa      	ldrb	r2, [r7, #19]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d903      	bls.n	8005abe <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x92>
		{
			this->maxXNav = temp1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	7cfa      	ldrb	r2, [r7, #19]
 8005aba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
		temp1 = this->buttons[i].GetNavY();
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	440b      	add	r3, r1
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ffa0 	bl	8005a14 <_ZN7Control7GetNavYEv>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	74fb      	strb	r3, [r7, #19]
		if (this->maxYNav < temp1)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ade:	7cfa      	ldrb	r2, [r7, #19]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xc0>
		{
			this->maxYNav = temp1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	7cfa      	ldrb	r2, [r7, #19]
 8005ae8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (i = 0; i < btnCount; ++i) {
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3301      	adds	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e7c9      	b.n	8005a88 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x5c>
		}
	}
	for (i = 0; i < pageBtnCount; ++i)
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	429a      	cmp	r2, r3
 8005afe:	da31      	bge.n	8005b64 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x138>
	{
		temp2 = this->pageButtons[i].GetNavX();
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6959      	ldr	r1, [r3, #20]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4613      	mov	r3, r2
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	440b      	add	r3, r1
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff ff73 	bl	80059fc <_ZN7Control7GetNavXEv>
 8005b16:	4603      	mov	r3, r0
 8005b18:	74bb      	strb	r3, [r7, #18]
		if (this->maxXNav < temp2)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005b20:	7cba      	ldrb	r2, [r7, #18]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d903      	bls.n	8005b2e <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x102>
		{
			this->maxXNav = temp2;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	7cba      	ldrb	r2, [r7, #18]
 8005b2a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
		temp2 = this->pageButtons[i].GetNavY();
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6959      	ldr	r1, [r3, #20]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff ff68 	bl	8005a14 <_ZN7Control7GetNavYEv>
 8005b44:	4603      	mov	r3, r0
 8005b46:	74bb      	strb	r3, [r7, #18]
		if (this->maxYNav < temp2)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b4e:	7cba      	ldrb	r2, [r7, #18]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d903      	bls.n	8005b5c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x130>
		{
			this->maxYNav = temp2;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	7cba      	ldrb	r2, [r7, #18]
 8005b58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (i = 0; i < pageBtnCount; ++i)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e7c9      	b.n	8005af8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xcc>
		}
	}
}
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08010da4 	.word	0x08010da4

08005b74 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari>:

Page::Page(
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	71fb      	strb	r3, [r7, #7]
		int btnCount,
		PageButton *pageBtns,
		int pageBtnCount,
		ProgressBar *progBars,
		int pbCount
	): Component(nxt, id)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	79fa      	ldrb	r2, [r7, #7]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fb fb5a 	bl	8001244 <_ZN9ComponentC1EP7Nextionh>
 8005b90:	4a43      	ldr	r2, [pc, #268]	; (8005ca0 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x12c>)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]
{
	this->buttons = btns;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	619a      	str	r2, [r3, #24]
	this->pageButtons = pageBtns;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	615a      	str	r2, [r3, #20]
	this->progBars = progBars;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba6:	61da      	str	r2, [r3, #28]
	this->btnCount = btnCount;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	621a      	str	r2, [r3, #32]
	this->pageBtnCount = pageBtnCount;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb2:	625a      	str	r2, [r3, #36]	; 0x24
	this->pbCount = pbCount;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28

	this->CurrentControl = &btns[0];
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	611a      	str	r2, [r3, #16]

	uint8_t temp1 = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	74bb      	strb	r3, [r7, #18]
	for (int i = 0; i < btnCount; ++i) {
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	da60      	bge.n	8005c96 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x122>
		temp1 = this->buttons[i].GetNavX();
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6999      	ldr	r1, [r3, #24]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff09 	bl	80059fc <_ZN7Control7GetNavXEv>
 8005bea:	4603      	mov	r3, r0
 8005bec:	74fb      	strb	r3, [r7, #19]
		temp2 = this->pageButtons[i].GetNavX();
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	440b      	add	r3, r1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fefc 	bl	80059fc <_ZN7Control7GetNavXEv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	74bb      	strb	r3, [r7, #18]
		if (this->maxXNav < temp1)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005c0e:	7cfa      	ldrb	r2, [r7, #19]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d904      	bls.n	8005c1e <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xaa>
		{
			this->maxXNav = temp1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	7cfa      	ldrb	r2, [r7, #19]
 8005c18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8005c1c:	e009      	b.n	8005c32 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xbe>
		}
		else if (this->maxXNav < temp2)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005c24:	7cba      	ldrb	r2, [r7, #18]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d903      	bls.n	8005c32 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xbe>
		{
			this->maxXNav = temp2;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	7cba      	ldrb	r2, [r7, #18]
 8005c2e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
		temp1 = this->buttons[i].GetNavY();
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6999      	ldr	r1, [r3, #24]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	440b      	add	r3, r1
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fee6 	bl	8005a14 <_ZN7Control7GetNavYEv>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	74fb      	strb	r3, [r7, #19]
		temp2 = this->pageButtons[i].GetNavY();
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6959      	ldr	r1, [r3, #20]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4613      	mov	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4413      	add	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	440b      	add	r3, r1
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fed9 	bl	8005a14 <_ZN7Control7GetNavYEv>
 8005c62:	4603      	mov	r3, r0
 8005c64:	74bb      	strb	r3, [r7, #18]
		if (this->maxYNav < temp1)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c6c:	7cfa      	ldrb	r2, [r7, #19]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d903      	bls.n	8005c7a <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x106>
		{
			this->maxYNav = temp1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	7cfa      	ldrb	r2, [r7, #19]
 8005c76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}
		if (this->maxYNav < temp2)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c80:	7cba      	ldrb	r2, [r7, #18]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d903      	bls.n	8005c8e <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x11a>
		{
			this->maxYNav = temp2;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	7cba      	ldrb	r2, [r7, #18]
 8005c8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (int i = 0; i < btnCount; ++i) {
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	3301      	adds	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e79a      	b.n	8005bcc <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x58>
		}
	}
}
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	08010da4 	.word	0x08010da4

08005ca4 <_ZN4PageD1Ev>:


Page::~Page()
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	4a46      	ldr	r2, [pc, #280]	; (8005dc8 <_ZN4PageD1Ev+0x124>)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
{
	delete[] this->buttons;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d024      	beq.n	8005d04 <_ZN4PageD1Ev+0x60>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	3b04      	subs	r3, #4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	18cc      	adds	r4, r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d005      	beq.n	8005ce4 <_ZN4PageD1Ev+0x40>
 8005cd8:	3c18      	subs	r4, #24
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4798      	blx	r3
 8005ce2:	e7f5      	b.n	8005cd0 <_ZN4PageD1Ev+0x2c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f1a3 0008 	sub.w	r0, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f009 facd 	bl	800f29e <_ZdaPvj>
	delete[] this->pageButtons;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d024      	beq.n	8005d56 <_ZN4PageD1Ev+0xb2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6959      	ldr	r1, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	3b04      	subs	r3, #4
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	18cc      	adds	r4, r1, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	429c      	cmp	r4, r3
 8005d28:	d005      	beq.n	8005d36 <_ZN4PageD1Ev+0x92>
 8005d2a:	3c18      	subs	r4, #24
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4620      	mov	r0, r4
 8005d32:	4798      	blx	r3
 8005d34:	e7f5      	b.n	8005d22 <_ZN4PageD1Ev+0x7e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f1a3 0008 	sub.w	r0, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	3b04      	subs	r3, #4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	3308      	adds	r3, #8
 8005d50:	4619      	mov	r1, r3
 8005d52:	f009 faa4 	bl	800f29e <_ZdaPvj>
	delete[] this->progBars;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d024      	beq.n	8005da8 <_ZN4PageD1Ev+0x104>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69d9      	ldr	r1, [r3, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	3b04      	subs	r3, #4
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	18cc      	adds	r4, r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	429c      	cmp	r4, r3
 8005d7a:	d005      	beq.n	8005d88 <_ZN4PageD1Ev+0xe4>
 8005d7c:	3c14      	subs	r4, #20
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4620      	mov	r0, r4
 8005d84:	4798      	blx	r3
 8005d86:	e7f5      	b.n	8005d74 <_ZN4PageD1Ev+0xd0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f1a3 0008 	sub.w	r0, r3, #8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	3308      	adds	r3, #8
 8005da2:	4619      	mov	r1, r3
 8005da4:	f009 fa7b 	bl	800f29e <_ZdaPvj>
	this->CurrentControl = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]
	this->nxt = NULL;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
Page::~Page()
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fd92 	bl	80058e0 <_ZN9ComponentD1Ev>
}
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	08010da4 	.word	0x08010da4

08005dcc <_ZN4PageD0Ev>:
Page::~Page()
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
}
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ff65 	bl	8005ca4 <_ZN4PageD1Ev>
 8005dda:	2130      	movs	r1, #48	; 0x30
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f009 fa5a 	bl	800f296 <_ZdlPvj>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZN4Page8NavigateEaa>:

void Page::Navigate(int8_t x, int8_t y)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	70bb      	strb	r3, [r7, #2]
	int8_t tempX = x + this->currentXNav;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	4413      	add	r3, r2
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	72fb      	strb	r3, [r7, #11]
	int8_t tempY = y + this->currentYNav;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005e10:	78bb      	ldrb	r3, [r7, #2]
 8005e12:	4413      	add	r3, r2
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	72bb      	strb	r3, [r7, #10]
	if (tempX > this->maxXNav || tempX < 0)
 8005e18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005e22:	4293      	cmp	r3, r2
 8005e24:	dc03      	bgt.n	8005e2e <_ZN4Page8NavigateEaa+0x42>
 8005e26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da0c      	bge.n	8005e48 <_ZN4Page8NavigateEaa+0x5c>
	{
		this->currentXNav = this->WrapXNav ? 0 : this->maxXNav;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7b1b      	ldrb	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <_ZN4Page8NavigateEaa+0x4e>
 8005e36:	2200      	movs	r2, #0
 8005e38:	e002      	b.n	8005e40 <_ZN4Page8NavigateEaa+0x54>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005e46:	e003      	b.n	8005e50 <_ZN4Page8NavigateEaa+0x64>
	}
	else
	{
		this->currentXNav = tempX;
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if (tempY > this->maxYNav || tempY < 0)
 8005e50:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	dc03      	bgt.n	8005e66 <_ZN4Page8NavigateEaa+0x7a>
 8005e5e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da0c      	bge.n	8005e80 <_ZN4Page8NavigateEaa+0x94>
	{
		this->currentYNav = this->WrapYNav ? 0 : this->maxYNav;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7b5b      	ldrb	r3, [r3, #13]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <_ZN4Page8NavigateEaa+0x86>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	e002      	b.n	8005e78 <_ZN4Page8NavigateEaa+0x8c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005e7e:	e003      	b.n	8005e88 <_ZN4Page8NavigateEaa+0x9c>
	}
	else
	{
		this->currentYNav = tempY;
 8005e80:	7aba      	ldrb	r2, [r7, #10]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	int i;
	for (i = 0; i < this->btnCount; ++i) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	da4c      	bge.n	8005f30 <_ZN4Page8NavigateEaa+0x144>
		if (this->buttons[i].CheckNav(this->currentXNav, this->currentYNav))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6999      	ldr	r1, [r3, #24]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	440b      	add	r3, r1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	332d      	adds	r3, #45	; 0x2d
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f7ff fd87 	bl	80059c6 <_ZN7Control8CheckNavERhS0_>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01f      	beq.n	8005efe <_ZN4Page8NavigateEaa+0x112>
		{
			this->buttons[i].SetNav();
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6999      	ldr	r1, [r3, #24]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6999      	ldr	r1, [r3, #24]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	440b      	add	r3, r1
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3310      	adds	r3, #16
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4798      	blx	r3
			this->CurrentControl = &this->buttons[i];
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6999      	ldr	r1, [r3, #24]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	18ca      	adds	r2, r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	611a      	str	r2, [r3, #16]
 8005efc:	e014      	b.n	8005f28 <_ZN4Page8NavigateEaa+0x13c>
		}
		else
		{
			this->buttons[i].ClearNav();
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6999      	ldr	r1, [r3, #24]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6999      	ldr	r1, [r3, #24]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	440b      	add	r3, r1
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4798      	blx	r3
	for (i = 0; i < this->btnCount; ++i) {
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e7ad      	b.n	8005e8c <_ZN4Page8NavigateEaa+0xa0>
		}
	}
	for (i = 0; i < this->pageBtnCount; ++i) {
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	da4c      	bge.n	8005fd8 <_ZN4Page8NavigateEaa+0x1ec>
		if (this->pageButtons[i].CheckNav(currentXNav, currentYNav))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6959      	ldr	r1, [r3, #20]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	332d      	adds	r3, #45	; 0x2d
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7ff fd33 	bl	80059c6 <_ZN7Control8CheckNavERhS0_>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01f      	beq.n	8005fa6 <_ZN4Page8NavigateEaa+0x1ba>
		{
			this->pageButtons[i].SetNav();
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6959      	ldr	r1, [r3, #20]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	4413      	add	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	440b      	add	r3, r1
 8005f76:	4618      	mov	r0, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6959      	ldr	r1, [r3, #20]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	4413      	add	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	440b      	add	r3, r1
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3310      	adds	r3, #16
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4798      	blx	r3
			this->CurrentControl = &this->pageButtons[i];
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6959      	ldr	r1, [r3, #20]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	18ca      	adds	r2, r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	611a      	str	r2, [r3, #16]
 8005fa4:	e014      	b.n	8005fd0 <_ZN4Page8NavigateEaa+0x1e4>
		}
		else
		{
			this->pageButtons[i].ClearNav();
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6959      	ldr	r1, [r3, #20]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6959      	ldr	r1, [r3, #20]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	440b      	add	r3, r1
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3314      	adds	r3, #20
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4798      	blx	r3
	for (i = 0; i < this->pageBtnCount; ++i) {
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e7ad      	b.n	8005f34 <_ZN4Page8NavigateEaa+0x148>
		}
	}
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZN4Page4InitEv>:

void Page::Init()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	this->nxt->SetPage(ID);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	791b      	ldrb	r3, [r3, #4]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fc ff60 	bl	8002eb8 <_ZN7Nextion7SetPageEh>
	this->ResetNavigation();
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f84d 	bl	8006098 <_ZN4Page15ResetNavigationEv>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <_ZN4Page3ActEv>:

void Page::Act()
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
	this->CurrentControl->Act();
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4610      	mov	r0, r2
 8006020:	4798      	blx	r3
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <_ZN4Page11FindControlEh>:

Control* Page::FindControl(uint8_t id)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < this->btnCount; ++i) {
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	da22      	bge.n	800608a <_ZN4Page11FindControlEh+0x60>
		if (this->buttons[i].ID == id)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6999      	ldr	r1, [r3, #24]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4613      	mov	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	4413      	add	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	440b      	add	r3, r1
 8006054:	791b      	ldrb	r3, [r3, #4]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	429a      	cmp	r2, r3
 800605a:	d112      	bne.n	8006082 <_ZN4Page11FindControlEh+0x58>
		{
			this->CurrentControl = &this->buttons[i];
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6999      	ldr	r1, [r3, #24]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	18ca      	adds	r2, r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	611a      	str	r2, [r3, #16]
			return &this->buttons[i];
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6999      	ldr	r1, [r3, #24]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4613      	mov	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4413      	add	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	440b      	add	r3, r1
 8006080:	e004      	b.n	800608c <_ZN4Page11FindControlEh+0x62>
	for (int i = 0; i < this->btnCount; ++i) {
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e7d7      	b.n	800603a <_ZN4Page11FindControlEh+0x10>
		}
	}
	return NULL;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <_ZN4Page15ResetNavigationEv>:

void Page::ResetNavigation()
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	this->CurrentControl = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
	this->Navigate(0, 0);
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fe9e 	bl	8005dec <_ZN4Page8NavigateEaa>
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZN10PageButtonD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/PageButton.h>

PageButton::~PageButton()
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	4a05      	ldr	r2, [pc, #20]	; (80060d8 <_ZN10PageButtonD1Ev+0x20>)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fc29 	bl	8005920 <_ZN7ControlD1Ev>
{
}
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	08010db8 	.word	0x08010db8

080060dc <_ZN10PageButtonD0Ev>:
PageButton::~PageButton()
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
}
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff ffe7 	bl	80060b8 <_ZN10PageButtonD1Ev>
 80060ea:	2118      	movs	r1, #24
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f009 f8d2 	bl	800f296 <_ZdlPvj>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <_ZN10PageButton11UpdateStateEv>:
{
	this->IsActive = press;
}

void PageButton::UpdateState()
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	this->nxt->SetClick(ID, IsActive);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6898      	ldr	r0, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	7919      	ldrb	r1, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	795b      	ldrb	r3, [r3, #5]
 8006110:	461a      	mov	r2, r3
 8006112:	f7fc ff03 	bl	8002f1c <_ZN7Nextion8SetClickEhb>
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <_ZN10PageButton3ActEv>:

void PageButton::Act()
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
	this->callback(this->pageID);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	7c92      	ldrb	r2, [r2, #18]
 800612e:	4610      	mov	r0, r2
 8006130:	4798      	blx	r3
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <_ZN11ProgressBarD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/ProgressBar.h>

ProgressBar::~ProgressBar()
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	4a05      	ldr	r2, [pc, #20]	; (800615c <_ZN11ProgressBarD1Ev+0x20>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fbe7 	bl	8005920 <_ZN7ControlD1Ev>
{
}
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08010dd8 	.word	0x08010dd8

08006160 <_ZN11ProgressBarD0Ev>:
ProgressBar::~ProgressBar()
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
}
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff ffe7 	bl	800613c <_ZN11ProgressBarD1Ev>
 800616e:	2114      	movs	r1, #20
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f009 f890 	bl	800f296 <_ZdlPvj>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <_ZN11ProgressBar11UpdateStateEv>:

void ProgressBar::UpdateState()
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	this->nxt->SetProgressBar(ID, value);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6898      	ldr	r0, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	7919      	ldrb	r1, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7c9b      	ldrb	r3, [r3, #18]
 8006194:	461a      	mov	r2, r3
 8006196:	f7fc fea5 	bl	8002ee4 <_ZN7Nextion14SetProgressBarEhh>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80061a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061a8:	480d      	ldr	r0, [pc, #52]	; (80061e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061aa:	490e      	ldr	r1, [pc, #56]	; (80061e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061ac:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061b0:	e002      	b.n	80061b8 <LoopCopyDataInit>

080061b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061b6:	3304      	adds	r3, #4

080061b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061bc:	d3f9      	bcc.n	80061b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061be:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061c0:	4c0b      	ldr	r4, [pc, #44]	; (80061f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80061c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061c4:	e001      	b.n	80061ca <LoopFillZerobss>

080061c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061c8:	3204      	adds	r2, #4

080061ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061cc:	d3fb      	bcc.n	80061c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80061ce:	f7ff fb1f 	bl	8005810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061d2:	f009 ffd9 	bl	8010188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061d6:	f7fd fcef 	bl	8003bb8 <main>
  bx  lr    
 80061da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80061dc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80061e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80061e8:	08010e8c 	.word	0x08010e8c
  ldr r2, =_sbss
 80061ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80061f0:	20001598 	.word	0x20001598

080061f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061f4:	e7fe      	b.n	80061f4 <CAN1_RX0_IRQHandler>
	...

080061f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <HAL_Init+0x40>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <HAL_Init+0x40>)
 8006202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <HAL_Init+0x40>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a0a      	ldr	r2, [pc, #40]	; (8006238 <HAL_Init+0x40>)
 800620e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006214:	4b08      	ldr	r3, [pc, #32]	; (8006238 <HAL_Init+0x40>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a07      	ldr	r2, [pc, #28]	; (8006238 <HAL_Init+0x40>)
 800621a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006220:	2003      	movs	r0, #3
 8006222:	f000 fe71 	bl	8006f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006226:	200f      	movs	r0, #15
 8006228:	f000 f808 	bl	800623c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800622c:	f7fe fc3c 	bl	8004aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40023c00 	.word	0x40023c00

0800623c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006244:	4b12      	ldr	r3, [pc, #72]	; (8006290 <HAL_InitTick+0x54>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <HAL_InitTick+0x58>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006252:	fbb3 f3f1 	udiv	r3, r3, r1
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fe89 	bl	8006f72 <HAL_SYSTICK_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e00e      	b.n	8006288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b0f      	cmp	r3, #15
 800626e:	d80a      	bhi.n	8006286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006270:	2200      	movs	r2, #0
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	f000 fe51 	bl	8006f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800627c:	4a06      	ldr	r2, [pc, #24]	; (8006298 <HAL_InitTick+0x5c>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	e000      	b.n	8006288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000004 	.word	0x20000004
 8006294:	2000000c 	.word	0x2000000c
 8006298:	20000008 	.word	0x20000008

0800629c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return uwTick;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <HAL_GetTick+0x14>)
 80062a2:	681b      	ldr	r3, [r3, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000156c 	.word	0x2000156c

080062b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7ff ffee 	bl	800629c <HAL_GetTick>
 80062c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d005      	beq.n	80062da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <HAL_Delay+0x44>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062da:	bf00      	nop
 80062dc:	f7ff ffde 	bl	800629c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d8f7      	bhi.n	80062dc <HAL_Delay+0x28>
  {
  }
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	2000000c 	.word	0x2000000c

080062fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e04a      	b.n	80063a8 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d120      	bne.n	800635c <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a24      	ldr	r2, [pc, #144]	; (80063b0 <HAL_ADC_Init+0xb4>)
 800631e:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_ADC_Init+0xb8>)
 8006324:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <HAL_ADC_Init+0xbc>)
 800632a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_ADC_Init+0xc0>)
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_ADC_Init+0xc4>)
 8006336:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_ADC_Init+0xc8>)
 8006344:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	d118      	bne.n	800639a <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006370:	f023 0302 	bic.w	r3, r3, #2
 8006374:	f043 0202 	orr.w	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fb67 	bl	8006a50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	f023 0303 	bic.w	r3, r3, #3
 8006390:	f043 0201 	orr.w	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
 8006398:	e001      	b.n	800639e <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	08003ba5 	.word	0x08003ba5
 80063b4:	080067d1 	.word	0x080067d1
 80063b8:	080067e5 	.word	0x080067e5
 80063bc:	080067f9 	.word	0x080067f9
 80063c0:	08006d55 	.word	0x08006d55
 80063c4:	08004b05 	.word	0x08004b05

080063c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d04a      	beq.n	8006494 <HAL_ADC_IRQHandler+0xcc>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d047      	beq.n	8006494 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d12b      	bne.n	8006482 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800642e:	2b00      	cmp	r3, #0
 8006430:	d127      	bne.n	8006482 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800644a:	2b00      	cmp	r3, #0
 800644c:	d119      	bne.n	8006482 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0220 	bic.w	r2, r2, #32
 800645c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f043 0201 	orr.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0212 	mvn.w	r2, #18
 8006492:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d058      	beq.n	800655c <HAL_ADC_IRQHandler+0x194>
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d055      	beq.n	800655c <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d139      	bne.n	800654a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d12b      	bne.n	800654a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d124      	bne.n	800654a <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800650a:	2b00      	cmp	r3, #0
 800650c:	d11d      	bne.n	800654a <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006512:	2b00      	cmp	r3, #0
 8006514:	d119      	bne.n	800654a <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006524:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0201 	orr.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f06f 020c 	mvn.w	r2, #12
 800655a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d018      	beq.n	80065a4 <HAL_ADC_IRQHandler+0x1dc>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d015      	beq.n	80065a4 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d10e      	bne.n	80065a4 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f06f 0201 	mvn.w	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065b2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <HAL_ADC_IRQHandler+0x220>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c4:	f043 0202 	orr.w	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0220 	mvn.w	r2, #32
 80065d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0220 	mvn.w	r2, #32
 80065e6:	601a      	str	r2, [r3, #0]
  }
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_ADC_Start_DMA+0x1e>
 800660a:	2302      	movs	r3, #2
 800660c:	e0ce      	b.n	80067ac <HAL_ADC_Start_DMA+0x1bc>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d018      	beq.n	8006656 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006634:	4b5f      	ldr	r3, [pc, #380]	; (80067b4 <HAL_ADC_Start_DMA+0x1c4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5f      	ldr	r2, [pc, #380]	; (80067b8 <HAL_ADC_Start_DMA+0x1c8>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	0c9a      	lsrs	r2, r3, #18
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006648:	e002      	b.n	8006650 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3b01      	subs	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f9      	bne.n	800664a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006664:	d107      	bne.n	8006676 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006674:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	f040 8086 	bne.w	8006792 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c4:	d106      	bne.n	80066d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	f023 0206 	bic.w	r2, r3, #6
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44
 80066d2:	e002      	b.n	80066da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <HAL_ADC_Start_DMA+0x1cc>)
 80066e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	4a35      	ldr	r2, [pc, #212]	; (80067c0 <HAL_ADC_Start_DMA+0x1d0>)
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	4a34      	ldr	r2, [pc, #208]	; (80067c4 <HAL_ADC_Start_DMA+0x1d4>)
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	4a33      	ldr	r2, [pc, #204]	; (80067c8 <HAL_ADC_Start_DMA+0x1d8>)
 80066fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006706:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006716:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006726:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	334c      	adds	r3, #76	; 0x4c
 8006732:	4619      	mov	r1, r3
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f000 fcf2 	bl	8007120 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10f      	bne.n	8006768 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d129      	bne.n	80067aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006764:	609a      	str	r2, [r3, #8]
 8006766:	e020      	b.n	80067aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <HAL_ADC_Start_DMA+0x1dc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d11b      	bne.n	80067aa <HAL_ADC_Start_DMA+0x1ba>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d114      	bne.n	80067aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800678e:	609a      	str	r2, [r3, #8]
 8006790:	e00b      	b.n	80067aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f043 0210 	orr.w	r2, r3, #16
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000004 	.word	0x20000004
 80067b8:	431bde83 	.word	0x431bde83
 80067bc:	40012300 	.word	0x40012300
 80067c0:	08006c49 	.word	0x08006c49
 80067c4:	08006d07 	.word	0x08006d07
 80067c8:	08006d25 	.word	0x08006d25
 80067cc:	40012000 	.word	0x40012000

080067d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x1c>
 8006824:	2302      	movs	r3, #2
 8006826:	e105      	b.n	8006a34 <HAL_ADC_ConfigChannel+0x228>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b09      	cmp	r3, #9
 8006836:	d925      	bls.n	8006884 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68d9      	ldr	r1, [r3, #12]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	3b1e      	subs	r3, #30
 800684e:	2207      	movs	r2, #7
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	43da      	mvns	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	400a      	ands	r2, r1
 800685c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68d9      	ldr	r1, [r3, #12]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	4618      	mov	r0, r3
 8006870:	4603      	mov	r3, r0
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	4403      	add	r3, r0
 8006876:	3b1e      	subs	r3, #30
 8006878:	409a      	lsls	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	e022      	b.n	80068ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6919      	ldr	r1, [r3, #16]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	2207      	movs	r2, #7
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43da      	mvns	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	400a      	ands	r2, r1
 80068a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6919      	ldr	r1, [r3, #16]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4618      	mov	r0, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4403      	add	r3, r0
 80068c0:	409a      	lsls	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d824      	bhi.n	800691c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	3b05      	subs	r3, #5
 80068e4:	221f      	movs	r2, #31
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43da      	mvns	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	400a      	ands	r2, r1
 80068f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4618      	mov	r0, r3
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	3b05      	subs	r3, #5
 800690e:	fa00 f203 	lsl.w	r2, r0, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	635a      	str	r2, [r3, #52]	; 0x34
 800691a:	e04c      	b.n	80069b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d824      	bhi.n	800696e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	3b23      	subs	r3, #35	; 0x23
 8006936:	221f      	movs	r2, #31
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43da      	mvns	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	400a      	ands	r2, r1
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	4618      	mov	r0, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	3b23      	subs	r3, #35	; 0x23
 8006960:	fa00 f203 	lsl.w	r2, r0, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
 800696c:	e023      	b.n	80069b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	3b41      	subs	r3, #65	; 0x41
 8006980:	221f      	movs	r2, #31
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43da      	mvns	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	400a      	ands	r2, r1
 800698e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	4618      	mov	r0, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	3b41      	subs	r3, #65	; 0x41
 80069aa:	fa00 f203 	lsl.w	r2, r0, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069b6:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <HAL_ADC_ConfigChannel+0x234>)
 80069b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a21      	ldr	r2, [pc, #132]	; (8006a44 <HAL_ADC_ConfigChannel+0x238>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d109      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x1cc>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b12      	cmp	r3, #18
 80069ca:	d105      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a19      	ldr	r2, [pc, #100]	; (8006a44 <HAL_ADC_ConfigChannel+0x238>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d123      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x21e>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d003      	beq.n	80069f2 <HAL_ADC_ConfigChannel+0x1e6>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b11      	cmp	r3, #17
 80069f0:	d11b      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d111      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <HAL_ADC_ConfigChannel+0x23c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a10      	ldr	r2, [pc, #64]	; (8006a4c <HAL_ADC_ConfigChannel+0x240>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	0c9a      	lsrs	r2, r3, #18
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a1c:	e002      	b.n	8006a24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f9      	bne.n	8006a1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	40012300 	.word	0x40012300
 8006a44:	40012000 	.word	0x40012000
 8006a48:	20000004 	.word	0x20000004
 8006a4c:	431bde83 	.word	0x431bde83

08006a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a58:	4b79      	ldr	r3, [pc, #484]	; (8006c40 <ADC_Init+0x1f0>)
 8006a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6859      	ldr	r1, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	021a      	lsls	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6859      	ldr	r1, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6899      	ldr	r1, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	4a58      	ldr	r2, [pc, #352]	; (8006c44 <ADC_Init+0x1f4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6899      	ldr	r1, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6899      	ldr	r1, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	e00f      	b.n	8006b4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0202 	bic.w	r2, r2, #2
 8006b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6899      	ldr	r1, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	7e1b      	ldrb	r3, [r3, #24]
 8006b68:	005a      	lsls	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6859      	ldr	r1, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	035a      	lsls	r2, r3, #13
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	e007      	b.n	8006bc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	051a      	lsls	r2, r3, #20
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c06:	025a      	lsls	r2, r3, #9
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6899      	ldr	r1, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	029a      	lsls	r2, r3, #10
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012300 	.word	0x40012300
 8006c44:	0f000001 	.word	0x0f000001

08006c48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d13d      	bne.n	8006cde <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d12b      	bne.n	8006cd4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d127      	bne.n	8006cd4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d006      	beq.n	8006ca0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d119      	bne.n	8006cd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0220 	bic.w	r2, r2, #32
 8006cae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	f043 0201 	orr.w	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cdc:	e00f      	b.n	8006cfe <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f003 0310 	and.w	r3, r3, #16
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	4798      	blx	r3
}
 8006cf2:	e004      	b.n	8006cfe <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2240      	movs	r2, #64	; 0x40
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3c:	f043 0204 	orr.w	r2, r3, #4
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d84:	4013      	ands	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	60d3      	str	r3, [r2, #12]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 0307 	and.w	r3, r3, #7
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	db0b      	blt.n	8006df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 021f 	and.w	r2, r3, #31
 8006de4:	4907      	ldr	r1, [pc, #28]	; (8006e04 <__NVIC_EnableIRQ+0x38>)
 8006de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2001      	movs	r0, #1
 8006dee:	fa00 f202 	lsl.w	r2, r0, r2
 8006df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	e000e100 	.word	0xe000e100

08006e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db0a      	blt.n	8006e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	490c      	ldr	r1, [pc, #48]	; (8006e54 <__NVIC_SetPriority+0x4c>)
 8006e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e26:	0112      	lsls	r2, r2, #4
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e30:	e00a      	b.n	8006e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	4908      	ldr	r1, [pc, #32]	; (8006e58 <__NVIC_SetPriority+0x50>)
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	0112      	lsls	r2, r2, #4
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	440b      	add	r3, r1
 8006e46:	761a      	strb	r2, [r3, #24]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	e000e100 	.word	0xe000e100
 8006e58:	e000ed00 	.word	0xe000ed00

08006e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b089      	sub	sp, #36	; 0x24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f1c3 0307 	rsb	r3, r3, #7
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	bf28      	it	cs
 8006e7a:	2304      	movcs	r3, #4
 8006e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3304      	adds	r3, #4
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d902      	bls.n	8006e8c <NVIC_EncodePriority+0x30>
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3b03      	subs	r3, #3
 8006e8a:	e000      	b.n	8006e8e <NVIC_EncodePriority+0x32>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	401a      	ands	r2, r3
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006eae:	43d9      	mvns	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb4:	4313      	orrs	r3, r2
         );
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3724      	adds	r7, #36	; 0x24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ed4:	d301      	bcc.n	8006eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e00f      	b.n	8006efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eda:	4a0a      	ldr	r2, [pc, #40]	; (8006f04 <SysTick_Config+0x40>)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ee2:	210f      	movs	r1, #15
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	f7ff ff8e 	bl	8006e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <SysTick_Config+0x40>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ef2:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <SysTick_Config+0x40>)
 8006ef4:	2207      	movs	r2, #7
 8006ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	e000e010 	.word	0xe000e010

08006f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ff29 	bl	8006d68 <__NVIC_SetPriorityGrouping>
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	4603      	mov	r3, r0
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f30:	f7ff ff3e 	bl	8006db0 <__NVIC_GetPriorityGrouping>
 8006f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	6978      	ldr	r0, [r7, #20]
 8006f3c:	f7ff ff8e 	bl	8006e5c <NVIC_EncodePriority>
 8006f40:	4602      	mov	r2, r0
 8006f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f46:	4611      	mov	r1, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff ff5d 	bl	8006e08 <__NVIC_SetPriority>
}
 8006f4e:	bf00      	nop
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ff31 	bl	8006dcc <__NVIC_EnableIRQ>
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff ffa2 	bl	8006ec4 <SysTick_Config>
 8006f80:	4603      	mov	r3, r0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e00e      	b.n	8006fba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	795b      	ldrb	r3, [r3, #5]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fd fe61 	bl	8004c74 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fd0:	f7ff f964 	bl	800629c <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e099      	b.n	8007114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007000:	e00f      	b.n	8007022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007002:	f7ff f94b 	bl	800629c <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b05      	cmp	r3, #5
 800700e:	d908      	bls.n	8007022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2203      	movs	r2, #3
 800701a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e078      	b.n	8007114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e8      	bne.n	8007002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4b38      	ldr	r3, [pc, #224]	; (800711c <HAL_DMA_Init+0x158>)
 800703c:	4013      	ands	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800704e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800705a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b04      	cmp	r3, #4
 800707a:	d107      	bne.n	800708c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	4313      	orrs	r3, r2
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f023 0307 	bic.w	r3, r3, #7
 80070a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d117      	bne.n	80070e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00e      	beq.n	80070e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb0f 	bl	80076ec <DMA_CheckFifoParam>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2240      	movs	r2, #64	; 0x40
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80070e2:	2301      	movs	r3, #1
 80070e4:	e016      	b.n	8007114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fac6 	bl	8007680 <DMA_CalcBaseAndBitshift>
 80070f4:	4603      	mov	r3, r0
 80070f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fc:	223f      	movs	r2, #63	; 0x3f
 80070fe:	409a      	lsls	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	f010803f 	.word	0xf010803f

08007120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_DMA_Start_IT+0x26>
 8007142:	2302      	movs	r3, #2
 8007144:	e040      	b.n	80071c8 <HAL_DMA_Start_IT+0xa8>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d12f      	bne.n	80071ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fa58 	bl	8007624 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	223f      	movs	r2, #63	; 0x3f
 800717a:	409a      	lsls	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0216 	orr.w	r2, r2, #22
 800718e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0208 	orr.w	r2, r2, #8
 80071a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e005      	b.n	80071c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071c2:	2302      	movs	r3, #2
 80071c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071de:	f7ff f85d 	bl	800629c <HAL_GetTick>
 80071e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d008      	beq.n	8007202 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2280      	movs	r2, #128	; 0x80
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e052      	b.n	80072a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0216 	bic.w	r2, r2, #22
 8007210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007220:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <HAL_DMA_Abort+0x62>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0208 	bic.w	r2, r2, #8
 8007240:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007252:	e013      	b.n	800727c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007254:	f7ff f822 	bl	800629c <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b05      	cmp	r3, #5
 8007260:	d90c      	bls.n	800727c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2203      	movs	r2, #3
 800726c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e015      	b.n	80072a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e4      	bne.n	8007254 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	223f      	movs	r2, #63	; 0x3f
 8007290:	409a      	lsls	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d004      	beq.n	80072ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e00c      	b.n	80072e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2205      	movs	r2, #5
 80072d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007300:	4b8e      	ldr	r3, [pc, #568]	; (800753c <HAL_DMA_IRQHandler+0x248>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a8e      	ldr	r2, [pc, #568]	; (8007540 <HAL_DMA_IRQHandler+0x24c>)
 8007306:	fba2 2303 	umull	r2, r3, r2, r3
 800730a:	0a9b      	lsrs	r3, r3, #10
 800730c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731e:	2208      	movs	r2, #8
 8007320:	409a      	lsls	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4013      	ands	r3, r2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01a      	beq.n	8007360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d013      	beq.n	8007360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0204 	bic.w	r2, r2, #4
 8007346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734c:	2208      	movs	r2, #8
 800734e:	409a      	lsls	r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	f043 0201 	orr.w	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007364:	2201      	movs	r2, #1
 8007366:	409a      	lsls	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4013      	ands	r3, r2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d012      	beq.n	8007396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007382:	2201      	movs	r2, #1
 8007384:	409a      	lsls	r2, r3
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	f043 0202 	orr.w	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739a:	2204      	movs	r2, #4
 800739c:	409a      	lsls	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d012      	beq.n	80073cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b8:	2204      	movs	r2, #4
 80073ba:	409a      	lsls	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c4:	f043 0204 	orr.w	r2, r3, #4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d0:	2210      	movs	r2, #16
 80073d2:	409a      	lsls	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d043      	beq.n	8007464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d03c      	beq.n	8007464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	2210      	movs	r2, #16
 80073f0:	409a      	lsls	r2, r3
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d018      	beq.n	8007436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d108      	bne.n	8007424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d024      	beq.n	8007464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
 8007422:	e01f      	b.n	8007464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01b      	beq.n	8007464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
 8007434:	e016      	b.n	8007464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d107      	bne.n	8007454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0208 	bic.w	r2, r2, #8
 8007452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007468:	2220      	movs	r2, #32
 800746a:	409a      	lsls	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 808f 	beq.w	8007594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8087 	beq.w	8007594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748a:	2220      	movs	r2, #32
 800748c:	409a      	lsls	r2, r3
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b05      	cmp	r3, #5
 800749c:	d136      	bne.n	800750c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0216 	bic.w	r2, r2, #22
 80074ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695a      	ldr	r2, [r3, #20]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_DMA_IRQHandler+0x1da>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0208 	bic.w	r2, r2, #8
 80074dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e2:	223f      	movs	r2, #63	; 0x3f
 80074e4:	409a      	lsls	r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d07e      	beq.n	8007600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
        }
        return;
 800750a:	e079      	b.n	8007600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01d      	beq.n	8007556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10d      	bne.n	8007544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752c:	2b00      	cmp	r3, #0
 800752e:	d031      	beq.n	8007594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
 8007538:	e02c      	b.n	8007594 <HAL_DMA_IRQHandler+0x2a0>
 800753a:	bf00      	nop
 800753c:	20000004 	.word	0x20000004
 8007540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d023      	beq.n	8007594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
 8007554:	e01e      	b.n	8007594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10f      	bne.n	8007584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0210 	bic.w	r2, r2, #16
 8007572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	2b00      	cmp	r3, #0
 800759a:	d032      	beq.n	8007602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d022      	beq.n	80075ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2205      	movs	r2, #5
 80075ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0201 	bic.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d307      	bcc.n	80075dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f2      	bne.n	80075c0 <HAL_DMA_IRQHandler+0x2cc>
 80075da:	e000      	b.n	80075de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80075dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
 80075fe:	e000      	b.n	8007602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007600:	bf00      	nop
    }
  }
}
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007616:	b2db      	uxtb	r3, r3
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007640:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d108      	bne.n	8007664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007662:	e007      	b.n	8007674 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	3b10      	subs	r3, #16
 8007690:	4a14      	ldr	r2, [pc, #80]	; (80076e4 <DMA_CalcBaseAndBitshift+0x64>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	091b      	lsrs	r3, r3, #4
 8007698:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800769a:	4a13      	ldr	r2, [pc, #76]	; (80076e8 <DMA_CalcBaseAndBitshift+0x68>)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d909      	bls.n	80076c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	659a      	str	r2, [r3, #88]	; 0x58
 80076c0:	e007      	b.n	80076d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	aaaaaaab 	.word	0xaaaaaaab
 80076e8:	08010df0 	.word	0x08010df0

080076ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d11f      	bne.n	8007746 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d856      	bhi.n	80077ba <DMA_CheckFifoParam+0xce>
 800770c:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <DMA_CheckFifoParam+0x28>)
 800770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007712:	bf00      	nop
 8007714:	08007725 	.word	0x08007725
 8007718:	08007737 	.word	0x08007737
 800771c:	08007725 	.word	0x08007725
 8007720:	080077bb 	.word	0x080077bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d046      	beq.n	80077be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007734:	e043      	b.n	80077be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800773e:	d140      	bne.n	80077c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007744:	e03d      	b.n	80077c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774e:	d121      	bne.n	8007794 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d837      	bhi.n	80077c6 <DMA_CheckFifoParam+0xda>
 8007756:	a201      	add	r2, pc, #4	; (adr r2, 800775c <DMA_CheckFifoParam+0x70>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	0800776d 	.word	0x0800776d
 8007760:	08007773 	.word	0x08007773
 8007764:	0800776d 	.word	0x0800776d
 8007768:	08007785 	.word	0x08007785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	e030      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d025      	beq.n	80077ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007782:	e022      	b.n	80077ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800778c:	d11f      	bne.n	80077ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007792:	e01c      	b.n	80077ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d903      	bls.n	80077a2 <DMA_CheckFifoParam+0xb6>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d003      	beq.n	80077a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077a0:	e018      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e015      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00e      	beq.n	80077d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	e00b      	b.n	80077d2 <DMA_CheckFifoParam+0xe6>
      break;
 80077ba:	bf00      	nop
 80077bc:	e00a      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077be:	bf00      	nop
 80077c0:	e008      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077c2:	bf00      	nop
 80077c4:	e006      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077c6:	bf00      	nop
 80077c8:	e004      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077d2:	bf00      	nop
    }
  } 
  
  return status; 
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e081      	b.n	80078fa <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fd fa54 	bl	8004cb8 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2224      	movs	r2, #36	; 0x24
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0201 	bic.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007834:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007844:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d107      	bne.n	800785e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800785a:	609a      	str	r2, [r3, #8]
 800785c:	e006      	b.n	800786c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800786a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b02      	cmp	r3, #2
 8007872:	d104      	bne.n	800787e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800787c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800788c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007890:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078a0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1a      	ldr	r2, [r3, #32]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <HAL_FMPI2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Master_Transmit(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b088      	sub	sp, #32
 8007908:	af02      	add	r7, sp, #8
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	461a      	mov	r2, r3
 8007910:	460b      	mov	r3, r1
 8007912:	817b      	strh	r3, [r7, #10]
 8007914:	4613      	mov	r3, r2
 8007916:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b20      	cmp	r3, #32
 8007922:	f040 80da 	bne.w	8007ada <HAL_FMPI2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_FMPI2C_Master_Transmit+0x30>
 8007930:	2302      	movs	r3, #2
 8007932:	e0d3      	b.n	8007adc <HAL_FMPI2C_Master_Transmit+0x1d8>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800793c:	f7fe fcae 	bl	800629c <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	2319      	movs	r3, #25
 8007948:	2201      	movs	r2, #1
 800794a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fe05 	bl	800855e <FMPI2C_WaitOnFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_FMPI2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0be      	b.n	8007adc <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2221      	movs	r2, #33	; 0x21
 8007962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MASTER;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2210      	movs	r2, #16
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	893a      	ldrh	r2, [r7, #8]
 800797e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798a:	b29b      	uxth	r3, r3
 800798c:	2bff      	cmp	r3, #255	; 0xff
 800798e:	d90e      	bls.n	80079ae <HAL_FMPI2C_Master_Transmit+0xaa>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	22ff      	movs	r2, #255	; 0xff
 8007994:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799a:	b2da      	uxtb	r2, r3
 800799c:	8979      	ldrh	r1, [r7, #10]
 800799e:	4b51      	ldr	r3, [pc, #324]	; (8007ae4 <HAL_FMPI2C_Master_Transmit+0x1e0>)
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 ff46 	bl	8008838 <FMPI2C_TransferConfig>
 80079ac:	e06c      	b.n	8007a88 <HAL_FMPI2C_Master_Transmit+0x184>
                         FMPI2C_GENERATE_START_WRITE);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	8979      	ldrh	r1, [r7, #10]
 80079c0:	4b48      	ldr	r3, [pc, #288]	; (8007ae4 <HAL_FMPI2C_Master_Transmit+0x1e0>)
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 ff35 	bl	8008838 <FMPI2C_TransferConfig>
                         FMPI2C_GENERATE_START_WRITE);
    }

    while (hfmpi2c->XferCount > 0U)
 80079ce:	e05b      	b.n	8007a88 <HAL_FMPI2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	6a39      	ldr	r1, [r7, #32]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fe02 	bl	80085de <FMPI2C_WaitOnTXISFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <HAL_FMPI2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e07b      	b.n	8007adc <HAL_FMPI2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d034      	beq.n	8007a88 <HAL_FMPI2C_Master_Transmit+0x184>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d130      	bne.n	8007a88 <HAL_FMPI2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fd94 	bl	800855e <FMPI2C_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <HAL_FMPI2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e04d      	b.n	8007adc <HAL_FMPI2C_Master_Transmit+0x1d8>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2bff      	cmp	r3, #255	; 0xff
 8007a48:	d90e      	bls.n	8007a68 <HAL_FMPI2C_Master_Transmit+0x164>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	22ff      	movs	r2, #255	; 0xff
 8007a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	8979      	ldrh	r1, [r7, #10]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fee9 	bl	8008838 <FMPI2C_TransferConfig>
 8007a66:	e00f      	b.n	8007a88 <HAL_FMPI2C_Master_Transmit+0x184>
                             FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	8979      	ldrh	r1, [r7, #10]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fed8 	bl	8008838 <FMPI2C_TransferConfig>
    while (hfmpi2c->XferCount > 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d19e      	bne.n	80079d0 <HAL_FMPI2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	6a39      	ldr	r1, [r7, #32]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fde1 	bl	800865e <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <HAL_FMPI2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e01a      	b.n	8007adc <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6859      	ldr	r1, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <HAL_FMPI2C_Master_Transmit+0x1e4>)
 8007aba:	400b      	ands	r3, r1
 8007abc:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e000      	b.n	8007adc <HAL_FMPI2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007ada:	2302      	movs	r3, #2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	80002000 	.word	0x80002000
 8007ae8:	fe00e800 	.word	0xfe00e800

08007aec <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d010      	beq.n	8007b66 <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	09db      	lsrs	r3, r3, #7
 8007b48:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b54:	f043 0201 	orr.w	r2, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b64:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	0a9b      	lsrs	r3, r3, #10
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d010      	beq.n	8007b94 <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	09db      	lsrs	r3, r3, #7
 8007b76:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b82:	f043 0208 	orr.w	r2, r3, #8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b92:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	0a5b      	lsrs	r3, r3, #9
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d010      	beq.n	8007bc2 <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	09db      	lsrs	r3, r3, #7
 8007ba4:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb0:	f043 0202 	orr.w	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 030b 	and.w	r3, r3, #11
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fb89 	bl	80082ec <FMPI2C_ITError>
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
 8007c16:	4613      	mov	r3, r2
 8007c18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b086      	sub	sp, #24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <FMPI2C_Slave_ISR_IT+0x24>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e0ec      	b.n	8007e60 <FMPI2C_Slave_ISR_IT+0x1fe>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8007ca6:	6939      	ldr	r1, [r7, #16]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f9bf 	bl	800802c <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d04d      	beq.n	8007d56 <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d047      	beq.n	8007d56 <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d128      	bne.n	8007d22 <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b28      	cmp	r3, #40	; 0x28
 8007cda:	d108      	bne.n	8007cee <FMPI2C_Slave_ISR_IT+0x8c>
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce2:	d104      	bne.n	8007cee <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8007ce4:	6939      	ldr	r1, [r7, #16]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 faaa 	bl	8008240 <FMPI2C_ITListenCplt>
 8007cec:	e032      	b.n	8007d54 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b29      	cmp	r3, #41	; 0x29
 8007cf8:	d10e      	bne.n	8007d18 <FMPI2C_Slave_ISR_IT+0xb6>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d00:	d00a      	beq.n	8007d18 <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2210      	movs	r2, #16
 8007d08:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fbe5 	bl	80084da <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f92d 	bl	8007f70 <FMPI2C_ITSlaveSeqCplt>
 8007d16:	e01d      	b.n	8007d54 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 8007d20:	e096      	b.n	8007e50 <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2210      	movs	r2, #16
 8007d28:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	f043 0204 	orr.w	r2, r3, #4
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <FMPI2C_Slave_ISR_IT+0xe4>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d42:	f040 8085 	bne.w	8007e50 <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 facd 	bl	80082ec <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 8007d52:	e07d      	b.n	8007e50 <FMPI2C_Slave_ISR_IT+0x1ee>
 8007d54:	e07c      	b.n	8007e50 <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	089b      	lsrs	r3, r3, #2
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d030      	beq.n	8007dc4 <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	089b      	lsrs	r3, r3, #2
 8007d66:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d02a      	beq.n	8007dc4 <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d94:	3b01      	subs	r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d14f      	bne.n	8007e54 <FMPI2C_Slave_ISR_IT+0x1f2>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dba:	d04b      	beq.n	8007e54 <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f8d7 	bl	8007f70 <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 8007dc2:	e047      	b.n	8007e54 <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	08db      	lsrs	r3, r3, #3
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	08db      	lsrs	r3, r3, #3
 8007dd4:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 8007ddc:	6939      	ldr	r1, [r7, #16]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f842 	bl	8007e68 <FMPI2C_ITAddrCplt>
 8007de4:	e037      	b.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	085b      	lsrs	r3, r3, #1
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d031      	beq.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d02b      	beq.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d018      	beq.n	8007e3a <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	851a      	strh	r2, [r3, #40]	; 0x28
 8007e38:	e00d      	b.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e40:	d002      	beq.n	8007e48 <FMPI2C_Slave_ISR_IT+0x1e6>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f891 	bl	8007f70 <FMPI2C_ITSlaveSeqCplt>
 8007e4e:	e002      	b.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 8007e54:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e7e:	2b28      	cmp	r3, #40	; 0x28
 8007e80:	d16a      	bne.n	8007f58 <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	0c1b      	lsrs	r3, r3, #16
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007ea0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007ebc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d138      	bne.n	8007f38 <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007ec6:	897b      	ldrh	r3, [r7, #10]
 8007ec8:	09db      	lsrs	r3, r3, #7
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	89bb      	ldrh	r3, [r7, #12]
 8007ece:	4053      	eors	r3, r2
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f003 0306 	and.w	r3, r3, #6
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d11c      	bne.n	8007f14 <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007eda:	897b      	ldrh	r3, [r7, #10]
 8007edc:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d13b      	bne.n	8007f68 <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2208      	movs	r2, #8
 8007efc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8007f06:	89ba      	ldrh	r2, [r7, #12]
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fe7c 	bl	8007c0a <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 8007f12:	e029      	b.n	8007f68 <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007f14:	893b      	ldrh	r3, [r7, #8]
 8007f16:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8007f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fcbd 	bl	800889c <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8007f2a:	89ba      	ldrh	r2, [r7, #12]
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fe6a 	bl	8007c0a <HAL_FMPI2C_AddrCallback>
}
 8007f36:	e017      	b.n	8007f68 <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8007f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fcad 	bl	800889c <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8007f4a:	89ba      	ldrh	r2, [r7, #12]
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fe5a 	bl	8007c0a <HAL_FMPI2C_AddrCallback>
}
 8007f56:	e007      	b.n	8007f68 <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	0b9b      	lsrs	r3, r3, #14
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e00d      	b.n	8007fc2 <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	0bdb      	lsrs	r3, r3, #15
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fc0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b29      	cmp	r3, #41	; 0x29
 8007fcc:	d112      	bne.n	8007ff4 <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2228      	movs	r2, #40	; 0x28
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2221      	movs	r2, #33	; 0x21
 8007fda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc5c 	bl	800889c <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fdf8 	bl	8007be2 <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ff2:	e017      	b.n	8008024 <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d111      	bne.n	8008024 <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2228      	movs	r2, #40	; 0x28
 8008004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2222      	movs	r2, #34	; 0x22
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 800800e:	2102      	movs	r1, #2
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc43 	bl	800889c <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fde9 	bl	8007bf6 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008048:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2220      	movs	r2, #32
 8008050:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b21      	cmp	r3, #33	; 0x21
 8008056:	d002      	beq.n	800805e <FMPI2C_ITSlaveCplt+0x32>
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	2b29      	cmp	r3, #41	; 0x29
 800805c:	d108      	bne.n	8008070 <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 800805e:	f248 0101 	movw	r1, #32769	; 0x8001
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc1a 	bl	800889c <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2221      	movs	r2, #33	; 0x21
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
 800806e:	e00d      	b.n	800808c <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	2b22      	cmp	r3, #34	; 0x22
 8008074:	d002      	beq.n	800807c <FMPI2C_ITSlaveCplt+0x50>
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b2a      	cmp	r3, #42	; 0x2a
 800807a:	d107      	bne.n	800808c <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 800807c:	f248 0102 	movw	r1, #32770	; 0x8002
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc0b 	bl	800889c <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2222      	movs	r2, #34	; 0x22
 800808a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800809a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6859      	ldr	r1, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b64      	ldr	r3, [pc, #400]	; (8008238 <FMPI2C_ITSlaveCplt+0x20c>)
 80080a8:	400b      	ands	r3, r1
 80080aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fa14 	bl	80084da <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	0b9b      	lsrs	r3, r3, #14
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d013      	beq.n	80080e6 <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080cc:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d020      	beq.n	8008118 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080e4:	e018      	b.n	8008118 <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	0bdb      	lsrs	r3, r3, #15
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d012      	beq.n	8008118 <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008100:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d006      	beq.n	8008118 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d020      	beq.n	8008166 <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0304 	bic.w	r3, r3, #4
 800812a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d005      	beq.n	800817c <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008174:	f043 0204 	orr.w	r2, r3, #4
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	2b00      	cmp	r3, #0
 8008190:	d010      	beq.n	80081b4 <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8a7 	bl	80082ec <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b28      	cmp	r3, #40	; 0x28
 80081a8:	d141      	bne.n	800822e <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f847 	bl	8008240 <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 80081b2:	e03c      	b.n	800822e <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081bc:	d014      	beq.n	80081e8 <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fed6 	bl	8007f70 <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1d      	ldr	r2, [pc, #116]	; (800823c <FMPI2C_ITSlaveCplt+0x210>)
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fd20 	bl	8007c26 <HAL_FMPI2C_ListenCpltCallback>
}
 80081e6:	e022      	b.n	800822e <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b22      	cmp	r3, #34	; 0x22
 80081f2:	d10e      	bne.n	8008212 <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff fcf3 	bl	8007bf6 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8008210:	e00d      	b.n	800822e <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff fcda 	bl	8007be2 <HAL_FMPI2C_SlaveTxCpltCallback>
}
 800822e:	bf00      	nop
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	fe00e800 	.word	0xfe00e800
 800823c:	ffff0000 	.word	0xffff0000

08008240 <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a26      	ldr	r2, [pc, #152]	; (80082e8 <FMPI2C_ITListenCplt+0xa8>)
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d022      	beq.n	80082be <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008294:	2b00      	cmp	r3, #0
 8008296:	d012      	beq.n	80082be <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	f043 0204 	orr.w	r2, r3, #4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 80082be:	f248 0103 	movw	r1, #32771	; 0x8003
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 faea 	bl	800889c <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2210      	movs	r2, #16
 80082ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff fca4 	bl	8007c26 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	ffff0000 	.word	0xffff0000

080082ec <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a5d      	ldr	r2, [pc, #372]	; (8008480 <FMPI2C_ITError+0x194>)
 800830a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b28      	cmp	r3, #40	; 0x28
 8008322:	d005      	beq.n	8008330 <FMPI2C_ITError+0x44>
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b29      	cmp	r3, #41	; 0x29
 8008328:	d002      	beq.n	8008330 <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b2a      	cmp	r3, #42	; 0x2a
 800832e:	d10b      	bne.n	8008348 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8008330:	2103      	movs	r1, #3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fab2 	bl	800889c <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2228      	movs	r2, #40	; 0x28
 800833c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a50      	ldr	r2, [pc, #320]	; (8008484 <FMPI2C_ITError+0x198>)
 8008344:	635a      	str	r2, [r3, #52]	; 0x34
 8008346:	e011      	b.n	800836c <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8008348:	f248 0103 	movw	r1, #32771	; 0x8003
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 faa5 	bl	800889c <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b60      	cmp	r3, #96	; 0x60
 800835c:	d003      	beq.n	8008366 <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	2b00      	cmp	r3, #0
 8008378:	d039      	beq.n	80083ee <FMPI2C_ITError+0x102>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b11      	cmp	r3, #17
 800837e:	d002      	beq.n	8008386 <FMPI2C_ITError+0x9a>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b21      	cmp	r3, #33	; 0x21
 8008384:	d133      	bne.n	80083ee <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008394:	d107      	bne.n	80083a6 <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7ff f92c 	bl	8007608 <HAL_DMA_GetState>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d017      	beq.n	80083e6 <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	4a33      	ldr	r2, [pc, #204]	; (8008488 <FMPI2C_ITError+0x19c>)
 80083bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe ff70 	bl	80072b0 <HAL_DMA_Abort_IT>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d04d      	beq.n	8008472 <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083e4:	e045      	b.n	8008472 <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f850 	bl	800848c <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083ec:	e041      	b.n	8008472 <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d039      	beq.n	800846a <FMPI2C_ITError+0x17e>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b12      	cmp	r3, #18
 80083fa:	d002      	beq.n	8008402 <FMPI2C_ITError+0x116>
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b22      	cmp	r3, #34	; 0x22
 8008400:	d133      	bne.n	800846a <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008410:	d107      	bne.n	8008422 <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008420:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff f8ee 	bl	8007608 <HAL_DMA_GetState>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d017      	beq.n	8008462 <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008436:	4a14      	ldr	r2, [pc, #80]	; (8008488 <FMPI2C_ITError+0x19c>)
 8008438:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe ff32 	bl	80072b0 <HAL_DMA_Abort_IT>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d011      	beq.n	8008476 <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008460:	e009      	b.n	8008476 <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f812 	bl	800848c <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008468:	e005      	b.n	8008476 <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f80e 	bl	800848c <FMPI2C_TreatErrorCallback>
  }
}
 8008470:	e002      	b.n	8008478 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008472:	bf00      	nop
 8008474:	e000      	b.n	8008478 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008476:	bf00      	nop
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	ffff0000 	.word	0xffff0000
 8008484:	08007c63 	.word	0x08007c63
 8008488:	08008523 	.word	0x08008523

0800848c <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d10e      	bne.n	80084be <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fbc9 	bl	8007c4e <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 80084bc:	e009      	b.n	80084d2 <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff fbb4 	bl	8007c3a <HAL_FMPI2C_ErrorCallback>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d103      	bne.n	80084f8 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2200      	movs	r2, #0
 80084f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b01      	cmp	r3, #1
 8008504:	d007      	beq.n	8008516 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	699a      	ldr	r2, [r3, #24]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	619a      	str	r2, [r3, #24]
  }
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	2200      	movs	r2, #0
 800853e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854c:	2200      	movs	r2, #0
 800854e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7ff ff9b 	bl	800848c <FMPI2C_TreatErrorCallback>
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 800856e:	e022      	b.n	80085b6 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d01e      	beq.n	80085b6 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008578:	f7fd fe90 	bl	800629c <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d302      	bcc.n	800858e <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d113      	bne.n	80085b6 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008592:	f043 0220 	orr.w	r2, r3, #32
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e00f      	b.n	80085d6 <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4013      	ands	r3, r2
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	bf0c      	ite	eq
 80085c6:	2301      	moveq	r3, #1
 80085c8:	2300      	movne	r3, #0
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d0cd      	beq.n	8008570 <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 80085ea:	e02c      	b.n	8008646 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 f871 	bl	80086d8 <FMPI2C_IsErrorOccurred>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e02a      	b.n	8008656 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008606:	d01e      	beq.n	8008646 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008608:	f7fd fe48 	bl	800629c <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d302      	bcc.n	800861e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d113      	bne.n	8008646 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e007      	b.n	8008656 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b02      	cmp	r3, #2
 8008652:	d1cb      	bne.n	80085ec <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800866a:	e028      	b.n	80086be <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f831 	bl	80086d8 <FMPI2C_IsErrorOccurred>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e026      	b.n	80086ce <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008680:	f7fd fe0c 	bl	800629c <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	429a      	cmp	r2, r3
 800868e:	d302      	bcc.n	8008696 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d113      	bne.n	80086be <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869a:	f043 0220 	orr.w	r2, r3, #32
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	645a      	str	r2, [r3, #68]	; 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e007      	b.n	80086ce <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d1cf      	bne.n	800866c <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <FMPI2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsErrorOccurred(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hfmpi2c->Instance->ISR;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_AF))
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d040      	beq.n	8008780 <FMPI2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800870c:	d01d      	beq.n	800874a <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800871c:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800871e:	e014      	b.n	800874a <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008726:	d010      	beq.n	800874a <FMPI2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008728:	f7fd fdb8 	bl	800629c <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d302      	bcc.n	800873e <FMPI2C_IsErrorOccurred+0x66>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d105      	bne.n	800874a <FMPI2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_FMPI2C_ERROR_TIMEOUT;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f043 0320 	orr.w	r3, r3, #32
 8008744:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b20      	cmp	r3, #32
 8008756:	d002      	beq.n	800875e <FMPI2C_IsErrorOccurred+0x86>
 8008758:	7ffb      	ldrb	r3, [r7, #31]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0e0      	beq.n	8008720 <FMPI2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800875e:	7ffb      	ldrb	r3, [r7, #31]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d103      	bne.n	800876c <FMPI2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2220      	movs	r2, #32
 800876a:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2210      	movs	r2, #16
 8008772:	61da      	str	r2, [r3, #28]

    error_code |= HAL_FMPI2C_ERROR_AF;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	f043 0304 	orr.w	r3, r3, #4
 800877a:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hfmpi2c->Instance->ISR;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_BERR))
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <FMPI2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_FMPI2C_ERROR_BERR;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f043 0301 	orr.w	r3, r3, #1
 8008798:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_OVR))
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <FMPI2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_FMPI2C_ERROR_OVR;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	f043 0308 	orr.w	r3, r3, #8
 80087b8:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_ARLO))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <FMPI2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_FMPI2C_ERROR_ARLO;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f043 0302 	orr.w	r3, r3, #2
 80087d8:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 80087e8:	7ffb      	ldrb	r3, [r7, #31]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01c      	beq.n	8008828 <FMPI2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fe73 	bl	80084da <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6859      	ldr	r1, [r3, #4]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <FMPI2C_IsErrorOccurred+0x15c>)
 8008800:	400b      	ands	r3, r1
 8008802:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= error_code;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	431a      	orrs	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	645a      	str	r2, [r3, #68]	; 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008828:	7ffb      	ldrb	r3, [r7, #31]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	fe00e800 	.word	0xfe00e800

08008838 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	817b      	strh	r3, [r7, #10]
 8008846:	4613      	mov	r3, r2
 8008848:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 800884a:	897b      	ldrh	r3, [r7, #10]
 800884c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 8008850:	7a7b      	ldrb	r3, [r7, #9]
 8008852:	041b      	lsls	r3, r3, #16
 8008854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8008858:	431a      	orrs	r2, r3
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	4313      	orrs	r3, r2
 8008862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008866:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2, \
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	0d5b      	lsrs	r3, r3, #21
 8008872:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008876:	4b08      	ldr	r3, [pc, #32]	; (8008898 <FMPI2C_TransferConfig+0x60>)
 8008878:	430b      	orrs	r3, r1
 800887a:	43db      	mvns	r3, r3
 800887c:	ea02 0103 	and.w	r1, r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]
             ((FMPI2C_CR2_SADD | FMPI2C_CR2_NBYTES | FMPI2C_CR2_RELOAD | FMPI2C_CR2_AUTOEND | \
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                FMPI2C_CR2_START | FMPI2C_CR2_STOP)), tmp);
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	03ff63ff 	.word	0x03ff63ff

0800889c <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 80088ac:	887b      	ldrh	r3, [r7, #2]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00f      	beq.n	80088d6 <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80088bc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088ca:	2b28      	cmp	r3, #40	; 0x28
 80088cc:	d003      	beq.n	80088d6 <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80088d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 80088d6:	887b      	ldrh	r3, [r7, #2]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00f      	beq.n	8008900 <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80088e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088f4:	2b28      	cmp	r3, #40	; 0x28
 80088f6:	d003      	beq.n	8008900 <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80088fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 8008900:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008904:	2b00      	cmp	r3, #0
 8008906:	da03      	bge.n	8008910 <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800890e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 8008910:	887b      	ldrh	r3, [r7, #2]
 8008912:	2b10      	cmp	r3, #16
 8008914:	d103      	bne.n	800891e <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800891c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 800891e:	887b      	ldrh	r3, [r7, #2]
 8008920:	2b20      	cmp	r3, #32
 8008922:	d103      	bne.n	800892c <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f043 0320 	orr.w	r3, r3, #32
 800892a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 800892c:	887b      	ldrh	r3, [r7, #2]
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	d103      	bne.n	800893a <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008938:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	43da      	mvns	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	400a      	ands	r2, r1
 800894a:	601a      	str	r2, [r3, #0]
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b20      	cmp	r3, #32
 800896c:	d138      	bne.n	80089e0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8008978:	2302      	movs	r3, #2
 800897a:	e032      	b.n	80089e2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2224      	movs	r2, #36	; 0x24
 8008988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	e000      	b.n	80089e2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089e0:	2302      	movs	r3, #2
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80089fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a00:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8008a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a06:	6453      	str	r3, [r2, #68]	; 0x44
 8008a08:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8008a14:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8008a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a18:	4905      	ldr	r1, [pc, #20]	; (8008a30 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008a20:	bf00      	nop
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	40013800 	.word	0x40013800

08008a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b089      	sub	sp, #36	; 0x24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	e159      	b.n	8008d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a50:	2201      	movs	r2, #1
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4013      	ands	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	f040 8148 	bne.w	8008cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d005      	beq.n	8008a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d130      	bne.n	8008ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	2203      	movs	r2, #3
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008abc:	2201      	movs	r2, #1
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	091b      	lsrs	r3, r3, #4
 8008ad2:	f003 0201 	and.w	r2, r3, #1
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f003 0303 	and.w	r3, r3, #3
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d017      	beq.n	8008b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	2203      	movs	r2, #3
 8008b00:	fa02 f303 	lsl.w	r3, r2, r3
 8008b04:	43db      	mvns	r3, r3
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d123      	bne.n	8008b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	08da      	lsrs	r2, r3, #3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3208      	adds	r2, #8
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	220f      	movs	r2, #15
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	4013      	ands	r3, r2
 8008b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	fa02 f303 	lsl.w	r3, r2, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	08da      	lsrs	r2, r3, #3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3208      	adds	r2, #8
 8008b72:	69b9      	ldr	r1, [r7, #24]
 8008b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	2203      	movs	r2, #3
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	43db      	mvns	r3, r3
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f003 0203 	and.w	r2, r3, #3
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 80a2 	beq.w	8008cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	4b57      	ldr	r3, [pc, #348]	; (8008d1c <HAL_GPIO_Init+0x2e8>)
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc2:	4a56      	ldr	r2, [pc, #344]	; (8008d1c <HAL_GPIO_Init+0x2e8>)
 8008bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bca:	4b54      	ldr	r3, [pc, #336]	; (8008d1c <HAL_GPIO_Init+0x2e8>)
 8008bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bd6:	4a52      	ldr	r2, [pc, #328]	; (8008d20 <HAL_GPIO_Init+0x2ec>)
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	3302      	adds	r3, #2
 8008bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	220f      	movs	r2, #15
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	43db      	mvns	r3, r3
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a49      	ldr	r2, [pc, #292]	; (8008d24 <HAL_GPIO_Init+0x2f0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d019      	beq.n	8008c36 <HAL_GPIO_Init+0x202>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a48      	ldr	r2, [pc, #288]	; (8008d28 <HAL_GPIO_Init+0x2f4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d013      	beq.n	8008c32 <HAL_GPIO_Init+0x1fe>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a47      	ldr	r2, [pc, #284]	; (8008d2c <HAL_GPIO_Init+0x2f8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00d      	beq.n	8008c2e <HAL_GPIO_Init+0x1fa>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a46      	ldr	r2, [pc, #280]	; (8008d30 <HAL_GPIO_Init+0x2fc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d007      	beq.n	8008c2a <HAL_GPIO_Init+0x1f6>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a45      	ldr	r2, [pc, #276]	; (8008d34 <HAL_GPIO_Init+0x300>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d101      	bne.n	8008c26 <HAL_GPIO_Init+0x1f2>
 8008c22:	2304      	movs	r3, #4
 8008c24:	e008      	b.n	8008c38 <HAL_GPIO_Init+0x204>
 8008c26:	2307      	movs	r3, #7
 8008c28:	e006      	b.n	8008c38 <HAL_GPIO_Init+0x204>
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e004      	b.n	8008c38 <HAL_GPIO_Init+0x204>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e002      	b.n	8008c38 <HAL_GPIO_Init+0x204>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e000      	b.n	8008c38 <HAL_GPIO_Init+0x204>
 8008c36:	2300      	movs	r3, #0
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	f002 0203 	and.w	r2, r2, #3
 8008c3e:	0092      	lsls	r2, r2, #2
 8008c40:	4093      	lsls	r3, r2
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c48:	4935      	ldr	r1, [pc, #212]	; (8008d20 <HAL_GPIO_Init+0x2ec>)
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	089b      	lsrs	r3, r3, #2
 8008c4e:	3302      	adds	r3, #2
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c56:	4b38      	ldr	r3, [pc, #224]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c7a:	4a2f      	ldr	r2, [pc, #188]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c80:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	43db      	mvns	r3, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ca4:	4a24      	ldr	r2, [pc, #144]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008caa:	4b23      	ldr	r3, [pc, #140]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	43db      	mvns	r3, r3
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cce:	4a1a      	ldr	r2, [pc, #104]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cd4:	4b18      	ldr	r3, [pc, #96]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cf8:	4a0f      	ldr	r2, [pc, #60]	; (8008d38 <HAL_GPIO_Init+0x304>)
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	3301      	adds	r3, #1
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	f67f aea2 	bls.w	8008a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d0c:	bf00      	nop
 8008d0e:	bf00      	nop
 8008d10:	3724      	adds	r7, #36	; 0x24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	40013800 	.word	0x40013800
 8008d24:	40020000 	.word	0x40020000
 8008d28:	40020400 	.word	0x40020400
 8008d2c:	40020800 	.word	0x40020800
 8008d30:	40020c00 	.word	0x40020c00
 8008d34:	40021000 	.word	0x40021000
 8008d38:	40013c00 	.word	0x40013c00

08008d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e001      	b.n	8008d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	807b      	strh	r3, [r7, #2]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d7c:	787b      	ldrb	r3, [r7, #1]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d82:	887a      	ldrh	r2, [r7, #2]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d88:	e003      	b.n	8008d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	041a      	lsls	r2, r3, #16
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	619a      	str	r2, [r3, #24]
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008dac:	695a      	ldr	r2, [r3, #20]
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	4013      	ands	r3, r2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d006      	beq.n	8008dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008db6:	4a05      	ldr	r2, [pc, #20]	; (8008dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fa fe52 	bl	8003a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40013c00 	.word	0x40013c00

08008dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e12b      	b.n	800903a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7fc f820 	bl	8004e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2224      	movs	r2, #36	; 0x24
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0201 	bic.w	r2, r2, #1
 8008e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e34:	f000 ffb4 	bl	8009da0 <HAL_RCC_GetPCLK1Freq>
 8008e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4a81      	ldr	r2, [pc, #516]	; (8009044 <HAL_I2C_Init+0x274>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d807      	bhi.n	8008e54 <HAL_I2C_Init+0x84>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4a80      	ldr	r2, [pc, #512]	; (8009048 <HAL_I2C_Init+0x278>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	bf94      	ite	ls
 8008e4c:	2301      	movls	r3, #1
 8008e4e:	2300      	movhi	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	e006      	b.n	8008e62 <HAL_I2C_Init+0x92>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4a7d      	ldr	r2, [pc, #500]	; (800904c <HAL_I2C_Init+0x27c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	bf94      	ite	ls
 8008e5c:	2301      	movls	r3, #1
 8008e5e:	2300      	movhi	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e0e7      	b.n	800903a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4a78      	ldr	r2, [pc, #480]	; (8009050 <HAL_I2C_Init+0x280>)
 8008e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e72:	0c9b      	lsrs	r3, r3, #18
 8008e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6a1b      	ldr	r3, [r3, #32]
 8008e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	4a6a      	ldr	r2, [pc, #424]	; (8009044 <HAL_I2C_Init+0x274>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d802      	bhi.n	8008ea4 <HAL_I2C_Init+0xd4>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	e009      	b.n	8008eb8 <HAL_I2C_Init+0xe8>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	4a69      	ldr	r2, [pc, #420]	; (8009054 <HAL_I2C_Init+0x284>)
 8008eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb4:	099b      	lsrs	r3, r3, #6
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6812      	ldr	r2, [r2, #0]
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	495c      	ldr	r1, [pc, #368]	; (8009044 <HAL_I2C_Init+0x274>)
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	d819      	bhi.n	8008f0c <HAL_I2C_Init+0x13c>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	1e59      	subs	r1, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ee6:	1c59      	adds	r1, r3, #1
 8008ee8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008eec:	400b      	ands	r3, r1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <HAL_I2C_Init+0x138>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	1e59      	subs	r1, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f00:	3301      	adds	r3, #1
 8008f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f06:	e051      	b.n	8008fac <HAL_I2C_Init+0x1dc>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	e04f      	b.n	8008fac <HAL_I2C_Init+0x1dc>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d111      	bne.n	8008f38 <HAL_I2C_Init+0x168>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	1e58      	subs	r0, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6859      	ldr	r1, [r3, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	440b      	add	r3, r1
 8008f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f26:	3301      	adds	r3, #1
 8008f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bf0c      	ite	eq
 8008f30:	2301      	moveq	r3, #1
 8008f32:	2300      	movne	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	e012      	b.n	8008f5e <HAL_I2C_Init+0x18e>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	1e58      	subs	r0, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6859      	ldr	r1, [r3, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	0099      	lsls	r1, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_I2C_Init+0x196>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e022      	b.n	8008fac <HAL_I2C_Init+0x1dc>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10e      	bne.n	8008f8c <HAL_I2C_Init+0x1bc>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	1e58      	subs	r0, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6859      	ldr	r1, [r3, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	440b      	add	r3, r1
 8008f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f80:	3301      	adds	r3, #1
 8008f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8a:	e00f      	b.n	8008fac <HAL_I2C_Init+0x1dc>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1e58      	subs	r0, r3, #1
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6859      	ldr	r1, [r3, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	0099      	lsls	r1, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	6809      	ldr	r1, [r1, #0]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69da      	ldr	r2, [r3, #28]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6911      	ldr	r1, [r2, #16]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	68d2      	ldr	r2, [r2, #12]
 8008fe6:	4311      	orrs	r1, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	430b      	orrs	r3, r1
 8008fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695a      	ldr	r2, [r3, #20]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0201 	orr.w	r2, r2, #1
 800901a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	000186a0 	.word	0x000186a0
 8009048:	001e847f 	.word	0x001e847f
 800904c:	003d08ff 	.word	0x003d08ff
 8009050:	431bde83 	.word	0x431bde83
 8009054:	10624dd3 	.word	0x10624dd3

08009058 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e154      	b.n	8009314 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a98      	ldr	r2, [pc, #608]	; (80092e4 <HAL_I2S_Init+0x28c>)
 8009082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7fb ff21 	bl	8004ecc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2202      	movs	r2, #2
 800908e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80090a0:	f023 030f 	bic.w	r3, r3, #15
 80090a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2202      	movs	r2, #2
 80090ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d06f      	beq.n	8009196 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80090be:	2310      	movs	r3, #16
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e001      	b.n	80090c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80090c4:	2320      	movs	r3, #32
 80090c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d802      	bhi.n	80090d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a83      	ldr	r2, [pc, #524]	; (80092e8 <HAL_I2S_Init+0x290>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <HAL_I2S_Init+0x92>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a81      	ldr	r2, [pc, #516]	; (80092ec <HAL_I2S_Init+0x294>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d104      	bne.n	80090f4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80090ea:	2001      	movs	r0, #1
 80090ec:	f001 f84e 	bl	800a18c <HAL_RCCEx_GetPeriphCLKFreq>
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	e003      	b.n	80090fc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80090f4:	2002      	movs	r0, #2
 80090f6:	f001 f849 	bl	800a18c <HAL_RCCEx_GetPeriphCLKFreq>
 80090fa:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009104:	d125      	bne.n	8009152 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	fbb2 f2f3 	udiv	r2, r2, r3
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	461a      	mov	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	3305      	adds	r3, #5
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	e01f      	b.n	8009170 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	fbb2 f2f3 	udiv	r2, r2, r3
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	fbb2 f3f3 	udiv	r3, r2, r3
 800914c:	3305      	adds	r3, #5
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	e00e      	b.n	8009170 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	fbb2 f2f3 	udiv	r2, r2, r3
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	461a      	mov	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	3305      	adds	r3, #5
 800916e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4a5f      	ldr	r2, [pc, #380]	; (80092f0 <HAL_I2S_Init+0x298>)
 8009174:	fba2 2303 	umull	r2, r3, r2, r3
 8009178:	08db      	lsrs	r3, r3, #3
 800917a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	e003      	b.n	800919e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009196:	2302      	movs	r3, #2
 8009198:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d902      	bls.n	80091aa <HAL_I2S_Init+0x152>
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	2bff      	cmp	r3, #255	; 0xff
 80091a8:	d907      	bls.n	80091ba <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ae:	f043 0210 	orr.w	r2, r3, #16
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e0ac      	b.n	8009314 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	ea42 0103 	orr.w	r1, r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80091d8:	f023 030f 	bic.w	r3, r3, #15
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6851      	ldr	r1, [r2, #4]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6892      	ldr	r2, [r2, #8]
 80091e4:	4311      	orrs	r1, r2
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	68d2      	ldr	r2, [r2, #12]
 80091ea:	4311      	orrs	r1, r2
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6992      	ldr	r2, [r2, #24]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	2b30      	cmp	r3, #48	; 0x30
 8009204:	d003      	beq.n	800920e <HAL_I2S_Init+0x1b6>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2bb0      	cmp	r3, #176	; 0xb0
 800920c:	d107      	bne.n	800921e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69da      	ldr	r2, [r3, #28]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800921c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d16e      	bne.n	8009304 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a32      	ldr	r2, [pc, #200]	; (80092f4 <HAL_I2S_Init+0x29c>)
 800922a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a2d      	ldr	r2, [pc, #180]	; (80092e8 <HAL_I2S_Init+0x290>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d101      	bne.n	800923a <HAL_I2S_Init+0x1e2>
 8009236:	4b30      	ldr	r3, [pc, #192]	; (80092f8 <HAL_I2S_Init+0x2a0>)
 8009238:	e001      	b.n	800923e <HAL_I2S_Init+0x1e6>
 800923a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	4928      	ldr	r1, [pc, #160]	; (80092e8 <HAL_I2S_Init+0x290>)
 8009246:	428a      	cmp	r2, r1
 8009248:	d101      	bne.n	800924e <HAL_I2S_Init+0x1f6>
 800924a:	4a2b      	ldr	r2, [pc, #172]	; (80092f8 <HAL_I2S_Init+0x2a0>)
 800924c:	e001      	b.n	8009252 <HAL_I2S_Init+0x1fa>
 800924e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009252:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009256:	f023 030f 	bic.w	r3, r3, #15
 800925a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a21      	ldr	r2, [pc, #132]	; (80092e8 <HAL_I2S_Init+0x290>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d101      	bne.n	800926a <HAL_I2S_Init+0x212>
 8009266:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <HAL_I2S_Init+0x2a0>)
 8009268:	e001      	b.n	800926e <HAL_I2S_Init+0x216>
 800926a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800926e:	2202      	movs	r2, #2
 8009270:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1c      	ldr	r2, [pc, #112]	; (80092e8 <HAL_I2S_Init+0x290>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d101      	bne.n	8009280 <HAL_I2S_Init+0x228>
 800927c:	4b1e      	ldr	r3, [pc, #120]	; (80092f8 <HAL_I2S_Init+0x2a0>)
 800927e:	e001      	b.n	8009284 <HAL_I2S_Init+0x22c>
 8009280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009290:	d003      	beq.n	800929a <HAL_I2S_Init+0x242>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800929a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	e001      	b.n	80092a6 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80092a2:	2300      	movs	r3, #0
 80092a4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80092b0:	4313      	orrs	r3, r2
 80092b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80092c4:	4313      	orrs	r3, r2
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	897b      	ldrh	r3, [r7, #10]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80092d2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a03      	ldr	r2, [pc, #12]	; (80092e8 <HAL_I2S_Init+0x290>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d10e      	bne.n	80092fc <HAL_I2S_Init+0x2a4>
 80092de:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <HAL_I2S_Init+0x2a0>)
 80092e0:	e00e      	b.n	8009300 <HAL_I2S_Init+0x2a8>
 80092e2:	bf00      	nop
 80092e4:	080093ff 	.word	0x080093ff
 80092e8:	40003800 	.word	0x40003800
 80092ec:	40003c00 	.word	0x40003c00
 80092f0:	cccccccd 	.word	0xcccccccd
 80092f4:	08009515 	.word	0x08009515
 80092f8:	40003400 	.word	0x40003400
 80092fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009300:	897a      	ldrh	r2, [r7, #10]
 8009302:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	881a      	ldrh	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	1c9a      	adds	r2, r3, #2
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009374:	b29b      	uxth	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10e      	bne.n	8009398 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009388:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ffc2 	bl	800931c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b2:	b292      	uxth	r2, r2
 80093b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	1c9a      	adds	r2, r3, #2
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10e      	bne.n	80093f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80093e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7fa fbcd 	bl	8003b90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b04      	cmp	r3, #4
 8009418:	d13a      	bne.n	8009490 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d109      	bne.n	8009438 <I2S_IRQHandler+0x3a>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942e:	2b40      	cmp	r3, #64	; 0x40
 8009430:	d102      	bne.n	8009438 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff ffb4 	bl	80093a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d126      	bne.n	8009490 <I2S_IRQHandler+0x92>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b20      	cmp	r3, #32
 800944e:	d11f      	bne.n	8009490 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800945e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009460:	2300      	movs	r3, #0
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009482:	f043 0202 	orr.w	r2, r3, #2
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff ff50 	bl	8009330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b03      	cmp	r3, #3
 800949a:	d136      	bne.n	800950a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d109      	bne.n	80094ba <I2S_IRQHandler+0xbc>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b0:	2b80      	cmp	r3, #128	; 0x80
 80094b2:	d102      	bne.n	80094ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ff45 	bl	8009344 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f003 0308 	and.w	r3, r3, #8
 80094c0:	2b08      	cmp	r3, #8
 80094c2:	d122      	bne.n	800950a <I2S_IRQHandler+0x10c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d11b      	bne.n	800950a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fc:	f043 0204 	orr.w	r2, r3, #4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff13 	bl	8009330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800950a:	bf00      	nop
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a92      	ldr	r2, [pc, #584]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d101      	bne.n	8009532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800952e:	4b92      	ldr	r3, [pc, #584]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009530:	e001      	b.n	8009536 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a8b      	ldr	r2, [pc, #556]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d101      	bne.n	8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800954c:	4b8a      	ldr	r3, [pc, #552]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800954e:	e001      	b.n	8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009560:	d004      	beq.n	800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	f040 8099 	bne.w	800969e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b02      	cmp	r3, #2
 8009574:	d107      	bne.n	8009586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f91b 	bl	80097bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b01      	cmp	r3, #1
 800958e:	d107      	bne.n	80095a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f9be 	bl	800991c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d13a      	bne.n	8009620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d035      	beq.n	8009620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a6e      	ldr	r2, [pc, #440]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d101      	bne.n	80095c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80095be:	4b6e      	ldr	r3, [pc, #440]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80095c0:	e001      	b.n	80095c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80095c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4969      	ldr	r1, [pc, #420]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80095ce:	428b      	cmp	r3, r1
 80095d0:	d101      	bne.n	80095d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80095d2:	4b69      	ldr	r3, [pc, #420]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80095d4:	e001      	b.n	80095da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80095d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80095de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009612:	f043 0202 	orr.w	r2, r3, #2
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fe88 	bl	8009330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b08      	cmp	r3, #8
 8009628:	f040 80c3 	bne.w	80097b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 80bd 	beq.w	80097b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009646:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a49      	ldr	r2, [pc, #292]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d101      	bne.n	8009656 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8009652:	4b49      	ldr	r3, [pc, #292]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009654:	e001      	b.n	800965a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8009656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4944      	ldr	r1, [pc, #272]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009662:	428b      	cmp	r3, r1
 8009664:	d101      	bne.n	800966a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8009666:	4b44      	ldr	r3, [pc, #272]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009668:	e001      	b.n	800966e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800966a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800966e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009672:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009674:	2300      	movs	r3, #0
 8009676:	60bb      	str	r3, [r7, #8]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968e:	f043 0204 	orr.w	r2, r3, #4
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fe4a 	bl	8009330 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800969c:	e089      	b.n	80097b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d107      	bne.n	80096b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f8b4 	bl	8009820 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d107      	bne.n	80096d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8f3 	bl	80098b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d12f      	bne.n	800973c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d02a      	beq.n	800973c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80096f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1e      	ldr	r2, [pc, #120]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d101      	bne.n	8009704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009700:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009702:	e001      	b.n	8009708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009704:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4919      	ldr	r1, [pc, #100]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009710:	428b      	cmp	r3, r1
 8009712:	d101      	bne.n	8009718 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009714:	4b18      	ldr	r3, [pc, #96]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009716:	e001      	b.n	800971c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8009718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800971c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009720:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972e:	f043 0202 	orr.w	r2, r3, #2
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff fdfa 	bl	8009330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b08      	cmp	r3, #8
 8009744:	d136      	bne.n	80097b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	d031      	beq.n	80097b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a07      	ldr	r2, [pc, #28]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d101      	bne.n	800975e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800975a:	4b07      	ldr	r3, [pc, #28]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800975c:	e001      	b.n	8009762 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800975e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4902      	ldr	r1, [pc, #8]	; (8009774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800976a:	428b      	cmp	r3, r1
 800976c:	d106      	bne.n	800977c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800976e:	4b02      	ldr	r3, [pc, #8]	; (8009778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009770:	e006      	b.n	8009780 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8009772:	bf00      	nop
 8009774:	40003800 	.word	0x40003800
 8009778:	40003400 	.word	0x40003400
 800977c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009784:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009794:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a2:	f043 0204 	orr.w	r2, r3, #4
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fdc0 	bl	8009330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80097b0:	e000      	b.n	80097b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80097b2:	bf00      	nop
}
 80097b4:	bf00      	nop
 80097b6:	3720      	adds	r7, #32
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	1c99      	adds	r1, r3, #2
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	6251      	str	r1, [r2, #36]	; 0x24
 80097ce:	881a      	ldrh	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097da:	b29b      	uxth	r3, r3
 80097dc:	3b01      	subs	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d113      	bne.n	8009816 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80097fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d106      	bne.n	8009816 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7fa f9b3 	bl	8003b7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	1c99      	adds	r1, r3, #2
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6251      	str	r1, [r2, #36]	; 0x24
 8009832:	8819      	ldrh	r1, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1d      	ldr	r2, [pc, #116]	; (80098b0 <I2SEx_TxISR_I2SExt+0x90>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d101      	bne.n	8009842 <I2SEx_TxISR_I2SExt+0x22>
 800983e:	4b1d      	ldr	r3, [pc, #116]	; (80098b4 <I2SEx_TxISR_I2SExt+0x94>)
 8009840:	e001      	b.n	8009846 <I2SEx_TxISR_I2SExt+0x26>
 8009842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009846:	460a      	mov	r2, r1
 8009848:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d121      	bne.n	80098a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a12      	ldr	r2, [pc, #72]	; (80098b0 <I2SEx_TxISR_I2SExt+0x90>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d101      	bne.n	8009870 <I2SEx_TxISR_I2SExt+0x50>
 800986c:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <I2SEx_TxISR_I2SExt+0x94>)
 800986e:	e001      	b.n	8009874 <I2SEx_TxISR_I2SExt+0x54>
 8009870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	490d      	ldr	r1, [pc, #52]	; (80098b0 <I2SEx_TxISR_I2SExt+0x90>)
 800987c:	428b      	cmp	r3, r1
 800987e:	d101      	bne.n	8009884 <I2SEx_TxISR_I2SExt+0x64>
 8009880:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <I2SEx_TxISR_I2SExt+0x94>)
 8009882:	e001      	b.n	8009888 <I2SEx_TxISR_I2SExt+0x68>
 8009884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009888:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800988c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009892:	b29b      	uxth	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d106      	bne.n	80098a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7fa f96b 	bl	8003b7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	40003800 	.word	0x40003800
 80098b4:	40003400 	.word	0x40003400

080098b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68d8      	ldr	r0, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	1c99      	adds	r1, r3, #2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80098d0:	b282      	uxth	r2, r0
 80098d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d113      	bne.n	8009914 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80098fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fa f934 	bl	8003b7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a20      	ldr	r2, [pc, #128]	; (80099ac <I2SEx_RxISR_I2SExt+0x90>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d101      	bne.n	8009932 <I2SEx_RxISR_I2SExt+0x16>
 800992e:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <I2SEx_RxISR_I2SExt+0x94>)
 8009930:	e001      	b.n	8009936 <I2SEx_RxISR_I2SExt+0x1a>
 8009932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009936:	68d8      	ldr	r0, [r3, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	1c99      	adds	r1, r3, #2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009942:	b282      	uxth	r2, r0
 8009944:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d121      	bne.n	80099a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a12      	ldr	r2, [pc, #72]	; (80099ac <I2SEx_RxISR_I2SExt+0x90>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d101      	bne.n	800996c <I2SEx_RxISR_I2SExt+0x50>
 8009968:	4b11      	ldr	r3, [pc, #68]	; (80099b0 <I2SEx_RxISR_I2SExt+0x94>)
 800996a:	e001      	b.n	8009970 <I2SEx_RxISR_I2SExt+0x54>
 800996c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	490d      	ldr	r1, [pc, #52]	; (80099ac <I2SEx_RxISR_I2SExt+0x90>)
 8009978:	428b      	cmp	r3, r1
 800997a:	d101      	bne.n	8009980 <I2SEx_RxISR_I2SExt+0x64>
 800997c:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <I2SEx_RxISR_I2SExt+0x94>)
 800997e:	e001      	b.n	8009984 <I2SEx_RxISR_I2SExt+0x68>
 8009980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009984:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009988:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998e:	b29b      	uxth	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fa f8ed 	bl	8003b7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	40003800 	.word	0x40003800
 80099b0:	40003400 	.word	0x40003400

080099b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e0cc      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099c8:	4b68      	ldr	r3, [pc, #416]	; (8009b6c <HAL_RCC_ClockConfig+0x1b8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d90c      	bls.n	80099f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099d6:	4b65      	ldr	r3, [pc, #404]	; (8009b6c <HAL_RCC_ClockConfig+0x1b8>)
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099de:	4b63      	ldr	r3, [pc, #396]	; (8009b6c <HAL_RCC_ClockConfig+0x1b8>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d001      	beq.n	80099f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e0b8      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d020      	beq.n	8009a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a08:	4b59      	ldr	r3, [pc, #356]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	4a58      	ldr	r2, [pc, #352]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a20:	4b53      	ldr	r3, [pc, #332]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	4a52      	ldr	r2, [pc, #328]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a2c:	4b50      	ldr	r3, [pc, #320]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	494d      	ldr	r1, [pc, #308]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d044      	beq.n	8009ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d107      	bne.n	8009a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a52:	4b47      	ldr	r3, [pc, #284]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d119      	bne.n	8009a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e07f      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d003      	beq.n	8009a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d107      	bne.n	8009a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a72:	4b3f      	ldr	r3, [pc, #252]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e06f      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a82:	4b3b      	ldr	r3, [pc, #236]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e067      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a92:	4b37      	ldr	r3, [pc, #220]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f023 0203 	bic.w	r2, r3, #3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	4934      	ldr	r1, [pc, #208]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009aa4:	f7fc fbfa 	bl	800629c <HAL_GetTick>
 8009aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aaa:	e00a      	b.n	8009ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aac:	f7fc fbf6 	bl	800629c <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d901      	bls.n	8009ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e04f      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ac2:	4b2b      	ldr	r3, [pc, #172]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 020c 	and.w	r2, r3, #12
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d1eb      	bne.n	8009aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ad4:	4b25      	ldr	r3, [pc, #148]	; (8009b6c <HAL_RCC_ClockConfig+0x1b8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0307 	and.w	r3, r3, #7
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d20c      	bcs.n	8009afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae2:	4b22      	ldr	r3, [pc, #136]	; (8009b6c <HAL_RCC_ClockConfig+0x1b8>)
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aea:	4b20      	ldr	r3, [pc, #128]	; (8009b6c <HAL_RCC_ClockConfig+0x1b8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d001      	beq.n	8009afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e032      	b.n	8009b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d008      	beq.n	8009b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b08:	4b19      	ldr	r3, [pc, #100]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	4916      	ldr	r1, [pc, #88]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d009      	beq.n	8009b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b26:	4b12      	ldr	r3, [pc, #72]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	490e      	ldr	r1, [pc, #56]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b3a:	f000 f821 	bl	8009b80 <HAL_RCC_GetSysClockFreq>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <HAL_RCC_ClockConfig+0x1bc>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	091b      	lsrs	r3, r3, #4
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	490a      	ldr	r1, [pc, #40]	; (8009b74 <HAL_RCC_ClockConfig+0x1c0>)
 8009b4c:	5ccb      	ldrb	r3, [r1, r3]
 8009b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b52:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <HAL_RCC_ClockConfig+0x1c4>)
 8009b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <HAL_RCC_ClockConfig+0x1c8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fc fb6e 	bl	800623c <HAL_InitTick>

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	40023c00 	.word	0x40023c00
 8009b70:	40023800 	.word	0x40023800
 8009b74:	08010d30 	.word	0x08010d30
 8009b78:	20000004 	.word	0x20000004
 8009b7c:	20000008 	.word	0x20000008

08009b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b84:	b094      	sub	sp, #80	; 0x50
 8009b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b90:	2300      	movs	r3, #0
 8009b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b98:	4b79      	ldr	r3, [pc, #484]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f003 030c 	and.w	r3, r3, #12
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d00d      	beq.n	8009bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	f200 80e1 	bhi.w	8009d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d003      	beq.n	8009bba <HAL_RCC_GetSysClockFreq+0x3a>
 8009bb2:	e0db      	b.n	8009d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bb4:	4b73      	ldr	r3, [pc, #460]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8009bb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009bb8:	e0db      	b.n	8009d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009bba:	4b72      	ldr	r3, [pc, #456]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8009bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009bbe:	e0d8      	b.n	8009d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bc0:	4b6f      	ldr	r3, [pc, #444]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009bca:	4b6d      	ldr	r3, [pc, #436]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d063      	beq.n	8009c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bd6:	4b6a      	ldr	r3, [pc, #424]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	099b      	lsrs	r3, r3, #6
 8009bdc:	2200      	movs	r2, #0
 8009bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8009be0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be8:	633b      	str	r3, [r7, #48]	; 0x30
 8009bea:	2300      	movs	r3, #0
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
 8009bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	f04f 0000 	mov.w	r0, #0
 8009bfa:	f04f 0100 	mov.w	r1, #0
 8009bfe:	0159      	lsls	r1, r3, #5
 8009c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c04:	0150      	lsls	r0, r2, #5
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	1a51      	subs	r1, r2, r1
 8009c0e:	6139      	str	r1, [r7, #16]
 8009c10:	4629      	mov	r1, r5
 8009c12:	eb63 0301 	sbc.w	r3, r3, r1
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c24:	4659      	mov	r1, fp
 8009c26:	018b      	lsls	r3, r1, #6
 8009c28:	4651      	mov	r1, sl
 8009c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c2e:	4651      	mov	r1, sl
 8009c30:	018a      	lsls	r2, r1, #6
 8009c32:	4651      	mov	r1, sl
 8009c34:	ebb2 0801 	subs.w	r8, r2, r1
 8009c38:	4659      	mov	r1, fp
 8009c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	f04f 0300 	mov.w	r3, #0
 8009c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c52:	4690      	mov	r8, r2
 8009c54:	4699      	mov	r9, r3
 8009c56:	4623      	mov	r3, r4
 8009c58:	eb18 0303 	adds.w	r3, r8, r3
 8009c5c:	60bb      	str	r3, [r7, #8]
 8009c5e:	462b      	mov	r3, r5
 8009c60:	eb49 0303 	adc.w	r3, r9, r3
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009c72:	4629      	mov	r1, r5
 8009c74:	028b      	lsls	r3, r1, #10
 8009c76:	4621      	mov	r1, r4
 8009c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	028a      	lsls	r2, r1, #10
 8009c80:	4610      	mov	r0, r2
 8009c82:	4619      	mov	r1, r3
 8009c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c86:	2200      	movs	r2, #0
 8009c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c90:	f7f6 ffd2 	bl	8000c38 <__aeabi_uldivmod>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4613      	mov	r3, r2
 8009c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c9c:	e058      	b.n	8009d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c9e:	4b38      	ldr	r3, [pc, #224]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	099b      	lsrs	r3, r3, #6
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	4611      	mov	r1, r2
 8009caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009cae:	623b      	str	r3, [r7, #32]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009cb8:	4642      	mov	r2, r8
 8009cba:	464b      	mov	r3, r9
 8009cbc:	f04f 0000 	mov.w	r0, #0
 8009cc0:	f04f 0100 	mov.w	r1, #0
 8009cc4:	0159      	lsls	r1, r3, #5
 8009cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009cca:	0150      	lsls	r0, r2, #5
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8009cdc:	f04f 0200 	mov.w	r2, #0
 8009ce0:	f04f 0300 	mov.w	r3, #0
 8009ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8009cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	00eb      	lsls	r3, r5, #3
 8009d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d06:	00e2      	lsls	r2, r4, #3
 8009d08:	4614      	mov	r4, r2
 8009d0a:	461d      	mov	r5, r3
 8009d0c:	4643      	mov	r3, r8
 8009d0e:	18e3      	adds	r3, r4, r3
 8009d10:	603b      	str	r3, [r7, #0]
 8009d12:	464b      	mov	r3, r9
 8009d14:	eb45 0303 	adc.w	r3, r5, r3
 8009d18:	607b      	str	r3, [r7, #4]
 8009d1a:	f04f 0200 	mov.w	r2, #0
 8009d1e:	f04f 0300 	mov.w	r3, #0
 8009d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d26:	4629      	mov	r1, r5
 8009d28:	028b      	lsls	r3, r1, #10
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d30:	4621      	mov	r1, r4
 8009d32:	028a      	lsls	r2, r1, #10
 8009d34:	4610      	mov	r0, r2
 8009d36:	4619      	mov	r1, r3
 8009d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	61fa      	str	r2, [r7, #28]
 8009d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d44:	f7f6 ff78 	bl	8000c38 <__aeabi_uldivmod>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	0c1b      	lsrs	r3, r3, #16
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d6a:	e002      	b.n	8009d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3750      	adds	r7, #80	; 0x50
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d7e:	bf00      	nop
 8009d80:	40023800 	.word	0x40023800
 8009d84:	00f42400 	.word	0x00f42400

08009d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d8c:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20000004 	.word	0x20000004

08009da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009da4:	f7ff fff0 	bl	8009d88 <HAL_RCC_GetHCLKFreq>
 8009da8:	4602      	mov	r2, r0
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	0a9b      	lsrs	r3, r3, #10
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	4903      	ldr	r1, [pc, #12]	; (8009dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009db6:	5ccb      	ldrb	r3, [r1, r3]
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	40023800 	.word	0x40023800
 8009dc4:	08010d40 	.word	0x08010d40

08009dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009dcc:	f7ff ffdc 	bl	8009d88 <HAL_RCC_GetHCLKFreq>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	0b5b      	lsrs	r3, r3, #13
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	4903      	ldr	r1, [pc, #12]	; (8009dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dde:	5ccb      	ldrb	r3, [r1, r3]
 8009de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	40023800 	.word	0x40023800
 8009dec:	08010d40 	.word	0x08010d40

08009df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0301 	and.w	r3, r3, #1
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d010      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009e10:	4b87      	ldr	r3, [pc, #540]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e16:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	4984      	ldr	r1, [pc, #528]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d010      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8009e3e:	4b7c      	ldr	r3, [pc, #496]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e44:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	4978      	ldr	r1, [pc, #480]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 8083 	beq.w	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60bb      	str	r3, [r7, #8]
 8009e72:	4b6f      	ldr	r3, [pc, #444]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	4a6e      	ldr	r2, [pc, #440]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8009e7e:	4b6c      	ldr	r3, [pc, #432]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e86:	60bb      	str	r3, [r7, #8]
 8009e88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009e8a:	4b6a      	ldr	r3, [pc, #424]	; (800a034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a69      	ldr	r2, [pc, #420]	; (800a034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e96:	f7fc fa01 	bl	800629c <HAL_GetTick>
 8009e9a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009e9e:	f7fc f9fd 	bl	800629c <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e162      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009eb0:	4b60      	ldr	r3, [pc, #384]	; (800a034 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f0      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ebc:	4b5c      	ldr	r3, [pc, #368]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ec4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d02f      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d028      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009eda:	4b55      	ldr	r3, [pc, #340]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ee4:	4b54      	ldr	r3, [pc, #336]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009eea:	4b53      	ldr	r3, [pc, #332]	; (800a038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009ef0:	4a4f      	ldr	r2, [pc, #316]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ef6:	4b4e      	ldr	r3, [pc, #312]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d114      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009f02:	f7fc f9cb 	bl	800629c <HAL_GetTick>
 8009f06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f08:	e00a      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f0a:	f7fc f9c7 	bl	800629c <HAL_GetTick>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d901      	bls.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e12a      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f20:	4b43      	ldr	r3, [pc, #268]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0ee      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f38:	d10d      	bne.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8009f3a:	4b3d      	ldr	r3, [pc, #244]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f4e:	4938      	ldr	r1, [pc, #224]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	608b      	str	r3, [r1, #8]
 8009f54:	e005      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009f56:	4b36      	ldr	r3, [pc, #216]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	4a35      	ldr	r2, [pc, #212]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009f60:	6093      	str	r3, [r2, #8]
 8009f62:	4b33      	ldr	r3, [pc, #204]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f6e:	4930      	ldr	r1, [pc, #192]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8009f86:	4b2d      	ldr	r3, [pc, #180]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009f88:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0310 	and.w	r3, r3, #16
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009f96:	4b26      	ldr	r3, [pc, #152]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	4922      	ldr	r1, [pc, #136]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0320 	and.w	r3, r3, #32
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d011      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009fb8:	4b1d      	ldr	r3, [pc, #116]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fbe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	491a      	ldr	r1, [pc, #104]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fd6:	d101      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00a      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009fe8:	4b11      	ldr	r3, [pc, #68]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	490e      	ldr	r1, [pc, #56]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d004      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b80      	cmp	r3, #128	; 0x80
 800a00a:	f040 8091 	bne.w	800a130 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a00e:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a014:	f7fc f942 	bl	800629c <HAL_GetTick>
 800a018:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a01a:	e013      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a01c:	f7fc f93e 	bl	800629c <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	2b02      	cmp	r3, #2
 800a028:	d90c      	bls.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e0a3      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800a02e:	bf00      	nop
 800a030:	40023800 	.word	0x40023800
 800a034:	40007000 	.word	0x40007000
 800a038:	42470e40 	.word	0x42470e40
 800a03c:	424711e0 	.word	0x424711e0
 800a040:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a044:	4b4e      	ldr	r3, [pc, #312]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e5      	bne.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800a050:	4a4c      	ldr	r2, [pc, #304]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a056:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d023      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d019      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a094:	d00e      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d019      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d115      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0b2:	d110      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	019b      	lsls	r3, r3, #6
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	061b      	lsls	r3, r3, #24
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	071b      	lsls	r3, r3, #28
 800a0ce:	492c      	ldr	r1, [pc, #176]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	019b      	lsls	r3, r3, #6
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	061b      	lsls	r3, r3, #24
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	071b      	lsls	r3, r3, #28
 800a0fc:	4920      	ldr	r1, [pc, #128]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a104:	4b20      	ldr	r3, [pc, #128]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a10a:	f7fc f8c7 	bl	800629c <HAL_GetTick>
 800a10e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a110:	e008      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a112:	f7fc f8c3 	bl	800629c <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d901      	bls.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e028      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a124:	4b16      	ldr	r3, [pc, #88]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0f0      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00a      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a13c:	4b10      	ldr	r3, [pc, #64]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a142:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	490d      	ldr	r1, [pc, #52]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00a      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a164:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16c:	4904      	ldr	r1, [pc, #16]	; (800a180 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	40023800 	.word	0x40023800
 800a184:	424710d8 	.word	0x424710d8
 800a188:	42470068 	.word	0x42470068

0800a18c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d004      	beq.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	f000 80a1 	beq.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800a1b2:	e13f      	b.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800a1b4:	4ba3      	ldr	r3, [pc, #652]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a1b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ba:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a1c6:	f000 8084 	beq.w	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a1d0:	f200 808c 	bhi.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1da:	d04f      	beq.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1e2:	f200 8083 	bhi.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1f2:	d17b      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1f4:	4b94      	ldr	r3, [pc, #592]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1f6:	617b      	str	r3, [r7, #20]
          break;
 800a1f8:	e07b      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800a1fa:	4b92      	ldr	r3, [pc, #584]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a208:	d109      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a20a:	4b8e      	ldr	r3, [pc, #568]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a214:	4a8c      	ldr	r2, [pc, #560]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	e019      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a21e:	4b89      	ldr	r3, [pc, #548]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a22a:	d109      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a22c:	4b85      	ldr	r3, [pc, #532]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a236:	4a85      	ldr	r2, [pc, #532]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a238:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	e008      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a240:	4b80      	ldr	r3, [pc, #512]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24a:	4a80      	ldr	r2, [pc, #512]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a250:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a252:	4b7c      	ldr	r3, [pc, #496]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a258:	099b      	lsrs	r3, r3, #6
 800a25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	fb02 f303 	mul.w	r3, r2, r3
 800a264:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a266:	4b77      	ldr	r3, [pc, #476]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a26c:	0f1b      	lsrs	r3, r3, #28
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	fbb2 f3f3 	udiv	r3, r2, r3
 800a278:	617b      	str	r3, [r7, #20]
          break;
 800a27a:	e03a      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a27c:	4b71      	ldr	r3, [pc, #452]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a288:	d108      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a28a:	4b6e      	ldr	r3, [pc, #440]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a292:	4a6e      	ldr	r2, [pc, #440]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a294:	fbb2 f3f3 	udiv	r3, r2, r3
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	e007      	b.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a29c:	4b69      	ldr	r3, [pc, #420]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2a4:	4a69      	ldr	r2, [pc, #420]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2aa:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800a2ac:	4b65      	ldr	r3, [pc, #404]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	099b      	lsrs	r3, r3, #6
 800a2b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800a2be:	4b61      	ldr	r3, [pc, #388]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	0f1b      	lsrs	r3, r3, #28
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ce:	617b      	str	r3, [r7, #20]
          break;
 800a2d0:	e00f      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a2d2:	4b5c      	ldr	r3, [pc, #368]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2de:	d102      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800a2e0:	4b5a      	ldr	r3, [pc, #360]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a2e2:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800a2e4:	e005      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 800a2e6:	4b59      	ldr	r3, [pc, #356]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a2e8:	617b      	str	r3, [r7, #20]
          break;
 800a2ea:	e002      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	617b      	str	r3, [r7, #20]
          break;
 800a2f0:	bf00      	nop
        }
      }
      break;
 800a2f2:	e09f      	b.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800a2f4:	4b53      	ldr	r3, [pc, #332]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2fa:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a306:	f000 8084 	beq.w	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a310:	f200 808c 	bhi.w	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a31a:	d04f      	beq.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a322:	f200 8083 	bhi.w	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d006      	beq.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a332:	d17b      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a334:	4b44      	ldr	r3, [pc, #272]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a336:	617b      	str	r3, [r7, #20]
          break;
 800a338:	e07b      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800a33a:	4b42      	ldr	r3, [pc, #264]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a348:	d109      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a34a:	4b3e      	ldr	r3, [pc, #248]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a354:	4a3c      	ldr	r2, [pc, #240]	; (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a356:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35a:	613b      	str	r3, [r7, #16]
 800a35c:	e019      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a35e:	4b39      	ldr	r3, [pc, #228]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a36a:	d109      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a36c:	4b35      	ldr	r3, [pc, #212]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a376:	4a35      	ldr	r2, [pc, #212]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a378:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	e008      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a380:	4b30      	ldr	r3, [pc, #192]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a38a:	4a30      	ldr	r2, [pc, #192]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a390:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a392:	4b2c      	ldr	r3, [pc, #176]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a398:	099b      	lsrs	r3, r3, #6
 800a39a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a3a6:	4b27      	ldr	r3, [pc, #156]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ac:	0f1b      	lsrs	r3, r3, #28
 800a3ae:	f003 0307 	and.w	r3, r3, #7
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b8:	617b      	str	r3, [r7, #20]
          break;
 800a3ba:	e03a      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a3bc:	4b21      	ldr	r3, [pc, #132]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3c8:	d108      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a3ca:	4b1e      	ldr	r3, [pc, #120]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3d2:	4a1e      	ldr	r2, [pc, #120]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	e007      	b.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a3dc:	4b19      	ldr	r3, [pc, #100]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3e4:	4a19      	ldr	r2, [pc, #100]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ea:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800a3ec:	4b15      	ldr	r3, [pc, #84]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	099b      	lsrs	r3, r3, #6
 800a3f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	fb02 f303 	mul.w	r3, r2, r3
 800a3fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800a3fe:	4b11      	ldr	r3, [pc, #68]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	0f1b      	lsrs	r3, r3, #28
 800a404:	f003 0307 	and.w	r3, r3, #7
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a40e:	617b      	str	r3, [r7, #20]
          break;
 800a410:	e00f      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a412:	4b0c      	ldr	r3, [pc, #48]	; (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a41e:	d102      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a422:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800a424:	e005      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 800a426:	4b09      	ldr	r3, [pc, #36]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a428:	617b      	str	r3, [r7, #20]
          break;
 800a42a:	e002      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]
          break;
 800a430:	bf00      	nop
        }
      }
      break;
 800a432:	bf00      	nop
    }
  }
  return frequency;
 800a434:	697b      	ldr	r3, [r7, #20]
}
 800a436:	4618      	mov	r0, r3
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40023800 	.word	0x40023800
 800a448:	00bb8000 	.word	0x00bb8000
 800a44c:	00f42400 	.word	0x00f42400

0800a450 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e273      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d075      	beq.n	800a55a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a46e:	4b88      	ldr	r3, [pc, #544]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f003 030c 	and.w	r3, r3, #12
 800a476:	2b04      	cmp	r3, #4
 800a478:	d00c      	beq.n	800a494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a47a:	4b85      	ldr	r3, [pc, #532]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a482:	2b08      	cmp	r3, #8
 800a484:	d112      	bne.n	800a4ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a486:	4b82      	ldr	r3, [pc, #520]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a48e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a492:	d10b      	bne.n	800a4ac <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a494:	4b7e      	ldr	r3, [pc, #504]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d05b      	beq.n	800a558 <HAL_RCC_OscConfig+0x108>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d157      	bne.n	800a558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e24e      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b4:	d106      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x74>
 800a4b6:	4b76      	ldr	r3, [pc, #472]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a75      	ldr	r2, [pc, #468]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	e01d      	b.n	800a500 <HAL_RCC_OscConfig+0xb0>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4cc:	d10c      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x98>
 800a4ce:	4b70      	ldr	r3, [pc, #448]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a6f      	ldr	r2, [pc, #444]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	4b6d      	ldr	r3, [pc, #436]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a6c      	ldr	r2, [pc, #432]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	e00b      	b.n	800a500 <HAL_RCC_OscConfig+0xb0>
 800a4e8:	4b69      	ldr	r3, [pc, #420]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a68      	ldr	r2, [pc, #416]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	4b66      	ldr	r3, [pc, #408]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a65      	ldr	r2, [pc, #404]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a4fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d013      	beq.n	800a530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a508:	f7fb fec8 	bl	800629c <HAL_GetTick>
 800a50c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a50e:	e008      	b.n	800a522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a510:	f7fb fec4 	bl	800629c <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	2b64      	cmp	r3, #100	; 0x64
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e213      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a522:	4b5b      	ldr	r3, [pc, #364]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0f0      	beq.n	800a510 <HAL_RCC_OscConfig+0xc0>
 800a52e:	e014      	b.n	800a55a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a530:	f7fb feb4 	bl	800629c <HAL_GetTick>
 800a534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a536:	e008      	b.n	800a54a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a538:	f7fb feb0 	bl	800629c <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	2b64      	cmp	r3, #100	; 0x64
 800a544:	d901      	bls.n	800a54a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e1ff      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a54a:	4b51      	ldr	r3, [pc, #324]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1f0      	bne.n	800a538 <HAL_RCC_OscConfig+0xe8>
 800a556:	e000      	b.n	800a55a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d063      	beq.n	800a62e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a566:	4b4a      	ldr	r3, [pc, #296]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f003 030c 	and.w	r3, r3, #12
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a572:	4b47      	ldr	r3, [pc, #284]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a57a:	2b08      	cmp	r3, #8
 800a57c:	d11c      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a57e:	4b44      	ldr	r3, [pc, #272]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d116      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a58a:	4b41      	ldr	r3, [pc, #260]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <HAL_RCC_OscConfig+0x152>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d001      	beq.n	800a5a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e1d3      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5a2:	4b3b      	ldr	r3, [pc, #236]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4937      	ldr	r1, [pc, #220]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5b6:	e03a      	b.n	800a62e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d020      	beq.n	800a602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5c0:	4b34      	ldr	r3, [pc, #208]	; (800a694 <HAL_RCC_OscConfig+0x244>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c6:	f7fb fe69 	bl	800629c <HAL_GetTick>
 800a5ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5cc:	e008      	b.n	800a5e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5ce:	f7fb fe65 	bl	800629c <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d901      	bls.n	800a5e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e1b4      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5e0:	4b2b      	ldr	r3, [pc, #172]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0f0      	beq.n	800a5ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ec:	4b28      	ldr	r3, [pc, #160]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	4925      	ldr	r1, [pc, #148]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	600b      	str	r3, [r1, #0]
 800a600:	e015      	b.n	800a62e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <HAL_RCC_OscConfig+0x244>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a608:	f7fb fe48 	bl	800629c <HAL_GetTick>
 800a60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a60e:	e008      	b.n	800a622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a610:	f7fb fe44 	bl	800629c <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e193      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a622:	4b1b      	ldr	r3, [pc, #108]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0302 	and.w	r3, r3, #2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f0      	bne.n	800a610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 0308 	and.w	r3, r3, #8
 800a636:	2b00      	cmp	r3, #0
 800a638:	d036      	beq.n	800a6a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d016      	beq.n	800a670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <HAL_RCC_OscConfig+0x248>)
 800a644:	2201      	movs	r2, #1
 800a646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a648:	f7fb fe28 	bl	800629c <HAL_GetTick>
 800a64c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a64e:	e008      	b.n	800a662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a650:	f7fb fe24 	bl	800629c <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e173      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a662:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <HAL_RCC_OscConfig+0x240>)
 800a664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0f0      	beq.n	800a650 <HAL_RCC_OscConfig+0x200>
 800a66e:	e01b      	b.n	800a6a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a670:	4b09      	ldr	r3, [pc, #36]	; (800a698 <HAL_RCC_OscConfig+0x248>)
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a676:	f7fb fe11 	bl	800629c <HAL_GetTick>
 800a67a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a67c:	e00e      	b.n	800a69c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a67e:	f7fb fe0d 	bl	800629c <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d907      	bls.n	800a69c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e15c      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
 800a690:	40023800 	.word	0x40023800
 800a694:	42470000 	.word	0x42470000
 800a698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a69c:	4b8a      	ldr	r3, [pc, #552]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a69e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1ea      	bne.n	800a67e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 8097 	beq.w	800a7e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a6ba:	4b83      	ldr	r3, [pc, #524]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10f      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	4b7f      	ldr	r3, [pc, #508]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ce:	4a7e      	ldr	r2, [pc, #504]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a6d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	6413      	str	r3, [r2, #64]	; 0x40
 800a6d6:	4b7c      	ldr	r3, [pc, #496]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6de:	60bb      	str	r3, [r7, #8]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6e6:	4b79      	ldr	r3, [pc, #484]	; (800a8cc <HAL_RCC_OscConfig+0x47c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d118      	bne.n	800a724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6f2:	4b76      	ldr	r3, [pc, #472]	; (800a8cc <HAL_RCC_OscConfig+0x47c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a75      	ldr	r2, [pc, #468]	; (800a8cc <HAL_RCC_OscConfig+0x47c>)
 800a6f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6fe:	f7fb fdcd 	bl	800629c <HAL_GetTick>
 800a702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a704:	e008      	b.n	800a718 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a706:	f7fb fdc9 	bl	800629c <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	2b02      	cmp	r3, #2
 800a712:	d901      	bls.n	800a718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e118      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a718:	4b6c      	ldr	r3, [pc, #432]	; (800a8cc <HAL_RCC_OscConfig+0x47c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0f0      	beq.n	800a706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d106      	bne.n	800a73a <HAL_RCC_OscConfig+0x2ea>
 800a72c:	4b66      	ldr	r3, [pc, #408]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a730:	4a65      	ldr	r2, [pc, #404]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a732:	f043 0301 	orr.w	r3, r3, #1
 800a736:	6713      	str	r3, [r2, #112]	; 0x70
 800a738:	e01c      	b.n	800a774 <HAL_RCC_OscConfig+0x324>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d10c      	bne.n	800a75c <HAL_RCC_OscConfig+0x30c>
 800a742:	4b61      	ldr	r3, [pc, #388]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a746:	4a60      	ldr	r2, [pc, #384]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a748:	f043 0304 	orr.w	r3, r3, #4
 800a74c:	6713      	str	r3, [r2, #112]	; 0x70
 800a74e:	4b5e      	ldr	r3, [pc, #376]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a752:	4a5d      	ldr	r2, [pc, #372]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a754:	f043 0301 	orr.w	r3, r3, #1
 800a758:	6713      	str	r3, [r2, #112]	; 0x70
 800a75a:	e00b      	b.n	800a774 <HAL_RCC_OscConfig+0x324>
 800a75c:	4b5a      	ldr	r3, [pc, #360]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a760:	4a59      	ldr	r2, [pc, #356]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a762:	f023 0301 	bic.w	r3, r3, #1
 800a766:	6713      	str	r3, [r2, #112]	; 0x70
 800a768:	4b57      	ldr	r3, [pc, #348]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76c:	4a56      	ldr	r2, [pc, #344]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a76e:	f023 0304 	bic.w	r3, r3, #4
 800a772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d015      	beq.n	800a7a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a77c:	f7fb fd8e 	bl	800629c <HAL_GetTick>
 800a780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a782:	e00a      	b.n	800a79a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a784:	f7fb fd8a 	bl	800629c <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a792:	4293      	cmp	r3, r2
 800a794:	d901      	bls.n	800a79a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e0d7      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a79a:	4b4b      	ldr	r3, [pc, #300]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0ee      	beq.n	800a784 <HAL_RCC_OscConfig+0x334>
 800a7a6:	e014      	b.n	800a7d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7a8:	f7fb fd78 	bl	800629c <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7ae:	e00a      	b.n	800a7c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7b0:	f7fb fd74 	bl	800629c <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e0c1      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7c6:	4b40      	ldr	r3, [pc, #256]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1ee      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d105      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7d8:	4b3b      	ldr	r3, [pc, #236]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7dc:	4a3a      	ldr	r2, [pc, #232]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a7de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80ad 	beq.w	800a948 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a7ee:	4b36      	ldr	r3, [pc, #216]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 030c 	and.w	r3, r3, #12
 800a7f6:	2b08      	cmp	r3, #8
 800a7f8:	d060      	beq.n	800a8bc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d145      	bne.n	800a88e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a802:	4b33      	ldr	r3, [pc, #204]	; (800a8d0 <HAL_RCC_OscConfig+0x480>)
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a808:	f7fb fd48 	bl	800629c <HAL_GetTick>
 800a80c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a80e:	e008      	b.n	800a822 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a810:	f7fb fd44 	bl	800629c <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d901      	bls.n	800a822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e093      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a822:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1f0      	bne.n	800a810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	69da      	ldr	r2, [r3, #28]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	431a      	orrs	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	019b      	lsls	r3, r3, #6
 800a83e:	431a      	orrs	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a844:	085b      	lsrs	r3, r3, #1
 800a846:	3b01      	subs	r3, #1
 800a848:	041b      	lsls	r3, r3, #16
 800a84a:	431a      	orrs	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	061b      	lsls	r3, r3, #24
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a858:	071b      	lsls	r3, r3, #28
 800a85a:	491b      	ldr	r1, [pc, #108]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a860:	4b1b      	ldr	r3, [pc, #108]	; (800a8d0 <HAL_RCC_OscConfig+0x480>)
 800a862:	2201      	movs	r2, #1
 800a864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a866:	f7fb fd19 	bl	800629c <HAL_GetTick>
 800a86a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a86c:	e008      	b.n	800a880 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a86e:	f7fb fd15 	bl	800629c <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d901      	bls.n	800a880 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e064      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a880:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0f0      	beq.n	800a86e <HAL_RCC_OscConfig+0x41e>
 800a88c:	e05c      	b.n	800a948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <HAL_RCC_OscConfig+0x480>)
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a894:	f7fb fd02 	bl	800629c <HAL_GetTick>
 800a898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a89a:	e008      	b.n	800a8ae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a89c:	f7fb fcfe 	bl	800629c <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d901      	bls.n	800a8ae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e04d      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <HAL_RCC_OscConfig+0x478>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1f0      	bne.n	800a89c <HAL_RCC_OscConfig+0x44c>
 800a8ba:	e045      	b.n	800a948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d107      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e040      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
 800a8c8:	40023800 	.word	0x40023800
 800a8cc:	40007000 	.word	0x40007000
 800a8d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a8d4:	4b1f      	ldr	r3, [pc, #124]	; (800a954 <HAL_RCC_OscConfig+0x504>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d030      	beq.n	800a944 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d129      	bne.n	800a944 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d122      	bne.n	800a944 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a904:	4013      	ands	r3, r2
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a90a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d119      	bne.n	800a944 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91a:	085b      	lsrs	r3, r3, #1
 800a91c:	3b01      	subs	r3, #1
 800a91e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a920:	429a      	cmp	r2, r3
 800a922:	d10f      	bne.n	800a944 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a930:	429a      	cmp	r2, r3
 800a932:	d107      	bne.n	800a944 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a940:	429a      	cmp	r2, r3
 800a942:	d001      	beq.n	800a948 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e000      	b.n	800a94a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	40023800 	.word	0x40023800

0800a958 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e066      	b.n	800aa3c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7f5b      	ldrb	r3, [r3, #29]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d105      	bne.n	800a984 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fa fb42 	bl	8005008 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	22ca      	movs	r2, #202	; 0xca
 800a990:	625a      	str	r2, [r3, #36]	; 0x24
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2253      	movs	r2, #83	; 0x53
 800a998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fb2a 	bl	800aff4 <RTC_EnterInitMode>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d12c      	bne.n	800aa04 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6812      	ldr	r2, [r2, #0]
 800a9b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6899      	ldr	r1, [r3, #8]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	68d2      	ldr	r2, [r2, #12]
 800a9e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6919      	ldr	r1, [r3, #16]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	041a      	lsls	r2, r3, #16
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fb31 	bl	800b062 <RTC_ExitInitMode>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d113      	bne.n	800aa32 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa18:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	22ff      	movs	r2, #255	; 0xff
 800aa38:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	7f1b      	ldrb	r3, [r3, #28]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d101      	bne.n	800aa60 <HAL_RTC_SetTime+0x1c>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e087      	b.n	800ab70 <HAL_RTC_SetTime+0x12c>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d126      	bne.n	800aac0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d102      	bne.n	800aa86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fb0e 	bl	800b0ac <RTC_ByteToBcd2>
 800aa90:	4603      	mov	r3, r0
 800aa92:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	785b      	ldrb	r3, [r3, #1]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fb07 	bl	800b0ac <RTC_ByteToBcd2>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aaa2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	789b      	ldrb	r3, [r3, #2]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 faff 	bl	800b0ac <RTC_ByteToBcd2>
 800aaae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aab0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	78db      	ldrb	r3, [r3, #3]
 800aab8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aaba:	4313      	orrs	r3, r2
 800aabc:	617b      	str	r3, [r7, #20]
 800aabe:	e018      	b.n	800aaf2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2200      	movs	r2, #0
 800aad2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aae0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800aae6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	78db      	ldrb	r3, [r3, #3]
 800aaec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	22ca      	movs	r2, #202	; 0xca
 800aaf8:	625a      	str	r2, [r3, #36]	; 0x24
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2253      	movs	r2, #83	; 0x53
 800ab00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fa76 	bl	800aff4 <RTC_EnterInitMode>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ab0c:	7cfb      	ldrb	r3, [r7, #19]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d120      	bne.n	800ab54 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ab1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ab20:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6899      	ldr	r1, [r3, #8]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	431a      	orrs	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 fa89 	bl	800b062 <RTC_ExitInitMode>
 800ab50:	4603      	mov	r3, r0
 800ab52:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ab54:	7cfb      	ldrb	r3, [r7, #19]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	22ff      	movs	r2, #255	; 0xff
 800ab66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	771a      	strb	r2, [r3, #28]

  return status;
 800ab6e:	7cfb      	ldrb	r3, [r7, #19]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd90      	pop	{r4, r7, pc}

0800ab78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ab78:	b590      	push	{r4, r7, lr}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	7f1b      	ldrb	r3, [r3, #28]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d101      	bne.n	800ab94 <HAL_RTC_SetDate+0x1c>
 800ab90:	2302      	movs	r3, #2
 800ab92:	e071      	b.n	800ac78 <HAL_RTC_SetDate+0x100>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10e      	bne.n	800abc4 <HAL_RTC_SetDate+0x4c>
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	785b      	ldrb	r3, [r3, #1]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d008      	beq.n	800abc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	f023 0310 	bic.w	r3, r3, #16
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	330a      	adds	r3, #10
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d11c      	bne.n	800ac04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	78db      	ldrb	r3, [r3, #3]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 fa6c 	bl	800b0ac <RTC_ByteToBcd2>
 800abd4:	4603      	mov	r3, r0
 800abd6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	785b      	ldrb	r3, [r3, #1]
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fa65 	bl	800b0ac <RTC_ByteToBcd2>
 800abe2:	4603      	mov	r3, r0
 800abe4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800abe6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	789b      	ldrb	r3, [r3, #2]
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fa5d 	bl	800b0ac <RTC_ByteToBcd2>
 800abf2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800abf4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800abfe:	4313      	orrs	r3, r2
 800ac00:	617b      	str	r3, [r7, #20]
 800ac02:	e00e      	b.n	800ac22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	78db      	ldrb	r3, [r3, #3]
 800ac08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	785b      	ldrb	r3, [r3, #1]
 800ac0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ac10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ac16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	22ca      	movs	r2, #202	; 0xca
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2253      	movs	r2, #83	; 0x53
 800ac30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f9de 	bl	800aff4 <RTC_EnterInitMode>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ac3c:	7cfb      	ldrb	r3, [r7, #19]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10c      	bne.n	800ac5c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 fa05 	bl	800b062 <RTC_ExitInitMode>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ac5c:	7cfb      	ldrb	r3, [r7, #19]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d102      	bne.n	800ac68 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2201      	movs	r2, #1
 800ac66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	22ff      	movs	r2, #255	; 0xff
 800ac6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	771a      	strb	r2, [r3, #28]

  return status;
 800ac76:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd90      	pop	{r4, r7, pc}

0800ac80 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b089      	sub	sp, #36	; 0x24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ac8c:	4b9a      	ldr	r3, [pc, #616]	; (800aef8 <HAL_RTC_SetAlarm_IT+0x278>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a9a      	ldr	r2, [pc, #616]	; (800aefc <HAL_RTC_SetAlarm_IT+0x27c>)
 800ac92:	fba2 2303 	umull	r2, r3, r2, r3
 800ac96:	0adb      	lsrs	r3, r3, #11
 800ac98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac9c:	fb02 f303 	mul.w	r3, r2, r3
 800aca0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	7f1b      	ldrb	r3, [r3, #28]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_RTC_SetAlarm_IT+0x36>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e11c      	b.n	800aef0 <HAL_RTC_SetAlarm_IT+0x270>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2201      	movs	r2, #1
 800acba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2202      	movs	r2, #2
 800acc0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d137      	bne.n	800ad38 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2200      	movs	r2, #0
 800acda:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 f9e3 	bl	800b0ac <RTC_ByteToBcd2>
 800ace6:	4603      	mov	r3, r0
 800ace8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	785b      	ldrb	r3, [r3, #1]
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f9dc 	bl	800b0ac <RTC_ByteToBcd2>
 800acf4:	4603      	mov	r3, r0
 800acf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800acf8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	789b      	ldrb	r3, [r3, #2]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 f9d4 	bl	800b0ac <RTC_ByteToBcd2>
 800ad04:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ad06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	78db      	ldrb	r3, [r3, #3]
 800ad0e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ad10:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 f9c6 	bl	800b0ac <RTC_ByteToBcd2>
 800ad20:	4603      	mov	r3, r0
 800ad22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ad24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ad2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ad32:	4313      	orrs	r3, r2
 800ad34:	61fb      	str	r3, [r7, #28]
 800ad36:	e023      	b.n	800ad80 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad58:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ad5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	78db      	ldrb	r3, [r3, #3]
 800ad64:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ad66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ad70:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ad76:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	22ca      	movs	r2, #202	; 0xca
 800ad92:	625a      	str	r2, [r3, #36]	; 0x24
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2253      	movs	r2, #83	; 0x53
 800ad9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada4:	d141      	bne.n	800ae2a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adb4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800adc6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	1e5a      	subs	r2, r3, #1
 800adcc:	617a      	str	r2, [r7, #20]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10b      	bne.n	800adea <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	22ff      	movs	r2, #255	; 0xff
 800add8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2203      	movs	r2, #3
 800adde:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e082      	b.n	800aef0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0e7      	beq.n	800adc8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69fa      	ldr	r2, [r7, #28]
 800adfe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae16:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae26:	609a      	str	r2, [r3, #8]
 800ae28:	e04b      	b.n	800aec2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ae38:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ae4a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ae4c:	4b2a      	ldr	r3, [pc, #168]	; (800aef8 <HAL_RTC_SetAlarm_IT+0x278>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a2a      	ldr	r2, [pc, #168]	; (800aefc <HAL_RTC_SetAlarm_IT+0x27c>)
 800ae52:	fba2 2303 	umull	r2, r3, r2, r3
 800ae56:	0adb      	lsrs	r3, r3, #11
 800ae58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae5c:	fb02 f303 	mul.w	r3, r2, r3
 800ae60:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	1e5a      	subs	r2, r3, #1
 800ae66:	617a      	str	r2, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10b      	bne.n	800ae84 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	22ff      	movs	r2, #255	; 0xff
 800ae72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2203      	movs	r2, #3
 800ae78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e035      	b.n	800aef0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0e7      	beq.n	800ae62 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69ba      	ldr	r2, [r7, #24]
 800aea0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeb0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aec0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800aec2:	4b0f      	ldr	r3, [pc, #60]	; (800af00 <HAL_RTC_SetAlarm_IT+0x280>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a0e      	ldr	r2, [pc, #56]	; (800af00 <HAL_RTC_SetAlarm_IT+0x280>)
 800aec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aecc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800aece:	4b0c      	ldr	r3, [pc, #48]	; (800af00 <HAL_RTC_SetAlarm_IT+0x280>)
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	4a0b      	ldr	r2, [pc, #44]	; (800af00 <HAL_RTC_SetAlarm_IT+0x280>)
 800aed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aed8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	22ff      	movs	r2, #255	; 0xff
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2201      	movs	r2, #1
 800aee6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3724      	adds	r7, #36	; 0x24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd90      	pop	{r4, r7, pc}
 800aef8:	20000004 	.word	0x20000004
 800aefc:	10624dd3 	.word	0x10624dd3
 800af00:	40013c00 	.word	0x40013c00

0800af04 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d012      	beq.n	800af40 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f831 	bl	800af90 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	b2da      	uxtb	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800af3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d012      	beq.n	800af74 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00b      	beq.n	800af74 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f8c2 	bl	800b0e6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800af72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <HAL_RTC_AlarmIRQHandler+0x88>)
 800af76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800af7a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	775a      	strb	r2, [r3, #29]
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	40013c00 	.word	0x40013c00

0800af90 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800afbe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800afc0:	f7fb f96c 	bl	800629c <HAL_GetTick>
 800afc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800afc6:	e009      	b.n	800afdc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afc8:	f7fb f968 	bl	800629c <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afd6:	d901      	bls.n	800afdc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e007      	b.n	800afec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0ee      	beq.n	800afc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d122      	bne.n	800b058 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68da      	ldr	r2, [r3, #12]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b020:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b022:	f7fb f93b 	bl	800629c <HAL_GetTick>
 800b026:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b028:	e00c      	b.n	800b044 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b02a:	f7fb f937 	bl	800629c <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b038:	d904      	bls.n	800b044 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2204      	movs	r2, #4
 800b03e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d102      	bne.n	800b058 <RTC_EnterInitMode+0x64>
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d1e8      	bne.n	800b02a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b07c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff ff89 	bl	800afa4 <HAL_RTC_WaitForSynchro>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d004      	beq.n	800b0a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2204      	movs	r2, #4
 800b09c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800b0ba:	e005      	b.n	800b0c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	3b0a      	subs	r3, #10
 800b0c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	2b09      	cmp	r3, #9
 800b0cc:	d8f6      	bhi.n	800b0bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	79fb      	ldrb	r3, [r7, #7]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	b2db      	uxtb	r3, r3
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e022      	b.n	800b152 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b00      	cmp	r3, #0
 800b116:	d105      	bne.n	800b124 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7f9 ffa4 	bl	800506c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2203      	movs	r2, #3
 800b128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f815 	bl	800b15c <HAL_SD_InitCard>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e00a      	b.n	800b152 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
	...

0800b15c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b15c:	b5b0      	push	{r4, r5, r7, lr}
 800b15e:	b08e      	sub	sp, #56	; 0x38
 800b160:	af04      	add	r7, sp, #16
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b164:	2300      	movs	r3, #0
 800b166:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b174:	2300      	movs	r3, #0
 800b176:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b178:	2376      	movs	r3, #118	; 0x76
 800b17a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681d      	ldr	r5, [r3, #0]
 800b180:	466c      	mov	r4, sp
 800b182:	f107 0314 	add.w	r3, r7, #20
 800b186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b194:	4628      	mov	r0, r5
 800b196:	f003 f961 	bl	800e45c <SDIO_Init>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e04f      	b.n	800b24c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b1ac:	4b29      	ldr	r3, [pc, #164]	; (800b254 <HAL_SD_InitCard+0xf8>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f003 f999 	bl	800e4ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b1bc:	4b25      	ldr	r3, [pc, #148]	; (800b254 <HAL_SD_InitCard+0xf8>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b1c2:	2002      	movs	r0, #2
 800b1c4:	f7fb f876 	bl	80062b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fe69 	bl	800bea0 <SD_PowerON>
 800b1ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00b      	beq.n	800b1ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e02e      	b.n	800b24c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fd88 	bl	800bd04 <SD_InitCard>
 800b1f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00b      	beq.n	800b214 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	431a      	orrs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e01b      	b.n	800b24c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b21c:	4618      	mov	r0, r3
 800b21e:	f003 f9f8 	bl	800e612 <SDMMC_CmdBlockLength>
 800b222:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a0a      	ldr	r2, [pc, #40]	; (800b258 <HAL_SD_InitCard+0xfc>)
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	431a      	orrs	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e000      	b.n	800b24c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3728      	adds	r7, #40	; 0x28
 800b250:	46bd      	mov	sp, r7
 800b252:	bdb0      	pop	{r4, r5, r7, pc}
 800b254:	422580a0 	.word	0x422580a0
 800b258:	004005ff 	.word	0x004005ff

0800b25c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b092      	sub	sp, #72	; 0x48
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b26a:	f7fb f817 	bl	800629c <HAL_GetTick>
 800b26e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d107      	bne.n	800b28e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b282:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e1bd      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b01      	cmp	r3, #1
 800b298:	f040 81b0 	bne.w	800b5fc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b2a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	441a      	add	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d907      	bls.n	800b2c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e1a4      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d002      	beq.n	800b2de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	025b      	lsls	r3, r3, #9
 800b2dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2de:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	025b      	lsls	r3, r3, #9
 800b2e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b2ea:	2390      	movs	r3, #144	; 0x90
 800b2ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f107 0214 	add.w	r2, r7, #20
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f003 f958 	bl	800e5ba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d90a      	bls.n	800b326 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2202      	movs	r2, #2
 800b314:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b31c:	4618      	mov	r0, r3
 800b31e:	f003 f9bc 	bl	800e69a <SDMMC_CmdReadMultiBlock>
 800b322:	6478      	str	r0, [r7, #68]	; 0x44
 800b324:	e009      	b.n	800b33a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2201      	movs	r2, #1
 800b32a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b332:	4618      	mov	r0, r3
 800b334:	f003 f98f 	bl	800e656 <SDMMC_CmdReadSingleBlock>
 800b338:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d012      	beq.n	800b366 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a7a      	ldr	r2, [pc, #488]	; (800b530 <HAL_SD_ReadBlocks+0x2d4>)
 800b346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b34e:	431a      	orrs	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e151      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800b36a:	e061      	b.n	800b430 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d03c      	beq.n	800b3f4 <HAL_SD_ReadBlocks+0x198>
 800b37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d039      	beq.n	800b3f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b380:	2300      	movs	r3, #0
 800b382:	643b      	str	r3, [r7, #64]	; 0x40
 800b384:	e033      	b.n	800b3ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f003 f891 	bl	800e4b2 <SDIO_ReadFIFO>
 800b390:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	b2da      	uxtb	r2, r3
 800b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b398:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39c:	3301      	adds	r3, #1
 800b39e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	0c1b      	lsrs	r3, r3, #16
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	0e1b      	lsrs	r3, r3, #24
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3de:	3301      	adds	r3, #1
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b3e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f0:	2b07      	cmp	r3, #7
 800b3f2:	d9c8      	bls.n	800b386 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b3f4:	f7fa ff52 	bl	800629c <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b400:	429a      	cmp	r2, r3
 800b402:	d902      	bls.n	800b40a <HAL_SD_ReadBlocks+0x1ae>
 800b404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b406:	2b00      	cmp	r3, #0
 800b408:	d112      	bne.n	800b430 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a48      	ldr	r2, [pc, #288]	; (800b530 <HAL_SD_ReadBlocks+0x2d4>)
 800b410:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b416:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e0ec      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b436:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d096      	beq.n	800b36c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d022      	beq.n	800b492 <HAL_SD_ReadBlocks+0x236>
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d91f      	bls.n	800b492 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b456:	2b03      	cmp	r3, #3
 800b458:	d01b      	beq.n	800b492 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4618      	mov	r0, r3
 800b460:	f003 f982 	bl	800e768 <SDMMC_CmdStopTransfer>
 800b464:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d012      	beq.n	800b492 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a2f      	ldr	r2, [pc, #188]	; (800b530 <HAL_SD_ReadBlocks+0x2d4>)
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b47a:	431a      	orrs	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e0bb      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b498:	f003 0308 	and.w	r3, r3, #8
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d012      	beq.n	800b4c6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a22      	ldr	r2, [pc, #136]	; (800b530 <HAL_SD_ReadBlocks+0x2d4>)
 800b4a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	f043 0208 	orr.w	r2, r3, #8
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e0a1      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4cc:	f003 0302 	and.w	r3, r3, #2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d012      	beq.n	800b4fa <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a15      	ldr	r2, [pc, #84]	; (800b530 <HAL_SD_ReadBlocks+0x2d4>)
 800b4da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e0:	f043 0202 	orr.w	r2, r3, #2
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e087      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b500:	f003 0320 	and.w	r3, r3, #32
 800b504:	2b00      	cmp	r3, #0
 800b506:	d064      	beq.n	800b5d2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a08      	ldr	r2, [pc, #32]	; (800b530 <HAL_SD_ReadBlocks+0x2d4>)
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	f043 0220 	orr.w	r2, r3, #32
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e06d      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
 800b52e:	bf00      	nop
 800b530:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f002 ffba 	bl	800e4b2 <SDIO_ReadFIFO>
 800b53e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	b2da      	uxtb	r2, r3
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54a:	3301      	adds	r3, #1
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b550:	3b01      	subs	r3, #1
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	0a1b      	lsrs	r3, r3, #8
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b560:	3301      	adds	r3, #1
 800b562:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b566:	3b01      	subs	r3, #1
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	0c1b      	lsrs	r3, r3, #16
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b572:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	3301      	adds	r3, #1
 800b578:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b57a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57c:	3b01      	subs	r3, #1
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	0e1b      	lsrs	r3, r3, #24
 800b584:	b2da      	uxtb	r2, r3
 800b586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b588:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58c:	3301      	adds	r3, #1
 800b58e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b592:	3b01      	subs	r3, #1
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b596:	f7fa fe81 	bl	800629c <HAL_GetTick>
 800b59a:	4602      	mov	r2, r0
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d902      	bls.n	800b5ac <HAL_SD_ReadBlocks+0x350>
 800b5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d112      	bne.n	800b5d2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a18      	ldr	r2, [pc, #96]	; (800b614 <HAL_SD_ReadBlocks+0x3b8>)
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e01b      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <HAL_SD_ReadBlocks+0x38a>
 800b5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1a6      	bne.n	800b534 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f240 523a 	movw	r2, #1338	; 0x53a
 800b5ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	e006      	b.n	800b60a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b608:	2301      	movs	r3, #1
  }
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3748      	adds	r7, #72	; 0x48
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	004005ff 	.word	0x004005ff

0800b618 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b092      	sub	sp, #72	; 0x48
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b626:	f7fa fe39 	bl	800629c <HAL_GetTick>
 800b62a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d107      	bne.n	800b64a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e165      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b01      	cmp	r3, #1
 800b654:	f040 8158 	bne.w	800b908 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b65e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	441a      	add	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b668:	429a      	cmp	r2, r3
 800b66a:	d907      	bls.n	800b67c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b670:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e14c      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2203      	movs	r2, #3
 800b680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2200      	movs	r2, #0
 800b68a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b690:	2b01      	cmp	r3, #1
 800b692:	d002      	beq.n	800b69a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	025b      	lsls	r3, r3, #9
 800b698:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295
 800b69e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	025b      	lsls	r3, r3, #9
 800b6a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b6a6:	2390      	movs	r3, #144	; 0x90
 800b6a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f107 0218 	add.w	r2, r7, #24
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f002 ff7a 	bl	800e5ba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d90a      	bls.n	800b6e2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f003 f822 	bl	800e722 <SDMMC_CmdWriteMultiBlock>
 800b6de:	6478      	str	r0, [r7, #68]	; 0x44
 800b6e0:	e009      	b.n	800b6f6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2210      	movs	r2, #16
 800b6e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f002 fff5 	bl	800e6de <SDMMC_CmdWriteSingleBlock>
 800b6f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d012      	beq.n	800b722 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a87      	ldr	r2, [pc, #540]	; (800b920 <HAL_SD_WriteBlocks+0x308>)
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b70a:	431a      	orrs	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e0f9      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800b726:	e065      	b.n	800b7f4 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b732:	2b00      	cmp	r3, #0
 800b734:	d040      	beq.n	800b7b8 <HAL_SD_WriteBlocks+0x1a0>
 800b736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d03d      	beq.n	800b7b8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b73c:	2300      	movs	r3, #0
 800b73e:	643b      	str	r3, [r7, #64]	; 0x40
 800b740:	e037      	b.n	800b7b2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74a:	3301      	adds	r3, #1
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b750:	3b01      	subs	r3, #1
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	021a      	lsls	r2, r3, #8
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b762:	3301      	adds	r3, #1
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b768:	3b01      	subs	r3, #1
 800b76a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	041a      	lsls	r2, r3, #16
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	4313      	orrs	r3, r2
 800b776:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	3301      	adds	r3, #1
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b780:	3b01      	subs	r3, #1
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	061a      	lsls	r2, r3, #24
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b792:	3301      	adds	r3, #1
 800b794:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b798:	3b01      	subs	r3, #1
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f107 0214 	add.w	r2, r7, #20
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 fe90 	bl	800e4cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b4:	2b07      	cmp	r3, #7
 800b7b6:	d9c4      	bls.n	800b742 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b7b8:	f7fa fd70 	bl	800629c <HAL_GetTick>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d902      	bls.n	800b7ce <HAL_SD_WriteBlocks+0x1b6>
 800b7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d112      	bne.n	800b7f4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a53      	ldr	r2, [pc, #332]	; (800b920 <HAL_SD_WriteBlocks+0x308>)
 800b7d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e090      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fa:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d092      	beq.n	800b728 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d022      	beq.n	800b856 <HAL_SD_WriteBlocks+0x23e>
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d91f      	bls.n	800b856 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d01b      	beq.n	800b856 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	f002 ffa0 	bl	800e768 <SDMMC_CmdStopTransfer>
 800b828:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d012      	beq.n	800b856 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a3a      	ldr	r2, [pc, #232]	; (800b920 <HAL_SD_WriteBlocks+0x308>)
 800b836:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b83e:	431a      	orrs	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e05f      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85c:	f003 0308 	and.w	r3, r3, #8
 800b860:	2b00      	cmp	r3, #0
 800b862:	d012      	beq.n	800b88a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a2d      	ldr	r2, [pc, #180]	; (800b920 <HAL_SD_WriteBlocks+0x308>)
 800b86a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	f043 0208 	orr.w	r2, r3, #8
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e045      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b890:	f003 0302 	and.w	r3, r3, #2
 800b894:	2b00      	cmp	r3, #0
 800b896:	d012      	beq.n	800b8be <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a20      	ldr	r2, [pc, #128]	; (800b920 <HAL_SD_WriteBlocks+0x308>)
 800b89e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a4:	f043 0202 	orr.w	r2, r3, #2
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e02b      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d012      	beq.n	800b8f2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a13      	ldr	r2, [pc, #76]	; (800b920 <HAL_SD_WriteBlocks+0x308>)
 800b8d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d8:	f043 0210 	orr.w	r2, r3, #16
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e011      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800b8fa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	e006      	b.n	800b916 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b914:	2301      	movs	r3, #1
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	3748      	adds	r7, #72	; 0x48
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	004005ff 	.word	0x004005ff

0800b924 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b932:	0f9b      	lsrs	r3, r3, #30
 800b934:	b2da      	uxtb	r2, r3
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b93e:	0e9b      	lsrs	r3, r3, #26
 800b940:	b2db      	uxtb	r3, r3
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	b2da      	uxtb	r2, r3
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b950:	0e1b      	lsrs	r3, r3, #24
 800b952:	b2db      	uxtb	r3, r3
 800b954:	f003 0303 	and.w	r3, r3, #3
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b962:	0c1b      	lsrs	r3, r3, #16
 800b964:	b2da      	uxtb	r2, r3
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	b2da      	uxtb	r2, r3
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b984:	0d1b      	lsrs	r3, r3, #20
 800b986:	b29a      	uxth	r2, r3
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b990:	0c1b      	lsrs	r3, r3, #16
 800b992:	b2db      	uxtb	r3, r3
 800b994:	f003 030f 	and.w	r3, r3, #15
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9a2:	0bdb      	lsrs	r3, r3, #15
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	f003 0301 	and.w	r3, r3, #1
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b4:	0b9b      	lsrs	r3, r3, #14
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9c6:	0b5b      	lsrs	r3, r3, #13
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9d8:	0b1b      	lsrs	r3, r3, #12
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d163      	bne.n	800babc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9f8:	009a      	lsls	r2, r3, #2
 800b9fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b9fe:	4013      	ands	r3, r2
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ba04:	0f92      	lsrs	r2, r2, #30
 800ba06:	431a      	orrs	r2, r3
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba10:	0edb      	lsrs	r3, r3, #27
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba22:	0e1b      	lsrs	r3, r3, #24
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	f003 0307 	and.w	r3, r3, #7
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba34:	0d5b      	lsrs	r3, r3, #21
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	f003 0307 	and.w	r3, r3, #7
 800ba3c:	b2da      	uxtb	r2, r3
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba46:	0c9b      	lsrs	r3, r3, #18
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	f003 0307 	and.w	r3, r3, #7
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba58:	0bdb      	lsrs	r3, r3, #15
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	f003 0307 	and.w	r3, r3, #7
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	7e1b      	ldrb	r3, [r3, #24]
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	3302      	adds	r3, #2
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ba86:	fb03 f202 	mul.w	r2, r3, r2
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	7a1b      	ldrb	r3, [r3, #8]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 030f 	and.w	r3, r3, #15
 800ba98:	2201      	movs	r2, #1
 800ba9a:	409a      	lsls	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800baa8:	0a52      	lsrs	r2, r2, #9
 800baaa:	fb03 f202 	mul.w	r2, r3, r2
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bab8:	661a      	str	r2, [r3, #96]	; 0x60
 800baba:	e031      	b.n	800bb20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d11d      	bne.n	800bb00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bac8:	041b      	lsls	r3, r3, #16
 800baca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad2:	0c1b      	lsrs	r3, r3, #16
 800bad4:	431a      	orrs	r2, r3
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	029a      	lsls	r2, r3, #10
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	661a      	str	r2, [r3, #96]	; 0x60
 800bafe:	e00f      	b.n	800bb20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a58      	ldr	r2, [pc, #352]	; (800bc68 <HAL_SD_GetCardCSD+0x344>)
 800bb06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e09d      	b.n	800bc5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb24:	0b9b      	lsrs	r3, r3, #14
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0301 	and.w	r3, r3, #1
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb36:	09db      	lsrs	r3, r3, #7
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb58:	0fdb      	lsrs	r3, r3, #31
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb64:	0f5b      	lsrs	r3, r3, #29
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	f003 0303 	and.w	r3, r3, #3
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb76:	0e9b      	lsrs	r3, r3, #26
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	f003 0307 	and.w	r3, r3, #7
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb88:	0d9b      	lsrs	r3, r3, #22
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	f003 030f 	and.w	r3, r3, #15
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9a:	0d5b      	lsrs	r3, r3, #21
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb6:	0c1b      	lsrs	r3, r3, #16
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbca:	0bdb      	lsrs	r3, r3, #15
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbde:	0b9b      	lsrs	r3, r3, #14
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf2:	0b5b      	lsrs	r3, r3, #13
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc06:	0b1b      	lsrs	r3, r3, #12
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1a:	0a9b      	lsrs	r3, r3, #10
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	f003 0303 	and.w	r3, r3, #3
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc2e:	0a1b      	lsrs	r3, r3, #8
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	f003 0303 	and.w	r3, r3, #3
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc42:	085b      	lsrs	r3, r3, #1
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	004005ff 	.word	0x004005ff

0800bc6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bcd0:	f107 030c 	add.w	r3, r7, #12
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f970 	bl	800bfbc <SD_SendStatus>
 800bcdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	0a5b      	lsrs	r3, r3, #9
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bcfa:	693b      	ldr	r3, [r7, #16]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bd04:	b5b0      	push	{r4, r5, r7, lr}
 800bd06:	b094      	sub	sp, #80	; 0x50
 800bd08:	af04      	add	r7, sp, #16
 800bd0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f002 fbf8 	bl	800e50a <SDIO_GetPowerState>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bd24:	e0b8      	b.n	800be98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d02f      	beq.n	800bd8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f002 fddf 	bl	800e8f6 <SDMMC_CmdSendCID>
 800bd38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <SD_InitCard+0x40>
    {
      return errorstate;
 800bd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd42:	e0a9      	b.n	800be98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f002 fc22 	bl	800e594 <SDIO_GetResponse>
 800bd50:	4602      	mov	r2, r0
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f002 fc19 	bl	800e594 <SDIO_GetResponse>
 800bd62:	4602      	mov	r2, r0
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2108      	movs	r1, #8
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f002 fc10 	bl	800e594 <SDIO_GetResponse>
 800bd74:	4602      	mov	r2, r0
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	210c      	movs	r1, #12
 800bd80:	4618      	mov	r0, r3
 800bd82:	f002 fc07 	bl	800e594 <SDIO_GetResponse>
 800bd86:	4602      	mov	r2, r0
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	2b03      	cmp	r3, #3
 800bd94:	d00d      	beq.n	800bdb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f107 020e 	add.w	r2, r7, #14
 800bd9e:	4611      	mov	r1, r2
 800bda0:	4618      	mov	r0, r3
 800bda2:	f002 fde5 	bl	800e970 <SDMMC_CmdSetRelAdd>
 800bda6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <SD_InitCard+0xae>
    {
      return errorstate;
 800bdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb0:	e072      	b.n	800be98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d036      	beq.n	800be28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bdba:	89fb      	ldrh	r3, [r7, #14]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdca:	041b      	lsls	r3, r3, #16
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f002 fdaf 	bl	800e932 <SDMMC_CmdSendCSD>
 800bdd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdde:	e05b      	b.n	800be98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2100      	movs	r1, #0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f002 fbd4 	bl	800e594 <SDIO_GetResponse>
 800bdec:	4602      	mov	r2, r0
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f002 fbcb 	bl	800e594 <SDIO_GetResponse>
 800bdfe:	4602      	mov	r2, r0
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2108      	movs	r1, #8
 800be0a:	4618      	mov	r0, r3
 800be0c:	f002 fbc2 	bl	800e594 <SDIO_GetResponse>
 800be10:	4602      	mov	r2, r0
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	210c      	movs	r1, #12
 800be1c:	4618      	mov	r0, r3
 800be1e:	f002 fbb9 	bl	800e594 <SDIO_GetResponse>
 800be22:	4602      	mov	r2, r0
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2104      	movs	r1, #4
 800be2e:	4618      	mov	r0, r3
 800be30:	f002 fbb0 	bl	800e594 <SDIO_GetResponse>
 800be34:	4603      	mov	r3, r0
 800be36:	0d1a      	lsrs	r2, r3, #20
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800be3c:	f107 0310 	add.w	r3, r7, #16
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7ff fd6e 	bl	800b924 <HAL_SD_GetCardCSD>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800be52:	e021      	b.n	800be98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6819      	ldr	r1, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5c:	041b      	lsls	r3, r3, #16
 800be5e:	2200      	movs	r2, #0
 800be60:	461c      	mov	r4, r3
 800be62:	4615      	mov	r5, r2
 800be64:	4622      	mov	r2, r4
 800be66:	462b      	mov	r3, r5
 800be68:	4608      	mov	r0, r1
 800be6a:	f002 fc9f 	bl	800e7ac <SDMMC_CmdSelDesel>
 800be6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800be70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <SD_InitCard+0x176>
  {
    return errorstate;
 800be76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be78:	e00e      	b.n	800be98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681d      	ldr	r5, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	466c      	mov	r4, sp
 800be82:	f103 0210 	add.w	r2, r3, #16
 800be86:	ca07      	ldmia	r2, {r0, r1, r2}
 800be88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be8c:	3304      	adds	r3, #4
 800be8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be90:	4628      	mov	r0, r5
 800be92:	f002 fae3 	bl	800e45c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3740      	adds	r7, #64	; 0x40
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bdb0      	pop	{r4, r5, r7, pc}

0800bea0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800beac:	2300      	movs	r3, #0
 800beae:	617b      	str	r3, [r7, #20]
 800beb0:	2300      	movs	r3, #0
 800beb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4618      	mov	r0, r3
 800beba:	f002 fc9a 	bl	800e7f2 <SDMMC_CmdGoIdleState>
 800bebe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <SD_PowerON+0x2a>
  {
    return errorstate;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	e072      	b.n	800bfb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4618      	mov	r0, r3
 800bed0:	f002 fcad 	bl	800e82e <SDMMC_CmdOperCond>
 800bed4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00d      	beq.n	800bef8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f002 fc83 	bl	800e7f2 <SDMMC_CmdGoIdleState>
 800beec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d004      	beq.n	800befe <SD_PowerON+0x5e>
    {
      return errorstate;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	e05b      	b.n	800bfb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d137      	bne.n	800bf76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f002 fcad 	bl	800e86c <SDMMC_CmdAppCommand>
 800bf12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d02d      	beq.n	800bf76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf1e:	e047      	b.n	800bfb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f002 fca0 	bl	800e86c <SDMMC_CmdAppCommand>
 800bf2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <SD_PowerON+0x98>
    {
      return errorstate;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	e03b      	b.n	800bfb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	491e      	ldr	r1, [pc, #120]	; (800bfb8 <SD_PowerON+0x118>)
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f002 fcb6 	bl	800e8b0 <SDMMC_CmdAppOperCommand>
 800bf44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf50:	e02e      	b.n	800bfb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2100      	movs	r1, #0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f002 fb1b 	bl	800e594 <SDIO_GetResponse>
 800bf5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	0fdb      	lsrs	r3, r3, #31
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d101      	bne.n	800bf6c <SD_PowerON+0xcc>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e000      	b.n	800bf6e <SD_PowerON+0xce>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	613b      	str	r3, [r7, #16]

    count++;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d802      	bhi.n	800bf86 <SD_PowerON+0xe6>
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0cc      	beq.n	800bf20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d902      	bls.n	800bf96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bf90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf94:	e00c      	b.n	800bfb0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	645a      	str	r2, [r3, #68]	; 0x44
 800bfa6:	e002      	b.n	800bfae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	c1100000 	.word	0xc1100000

0800bfbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bfcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfd0:	e018      	b.n	800c004 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfda:	041b      	lsls	r3, r3, #16
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	f002 fce7 	bl	800e9b2 <SDMMC_CmdSendStatus>
 800bfe4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	e009      	b.n	800c004 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2100      	movs	r1, #0
 800bff6:	4618      	mov	r0, r3
 800bff8:	f002 facc 	bl	800e594 <SDIO_GetResponse>
 800bffc:	4602      	mov	r2, r0
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e07b      	b.n	800c116 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c022:	2b00      	cmp	r3, #0
 800c024:	d108      	bne.n	800c038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c02e:	d009      	beq.n	800c044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	61da      	str	r2, [r3, #28]
 800c036:	e005      	b.n	800c044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f9 f8a4 	bl	80051ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c07a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c08c:	431a      	orrs	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c096:	431a      	orrs	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	f003 0302 	and.w	r3, r3, #2
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	431a      	orrs	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c8:	ea42 0103 	orr.w	r1, r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	430a      	orrs	r2, r1
 800c0da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	0c1b      	lsrs	r3, r3, #16
 800c0e2:	f003 0104 	and.w	r1, r3, #4
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ea:	f003 0210 	and.w	r2, r3, #16
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	69da      	ldr	r2, [r3, #28]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e041      	b.n	800c1b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d106      	bne.n	800c14a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7f9 f879 	bl	800523c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2202      	movs	r2, #2
 800c14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3304      	adds	r3, #4
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f000 fcd5 	bl	800cb0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d001      	beq.n	800c1d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e046      	b.n	800c262 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a23      	ldr	r2, [pc, #140]	; (800c270 <HAL_TIM_Base_Start+0xb4>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d022      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ee:	d01d      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1f      	ldr	r2, [pc, #124]	; (800c274 <HAL_TIM_Base_Start+0xb8>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d018      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a1e      	ldr	r2, [pc, #120]	; (800c278 <HAL_TIM_Base_Start+0xbc>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d013      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a1c      	ldr	r2, [pc, #112]	; (800c27c <HAL_TIM_Base_Start+0xc0>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d00e      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a1b      	ldr	r2, [pc, #108]	; (800c280 <HAL_TIM_Base_Start+0xc4>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d009      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a19      	ldr	r2, [pc, #100]	; (800c284 <HAL_TIM_Base_Start+0xc8>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d004      	beq.n	800c22c <HAL_TIM_Base_Start+0x70>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a18      	ldr	r2, [pc, #96]	; (800c288 <HAL_TIM_Base_Start+0xcc>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d111      	bne.n	800c250 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 0307 	and.w	r3, r3, #7
 800c236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b06      	cmp	r3, #6
 800c23c:	d010      	beq.n	800c260 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f042 0201 	orr.w	r2, r2, #1
 800c24c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c24e:	e007      	b.n	800c260 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f042 0201 	orr.w	r2, r2, #1
 800c25e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	40010000 	.word	0x40010000
 800c274:	40000400 	.word	0x40000400
 800c278:	40000800 	.word	0x40000800
 800c27c:	40000c00 	.word	0x40000c00
 800c280:	40010400 	.word	0x40010400
 800c284:	40014000 	.word	0x40014000
 800c288:	40001800 	.word	0x40001800

0800c28c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e041      	b.n	800c322 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f839 	bl	800c32a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	4610      	mov	r0, r2
 800c2cc:	f000 fc1e 	bl	800cb0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c32a:	b480      	push	{r7}
 800c32c:	b083      	sub	sp, #12
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c332:	bf00      	nop
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
	...

0800c340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d109      	bne.n	800c364 <HAL_TIM_PWM_Start+0x24>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b01      	cmp	r3, #1
 800c35a:	bf14      	ite	ne
 800c35c:	2301      	movne	r3, #1
 800c35e:	2300      	moveq	r3, #0
 800c360:	b2db      	uxtb	r3, r3
 800c362:	e022      	b.n	800c3aa <HAL_TIM_PWM_Start+0x6a>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b04      	cmp	r3, #4
 800c368:	d109      	bne.n	800c37e <HAL_TIM_PWM_Start+0x3e>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b01      	cmp	r3, #1
 800c374:	bf14      	ite	ne
 800c376:	2301      	movne	r3, #1
 800c378:	2300      	moveq	r3, #0
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	e015      	b.n	800c3aa <HAL_TIM_PWM_Start+0x6a>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b08      	cmp	r3, #8
 800c382:	d109      	bne.n	800c398 <HAL_TIM_PWM_Start+0x58>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	bf14      	ite	ne
 800c390:	2301      	movne	r3, #1
 800c392:	2300      	moveq	r3, #0
 800c394:	b2db      	uxtb	r3, r3
 800c396:	e008      	b.n	800c3aa <HAL_TIM_PWM_Start+0x6a>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	bf14      	ite	ne
 800c3a4:	2301      	movne	r3, #1
 800c3a6:	2300      	moveq	r3, #0
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e07c      	b.n	800c4ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d104      	bne.n	800c3c2 <HAL_TIM_PWM_Start+0x82>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3c0:	e013      	b.n	800c3ea <HAL_TIM_PWM_Start+0xaa>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d104      	bne.n	800c3d2 <HAL_TIM_PWM_Start+0x92>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3d0:	e00b      	b.n	800c3ea <HAL_TIM_PWM_Start+0xaa>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b08      	cmp	r3, #8
 800c3d6:	d104      	bne.n	800c3e2 <HAL_TIM_PWM_Start+0xa2>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3e0:	e003      	b.n	800c3ea <HAL_TIM_PWM_Start+0xaa>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2202      	movs	r2, #2
 800c3e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 fe74 	bl	800d0e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a2d      	ldr	r2, [pc, #180]	; (800c4b4 <HAL_TIM_PWM_Start+0x174>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d004      	beq.n	800c40c <HAL_TIM_PWM_Start+0xcc>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a2c      	ldr	r2, [pc, #176]	; (800c4b8 <HAL_TIM_PWM_Start+0x178>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d101      	bne.n	800c410 <HAL_TIM_PWM_Start+0xd0>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <HAL_TIM_PWM_Start+0xd2>
 800c410:	2300      	movs	r3, #0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d007      	beq.n	800c426 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a22      	ldr	r2, [pc, #136]	; (800c4b4 <HAL_TIM_PWM_Start+0x174>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d022      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c438:	d01d      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a1f      	ldr	r2, [pc, #124]	; (800c4bc <HAL_TIM_PWM_Start+0x17c>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d018      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a1d      	ldr	r2, [pc, #116]	; (800c4c0 <HAL_TIM_PWM_Start+0x180>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d013      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a1c      	ldr	r2, [pc, #112]	; (800c4c4 <HAL_TIM_PWM_Start+0x184>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d00e      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a16      	ldr	r2, [pc, #88]	; (800c4b8 <HAL_TIM_PWM_Start+0x178>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d009      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <HAL_TIM_PWM_Start+0x188>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d004      	beq.n	800c476 <HAL_TIM_PWM_Start+0x136>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a16      	ldr	r2, [pc, #88]	; (800c4cc <HAL_TIM_PWM_Start+0x18c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d111      	bne.n	800c49a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	f003 0307 	and.w	r3, r3, #7
 800c480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b06      	cmp	r3, #6
 800c486:	d010      	beq.n	800c4aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f042 0201 	orr.w	r2, r2, #1
 800c496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c498:	e007      	b.n	800c4aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f042 0201 	orr.w	r2, r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	40010000 	.word	0x40010000
 800c4b8:	40010400 	.word	0x40010400
 800c4bc:	40000400 	.word	0x40000400
 800c4c0:	40000800 	.word	0x40000800
 800c4c4:	40000c00 	.word	0x40000c00
 800c4c8:	40014000 	.word	0x40014000
 800c4cc:	40001800 	.word	0x40001800

0800c4d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e041      	b.n	800c568 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f839 	bl	800c570 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2202      	movs	r2, #2
 800c502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3304      	adds	r3, #4
 800c50e:	4619      	mov	r1, r3
 800c510:	4610      	mov	r0, r2
 800c512:	f000 fafb 	bl	800cb0c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f022 0208 	bic.w	r2, r2, #8
 800c524:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6819      	ldr	r1, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	430a      	orrs	r2, r1
 800c534:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b02      	cmp	r3, #2
 800c598:	d122      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d11b      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f06f 0202 	mvn.w	r2, #2
 800c5b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fa81 	bl	800cace <HAL_TIM_IC_CaptureCallback>
 800c5cc:	e005      	b.n	800c5da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fa73 	bl	800caba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fa84 	bl	800cae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	f003 0304 	and.w	r3, r3, #4
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	d122      	bne.n	800c634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d11b      	bne.n	800c634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f06f 0204 	mvn.w	r2, #4
 800c604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2202      	movs	r2, #2
 800c60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c616:	2b00      	cmp	r3, #0
 800c618:	d003      	beq.n	800c622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fa57 	bl	800cace <HAL_TIM_IC_CaptureCallback>
 800c620:	e005      	b.n	800c62e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa49 	bl	800caba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa5a 	bl	800cae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	f003 0308 	and.w	r3, r3, #8
 800c63e:	2b08      	cmp	r3, #8
 800c640:	d122      	bne.n	800c688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	f003 0308 	and.w	r3, r3, #8
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d11b      	bne.n	800c688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f06f 0208 	mvn.w	r2, #8
 800c658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2204      	movs	r2, #4
 800c65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fa2d 	bl	800cace <HAL_TIM_IC_CaptureCallback>
 800c674:	e005      	b.n	800c682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fa1f 	bl	800caba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fa30 	bl	800cae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	f003 0310 	and.w	r3, r3, #16
 800c692:	2b10      	cmp	r3, #16
 800c694:	d122      	bne.n	800c6dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b10      	cmp	r3, #16
 800c6a2:	d11b      	bne.n	800c6dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f06f 0210 	mvn.w	r2, #16
 800c6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	69db      	ldr	r3, [r3, #28]
 800c6ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fa03 	bl	800cace <HAL_TIM_IC_CaptureCallback>
 800c6c8:	e005      	b.n	800c6d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f9f5 	bl	800caba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fa06 	bl	800cae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d10e      	bne.n	800c708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	f003 0301 	and.w	r3, r3, #1
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d107      	bne.n	800c708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f06f 0201 	mvn.w	r2, #1
 800c700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f9cf 	bl	800caa6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c712:	2b80      	cmp	r3, #128	; 0x80
 800c714:	d10e      	bne.n	800c734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c720:	2b80      	cmp	r3, #128	; 0x80
 800c722:	d107      	bne.n	800c734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fdd4 	bl	800d2dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73e:	2b40      	cmp	r3, #64	; 0x40
 800c740:	d10e      	bne.n	800c760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74c:	2b40      	cmp	r3, #64	; 0x40
 800c74e:	d107      	bne.n	800c760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f9cb 	bl	800caf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	f003 0320 	and.w	r3, r3, #32
 800c76a:	2b20      	cmp	r3, #32
 800c76c:	d10e      	bne.n	800c78c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f003 0320 	and.w	r3, r3, #32
 800c778:	2b20      	cmp	r3, #32
 800c77a:	d107      	bne.n	800c78c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f06f 0220 	mvn.w	r2, #32
 800c784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fd9e 	bl	800d2c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d101      	bne.n	800c7b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e0ae      	b.n	800c910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b0c      	cmp	r3, #12
 800c7be:	f200 809f 	bhi.w	800c900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c7c2:	a201      	add	r2, pc, #4	; (adr r2, 800c7c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c8:	0800c7fd 	.word	0x0800c7fd
 800c7cc:	0800c901 	.word	0x0800c901
 800c7d0:	0800c901 	.word	0x0800c901
 800c7d4:	0800c901 	.word	0x0800c901
 800c7d8:	0800c83d 	.word	0x0800c83d
 800c7dc:	0800c901 	.word	0x0800c901
 800c7e0:	0800c901 	.word	0x0800c901
 800c7e4:	0800c901 	.word	0x0800c901
 800c7e8:	0800c87f 	.word	0x0800c87f
 800c7ec:	0800c901 	.word	0x0800c901
 800c7f0:	0800c901 	.word	0x0800c901
 800c7f4:	0800c901 	.word	0x0800c901
 800c7f8:	0800c8bf 	.word	0x0800c8bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68b9      	ldr	r1, [r7, #8]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fa22 	bl	800cc4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f042 0208 	orr.w	r2, r2, #8
 800c816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699a      	ldr	r2, [r3, #24]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f022 0204 	bic.w	r2, r2, #4
 800c826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6999      	ldr	r1, [r3, #24]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	691a      	ldr	r2, [r3, #16]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	430a      	orrs	r2, r1
 800c838:	619a      	str	r2, [r3, #24]
      break;
 800c83a:	e064      	b.n	800c906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68b9      	ldr	r1, [r7, #8]
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fa72 	bl	800cd2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	699a      	ldr	r2, [r3, #24]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	699a      	ldr	r2, [r3, #24]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6999      	ldr	r1, [r3, #24]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	021a      	lsls	r2, r3, #8
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	619a      	str	r2, [r3, #24]
      break;
 800c87c:	e043      	b.n	800c906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 fac7 	bl	800ce18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69da      	ldr	r2, [r3, #28]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f042 0208 	orr.w	r2, r2, #8
 800c898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69da      	ldr	r2, [r3, #28]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f022 0204 	bic.w	r2, r2, #4
 800c8a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69d9      	ldr	r1, [r3, #28]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	691a      	ldr	r2, [r3, #16]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	61da      	str	r2, [r3, #28]
      break;
 800c8bc:	e023      	b.n	800c906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68b9      	ldr	r1, [r7, #8]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 fb1b 	bl	800cf00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	69da      	ldr	r2, [r3, #28]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69da      	ldr	r2, [r3, #28]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	69d9      	ldr	r1, [r3, #28]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	021a      	lsls	r2, r3, #8
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	61da      	str	r2, [r3, #28]
      break;
 800c8fe:	e002      	b.n	800c906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	75fb      	strb	r3, [r7, #23]
      break;
 800c904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <HAL_TIM_ConfigClockSource+0x1c>
 800c930:	2302      	movs	r3, #2
 800c932:	e0b4      	b.n	800ca9e <HAL_TIM_ConfigClockSource+0x186>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c95a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c96c:	d03e      	beq.n	800c9ec <HAL_TIM_ConfigClockSource+0xd4>
 800c96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c972:	f200 8087 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c97a:	f000 8086 	beq.w	800ca8a <HAL_TIM_ConfigClockSource+0x172>
 800c97e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c982:	d87f      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c984:	2b70      	cmp	r3, #112	; 0x70
 800c986:	d01a      	beq.n	800c9be <HAL_TIM_ConfigClockSource+0xa6>
 800c988:	2b70      	cmp	r3, #112	; 0x70
 800c98a:	d87b      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c98c:	2b60      	cmp	r3, #96	; 0x60
 800c98e:	d050      	beq.n	800ca32 <HAL_TIM_ConfigClockSource+0x11a>
 800c990:	2b60      	cmp	r3, #96	; 0x60
 800c992:	d877      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c994:	2b50      	cmp	r3, #80	; 0x50
 800c996:	d03c      	beq.n	800ca12 <HAL_TIM_ConfigClockSource+0xfa>
 800c998:	2b50      	cmp	r3, #80	; 0x50
 800c99a:	d873      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c99c:	2b40      	cmp	r3, #64	; 0x40
 800c99e:	d058      	beq.n	800ca52 <HAL_TIM_ConfigClockSource+0x13a>
 800c9a0:	2b40      	cmp	r3, #64	; 0x40
 800c9a2:	d86f      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a4:	2b30      	cmp	r3, #48	; 0x30
 800c9a6:	d064      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x15a>
 800c9a8:	2b30      	cmp	r3, #48	; 0x30
 800c9aa:	d86b      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	d060      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x15a>
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	d867      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d05c      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x15a>
 800c9b8:	2b10      	cmp	r3, #16
 800c9ba:	d05a      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x15a>
 800c9bc:	e062      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	6899      	ldr	r1, [r3, #8]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	f000 fb67 	bl	800d0a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	609a      	str	r2, [r3, #8]
      break;
 800c9ea:	e04f      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6818      	ldr	r0, [r3, #0]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	6899      	ldr	r1, [r3, #8]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	f000 fb50 	bl	800d0a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689a      	ldr	r2, [r3, #8]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca0e:	609a      	str	r2, [r3, #8]
      break;
 800ca10:	e03c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6818      	ldr	r0, [r3, #0]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	6859      	ldr	r1, [r3, #4]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	f000 fac4 	bl	800cfac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2150      	movs	r1, #80	; 0x50
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 fb1d 	bl	800d06a <TIM_ITRx_SetConfig>
      break;
 800ca30:	e02c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6818      	ldr	r0, [r3, #0]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	6859      	ldr	r1, [r3, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	f000 fae3 	bl	800d00a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2160      	movs	r1, #96	; 0x60
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fb0d 	bl	800d06a <TIM_ITRx_SetConfig>
      break;
 800ca50:	e01c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6818      	ldr	r0, [r3, #0]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	6859      	ldr	r1, [r3, #4]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f000 faa4 	bl	800cfac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2140      	movs	r1, #64	; 0x40
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 fafd 	bl	800d06a <TIM_ITRx_SetConfig>
      break;
 800ca70:	e00c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f000 faf4 	bl	800d06a <TIM_ITRx_SetConfig>
      break;
 800ca82:	e003      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
      break;
 800ca88:	e000      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800caae:	bf00      	nop
 800cab0:	370c      	adds	r7, #12
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caba:	b480      	push	{r7}
 800cabc:	b083      	sub	sp, #12
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cac2:	bf00      	nop
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b083      	sub	sp, #12
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800caea:	bf00      	nop
 800caec:	370c      	adds	r7, #12
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cafe:	bf00      	nop
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
	...

0800cb0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a40      	ldr	r2, [pc, #256]	; (800cc20 <TIM_Base_SetConfig+0x114>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d013      	beq.n	800cb4c <TIM_Base_SetConfig+0x40>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb2a:	d00f      	beq.n	800cb4c <TIM_Base_SetConfig+0x40>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a3d      	ldr	r2, [pc, #244]	; (800cc24 <TIM_Base_SetConfig+0x118>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d00b      	beq.n	800cb4c <TIM_Base_SetConfig+0x40>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a3c      	ldr	r2, [pc, #240]	; (800cc28 <TIM_Base_SetConfig+0x11c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d007      	beq.n	800cb4c <TIM_Base_SetConfig+0x40>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a3b      	ldr	r2, [pc, #236]	; (800cc2c <TIM_Base_SetConfig+0x120>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d003      	beq.n	800cb4c <TIM_Base_SetConfig+0x40>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a3a      	ldr	r2, [pc, #232]	; (800cc30 <TIM_Base_SetConfig+0x124>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d108      	bne.n	800cb5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a2f      	ldr	r2, [pc, #188]	; (800cc20 <TIM_Base_SetConfig+0x114>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d02b      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb6c:	d027      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a2c      	ldr	r2, [pc, #176]	; (800cc24 <TIM_Base_SetConfig+0x118>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d023      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a2b      	ldr	r2, [pc, #172]	; (800cc28 <TIM_Base_SetConfig+0x11c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d01f      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a2a      	ldr	r2, [pc, #168]	; (800cc2c <TIM_Base_SetConfig+0x120>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d01b      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a29      	ldr	r2, [pc, #164]	; (800cc30 <TIM_Base_SetConfig+0x124>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d017      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a28      	ldr	r2, [pc, #160]	; (800cc34 <TIM_Base_SetConfig+0x128>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d013      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a27      	ldr	r2, [pc, #156]	; (800cc38 <TIM_Base_SetConfig+0x12c>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d00f      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a26      	ldr	r2, [pc, #152]	; (800cc3c <TIM_Base_SetConfig+0x130>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d00b      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a25      	ldr	r2, [pc, #148]	; (800cc40 <TIM_Base_SetConfig+0x134>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d007      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a24      	ldr	r2, [pc, #144]	; (800cc44 <TIM_Base_SetConfig+0x138>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d003      	beq.n	800cbbe <TIM_Base_SetConfig+0xb2>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a23      	ldr	r2, [pc, #140]	; (800cc48 <TIM_Base_SetConfig+0x13c>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d108      	bne.n	800cbd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	689a      	ldr	r2, [r3, #8]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4a0a      	ldr	r2, [pc, #40]	; (800cc20 <TIM_Base_SetConfig+0x114>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d003      	beq.n	800cc04 <TIM_Base_SetConfig+0xf8>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a0c      	ldr	r2, [pc, #48]	; (800cc30 <TIM_Base_SetConfig+0x124>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d103      	bne.n	800cc0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	691a      	ldr	r2, [r3, #16]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	615a      	str	r2, [r3, #20]
}
 800cc12:	bf00      	nop
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	40010000 	.word	0x40010000
 800cc24:	40000400 	.word	0x40000400
 800cc28:	40000800 	.word	0x40000800
 800cc2c:	40000c00 	.word	0x40000c00
 800cc30:	40010400 	.word	0x40010400
 800cc34:	40014000 	.word	0x40014000
 800cc38:	40014400 	.word	0x40014400
 800cc3c:	40014800 	.word	0x40014800
 800cc40:	40001800 	.word	0x40001800
 800cc44:	40001c00 	.word	0x40001c00
 800cc48:	40002000 	.word	0x40002000

0800cc4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	f023 0201 	bic.w	r2, r3, #1
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f023 0302 	bic.w	r3, r3, #2
 800cc94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	697a      	ldr	r2, [r7, #20]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a20      	ldr	r2, [pc, #128]	; (800cd24 <TIM_OC1_SetConfig+0xd8>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d003      	beq.n	800ccb0 <TIM_OC1_SetConfig+0x64>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a1f      	ldr	r2, [pc, #124]	; (800cd28 <TIM_OC1_SetConfig+0xdc>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d10c      	bne.n	800ccca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f023 0308 	bic.w	r3, r3, #8
 800ccb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	f023 0304 	bic.w	r3, r3, #4
 800ccc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a15      	ldr	r2, [pc, #84]	; (800cd24 <TIM_OC1_SetConfig+0xd8>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d003      	beq.n	800ccda <TIM_OC1_SetConfig+0x8e>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a14      	ldr	r2, [pc, #80]	; (800cd28 <TIM_OC1_SetConfig+0xdc>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d111      	bne.n	800ccfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	693a      	ldr	r2, [r7, #16]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	693a      	ldr	r2, [r7, #16]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	621a      	str	r2, [r3, #32]
}
 800cd18:	bf00      	nop
 800cd1a:	371c      	adds	r7, #28
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	40010000 	.word	0x40010000
 800cd28:	40010400 	.word	0x40010400

0800cd2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b087      	sub	sp, #28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	f023 0210 	bic.w	r2, r3, #16
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	021b      	lsls	r3, r3, #8
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f023 0320 	bic.w	r3, r3, #32
 800cd76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	011b      	lsls	r3, r3, #4
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a22      	ldr	r2, [pc, #136]	; (800ce10 <TIM_OC2_SetConfig+0xe4>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d003      	beq.n	800cd94 <TIM_OC2_SetConfig+0x68>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a21      	ldr	r2, [pc, #132]	; (800ce14 <TIM_OC2_SetConfig+0xe8>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d10d      	bne.n	800cdb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a17      	ldr	r2, [pc, #92]	; (800ce10 <TIM_OC2_SetConfig+0xe4>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d003      	beq.n	800cdc0 <TIM_OC2_SetConfig+0x94>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a16      	ldr	r2, [pc, #88]	; (800ce14 <TIM_OC2_SetConfig+0xe8>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d113      	bne.n	800cde8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	695b      	ldr	r3, [r3, #20]
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	621a      	str	r2, [r3, #32]
}
 800ce02:	bf00      	nop
 800ce04:	371c      	adds	r7, #28
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	40010000 	.word	0x40010000
 800ce14:	40010400 	.word	0x40010400

0800ce18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4a21      	ldr	r2, [pc, #132]	; (800cef8 <TIM_OC3_SetConfig+0xe0>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d003      	beq.n	800ce7e <TIM_OC3_SetConfig+0x66>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a20      	ldr	r2, [pc, #128]	; (800cefc <TIM_OC3_SetConfig+0xe4>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d10d      	bne.n	800ce9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a16      	ldr	r2, [pc, #88]	; (800cef8 <TIM_OC3_SetConfig+0xe0>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d003      	beq.n	800ceaa <TIM_OC3_SetConfig+0x92>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a15      	ldr	r2, [pc, #84]	; (800cefc <TIM_OC3_SetConfig+0xe4>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d113      	bne.n	800ced2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ceb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	011b      	lsls	r3, r3, #4
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	011b      	lsls	r3, r3, #4
 800cecc:	693a      	ldr	r2, [r7, #16]
 800cece:	4313      	orrs	r3, r2
 800ced0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	685a      	ldr	r2, [r3, #4]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	621a      	str	r2, [r3, #32]
}
 800ceec:	bf00      	nop
 800ceee:	371c      	adds	r7, #28
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr
 800cef8:	40010000 	.word	0x40010000
 800cefc:	40010400 	.word	0x40010400

0800cf00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b087      	sub	sp, #28
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	69db      	ldr	r3, [r3, #28]
 800cf26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	021b      	lsls	r3, r3, #8
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	4313      	orrs	r3, r2
 800cf42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	031b      	lsls	r3, r3, #12
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a12      	ldr	r2, [pc, #72]	; (800cfa4 <TIM_OC4_SetConfig+0xa4>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d003      	beq.n	800cf68 <TIM_OC4_SetConfig+0x68>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a11      	ldr	r2, [pc, #68]	; (800cfa8 <TIM_OC4_SetConfig+0xa8>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d109      	bne.n	800cf7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	695b      	ldr	r3, [r3, #20]
 800cf74:	019b      	lsls	r3, r3, #6
 800cf76:	697a      	ldr	r2, [r7, #20]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	685a      	ldr	r2, [r3, #4]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	621a      	str	r2, [r3, #32]
}
 800cf96:	bf00      	nop
 800cf98:	371c      	adds	r7, #28
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	40010000 	.word	0x40010000
 800cfa8:	40010400 	.word	0x40010400

0800cfac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	f023 0201 	bic.w	r2, r3, #1
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	011b      	lsls	r3, r3, #4
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f023 030a 	bic.w	r3, r3, #10
 800cfe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfea:	697a      	ldr	r2, [r7, #20]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	697a      	ldr	r2, [r7, #20]
 800cffc:	621a      	str	r2, [r3, #32]
}
 800cffe:	bf00      	nop
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b087      	sub	sp, #28
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	f023 0210 	bic.w	r2, r3, #16
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6a1b      	ldr	r3, [r3, #32]
 800d02c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	031b      	lsls	r3, r3, #12
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	011b      	lsls	r3, r3, #4
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	4313      	orrs	r3, r2
 800d050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	621a      	str	r2, [r3, #32]
}
 800d05e:	bf00      	nop
 800d060:	371c      	adds	r7, #28
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4313      	orrs	r3, r2
 800d088:	f043 0307 	orr.w	r3, r3, #7
 800d08c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	609a      	str	r2, [r3, #8]
}
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	021a      	lsls	r2, r3, #8
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	697a      	ldr	r2, [r7, #20]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	609a      	str	r2, [r3, #8]
}
 800d0d4:	bf00      	nop
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b087      	sub	sp, #28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	f003 031f 	and.w	r3, r3, #31
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6a1a      	ldr	r2, [r3, #32]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	43db      	mvns	r3, r3
 800d102:	401a      	ands	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6a1a      	ldr	r2, [r3, #32]
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	f003 031f 	and.w	r3, r3, #31
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	fa01 f303 	lsl.w	r3, r1, r3
 800d118:	431a      	orrs	r2, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	621a      	str	r2, [r3, #32]
}
 800d11e:	bf00      	nop
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
	...

0800d12c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d101      	bne.n	800d144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d140:	2302      	movs	r3, #2
 800d142:	e05a      	b.n	800d1fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d16a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	4313      	orrs	r3, r2
 800d174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a21      	ldr	r2, [pc, #132]	; (800d208 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d022      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d190:	d01d      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a1d      	ldr	r2, [pc, #116]	; (800d20c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d018      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a1b      	ldr	r2, [pc, #108]	; (800d210 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d013      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a1a      	ldr	r2, [pc, #104]	; (800d214 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d00e      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a18      	ldr	r2, [pc, #96]	; (800d218 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d009      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a17      	ldr	r2, [pc, #92]	; (800d21c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d004      	beq.n	800d1ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a15      	ldr	r2, [pc, #84]	; (800d220 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d10c      	bne.n	800d1e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	40010000 	.word	0x40010000
 800d20c:	40000400 	.word	0x40000400
 800d210:	40000800 	.word	0x40000800
 800d214:	40000c00 	.word	0x40000c00
 800d218:	40010400 	.word	0x40010400
 800d21c:	40014000 	.word	0x40014000
 800d220:	40001800 	.word	0x40001800

0800d224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d101      	bne.n	800d240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d23c:	2302      	movs	r3, #2
 800d23e:	e03d      	b.n	800d2bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	4313      	orrs	r3, r2
 800d254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	4313      	orrs	r3, r2
 800d262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	4313      	orrs	r3, r2
 800d270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	695b      	ldr	r3, [r3, #20]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	69db      	ldr	r3, [r3, #28]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e03f      	b.n	800d382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7f8 f85e 	bl	80053d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2224      	movs	r2, #36	; 0x24
 800d320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fe1d 	bl	800df74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	691a      	ldr	r2, [r3, #16]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	695a      	ldr	r2, [r3, #20]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2220      	movs	r2, #32
 800d374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2220      	movs	r2, #32
 800d37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b08a      	sub	sp, #40	; 0x28
 800d38e:	af02      	add	r7, sp, #8
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	60b9      	str	r1, [r7, #8]
 800d394:	603b      	str	r3, [r7, #0]
 800d396:	4613      	mov	r3, r2
 800d398:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d39a:	2300      	movs	r3, #0
 800d39c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b20      	cmp	r3, #32
 800d3a8:	d17c      	bne.n	800d4a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <HAL_UART_Transmit+0x2c>
 800d3b0:	88fb      	ldrh	r3, [r7, #6]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e075      	b.n	800d4a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d101      	bne.n	800d3c8 <HAL_UART_Transmit+0x3e>
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	e06e      	b.n	800d4a6 <HAL_UART_Transmit+0x11c>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2221      	movs	r2, #33	; 0x21
 800d3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d3de:	f7f8 ff5d 	bl	800629c <HAL_GetTick>
 800d3e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	88fa      	ldrh	r2, [r7, #6]
 800d3e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	88fa      	ldrh	r2, [r7, #6]
 800d3ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3f8:	d108      	bne.n	800d40c <HAL_UART_Transmit+0x82>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d104      	bne.n	800d40c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	61bb      	str	r3, [r7, #24]
 800d40a:	e003      	b.n	800d414 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d410:	2300      	movs	r3, #0
 800d412:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d41c:	e02a      	b.n	800d474 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2200      	movs	r2, #0
 800d426:	2180      	movs	r1, #128	; 0x80
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f000 fb9b 	bl	800db64 <UART_WaitOnFlagUntilTimeout>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e036      	b.n	800d4a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10b      	bne.n	800d456 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	881b      	ldrh	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d44c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	3302      	adds	r3, #2
 800d452:	61bb      	str	r3, [r7, #24]
 800d454:	e007      	b.n	800d466 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	781a      	ldrb	r2, [r3, #0]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	3301      	adds	r3, #1
 800d464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	3b01      	subs	r3, #1
 800d46e:	b29a      	uxth	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d478:	b29b      	uxth	r3, r3
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1cf      	bne.n	800d41e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2200      	movs	r2, #0
 800d486:	2140      	movs	r1, #64	; 0x40
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 fb6b 	bl	800db64 <UART_WaitOnFlagUntilTimeout>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d494:	2303      	movs	r3, #3
 800d496:	e006      	b.n	800d4a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2220      	movs	r2, #32
 800d49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	e000      	b.n	800d4a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d4a4:	2302      	movs	r3, #2
  }
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3720      	adds	r7, #32
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b08a      	sub	sp, #40	; 0x28
 800d4b2:	af02      	add	r7, sp, #8
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	603b      	str	r3, [r7, #0]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	2b20      	cmp	r3, #32
 800d4cc:	f040 808c 	bne.w	800d5e8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <HAL_UART_Receive+0x2e>
 800d4d6:	88fb      	ldrh	r3, [r7, #6]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e084      	b.n	800d5ea <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d101      	bne.n	800d4ee <HAL_UART_Receive+0x40>
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	e07d      	b.n	800d5ea <HAL_UART_Receive+0x13c>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2222      	movs	r2, #34	; 0x22
 800d500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d50a:	f7f8 fec7 	bl	800629c <HAL_GetTick>
 800d50e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	88fa      	ldrh	r2, [r7, #6]
 800d514:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d524:	d108      	bne.n	800d538 <HAL_UART_Receive+0x8a>
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d104      	bne.n	800d538 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d52e:	2300      	movs	r3, #0
 800d530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	61bb      	str	r3, [r7, #24]
 800d536:	e003      	b.n	800d540 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d53c:	2300      	movs	r3, #0
 800d53e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d548:	e043      	b.n	800d5d2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2200      	movs	r2, #0
 800d552:	2120      	movs	r1, #32
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f000 fb05 	bl	800db64 <UART_WaitOnFlagUntilTimeout>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e042      	b.n	800d5ea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10c      	bne.n	800d584 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	b29b      	uxth	r3, r3
 800d572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d576:	b29a      	uxth	r2, r3
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	3302      	adds	r3, #2
 800d580:	61bb      	str	r3, [r7, #24]
 800d582:	e01f      	b.n	800d5c4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d58c:	d007      	beq.n	800d59e <HAL_UART_Receive+0xf0>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10a      	bne.n	800d5ac <HAL_UART_Receive+0xfe>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d106      	bne.n	800d5ac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	701a      	strb	r2, [r3, #0]
 800d5aa:	e008      	b.n	800d5be <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1b6      	bne.n	800d54a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2220      	movs	r2, #32
 800d5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e000      	b.n	800d5ea <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d5e8:	2302      	movs	r3, #2
  }
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3720      	adds	r7, #32
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b0ba      	sub	sp, #232	; 0xe8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d61a:	2300      	movs	r3, #0
 800d61c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d620:	2300      	movs	r3, #0
 800d622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d62a:	f003 030f 	and.w	r3, r3, #15
 800d62e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10f      	bne.n	800d65a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d63e:	f003 0320 	and.w	r3, r3, #32
 800d642:	2b00      	cmp	r3, #0
 800d644:	d009      	beq.n	800d65a <HAL_UART_IRQHandler+0x66>
 800d646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d64a:	f003 0320 	and.w	r3, r3, #32
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d003      	beq.n	800d65a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fbd3 	bl	800ddfe <UART_Receive_IT>
      return;
 800d658:	e256      	b.n	800db08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d65a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 80de 	beq.w	800d820 <HAL_UART_IRQHandler+0x22c>
 800d664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d668:	f003 0301 	and.w	r3, r3, #1
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d106      	bne.n	800d67e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f000 80d1 	beq.w	800d820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00b      	beq.n	800d6a2 <HAL_UART_IRQHandler+0xae>
 800d68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d68e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d692:	2b00      	cmp	r3, #0
 800d694:	d005      	beq.n	800d6a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69a:	f043 0201 	orr.w	r2, r3, #1
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00b      	beq.n	800d6c6 <HAL_UART_IRQHandler+0xd2>
 800d6ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d005      	beq.n	800d6c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	f043 0202 	orr.w	r2, r3, #2
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6ca:	f003 0302 	and.w	r3, r3, #2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00b      	beq.n	800d6ea <HAL_UART_IRQHandler+0xf6>
 800d6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d005      	beq.n	800d6ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	f043 0204 	orr.w	r2, r3, #4
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6ee:	f003 0308 	and.w	r3, r3, #8
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d011      	beq.n	800d71a <HAL_UART_IRQHandler+0x126>
 800d6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6fa:	f003 0320 	and.w	r3, r3, #32
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d105      	bne.n	800d70e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d706:	f003 0301 	and.w	r3, r3, #1
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d005      	beq.n	800d71a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	f043 0208 	orr.w	r2, r3, #8
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 81ed 	beq.w	800dafe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d728:	f003 0320 	and.w	r3, r3, #32
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d008      	beq.n	800d742 <HAL_UART_IRQHandler+0x14e>
 800d730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d734:	f003 0320 	and.w	r3, r3, #32
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fb5e 	bl	800ddfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d74c:	2b40      	cmp	r3, #64	; 0x40
 800d74e:	bf0c      	ite	eq
 800d750:	2301      	moveq	r3, #1
 800d752:	2300      	movne	r3, #0
 800d754:	b2db      	uxtb	r3, r3
 800d756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75e:	f003 0308 	and.w	r3, r3, #8
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <HAL_UART_IRQHandler+0x17a>
 800d766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d04f      	beq.n	800d80e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa66 	bl	800dc40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	695b      	ldr	r3, [r3, #20]
 800d77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77e:	2b40      	cmp	r3, #64	; 0x40
 800d780:	d141      	bne.n	800d806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3314      	adds	r3, #20
 800d788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d790:	e853 3f00 	ldrex	r3, [r3]
 800d794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	3314      	adds	r3, #20
 800d7aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d7ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d7b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d7ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d7be:	e841 2300 	strex	r3, r2, [r1]
 800d7c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d7c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1d9      	bne.n	800d782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d013      	beq.n	800d7fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	4a7d      	ldr	r2, [pc, #500]	; (800d9d0 <HAL_UART_IRQHandler+0x3dc>)
 800d7dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7f9 fd64 	bl	80072b0 <HAL_DMA_Abort_IT>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d016      	beq.n	800d81c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7fc:	e00e      	b.n	800d81c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f99a 	bl	800db38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d804:	e00a      	b.n	800d81c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f996 	bl	800db38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d80c:	e006      	b.n	800d81c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f992 	bl	800db38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d81a:	e170      	b.n	800dafe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d81c:	bf00      	nop
    return;
 800d81e:	e16e      	b.n	800dafe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d824:	2b01      	cmp	r3, #1
 800d826:	f040 814a 	bne.w	800dabe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d82e:	f003 0310 	and.w	r3, r3, #16
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 8143 	beq.w	800dabe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d83c:	f003 0310 	and.w	r3, r3, #16
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 813c 	beq.w	800dabe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d846:	2300      	movs	r3, #0
 800d848:	60bb      	str	r3, [r7, #8]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60bb      	str	r3, [r7, #8]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	60bb      	str	r3, [r7, #8]
 800d85a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d866:	2b40      	cmp	r3, #64	; 0x40
 800d868:	f040 80b4 	bne.w	800d9d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f000 8140 	beq.w	800db02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d88a:	429a      	cmp	r2, r3
 800d88c:	f080 8139 	bcs.w	800db02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d896:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8a2:	f000 8088 	beq.w	800d9b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	330c      	adds	r3, #12
 800d8ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8b4:	e853 3f00 	ldrex	r3, [r3]
 800d8b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d8bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	330c      	adds	r3, #12
 800d8ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d8d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d8d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d8de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d8e2:	e841 2300 	strex	r3, r2, [r1]
 800d8e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d8ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1d9      	bne.n	800d8a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3314      	adds	r3, #20
 800d8f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8fc:	e853 3f00 	ldrex	r3, [r3]
 800d900:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d904:	f023 0301 	bic.w	r3, r3, #1
 800d908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3314      	adds	r3, #20
 800d912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d916:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d91a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d91e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e1      	bne.n	800d8f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3314      	adds	r3, #20
 800d934:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	3314      	adds	r3, #20
 800d94e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d952:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d956:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d95a:	e841 2300 	strex	r3, r2, [r1]
 800d95e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1e3      	bne.n	800d92e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2220      	movs	r2, #32
 800d96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	330c      	adds	r3, #12
 800d97a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97e:	e853 3f00 	ldrex	r3, [r3]
 800d982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d986:	f023 0310 	bic.w	r3, r3, #16
 800d98a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	330c      	adds	r3, #12
 800d994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d998:	65ba      	str	r2, [r7, #88]	; 0x58
 800d99a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d99e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9a0:	e841 2300 	strex	r3, r2, [r1]
 800d9a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1e3      	bne.n	800d974 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7f9 fc0d 	bl	80071d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f8c0 	bl	800db4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d9cc:	e099      	b.n	800db02 <HAL_UART_IRQHandler+0x50e>
 800d9ce:	bf00      	nop
 800d9d0:	0800dd07 	.word	0x0800dd07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f000 808b 	beq.w	800db06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d9f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 8086 	beq.w	800db06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	330c      	adds	r3, #12
 800da00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	e853 3f00 	ldrex	r3, [r3]
 800da08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	330c      	adds	r3, #12
 800da1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800da1e:	647a      	str	r2, [r7, #68]	; 0x44
 800da20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da26:	e841 2300 	strex	r3, r2, [r1]
 800da2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1e3      	bne.n	800d9fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	3314      	adds	r3, #20
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	e853 3f00 	ldrex	r3, [r3]
 800da40:	623b      	str	r3, [r7, #32]
   return(result);
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	f023 0301 	bic.w	r3, r3, #1
 800da48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	3314      	adds	r3, #20
 800da52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800da56:	633a      	str	r2, [r7, #48]	; 0x30
 800da58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5e:	e841 2300 	strex	r3, r2, [r1]
 800da62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1e3      	bne.n	800da32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2220      	movs	r2, #32
 800da6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	330c      	adds	r3, #12
 800da7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	e853 3f00 	ldrex	r3, [r3]
 800da86:	60fb      	str	r3, [r7, #12]
   return(result);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f023 0310 	bic.w	r3, r3, #16
 800da8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	330c      	adds	r3, #12
 800da98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800da9c:	61fa      	str	r2, [r7, #28]
 800da9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa0:	69b9      	ldr	r1, [r7, #24]
 800daa2:	69fa      	ldr	r2, [r7, #28]
 800daa4:	e841 2300 	strex	r3, r2, [r1]
 800daa8:	617b      	str	r3, [r7, #20]
   return(result);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1e3      	bne.n	800da78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f848 	bl	800db4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dabc:	e023      	b.n	800db06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dabe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d009      	beq.n	800dade <HAL_UART_IRQHandler+0x4ea>
 800daca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d003      	beq.n	800dade <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f929 	bl	800dd2e <UART_Transmit_IT>
    return;
 800dadc:	e014      	b.n	800db08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00e      	beq.n	800db08 <HAL_UART_IRQHandler+0x514>
 800daea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d008      	beq.n	800db08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f969 	bl	800ddce <UART_EndTransmit_IT>
    return;
 800dafc:	e004      	b.n	800db08 <HAL_UART_IRQHandler+0x514>
    return;
 800dafe:	bf00      	nop
 800db00:	e002      	b.n	800db08 <HAL_UART_IRQHandler+0x514>
      return;
 800db02:	bf00      	nop
 800db04:	e000      	b.n	800db08 <HAL_UART_IRQHandler+0x514>
      return;
 800db06:	bf00      	nop
  }
}
 800db08:	37e8      	adds	r7, #232	; 0xe8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop

0800db10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b090      	sub	sp, #64	; 0x40
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db74:	e050      	b.n	800dc18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7c:	d04c      	beq.n	800dc18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800db7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db80:	2b00      	cmp	r3, #0
 800db82:	d007      	beq.n	800db94 <UART_WaitOnFlagUntilTimeout+0x30>
 800db84:	f7f8 fb8a 	bl	800629c <HAL_GetTick>
 800db88:	4602      	mov	r2, r0
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db90:	429a      	cmp	r2, r3
 800db92:	d241      	bcs.n	800dc18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	330c      	adds	r3, #12
 800db9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9e:	e853 3f00 	ldrex	r3, [r3]
 800dba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	330c      	adds	r3, #12
 800dbb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbb4:	637a      	str	r2, [r7, #52]	; 0x34
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbbc:	e841 2300 	strex	r3, r2, [r1]
 800dbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1e5      	bne.n	800db94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3314      	adds	r3, #20
 800dbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	e853 3f00 	ldrex	r3, [r3]
 800dbd6:	613b      	str	r3, [r7, #16]
   return(result);
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f023 0301 	bic.w	r3, r3, #1
 800dbde:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3314      	adds	r3, #20
 800dbe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbe8:	623a      	str	r2, [r7, #32]
 800dbea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbec:	69f9      	ldr	r1, [r7, #28]
 800dbee:	6a3a      	ldr	r2, [r7, #32]
 800dbf0:	e841 2300 	strex	r3, r2, [r1]
 800dbf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1e5      	bne.n	800dbc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2220      	movs	r2, #32
 800dc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800dc14:	2303      	movs	r3, #3
 800dc16:	e00f      	b.n	800dc38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	4013      	ands	r3, r2
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	bf0c      	ite	eq
 800dc28:	2301      	moveq	r3, #1
 800dc2a:	2300      	movne	r3, #0
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	461a      	mov	r2, r3
 800dc30:	79fb      	ldrb	r3, [r7, #7]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d09f      	beq.n	800db76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3740      	adds	r7, #64	; 0x40
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b095      	sub	sp, #84	; 0x54
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	330c      	adds	r3, #12
 800dc4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc52:	e853 3f00 	ldrex	r3, [r3]
 800dc56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	330c      	adds	r3, #12
 800dc66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc68:	643a      	str	r2, [r7, #64]	; 0x40
 800dc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e5      	bne.n	800dc48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3314      	adds	r3, #20
 800dc82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	e853 3f00 	ldrex	r3, [r3]
 800dc8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	f023 0301 	bic.w	r3, r3, #1
 800dc92:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3314      	adds	r3, #20
 800dc9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dca4:	e841 2300 	strex	r3, r2, [r1]
 800dca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1e5      	bne.n	800dc7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d119      	bne.n	800dcec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	330c      	adds	r3, #12
 800dcbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	e853 3f00 	ldrex	r3, [r3]
 800dcc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f023 0310 	bic.w	r3, r3, #16
 800dcce:	647b      	str	r3, [r7, #68]	; 0x44
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	330c      	adds	r3, #12
 800dcd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcd8:	61ba      	str	r2, [r7, #24]
 800dcda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcdc:	6979      	ldr	r1, [r7, #20]
 800dcde:	69ba      	ldr	r2, [r7, #24]
 800dce0:	e841 2300 	strex	r3, r2, [r1]
 800dce4:	613b      	str	r3, [r7, #16]
   return(result);
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1e5      	bne.n	800dcb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2220      	movs	r2, #32
 800dcf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dcfa:	bf00      	nop
 800dcfc:	3754      	adds	r7, #84	; 0x54
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b084      	sub	sp, #16
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff ff09 	bl	800db38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd26:	bf00      	nop
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b085      	sub	sp, #20
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b21      	cmp	r3, #33	; 0x21
 800dd40:	d13e      	bne.n	800ddc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd4a:	d114      	bne.n	800dd76 <UART_Transmit_IT+0x48>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d110      	bne.n	800dd76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a1b      	ldr	r3, [r3, #32]
 800dd58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a1b      	ldr	r3, [r3, #32]
 800dd6e:	1c9a      	adds	r2, r3, #2
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	621a      	str	r2, [r3, #32]
 800dd74:	e008      	b.n	800dd88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1b      	ldr	r3, [r3, #32]
 800dd7a:	1c59      	adds	r1, r3, #1
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	6211      	str	r1, [r2, #32]
 800dd80:	781a      	ldrb	r2, [r3, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	4619      	mov	r1, r3
 800dd96:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10f      	bne.n	800ddbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68da      	ldr	r2, [r3, #12]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e000      	b.n	800ddc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ddc0:	2302      	movs	r3, #2
  }
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b082      	sub	sp, #8
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68da      	ldr	r2, [r3, #12]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dde4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2220      	movs	r2, #32
 800ddea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff fe8e 	bl	800db10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b08c      	sub	sp, #48	; 0x30
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b22      	cmp	r3, #34	; 0x22
 800de10:	f040 80ab 	bne.w	800df6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de1c:	d117      	bne.n	800de4e <UART_Receive_IT+0x50>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d113      	bne.n	800de4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	b29b      	uxth	r3, r3
 800de38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de46:	1c9a      	adds	r2, r3, #2
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	629a      	str	r2, [r3, #40]	; 0x28
 800de4c:	e026      	b.n	800de9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800de54:	2300      	movs	r3, #0
 800de56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de60:	d007      	beq.n	800de72 <UART_Receive_IT+0x74>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10a      	bne.n	800de80 <UART_Receive_IT+0x82>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d106      	bne.n	800de80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	701a      	strb	r2, [r3, #0]
 800de7e:	e008      	b.n	800de92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de96:	1c5a      	adds	r2, r3, #1
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	3b01      	subs	r3, #1
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	4619      	mov	r1, r3
 800deaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800deac:	2b00      	cmp	r3, #0
 800deae:	d15a      	bne.n	800df66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f022 0220 	bic.w	r2, r2, #32
 800debe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68da      	ldr	r2, [r3, #12]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	695a      	ldr	r2, [r3, #20]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f022 0201 	bic.w	r2, r2, #1
 800dede:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2220      	movs	r2, #32
 800dee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deec:	2b01      	cmp	r3, #1
 800deee:	d135      	bne.n	800df5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	330c      	adds	r3, #12
 800defc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	e853 3f00 	ldrex	r3, [r3]
 800df04:	613b      	str	r3, [r7, #16]
   return(result);
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	f023 0310 	bic.w	r3, r3, #16
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	330c      	adds	r3, #12
 800df14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df16:	623a      	str	r2, [r7, #32]
 800df18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1a:	69f9      	ldr	r1, [r7, #28]
 800df1c:	6a3a      	ldr	r2, [r7, #32]
 800df1e:	e841 2300 	strex	r3, r2, [r1]
 800df22:	61bb      	str	r3, [r7, #24]
   return(result);
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1e5      	bne.n	800def6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f003 0310 	and.w	r3, r3, #16
 800df34:	2b10      	cmp	r3, #16
 800df36:	d10a      	bne.n	800df4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800df38:	2300      	movs	r3, #0
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	60fb      	str	r3, [r7, #12]
 800df4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff fdf9 	bl	800db4c <HAL_UARTEx_RxEventCallback>
 800df5a:	e002      	b.n	800df62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff fde1 	bl	800db24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	e002      	b.n	800df6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	e000      	b.n	800df6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800df6a:	2302      	movs	r3, #2
  }
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3730      	adds	r7, #48	; 0x30
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df78:	b0c0      	sub	sp, #256	; 0x100
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800df8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df90:	68d9      	ldr	r1, [r3, #12]
 800df92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	ea40 0301 	orr.w	r3, r0, r1
 800df9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800df9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfa2:	689a      	ldr	r2, [r3, #8]
 800dfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dfc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dfcc:	f021 010c 	bic.w	r1, r1, #12
 800dfd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dfda:	430b      	orrs	r3, r1
 800dfdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dfde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dfea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfee:	6999      	ldr	r1, [r3, #24]
 800dff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	ea40 0301 	orr.w	r3, r0, r1
 800dffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	4b8f      	ldr	r3, [pc, #572]	; (800e240 <UART_SetConfig+0x2cc>)
 800e004:	429a      	cmp	r2, r3
 800e006:	d005      	beq.n	800e014 <UART_SetConfig+0xa0>
 800e008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	4b8d      	ldr	r3, [pc, #564]	; (800e244 <UART_SetConfig+0x2d0>)
 800e010:	429a      	cmp	r2, r3
 800e012:	d104      	bne.n	800e01e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e014:	f7fb fed8 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800e018:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e01c:	e003      	b.n	800e026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e01e:	f7fb febf 	bl	8009da0 <HAL_RCC_GetPCLK1Freq>
 800e022:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e030:	f040 810c 	bne.w	800e24c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e038:	2200      	movs	r2, #0
 800e03a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e03e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e046:	4622      	mov	r2, r4
 800e048:	462b      	mov	r3, r5
 800e04a:	1891      	adds	r1, r2, r2
 800e04c:	65b9      	str	r1, [r7, #88]	; 0x58
 800e04e:	415b      	adcs	r3, r3
 800e050:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e056:	4621      	mov	r1, r4
 800e058:	eb12 0801 	adds.w	r8, r2, r1
 800e05c:	4629      	mov	r1, r5
 800e05e:	eb43 0901 	adc.w	r9, r3, r1
 800e062:	f04f 0200 	mov.w	r2, #0
 800e066:	f04f 0300 	mov.w	r3, #0
 800e06a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e06e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e076:	4690      	mov	r8, r2
 800e078:	4699      	mov	r9, r3
 800e07a:	4623      	mov	r3, r4
 800e07c:	eb18 0303 	adds.w	r3, r8, r3
 800e080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e084:	462b      	mov	r3, r5
 800e086:	eb49 0303 	adc.w	r3, r9, r3
 800e08a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e09a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e09e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	18db      	adds	r3, r3, r3
 800e0a6:	653b      	str	r3, [r7, #80]	; 0x50
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	eb42 0303 	adc.w	r3, r2, r3
 800e0ae:	657b      	str	r3, [r7, #84]	; 0x54
 800e0b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e0b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e0b8:	f7f2 fdbe 	bl	8000c38 <__aeabi_uldivmod>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4b61      	ldr	r3, [pc, #388]	; (800e248 <UART_SetConfig+0x2d4>)
 800e0c2:	fba3 2302 	umull	r2, r3, r3, r2
 800e0c6:	095b      	lsrs	r3, r3, #5
 800e0c8:	011c      	lsls	r4, r3, #4
 800e0ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e0d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e0d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e0dc:	4642      	mov	r2, r8
 800e0de:	464b      	mov	r3, r9
 800e0e0:	1891      	adds	r1, r2, r2
 800e0e2:	64b9      	str	r1, [r7, #72]	; 0x48
 800e0e4:	415b      	adcs	r3, r3
 800e0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e0ec:	4641      	mov	r1, r8
 800e0ee:	eb12 0a01 	adds.w	sl, r2, r1
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	eb43 0b01 	adc.w	fp, r3, r1
 800e0f8:	f04f 0200 	mov.w	r2, #0
 800e0fc:	f04f 0300 	mov.w	r3, #0
 800e100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e10c:	4692      	mov	sl, r2
 800e10e:	469b      	mov	fp, r3
 800e110:	4643      	mov	r3, r8
 800e112:	eb1a 0303 	adds.w	r3, sl, r3
 800e116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e11a:	464b      	mov	r3, r9
 800e11c:	eb4b 0303 	adc.w	r3, fp, r3
 800e120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e130:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e138:	460b      	mov	r3, r1
 800e13a:	18db      	adds	r3, r3, r3
 800e13c:	643b      	str	r3, [r7, #64]	; 0x40
 800e13e:	4613      	mov	r3, r2
 800e140:	eb42 0303 	adc.w	r3, r2, r3
 800e144:	647b      	str	r3, [r7, #68]	; 0x44
 800e146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e14a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e14e:	f7f2 fd73 	bl	8000c38 <__aeabi_uldivmod>
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4611      	mov	r1, r2
 800e158:	4b3b      	ldr	r3, [pc, #236]	; (800e248 <UART_SetConfig+0x2d4>)
 800e15a:	fba3 2301 	umull	r2, r3, r3, r1
 800e15e:	095b      	lsrs	r3, r3, #5
 800e160:	2264      	movs	r2, #100	; 0x64
 800e162:	fb02 f303 	mul.w	r3, r2, r3
 800e166:	1acb      	subs	r3, r1, r3
 800e168:	00db      	lsls	r3, r3, #3
 800e16a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e16e:	4b36      	ldr	r3, [pc, #216]	; (800e248 <UART_SetConfig+0x2d4>)
 800e170:	fba3 2302 	umull	r2, r3, r3, r2
 800e174:	095b      	lsrs	r3, r3, #5
 800e176:	005b      	lsls	r3, r3, #1
 800e178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e17c:	441c      	add	r4, r3
 800e17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e182:	2200      	movs	r2, #0
 800e184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e188:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e18c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e190:	4642      	mov	r2, r8
 800e192:	464b      	mov	r3, r9
 800e194:	1891      	adds	r1, r2, r2
 800e196:	63b9      	str	r1, [r7, #56]	; 0x38
 800e198:	415b      	adcs	r3, r3
 800e19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e19c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e1a0:	4641      	mov	r1, r8
 800e1a2:	1851      	adds	r1, r2, r1
 800e1a4:	6339      	str	r1, [r7, #48]	; 0x30
 800e1a6:	4649      	mov	r1, r9
 800e1a8:	414b      	adcs	r3, r1
 800e1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ac:	f04f 0200 	mov.w	r2, #0
 800e1b0:	f04f 0300 	mov.w	r3, #0
 800e1b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e1b8:	4659      	mov	r1, fp
 800e1ba:	00cb      	lsls	r3, r1, #3
 800e1bc:	4651      	mov	r1, sl
 800e1be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e1c2:	4651      	mov	r1, sl
 800e1c4:	00ca      	lsls	r2, r1, #3
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	4642      	mov	r2, r8
 800e1ce:	189b      	adds	r3, r3, r2
 800e1d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e1d4:	464b      	mov	r3, r9
 800e1d6:	460a      	mov	r2, r1
 800e1d8:	eb42 0303 	adc.w	r3, r2, r3
 800e1dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e1ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e1f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	18db      	adds	r3, r3, r3
 800e1f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	eb42 0303 	adc.w	r3, r2, r3
 800e200:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e20a:	f7f2 fd15 	bl	8000c38 <__aeabi_uldivmod>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4b0d      	ldr	r3, [pc, #52]	; (800e248 <UART_SetConfig+0x2d4>)
 800e214:	fba3 1302 	umull	r1, r3, r3, r2
 800e218:	095b      	lsrs	r3, r3, #5
 800e21a:	2164      	movs	r1, #100	; 0x64
 800e21c:	fb01 f303 	mul.w	r3, r1, r3
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	00db      	lsls	r3, r3, #3
 800e224:	3332      	adds	r3, #50	; 0x32
 800e226:	4a08      	ldr	r2, [pc, #32]	; (800e248 <UART_SetConfig+0x2d4>)
 800e228:	fba2 2303 	umull	r2, r3, r2, r3
 800e22c:	095b      	lsrs	r3, r3, #5
 800e22e:	f003 0207 	and.w	r2, r3, #7
 800e232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4422      	add	r2, r4
 800e23a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e23c:	e105      	b.n	800e44a <UART_SetConfig+0x4d6>
 800e23e:	bf00      	nop
 800e240:	40011000 	.word	0x40011000
 800e244:	40011400 	.word	0x40011400
 800e248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e24c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e250:	2200      	movs	r2, #0
 800e252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e256:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e25a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e25e:	4642      	mov	r2, r8
 800e260:	464b      	mov	r3, r9
 800e262:	1891      	adds	r1, r2, r2
 800e264:	6239      	str	r1, [r7, #32]
 800e266:	415b      	adcs	r3, r3
 800e268:	627b      	str	r3, [r7, #36]	; 0x24
 800e26a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e26e:	4641      	mov	r1, r8
 800e270:	1854      	adds	r4, r2, r1
 800e272:	4649      	mov	r1, r9
 800e274:	eb43 0501 	adc.w	r5, r3, r1
 800e278:	f04f 0200 	mov.w	r2, #0
 800e27c:	f04f 0300 	mov.w	r3, #0
 800e280:	00eb      	lsls	r3, r5, #3
 800e282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e286:	00e2      	lsls	r2, r4, #3
 800e288:	4614      	mov	r4, r2
 800e28a:	461d      	mov	r5, r3
 800e28c:	4643      	mov	r3, r8
 800e28e:	18e3      	adds	r3, r4, r3
 800e290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e294:	464b      	mov	r3, r9
 800e296:	eb45 0303 	adc.w	r3, r5, r3
 800e29a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e2aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e2ae:	f04f 0200 	mov.w	r2, #0
 800e2b2:	f04f 0300 	mov.w	r3, #0
 800e2b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	008b      	lsls	r3, r1, #2
 800e2be:	4621      	mov	r1, r4
 800e2c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	008a      	lsls	r2, r1, #2
 800e2c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e2cc:	f7f2 fcb4 	bl	8000c38 <__aeabi_uldivmod>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	4b60      	ldr	r3, [pc, #384]	; (800e458 <UART_SetConfig+0x4e4>)
 800e2d6:	fba3 2302 	umull	r2, r3, r3, r2
 800e2da:	095b      	lsrs	r3, r3, #5
 800e2dc:	011c      	lsls	r4, r3, #4
 800e2de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e2e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e2ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e2f0:	4642      	mov	r2, r8
 800e2f2:	464b      	mov	r3, r9
 800e2f4:	1891      	adds	r1, r2, r2
 800e2f6:	61b9      	str	r1, [r7, #24]
 800e2f8:	415b      	adcs	r3, r3
 800e2fa:	61fb      	str	r3, [r7, #28]
 800e2fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e300:	4641      	mov	r1, r8
 800e302:	1851      	adds	r1, r2, r1
 800e304:	6139      	str	r1, [r7, #16]
 800e306:	4649      	mov	r1, r9
 800e308:	414b      	adcs	r3, r1
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	f04f 0200 	mov.w	r2, #0
 800e310:	f04f 0300 	mov.w	r3, #0
 800e314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e318:	4659      	mov	r1, fp
 800e31a:	00cb      	lsls	r3, r1, #3
 800e31c:	4651      	mov	r1, sl
 800e31e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e322:	4651      	mov	r1, sl
 800e324:	00ca      	lsls	r2, r1, #3
 800e326:	4610      	mov	r0, r2
 800e328:	4619      	mov	r1, r3
 800e32a:	4603      	mov	r3, r0
 800e32c:	4642      	mov	r2, r8
 800e32e:	189b      	adds	r3, r3, r2
 800e330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e334:	464b      	mov	r3, r9
 800e336:	460a      	mov	r2, r1
 800e338:	eb42 0303 	adc.w	r3, r2, r3
 800e33c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	67bb      	str	r3, [r7, #120]	; 0x78
 800e34a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e34c:	f04f 0200 	mov.w	r2, #0
 800e350:	f04f 0300 	mov.w	r3, #0
 800e354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e358:	4649      	mov	r1, r9
 800e35a:	008b      	lsls	r3, r1, #2
 800e35c:	4641      	mov	r1, r8
 800e35e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e362:	4641      	mov	r1, r8
 800e364:	008a      	lsls	r2, r1, #2
 800e366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e36a:	f7f2 fc65 	bl	8000c38 <__aeabi_uldivmod>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4b39      	ldr	r3, [pc, #228]	; (800e458 <UART_SetConfig+0x4e4>)
 800e374:	fba3 1302 	umull	r1, r3, r3, r2
 800e378:	095b      	lsrs	r3, r3, #5
 800e37a:	2164      	movs	r1, #100	; 0x64
 800e37c:	fb01 f303 	mul.w	r3, r1, r3
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	011b      	lsls	r3, r3, #4
 800e384:	3332      	adds	r3, #50	; 0x32
 800e386:	4a34      	ldr	r2, [pc, #208]	; (800e458 <UART_SetConfig+0x4e4>)
 800e388:	fba2 2303 	umull	r2, r3, r2, r3
 800e38c:	095b      	lsrs	r3, r3, #5
 800e38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e392:	441c      	add	r4, r3
 800e394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e398:	2200      	movs	r2, #0
 800e39a:	673b      	str	r3, [r7, #112]	; 0x70
 800e39c:	677a      	str	r2, [r7, #116]	; 0x74
 800e39e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e3a2:	4642      	mov	r2, r8
 800e3a4:	464b      	mov	r3, r9
 800e3a6:	1891      	adds	r1, r2, r2
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	415b      	adcs	r3, r3
 800e3ac:	60fb      	str	r3, [r7, #12]
 800e3ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e3b2:	4641      	mov	r1, r8
 800e3b4:	1851      	adds	r1, r2, r1
 800e3b6:	6039      	str	r1, [r7, #0]
 800e3b8:	4649      	mov	r1, r9
 800e3ba:	414b      	adcs	r3, r1
 800e3bc:	607b      	str	r3, [r7, #4]
 800e3be:	f04f 0200 	mov.w	r2, #0
 800e3c2:	f04f 0300 	mov.w	r3, #0
 800e3c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e3ca:	4659      	mov	r1, fp
 800e3cc:	00cb      	lsls	r3, r1, #3
 800e3ce:	4651      	mov	r1, sl
 800e3d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e3d4:	4651      	mov	r1, sl
 800e3d6:	00ca      	lsls	r2, r1, #3
 800e3d8:	4610      	mov	r0, r2
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4603      	mov	r3, r0
 800e3de:	4642      	mov	r2, r8
 800e3e0:	189b      	adds	r3, r3, r2
 800e3e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	460a      	mov	r2, r1
 800e3e8:	eb42 0303 	adc.w	r3, r2, r3
 800e3ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	663b      	str	r3, [r7, #96]	; 0x60
 800e3f8:	667a      	str	r2, [r7, #100]	; 0x64
 800e3fa:	f04f 0200 	mov.w	r2, #0
 800e3fe:	f04f 0300 	mov.w	r3, #0
 800e402:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e406:	4649      	mov	r1, r9
 800e408:	008b      	lsls	r3, r1, #2
 800e40a:	4641      	mov	r1, r8
 800e40c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e410:	4641      	mov	r1, r8
 800e412:	008a      	lsls	r2, r1, #2
 800e414:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e418:	f7f2 fc0e 	bl	8000c38 <__aeabi_uldivmod>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	4b0d      	ldr	r3, [pc, #52]	; (800e458 <UART_SetConfig+0x4e4>)
 800e422:	fba3 1302 	umull	r1, r3, r3, r2
 800e426:	095b      	lsrs	r3, r3, #5
 800e428:	2164      	movs	r1, #100	; 0x64
 800e42a:	fb01 f303 	mul.w	r3, r1, r3
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	011b      	lsls	r3, r3, #4
 800e432:	3332      	adds	r3, #50	; 0x32
 800e434:	4a08      	ldr	r2, [pc, #32]	; (800e458 <UART_SetConfig+0x4e4>)
 800e436:	fba2 2303 	umull	r2, r3, r2, r3
 800e43a:	095b      	lsrs	r3, r3, #5
 800e43c:	f003 020f 	and.w	r2, r3, #15
 800e440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4422      	add	r2, r4
 800e448:	609a      	str	r2, [r3, #8]
}
 800e44a:	bf00      	nop
 800e44c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e450:	46bd      	mov	sp, r7
 800e452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e456:	bf00      	nop
 800e458:	51eb851f 	.word	0x51eb851f

0800e45c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e45c:	b084      	sub	sp, #16
 800e45e:	b480      	push	{r7}
 800e460:	b085      	sub	sp, #20
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	f107 001c 	add.w	r0, r7, #28
 800e46a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e46e:	2300      	movs	r3, #0
 800e470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e472:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e474:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e476:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e47a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e47e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e482:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e486:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	431a      	orrs	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e4a2:	2300      	movs	r3, #0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3714      	adds	r7, #20
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	b004      	add	sp, #16
 800e4b0:	4770      	bx	lr

0800e4b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b083      	sub	sp, #12
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	370c      	adds	r7, #12
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e4ee:	b480      	push	{r7}
 800e4f0:	b083      	sub	sp, #12
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2203      	movs	r2, #3
 800e4fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	370c      	adds	r7, #12
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e50a:	b480      	push	{r7}
 800e50c:	b083      	sub	sp, #12
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f003 0303 	and.w	r3, r3, #3
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	370c      	adds	r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr

0800e526 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e526:	b480      	push	{r7}
 800e528:	b085      	sub	sp, #20
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e544:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e54a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e550:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	4313      	orrs	r3, r2
 800e556:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e560:	f023 030f 	bic.w	r3, r3, #15
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	431a      	orrs	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3714      	adds	r7, #20
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	b2db      	uxtb	r3, r3
}
 800e588:	4618      	mov	r0, r3
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3314      	adds	r3, #20
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
}  
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b085      	sub	sp, #20
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e5e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e5e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e5ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	431a      	orrs	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e604:	2300      	movs	r3, #0

}
 800e606:	4618      	mov	r0, r3
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b088      	sub	sp, #32
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e620:	2310      	movs	r3, #16
 800e622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e624:	2340      	movs	r3, #64	; 0x40
 800e626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e628:	2300      	movs	r3, #0
 800e62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e632:	f107 0308 	add.w	r3, r7, #8
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7ff ff74 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e63e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e642:	2110      	movs	r1, #16
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f9d7 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e64a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e64c:	69fb      	ldr	r3, [r7, #28]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3720      	adds	r7, #32
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b088      	sub	sp, #32
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e664:	2311      	movs	r3, #17
 800e666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e668:	2340      	movs	r3, #64	; 0x40
 800e66a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e66c:	2300      	movs	r3, #0
 800e66e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e676:	f107 0308 	add.w	r3, r7, #8
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7ff ff52 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e682:	f241 3288 	movw	r2, #5000	; 0x1388
 800e686:	2111      	movs	r1, #17
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f9b5 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e690:	69fb      	ldr	r3, [r7, #28]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3720      	adds	r7, #32
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b088      	sub	sp, #32
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e6a8:	2312      	movs	r3, #18
 800e6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6ac:	2340      	movs	r3, #64	; 0x40
 800e6ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6ba:	f107 0308 	add.w	r3, r7, #8
 800e6be:	4619      	mov	r1, r3
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7ff ff30 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6ca:	2112      	movs	r1, #18
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f993 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e6d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6d4:	69fb      	ldr	r3, [r7, #28]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3720      	adds	r7, #32
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b088      	sub	sp, #32
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e6ec:	2318      	movs	r3, #24
 800e6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6f0:	2340      	movs	r3, #64	; 0x40
 800e6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6fe:	f107 0308 	add.w	r3, r7, #8
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7ff ff0e 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e70a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e70e:	2118      	movs	r1, #24
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f971 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e718:	69fb      	ldr	r3, [r7, #28]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3720      	adds	r7, #32
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b088      	sub	sp, #32
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e730:	2319      	movs	r3, #25
 800e732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e734:	2340      	movs	r3, #64	; 0x40
 800e736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e738:	2300      	movs	r3, #0
 800e73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e740:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e742:	f107 0308 	add.w	r3, r7, #8
 800e746:	4619      	mov	r1, r3
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff feec 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e74e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e752:	2119      	movs	r1, #25
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f94f 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e75c:	69fb      	ldr	r3, [r7, #28]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3720      	adds	r7, #32
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
	...

0800e768 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b088      	sub	sp, #32
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e770:	2300      	movs	r3, #0
 800e772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e774:	230c      	movs	r3, #12
 800e776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e778:	2340      	movs	r3, #64	; 0x40
 800e77a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e77c:	2300      	movs	r3, #0
 800e77e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e784:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e786:	f107 0308 	add.w	r3, r7, #8
 800e78a:	4619      	mov	r1, r3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff feca 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e792:	4a05      	ldr	r2, [pc, #20]	; (800e7a8 <SDMMC_CmdStopTransfer+0x40>)
 800e794:	210c      	movs	r1, #12
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f92e 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e79e:	69fb      	ldr	r3, [r7, #28]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3720      	adds	r7, #32
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	05f5e100 	.word	0x05f5e100

0800e7ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08a      	sub	sp, #40	; 0x28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e7bc:	2307      	movs	r3, #7
 800e7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7c0:	2340      	movs	r3, #64	; 0x40
 800e7c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7ce:	f107 0310 	add.w	r3, r7, #16
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f7ff fea6 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e7da:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7de:	2107      	movs	r1, #7
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f000 f909 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e7e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3728      	adds	r7, #40	; 0x28
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b088      	sub	sp, #32
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e7fe:	2300      	movs	r3, #0
 800e800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e802:	2300      	movs	r3, #0
 800e804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e806:	2300      	movs	r3, #0
 800e808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e80e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e810:	f107 0308 	add.w	r3, r7, #8
 800e814:	4619      	mov	r1, r3
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff fe85 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 fb23 	bl	800ee68 <SDMMC_GetCmdError>
 800e822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e824:	69fb      	ldr	r3, [r7, #28]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3720      	adds	r7, #32
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b088      	sub	sp, #32
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e836:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e83c:	2308      	movs	r3, #8
 800e83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e840:	2340      	movs	r3, #64	; 0x40
 800e842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e84e:	f107 0308 	add.w	r3, r7, #8
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff fe66 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fab6 	bl	800edcc <SDMMC_GetCmdResp7>
 800e860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e862:	69fb      	ldr	r3, [r7, #28]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3720      	adds	r7, #32
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b088      	sub	sp, #32
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e87a:	2337      	movs	r3, #55	; 0x37
 800e87c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e87e:	2340      	movs	r3, #64	; 0x40
 800e880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e882:	2300      	movs	r3, #0
 800e884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e88c:	f107 0308 	add.w	r3, r7, #8
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7ff fe47 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e898:	f241 3288 	movw	r2, #5000	; 0x1388
 800e89c:	2137      	movs	r1, #55	; 0x37
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f8aa 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e8a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8a6:	69fb      	ldr	r3, [r7, #28]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b088      	sub	sp, #32
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e8c6:	2329      	movs	r3, #41	; 0x29
 800e8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8ca:	2340      	movs	r3, #64	; 0x40
 800e8cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8d8:	f107 0308 	add.w	r3, r7, #8
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff fe21 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f9bd 	bl	800ec64 <SDMMC_GetCmdResp3>
 800e8ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ec:	69fb      	ldr	r3, [r7, #28]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b088      	sub	sp, #32
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e902:	2302      	movs	r3, #2
 800e904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e906:	23c0      	movs	r3, #192	; 0xc0
 800e908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e90a:	2300      	movs	r3, #0
 800e90c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e912:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e914:	f107 0308 	add.w	r3, r7, #8
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff fe03 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f957 	bl	800ebd4 <SDMMC_GetCmdResp2>
 800e926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e928:	69fb      	ldr	r3, [r7, #28]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3720      	adds	r7, #32
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b088      	sub	sp, #32
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
 800e93a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e940:	2309      	movs	r3, #9
 800e942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e944:	23c0      	movs	r3, #192	; 0xc0
 800e946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e948:	2300      	movs	r3, #0
 800e94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e950:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e952:	f107 0308 	add.w	r3, r7, #8
 800e956:	4619      	mov	r1, r3
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7ff fde4 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f938 	bl	800ebd4 <SDMMC_GetCmdResp2>
 800e964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e966:	69fb      	ldr	r3, [r7, #28]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3720      	adds	r7, #32
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e97a:	2300      	movs	r3, #0
 800e97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e97e:	2303      	movs	r3, #3
 800e980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e982:	2340      	movs	r3, #64	; 0x40
 800e984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e986:	2300      	movs	r3, #0
 800e988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e98e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e990:	f107 0308 	add.w	r3, r7, #8
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7ff fdc5 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	2103      	movs	r1, #3
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f99d 	bl	800ece0 <SDMMC_GetCmdResp6>
 800e9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3720      	adds	r7, #32
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b088      	sub	sp, #32
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e9c0:	230d      	movs	r3, #13
 800e9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9c4:	2340      	movs	r3, #64	; 0x40
 800e9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9d2:	f107 0308 	add.w	r3, r7, #8
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fda4 	bl	800e526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e9de:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9e2:	210d      	movs	r1, #13
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 f807 	bl	800e9f8 <SDMMC_GetCmdResp1>
 800e9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9ec:	69fb      	ldr	r3, [r7, #28]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3720      	adds	r7, #32
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b088      	sub	sp, #32
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	460b      	mov	r3, r1
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea06:	4b70      	ldr	r3, [pc, #448]	; (800ebc8 <SDMMC_GetCmdResp1+0x1d0>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a70      	ldr	r2, [pc, #448]	; (800ebcc <SDMMC_GetCmdResp1+0x1d4>)
 800ea0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea10:	0a5a      	lsrs	r2, r3, #9
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	fb02 f303 	mul.w	r3, r2, r3
 800ea18:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	1e5a      	subs	r2, r3, #1
 800ea1e:	61fa      	str	r2, [r7, #28]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d102      	bne.n	800ea2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea28:	e0c9      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea2e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0ef      	beq.n	800ea1a <SDMMC_GetCmdResp1+0x22>
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1ea      	bne.n	800ea1a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d004      	beq.n	800ea5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2204      	movs	r2, #4
 800ea54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea56:	2304      	movs	r3, #4
 800ea58:	e0b1      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d004      	beq.n	800ea70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e0a6      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	22c5      	movs	r2, #197	; 0xc5
 800ea74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f7ff fd7f 	bl	800e57a <SDIO_GetCommandResponse>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	7afb      	ldrb	r3, [r7, #11]
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d001      	beq.n	800ea8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e099      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f7ff fd81 	bl	800e594 <SDIO_GetResponse>
 800ea92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ea94:	697a      	ldr	r2, [r7, #20]
 800ea96:	4b4e      	ldr	r3, [pc, #312]	; (800ebd0 <SDMMC_GetCmdResp1+0x1d8>)
 800ea98:	4013      	ands	r3, r2
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d101      	bne.n	800eaa2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	e08d      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	da02      	bge.n	800eaae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800eaa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eaac:	e087      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eab8:	2340      	movs	r3, #64	; 0x40
 800eaba:	e080      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800eac6:	2380      	movs	r3, #128	; 0x80
 800eac8:	e079      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d002      	beq.n	800eada <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ead4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ead8:	e071      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eae8:	e069      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eaf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf8:	e061      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800eb04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb08:	e059      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb18:	e051      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb28:	e049      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eb34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eb38:	e041      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d002      	beq.n	800eb4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800eb44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb48:	e039      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d002      	beq.n	800eb5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eb54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800eb58:	e031      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eb64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eb68:	e029      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eb74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eb78:	e021      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eb84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eb88:	e019      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d002      	beq.n	800eb9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eb94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb98:	e011      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eba8:	e009      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	f003 0308 	and.w	r3, r3, #8
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ebb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ebb8:	e001      	b.n	800ebbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ebba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3720      	adds	r7, #32
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20000004 	.word	0x20000004
 800ebcc:	10624dd3 	.word	0x10624dd3
 800ebd0:	fdffe008 	.word	0xfdffe008

0800ebd4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ebdc:	4b1f      	ldr	r3, [pc, #124]	; (800ec5c <SDMMC_GetCmdResp2+0x88>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a1f      	ldr	r2, [pc, #124]	; (800ec60 <SDMMC_GetCmdResp2+0x8c>)
 800ebe2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe6:	0a5b      	lsrs	r3, r3, #9
 800ebe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebec:	fb02 f303 	mul.w	r3, r2, r3
 800ebf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	60fa      	str	r2, [r7, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d102      	bne.n	800ec02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec00:	e026      	b.n	800ec50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d0ef      	beq.n	800ebf2 <SDMMC_GetCmdResp2+0x1e>
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1ea      	bne.n	800ebf2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec20:	f003 0304 	and.w	r3, r3, #4
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d004      	beq.n	800ec32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2204      	movs	r2, #4
 800ec2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec2e:	2304      	movs	r3, #4
 800ec30:	e00e      	b.n	800ec50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d004      	beq.n	800ec48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2201      	movs	r2, #1
 800ec42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e003      	b.n	800ec50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	22c5      	movs	r2, #197	; 0xc5
 800ec4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr
 800ec5c:	20000004 	.word	0x20000004
 800ec60:	10624dd3 	.word	0x10624dd3

0800ec64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec6c:	4b1a      	ldr	r3, [pc, #104]	; (800ecd8 <SDMMC_GetCmdResp3+0x74>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a1a      	ldr	r2, [pc, #104]	; (800ecdc <SDMMC_GetCmdResp3+0x78>)
 800ec72:	fba2 2303 	umull	r2, r3, r2, r3
 800ec76:	0a5b      	lsrs	r3, r3, #9
 800ec78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec7c:	fb02 f303 	mul.w	r3, r2, r3
 800ec80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	1e5a      	subs	r2, r3, #1
 800ec86:	60fa      	str	r2, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d102      	bne.n	800ec92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec90:	e01b      	b.n	800ecca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0ef      	beq.n	800ec82 <SDMMC_GetCmdResp3+0x1e>
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d1ea      	bne.n	800ec82 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d004      	beq.n	800ecc2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2204      	movs	r2, #4
 800ecbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecbe:	2304      	movs	r3, #4
 800ecc0:	e003      	b.n	800ecca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	22c5      	movs	r2, #197	; 0xc5
 800ecc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3714      	adds	r7, #20
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	20000004 	.word	0x20000004
 800ecdc:	10624dd3 	.word	0x10624dd3

0800ece0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	460b      	mov	r3, r1
 800ecea:	607a      	str	r2, [r7, #4]
 800ecec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ecee:	4b35      	ldr	r3, [pc, #212]	; (800edc4 <SDMMC_GetCmdResp6+0xe4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a35      	ldr	r2, [pc, #212]	; (800edc8 <SDMMC_GetCmdResp6+0xe8>)
 800ecf4:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf8:	0a5b      	lsrs	r3, r3, #9
 800ecfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecfe:	fb02 f303 	mul.w	r3, r2, r3
 800ed02:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	1e5a      	subs	r2, r3, #1
 800ed08:	61fa      	str	r2, [r7, #28]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed12:	e052      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d0ef      	beq.n	800ed04 <SDMMC_GetCmdResp6+0x24>
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d1ea      	bne.n	800ed04 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed32:	f003 0304 	and.w	r3, r3, #4
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d004      	beq.n	800ed44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2204      	movs	r2, #4
 800ed3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed40:	2304      	movs	r3, #4
 800ed42:	e03a      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d004      	beq.n	800ed5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2201      	movs	r2, #1
 800ed54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed56:	2301      	movs	r3, #1
 800ed58:	e02f      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff fc0d 	bl	800e57a <SDIO_GetCommandResponse>
 800ed60:	4603      	mov	r3, r0
 800ed62:	461a      	mov	r2, r3
 800ed64:	7afb      	ldrb	r3, [r7, #11]
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d001      	beq.n	800ed6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e025      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	22c5      	movs	r2, #197	; 0xc5
 800ed72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ed74:	2100      	movs	r1, #0
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f7ff fc0c 	bl	800e594 <SDIO_GetResponse>
 800ed7c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d106      	bne.n	800ed96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	0c1b      	lsrs	r3, r3, #16
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ed92:	2300      	movs	r3, #0
 800ed94:	e011      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d002      	beq.n	800eda6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eda0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eda4:	e009      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800edb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edb4:	e001      	b.n	800edba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800edb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3720      	adds	r7, #32
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	20000004 	.word	0x20000004
 800edc8:	10624dd3 	.word	0x10624dd3

0800edcc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800edd4:	4b22      	ldr	r3, [pc, #136]	; (800ee60 <SDMMC_GetCmdResp7+0x94>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a22      	ldr	r2, [pc, #136]	; (800ee64 <SDMMC_GetCmdResp7+0x98>)
 800edda:	fba2 2303 	umull	r2, r3, r2, r3
 800edde:	0a5b      	lsrs	r3, r3, #9
 800ede0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ede4:	fb02 f303 	mul.w	r3, r2, r3
 800ede8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	1e5a      	subs	r2, r3, #1
 800edee:	60fa      	str	r2, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d102      	bne.n	800edfa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edf8:	e02c      	b.n	800ee54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d0ef      	beq.n	800edea <SDMMC_GetCmdResp7+0x1e>
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d1ea      	bne.n	800edea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee18:	f003 0304 	and.w	r3, r3, #4
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2204      	movs	r2, #4
 800ee24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee26:	2304      	movs	r3, #4
 800ee28:	e014      	b.n	800ee54 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d004      	beq.n	800ee40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e009      	b.n	800ee54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2240      	movs	r2, #64	; 0x40
 800ee50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ee52:	2300      	movs	r3, #0
  
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	20000004 	.word	0x20000004
 800ee64:	10624dd3 	.word	0x10624dd3

0800ee68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee70:	4b11      	ldr	r3, [pc, #68]	; (800eeb8 <SDMMC_GetCmdError+0x50>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a11      	ldr	r2, [pc, #68]	; (800eebc <SDMMC_GetCmdError+0x54>)
 800ee76:	fba2 2303 	umull	r2, r3, r2, r3
 800ee7a:	0a5b      	lsrs	r3, r3, #9
 800ee7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee80:	fb02 f303 	mul.w	r3, r2, r3
 800ee84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	1e5a      	subs	r2, r3, #1
 800ee8a:	60fa      	str	r2, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d102      	bne.n	800ee96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee94:	e009      	b.n	800eeaa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d0f1      	beq.n	800ee86 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	22c5      	movs	r2, #197	; 0xc5
 800eea6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	20000004 	.word	0x20000004
 800eebc:	10624dd3 	.word	0x10624dd3

0800eec0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eec4:	4904      	ldr	r1, [pc, #16]	; (800eed8 <MX_FATFS_Init+0x18>)
 800eec6:	4805      	ldr	r0, [pc, #20]	; (800eedc <MX_FATFS_Init+0x1c>)
 800eec8:	f000 f9d6 	bl	800f278 <FATFS_LinkDriver>
 800eecc:	4603      	mov	r3, r0
 800eece:	461a      	mov	r2, r3
 800eed0:	4b03      	ldr	r3, [pc, #12]	; (800eee0 <MX_FATFS_Init+0x20>)
 800eed2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eed4:	bf00      	nop
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	20001574 	.word	0x20001574
 800eedc:	08010df8 	.word	0x08010df8
 800eee0:	20001570 	.word	0x20001570

0800eee4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eeee:	f000 f86b 	bl	800efc8 <BSP_SD_IsDetected>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d001      	beq.n	800eefc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	e005      	b.n	800ef08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800eefc:	4804      	ldr	r0, [pc, #16]	; (800ef10 <BSP_SD_Init+0x2c>)
 800eefe:	f7fc f8fc 	bl	800b0fa <HAL_SD_Init>
 800ef02:	4603      	mov	r3, r0
 800ef04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ef06:	79fb      	ldrb	r3, [r7, #7]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	20001298 	.word	0x20001298

0800ef14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af02      	add	r7, sp, #8
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	68f9      	ldr	r1, [r7, #12]
 800ef30:	4806      	ldr	r0, [pc, #24]	; (800ef4c <BSP_SD_ReadBlocks+0x38>)
 800ef32:	f7fc f993 	bl	800b25c <HAL_SD_ReadBlocks>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ef40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20001298 	.word	0x20001298

0800ef50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b088      	sub	sp, #32
 800ef54:	af02      	add	r7, sp, #8
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	68f9      	ldr	r1, [r7, #12]
 800ef6c:	4806      	ldr	r0, [pc, #24]	; (800ef88 <BSP_SD_WriteBlocks+0x38>)
 800ef6e:	f7fc fb53 	bl	800b618 <HAL_SD_WriteBlocks>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ef7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3718      	adds	r7, #24
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	20001298 	.word	0x20001298

0800ef8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ef90:	4805      	ldr	r0, [pc, #20]	; (800efa8 <BSP_SD_GetCardState+0x1c>)
 800ef92:	f7fc fe97 	bl	800bcc4 <HAL_SD_GetCardState>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	bf14      	ite	ne
 800ef9c:	2301      	movne	r3, #1
 800ef9e:	2300      	moveq	r3, #0
 800efa0:	b2db      	uxtb	r3, r3
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	20001298 	.word	0x20001298

0800efac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	4803      	ldr	r0, [pc, #12]	; (800efc4 <BSP_SD_GetCardInfo+0x18>)
 800efb8:	f7fc fe58 	bl	800bc6c <HAL_SD_GetCardInfo>
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20001298 	.word	0x20001298

0800efc8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800efce:	2301      	movs	r3, #1
 800efd0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800efd2:	f000 f80b 	bl	800efec <BSP_PlatformIsDetected>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d101      	bne.n	800efe0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800efdc:	2300      	movs	r3, #0
 800efde:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800efe0:	79fb      	ldrb	r3, [r7, #7]
 800efe2:	b2db      	uxtb	r3, r3
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eff2:	2301      	movs	r3, #1
 800eff4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eff6:	2102      	movs	r1, #2
 800eff8:	4806      	ldr	r0, [pc, #24]	; (800f014 <BSP_PlatformIsDetected+0x28>)
 800effa:	f7f9 fe9f 	bl	8008d3c <HAL_GPIO_ReadPin>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f004:	2300      	movs	r3, #0
 800f006:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f008:	79fb      	ldrb	r3, [r7, #7]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	40020c00 	.word	0x40020c00

0800f018 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	4603      	mov	r3, r0
 800f020:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f022:	4b0b      	ldr	r3, [pc, #44]	; (800f050 <SD_CheckStatus+0x38>)
 800f024:	2201      	movs	r2, #1
 800f026:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f028:	f7ff ffb0 	bl	800ef8c <BSP_SD_GetCardState>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d107      	bne.n	800f042 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f032:	4b07      	ldr	r3, [pc, #28]	; (800f050 <SD_CheckStatus+0x38>)
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	b2db      	uxtb	r3, r3
 800f038:	f023 0301 	bic.w	r3, r3, #1
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	4b04      	ldr	r3, [pc, #16]	; (800f050 <SD_CheckStatus+0x38>)
 800f040:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f042:	4b03      	ldr	r3, [pc, #12]	; (800f050 <SD_CheckStatus+0x38>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	b2db      	uxtb	r3, r3
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	2000000d 	.word	0x2000000d

0800f054 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	4603      	mov	r3, r0
 800f05c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f05e:	4b0b      	ldr	r3, [pc, #44]	; (800f08c <SD_initialize+0x38>)
 800f060:	2201      	movs	r2, #1
 800f062:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f064:	f7ff ff3e 	bl	800eee4 <BSP_SD_Init>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d107      	bne.n	800f07e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff ffd1 	bl	800f018 <SD_CheckStatus>
 800f076:	4603      	mov	r3, r0
 800f078:	461a      	mov	r2, r3
 800f07a:	4b04      	ldr	r3, [pc, #16]	; (800f08c <SD_initialize+0x38>)
 800f07c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f07e:	4b03      	ldr	r3, [pc, #12]	; (800f08c <SD_initialize+0x38>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	b2db      	uxtb	r3, r3
}
 800f084:	4618      	mov	r0, r3
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	2000000d 	.word	0x2000000d

0800f090 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	4603      	mov	r3, r0
 800f098:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f09a:	79fb      	ldrb	r3, [r7, #7]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7ff ffbb 	bl	800f018 <SD_CheckStatus>
 800f0a2:	4603      	mov	r3, r0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60b9      	str	r1, [r7, #8]
 800f0b4:	607a      	str	r2, [r7, #4]
 800f0b6:	603b      	str	r3, [r7, #0]
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	6879      	ldr	r1, [r7, #4]
 800f0c8:	68b8      	ldr	r0, [r7, #8]
 800f0ca:	f7ff ff23 	bl	800ef14 <BSP_SD_ReadBlocks>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d107      	bne.n	800f0e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f0d4:	bf00      	nop
 800f0d6:	f7ff ff59 	bl	800ef8c <BSP_SD_GetCardState>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1fa      	bne.n	800f0d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b086      	sub	sp, #24
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f0fe:	2301      	movs	r3, #1
 800f100:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f102:	f04f 33ff 	mov.w	r3, #4294967295
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	6879      	ldr	r1, [r7, #4]
 800f10a:	68b8      	ldr	r0, [r7, #8]
 800f10c:	f7ff ff20 	bl	800ef50 <BSP_SD_WriteBlocks>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d107      	bne.n	800f126 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f116:	bf00      	nop
 800f118:	f7ff ff38 	bl	800ef8c <BSP_SD_GetCardState>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1fa      	bne.n	800f118 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f122:	2300      	movs	r3, #0
 800f124:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f126:	7dfb      	ldrb	r3, [r7, #23]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3718      	adds	r7, #24
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b08c      	sub	sp, #48	; 0x30
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	603a      	str	r2, [r7, #0]
 800f13a:	71fb      	strb	r3, [r7, #7]
 800f13c:	460b      	mov	r3, r1
 800f13e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f146:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <SD_ioctl+0xac>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	f003 0301 	and.w	r3, r3, #1
 800f150:	2b00      	cmp	r3, #0
 800f152:	d001      	beq.n	800f158 <SD_ioctl+0x28>
 800f154:	2303      	movs	r3, #3
 800f156:	e03c      	b.n	800f1d2 <SD_ioctl+0xa2>

  switch (cmd)
 800f158:	79bb      	ldrb	r3, [r7, #6]
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	d834      	bhi.n	800f1c8 <SD_ioctl+0x98>
 800f15e:	a201      	add	r2, pc, #4	; (adr r2, 800f164 <SD_ioctl+0x34>)
 800f160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f164:	0800f175 	.word	0x0800f175
 800f168:	0800f17d 	.word	0x0800f17d
 800f16c:	0800f195 	.word	0x0800f195
 800f170:	0800f1af 	.word	0x0800f1af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f17a:	e028      	b.n	800f1ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f17c:	f107 030c 	add.w	r3, r7, #12
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff ff13 	bl	800efac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f192:	e01c      	b.n	800f1ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f194:	f107 030c 	add.w	r3, r7, #12
 800f198:	4618      	mov	r0, r3
 800f19a:	f7ff ff07 	bl	800efac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1ac:	e00f      	b.n	800f1ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1ae:	f107 030c 	add.w	r3, r7, #12
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff fefa 	bl	800efac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	0a5a      	lsrs	r2, r3, #9
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1c6:	e002      	b.n	800f1ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f1c8:	2304      	movs	r3, #4
 800f1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3730      	adds	r7, #48	; 0x30
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	2000000d 	.word	0x2000000d

0800f1e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b087      	sub	sp, #28
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1f6:	4b1f      	ldr	r3, [pc, #124]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f1f8:	7a5b      	ldrb	r3, [r3, #9]
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d131      	bne.n	800f264 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f200:	4b1c      	ldr	r3, [pc, #112]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f202:	7a5b      	ldrb	r3, [r3, #9]
 800f204:	b2db      	uxtb	r3, r3
 800f206:	461a      	mov	r2, r3
 800f208:	4b1a      	ldr	r3, [pc, #104]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f20a:	2100      	movs	r1, #0
 800f20c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f20e:	4b19      	ldr	r3, [pc, #100]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f210:	7a5b      	ldrb	r3, [r3, #9]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	4a17      	ldr	r2, [pc, #92]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f21e:	4b15      	ldr	r3, [pc, #84]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f220:	7a5b      	ldrb	r3, [r3, #9]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	461a      	mov	r2, r3
 800f226:	4b13      	ldr	r3, [pc, #76]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f228:	4413      	add	r3, r2
 800f22a:	79fa      	ldrb	r2, [r7, #7]
 800f22c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f22e:	4b11      	ldr	r3, [pc, #68]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f230:	7a5b      	ldrb	r3, [r3, #9]
 800f232:	b2db      	uxtb	r3, r3
 800f234:	1c5a      	adds	r2, r3, #1
 800f236:	b2d1      	uxtb	r1, r2
 800f238:	4a0e      	ldr	r2, [pc, #56]	; (800f274 <FATFS_LinkDriverEx+0x94>)
 800f23a:	7251      	strb	r1, [r2, #9]
 800f23c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f23e:	7dbb      	ldrb	r3, [r7, #22]
 800f240:	3330      	adds	r3, #48	; 0x30
 800f242:	b2da      	uxtb	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	3301      	adds	r3, #1
 800f24c:	223a      	movs	r2, #58	; 0x3a
 800f24e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	3302      	adds	r3, #2
 800f254:	222f      	movs	r2, #47	; 0x2f
 800f256:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	3303      	adds	r3, #3
 800f25c:	2200      	movs	r2, #0
 800f25e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f264:	7dfb      	ldrb	r3, [r7, #23]
}
 800f266:	4618      	mov	r0, r3
 800f268:	371c      	adds	r7, #28
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	20001578 	.word	0x20001578

0800f278 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f282:	2200      	movs	r2, #0
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7ff ffaa 	bl	800f1e0 <FATFS_LinkDriverEx>
 800f28c:	4603      	mov	r3, r0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <_ZdlPvj>:
 800f296:	f000 b806 	b.w	800f2a6 <_ZdlPv>

0800f29a <_ZdaPv>:
 800f29a:	f000 b804 	b.w	800f2a6 <_ZdlPv>

0800f29e <_ZdaPvj>:
 800f29e:	f7ff bffc 	b.w	800f29a <_ZdaPv>

0800f2a2 <_Znaj>:
 800f2a2:	f000 b802 	b.w	800f2aa <_Znwj>

0800f2a6 <_ZdlPv>:
 800f2a6:	f000 bf9b 	b.w	80101e0 <free>

0800f2aa <_Znwj>:
 800f2aa:	2801      	cmp	r0, #1
 800f2ac:	bf38      	it	cc
 800f2ae:	2001      	movcc	r0, #1
 800f2b0:	b510      	push	{r4, lr}
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 ff8b 	bl	80101d0 <malloc>
 800f2ba:	b930      	cbnz	r0, 800f2ca <_Znwj+0x20>
 800f2bc:	f000 f806 	bl	800f2cc <_ZSt15get_new_handlerv>
 800f2c0:	b908      	cbnz	r0, 800f2c6 <_Znwj+0x1c>
 800f2c2:	f000 ff53 	bl	801016c <abort>
 800f2c6:	4780      	blx	r0
 800f2c8:	e7f4      	b.n	800f2b4 <_Znwj+0xa>
 800f2ca:	bd10      	pop	{r4, pc}

0800f2cc <_ZSt15get_new_handlerv>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <_ZSt15get_new_handlerv+0xc>)
 800f2ce:	6818      	ldr	r0, [r3, #0]
 800f2d0:	f3bf 8f5b 	dmb	ish
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	20001584 	.word	0x20001584

0800f2dc <pow>:
 800f2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2de:	ed2d 8b02 	vpush	{d8}
 800f2e2:	eeb0 8a40 	vmov.f32	s16, s0
 800f2e6:	eef0 8a60 	vmov.f32	s17, s1
 800f2ea:	ec55 4b11 	vmov	r4, r5, d1
 800f2ee:	f000 f893 	bl	800f418 <__ieee754_pow>
 800f2f2:	4622      	mov	r2, r4
 800f2f4:	462b      	mov	r3, r5
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	ec57 6b10 	vmov	r6, r7, d0
 800f2fe:	f7f1 fc35 	bl	8000b6c <__aeabi_dcmpun>
 800f302:	2800      	cmp	r0, #0
 800f304:	d13b      	bne.n	800f37e <pow+0xa2>
 800f306:	ec51 0b18 	vmov	r0, r1, d8
 800f30a:	2200      	movs	r2, #0
 800f30c:	2300      	movs	r3, #0
 800f30e:	f7f1 fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 800f312:	b1b8      	cbz	r0, 800f344 <pow+0x68>
 800f314:	2200      	movs	r2, #0
 800f316:	2300      	movs	r3, #0
 800f318:	4620      	mov	r0, r4
 800f31a:	4629      	mov	r1, r5
 800f31c:	f7f1 fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 800f320:	2800      	cmp	r0, #0
 800f322:	d146      	bne.n	800f3b2 <pow+0xd6>
 800f324:	ec45 4b10 	vmov	d0, r4, r5
 800f328:	f000 fe8f 	bl	801004a <finite>
 800f32c:	b338      	cbz	r0, 800f37e <pow+0xa2>
 800f32e:	2200      	movs	r2, #0
 800f330:	2300      	movs	r3, #0
 800f332:	4620      	mov	r0, r4
 800f334:	4629      	mov	r1, r5
 800f336:	f7f1 fbf1 	bl	8000b1c <__aeabi_dcmplt>
 800f33a:	b300      	cbz	r0, 800f37e <pow+0xa2>
 800f33c:	f000 ff1e 	bl	801017c <__errno>
 800f340:	2322      	movs	r3, #34	; 0x22
 800f342:	e01b      	b.n	800f37c <pow+0xa0>
 800f344:	ec47 6b10 	vmov	d0, r6, r7
 800f348:	f000 fe7f 	bl	801004a <finite>
 800f34c:	b9e0      	cbnz	r0, 800f388 <pow+0xac>
 800f34e:	eeb0 0a48 	vmov.f32	s0, s16
 800f352:	eef0 0a68 	vmov.f32	s1, s17
 800f356:	f000 fe78 	bl	801004a <finite>
 800f35a:	b1a8      	cbz	r0, 800f388 <pow+0xac>
 800f35c:	ec45 4b10 	vmov	d0, r4, r5
 800f360:	f000 fe73 	bl	801004a <finite>
 800f364:	b180      	cbz	r0, 800f388 <pow+0xac>
 800f366:	4632      	mov	r2, r6
 800f368:	463b      	mov	r3, r7
 800f36a:	4630      	mov	r0, r6
 800f36c:	4639      	mov	r1, r7
 800f36e:	f7f1 fbfd 	bl	8000b6c <__aeabi_dcmpun>
 800f372:	2800      	cmp	r0, #0
 800f374:	d0e2      	beq.n	800f33c <pow+0x60>
 800f376:	f000 ff01 	bl	801017c <__errno>
 800f37a:	2321      	movs	r3, #33	; 0x21
 800f37c:	6003      	str	r3, [r0, #0]
 800f37e:	ecbd 8b02 	vpop	{d8}
 800f382:	ec47 6b10 	vmov	d0, r6, r7
 800f386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f388:	2200      	movs	r2, #0
 800f38a:	2300      	movs	r3, #0
 800f38c:	4630      	mov	r0, r6
 800f38e:	4639      	mov	r1, r7
 800f390:	f7f1 fbba 	bl	8000b08 <__aeabi_dcmpeq>
 800f394:	2800      	cmp	r0, #0
 800f396:	d0f2      	beq.n	800f37e <pow+0xa2>
 800f398:	eeb0 0a48 	vmov.f32	s0, s16
 800f39c:	eef0 0a68 	vmov.f32	s1, s17
 800f3a0:	f000 fe53 	bl	801004a <finite>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d0ea      	beq.n	800f37e <pow+0xa2>
 800f3a8:	ec45 4b10 	vmov	d0, r4, r5
 800f3ac:	f000 fe4d 	bl	801004a <finite>
 800f3b0:	e7c3      	b.n	800f33a <pow+0x5e>
 800f3b2:	4f01      	ldr	r7, [pc, #4]	; (800f3b8 <pow+0xdc>)
 800f3b4:	2600      	movs	r6, #0
 800f3b6:	e7e2      	b.n	800f37e <pow+0xa2>
 800f3b8:	3ff00000 	.word	0x3ff00000

0800f3bc <sqrt>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	ed2d 8b02 	vpush	{d8}
 800f3c2:	ec55 4b10 	vmov	r4, r5, d0
 800f3c6:	f000 fd55 	bl	800fe74 <__ieee754_sqrt>
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	462b      	mov	r3, r5
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	eeb0 8a40 	vmov.f32	s16, s0
 800f3d6:	eef0 8a60 	vmov.f32	s17, s1
 800f3da:	f7f1 fbc7 	bl	8000b6c <__aeabi_dcmpun>
 800f3de:	b990      	cbnz	r0, 800f406 <sqrt+0x4a>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	f7f1 fb98 	bl	8000b1c <__aeabi_dcmplt>
 800f3ec:	b158      	cbz	r0, 800f406 <sqrt+0x4a>
 800f3ee:	f000 fec5 	bl	801017c <__errno>
 800f3f2:	2321      	movs	r3, #33	; 0x21
 800f3f4:	6003      	str	r3, [r0, #0]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4610      	mov	r0, r2
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f7f1 fa45 	bl	800088c <__aeabi_ddiv>
 800f402:	ec41 0b18 	vmov	d8, r0, r1
 800f406:	eeb0 0a48 	vmov.f32	s0, s16
 800f40a:	eef0 0a68 	vmov.f32	s1, s17
 800f40e:	ecbd 8b02 	vpop	{d8}
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	0000      	movs	r0, r0
	...

0800f418 <__ieee754_pow>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	ed2d 8b06 	vpush	{d8-d10}
 800f420:	b089      	sub	sp, #36	; 0x24
 800f422:	ed8d 1b00 	vstr	d1, [sp]
 800f426:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f42a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f42e:	ea58 0102 	orrs.w	r1, r8, r2
 800f432:	ec57 6b10 	vmov	r6, r7, d0
 800f436:	d115      	bne.n	800f464 <__ieee754_pow+0x4c>
 800f438:	19b3      	adds	r3, r6, r6
 800f43a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f43e:	4152      	adcs	r2, r2
 800f440:	4299      	cmp	r1, r3
 800f442:	4b89      	ldr	r3, [pc, #548]	; (800f668 <__ieee754_pow+0x250>)
 800f444:	4193      	sbcs	r3, r2
 800f446:	f080 84d2 	bcs.w	800fdee <__ieee754_pow+0x9d6>
 800f44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f44e:	4630      	mov	r0, r6
 800f450:	4639      	mov	r1, r7
 800f452:	f7f0 ff3b 	bl	80002cc <__adddf3>
 800f456:	ec41 0b10 	vmov	d0, r0, r1
 800f45a:	b009      	add	sp, #36	; 0x24
 800f45c:	ecbd 8b06 	vpop	{d8-d10}
 800f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f464:	4b81      	ldr	r3, [pc, #516]	; (800f66c <__ieee754_pow+0x254>)
 800f466:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f46a:	429c      	cmp	r4, r3
 800f46c:	ee10 aa10 	vmov	sl, s0
 800f470:	463d      	mov	r5, r7
 800f472:	dc06      	bgt.n	800f482 <__ieee754_pow+0x6a>
 800f474:	d101      	bne.n	800f47a <__ieee754_pow+0x62>
 800f476:	2e00      	cmp	r6, #0
 800f478:	d1e7      	bne.n	800f44a <__ieee754_pow+0x32>
 800f47a:	4598      	cmp	r8, r3
 800f47c:	dc01      	bgt.n	800f482 <__ieee754_pow+0x6a>
 800f47e:	d10f      	bne.n	800f4a0 <__ieee754_pow+0x88>
 800f480:	b172      	cbz	r2, 800f4a0 <__ieee754_pow+0x88>
 800f482:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f486:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f48a:	ea55 050a 	orrs.w	r5, r5, sl
 800f48e:	d1dc      	bne.n	800f44a <__ieee754_pow+0x32>
 800f490:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f494:	18db      	adds	r3, r3, r3
 800f496:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f49a:	4152      	adcs	r2, r2
 800f49c:	429d      	cmp	r5, r3
 800f49e:	e7d0      	b.n	800f442 <__ieee754_pow+0x2a>
 800f4a0:	2d00      	cmp	r5, #0
 800f4a2:	da3b      	bge.n	800f51c <__ieee754_pow+0x104>
 800f4a4:	4b72      	ldr	r3, [pc, #456]	; (800f670 <__ieee754_pow+0x258>)
 800f4a6:	4598      	cmp	r8, r3
 800f4a8:	dc51      	bgt.n	800f54e <__ieee754_pow+0x136>
 800f4aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f4ae:	4598      	cmp	r8, r3
 800f4b0:	f340 84ac 	ble.w	800fe0c <__ieee754_pow+0x9f4>
 800f4b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f4b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f4bc:	2b14      	cmp	r3, #20
 800f4be:	dd0f      	ble.n	800f4e0 <__ieee754_pow+0xc8>
 800f4c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f4c4:	fa22 f103 	lsr.w	r1, r2, r3
 800f4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	f040 849d 	bne.w	800fe0c <__ieee754_pow+0x9f4>
 800f4d2:	f001 0101 	and.w	r1, r1, #1
 800f4d6:	f1c1 0302 	rsb	r3, r1, #2
 800f4da:	9304      	str	r3, [sp, #16]
 800f4dc:	b182      	cbz	r2, 800f500 <__ieee754_pow+0xe8>
 800f4de:	e05f      	b.n	800f5a0 <__ieee754_pow+0x188>
 800f4e0:	2a00      	cmp	r2, #0
 800f4e2:	d15b      	bne.n	800f59c <__ieee754_pow+0x184>
 800f4e4:	f1c3 0314 	rsb	r3, r3, #20
 800f4e8:	fa48 f103 	asr.w	r1, r8, r3
 800f4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f4f0:	4543      	cmp	r3, r8
 800f4f2:	f040 8488 	bne.w	800fe06 <__ieee754_pow+0x9ee>
 800f4f6:	f001 0101 	and.w	r1, r1, #1
 800f4fa:	f1c1 0302 	rsb	r3, r1, #2
 800f4fe:	9304      	str	r3, [sp, #16]
 800f500:	4b5c      	ldr	r3, [pc, #368]	; (800f674 <__ieee754_pow+0x25c>)
 800f502:	4598      	cmp	r8, r3
 800f504:	d132      	bne.n	800f56c <__ieee754_pow+0x154>
 800f506:	f1b9 0f00 	cmp.w	r9, #0
 800f50a:	f280 8478 	bge.w	800fdfe <__ieee754_pow+0x9e6>
 800f50e:	4959      	ldr	r1, [pc, #356]	; (800f674 <__ieee754_pow+0x25c>)
 800f510:	4632      	mov	r2, r6
 800f512:	463b      	mov	r3, r7
 800f514:	2000      	movs	r0, #0
 800f516:	f7f1 f9b9 	bl	800088c <__aeabi_ddiv>
 800f51a:	e79c      	b.n	800f456 <__ieee754_pow+0x3e>
 800f51c:	2300      	movs	r3, #0
 800f51e:	9304      	str	r3, [sp, #16]
 800f520:	2a00      	cmp	r2, #0
 800f522:	d13d      	bne.n	800f5a0 <__ieee754_pow+0x188>
 800f524:	4b51      	ldr	r3, [pc, #324]	; (800f66c <__ieee754_pow+0x254>)
 800f526:	4598      	cmp	r8, r3
 800f528:	d1ea      	bne.n	800f500 <__ieee754_pow+0xe8>
 800f52a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f52e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f532:	ea53 030a 	orrs.w	r3, r3, sl
 800f536:	f000 845a 	beq.w	800fdee <__ieee754_pow+0x9d6>
 800f53a:	4b4f      	ldr	r3, [pc, #316]	; (800f678 <__ieee754_pow+0x260>)
 800f53c:	429c      	cmp	r4, r3
 800f53e:	dd08      	ble.n	800f552 <__ieee754_pow+0x13a>
 800f540:	f1b9 0f00 	cmp.w	r9, #0
 800f544:	f2c0 8457 	blt.w	800fdf6 <__ieee754_pow+0x9de>
 800f548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f54c:	e783      	b.n	800f456 <__ieee754_pow+0x3e>
 800f54e:	2302      	movs	r3, #2
 800f550:	e7e5      	b.n	800f51e <__ieee754_pow+0x106>
 800f552:	f1b9 0f00 	cmp.w	r9, #0
 800f556:	f04f 0000 	mov.w	r0, #0
 800f55a:	f04f 0100 	mov.w	r1, #0
 800f55e:	f6bf af7a 	bge.w	800f456 <__ieee754_pow+0x3e>
 800f562:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f56a:	e774      	b.n	800f456 <__ieee754_pow+0x3e>
 800f56c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f570:	d106      	bne.n	800f580 <__ieee754_pow+0x168>
 800f572:	4632      	mov	r2, r6
 800f574:	463b      	mov	r3, r7
 800f576:	4630      	mov	r0, r6
 800f578:	4639      	mov	r1, r7
 800f57a:	f7f1 f85d 	bl	8000638 <__aeabi_dmul>
 800f57e:	e76a      	b.n	800f456 <__ieee754_pow+0x3e>
 800f580:	4b3e      	ldr	r3, [pc, #248]	; (800f67c <__ieee754_pow+0x264>)
 800f582:	4599      	cmp	r9, r3
 800f584:	d10c      	bne.n	800f5a0 <__ieee754_pow+0x188>
 800f586:	2d00      	cmp	r5, #0
 800f588:	db0a      	blt.n	800f5a0 <__ieee754_pow+0x188>
 800f58a:	ec47 6b10 	vmov	d0, r6, r7
 800f58e:	b009      	add	sp, #36	; 0x24
 800f590:	ecbd 8b06 	vpop	{d8-d10}
 800f594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f598:	f000 bc6c 	b.w	800fe74 <__ieee754_sqrt>
 800f59c:	2300      	movs	r3, #0
 800f59e:	9304      	str	r3, [sp, #16]
 800f5a0:	ec47 6b10 	vmov	d0, r6, r7
 800f5a4:	f000 fd48 	bl	8010038 <fabs>
 800f5a8:	ec51 0b10 	vmov	r0, r1, d0
 800f5ac:	f1ba 0f00 	cmp.w	sl, #0
 800f5b0:	d129      	bne.n	800f606 <__ieee754_pow+0x1ee>
 800f5b2:	b124      	cbz	r4, 800f5be <__ieee754_pow+0x1a6>
 800f5b4:	4b2f      	ldr	r3, [pc, #188]	; (800f674 <__ieee754_pow+0x25c>)
 800f5b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d123      	bne.n	800f606 <__ieee754_pow+0x1ee>
 800f5be:	f1b9 0f00 	cmp.w	r9, #0
 800f5c2:	da05      	bge.n	800f5d0 <__ieee754_pow+0x1b8>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	492a      	ldr	r1, [pc, #168]	; (800f674 <__ieee754_pow+0x25c>)
 800f5cc:	f7f1 f95e 	bl	800088c <__aeabi_ddiv>
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	f6bf af40 	bge.w	800f456 <__ieee754_pow+0x3e>
 800f5d6:	9b04      	ldr	r3, [sp, #16]
 800f5d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f5dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f5e0:	4323      	orrs	r3, r4
 800f5e2:	d108      	bne.n	800f5f6 <__ieee754_pow+0x1de>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	f7f0 fe6c 	bl	80002c8 <__aeabi_dsub>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	e78f      	b.n	800f516 <__ieee754_pow+0xfe>
 800f5f6:	9b04      	ldr	r3, [sp, #16]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	f47f af2c 	bne.w	800f456 <__ieee754_pow+0x3e>
 800f5fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f602:	4619      	mov	r1, r3
 800f604:	e727      	b.n	800f456 <__ieee754_pow+0x3e>
 800f606:	0feb      	lsrs	r3, r5, #31
 800f608:	3b01      	subs	r3, #1
 800f60a:	9306      	str	r3, [sp, #24]
 800f60c:	9a06      	ldr	r2, [sp, #24]
 800f60e:	9b04      	ldr	r3, [sp, #16]
 800f610:	4313      	orrs	r3, r2
 800f612:	d102      	bne.n	800f61a <__ieee754_pow+0x202>
 800f614:	4632      	mov	r2, r6
 800f616:	463b      	mov	r3, r7
 800f618:	e7e6      	b.n	800f5e8 <__ieee754_pow+0x1d0>
 800f61a:	4b19      	ldr	r3, [pc, #100]	; (800f680 <__ieee754_pow+0x268>)
 800f61c:	4598      	cmp	r8, r3
 800f61e:	f340 80fb 	ble.w	800f818 <__ieee754_pow+0x400>
 800f622:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f626:	4598      	cmp	r8, r3
 800f628:	4b13      	ldr	r3, [pc, #76]	; (800f678 <__ieee754_pow+0x260>)
 800f62a:	dd0c      	ble.n	800f646 <__ieee754_pow+0x22e>
 800f62c:	429c      	cmp	r4, r3
 800f62e:	dc0f      	bgt.n	800f650 <__ieee754_pow+0x238>
 800f630:	f1b9 0f00 	cmp.w	r9, #0
 800f634:	da0f      	bge.n	800f656 <__ieee754_pow+0x23e>
 800f636:	2000      	movs	r0, #0
 800f638:	b009      	add	sp, #36	; 0x24
 800f63a:	ecbd 8b06 	vpop	{d8-d10}
 800f63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f642:	f000 bcf0 	b.w	8010026 <__math_oflow>
 800f646:	429c      	cmp	r4, r3
 800f648:	dbf2      	blt.n	800f630 <__ieee754_pow+0x218>
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <__ieee754_pow+0x25c>)
 800f64c:	429c      	cmp	r4, r3
 800f64e:	dd19      	ble.n	800f684 <__ieee754_pow+0x26c>
 800f650:	f1b9 0f00 	cmp.w	r9, #0
 800f654:	dcef      	bgt.n	800f636 <__ieee754_pow+0x21e>
 800f656:	2000      	movs	r0, #0
 800f658:	b009      	add	sp, #36	; 0x24
 800f65a:	ecbd 8b06 	vpop	{d8-d10}
 800f65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f662:	f000 bcd7 	b.w	8010014 <__math_uflow>
 800f666:	bf00      	nop
 800f668:	fff00000 	.word	0xfff00000
 800f66c:	7ff00000 	.word	0x7ff00000
 800f670:	433fffff 	.word	0x433fffff
 800f674:	3ff00000 	.word	0x3ff00000
 800f678:	3fefffff 	.word	0x3fefffff
 800f67c:	3fe00000 	.word	0x3fe00000
 800f680:	41e00000 	.word	0x41e00000
 800f684:	4b60      	ldr	r3, [pc, #384]	; (800f808 <__ieee754_pow+0x3f0>)
 800f686:	2200      	movs	r2, #0
 800f688:	f7f0 fe1e 	bl	80002c8 <__aeabi_dsub>
 800f68c:	a354      	add	r3, pc, #336	; (adr r3, 800f7e0 <__ieee754_pow+0x3c8>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	4604      	mov	r4, r0
 800f694:	460d      	mov	r5, r1
 800f696:	f7f0 ffcf 	bl	8000638 <__aeabi_dmul>
 800f69a:	a353      	add	r3, pc, #332	; (adr r3, 800f7e8 <__ieee754_pow+0x3d0>)
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	4606      	mov	r6, r0
 800f6a2:	460f      	mov	r7, r1
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	f7f0 ffc6 	bl	8000638 <__aeabi_dmul>
 800f6ac:	4b57      	ldr	r3, [pc, #348]	; (800f80c <__ieee754_pow+0x3f4>)
 800f6ae:	4682      	mov	sl, r0
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	f7f0 ffbe 	bl	8000638 <__aeabi_dmul>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	a14b      	add	r1, pc, #300	; (adr r1, 800f7f0 <__ieee754_pow+0x3d8>)
 800f6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6c6:	f7f0 fdff 	bl	80002c8 <__aeabi_dsub>
 800f6ca:	4622      	mov	r2, r4
 800f6cc:	462b      	mov	r3, r5
 800f6ce:	f7f0 ffb3 	bl	8000638 <__aeabi_dmul>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	494d      	ldr	r1, [pc, #308]	; (800f810 <__ieee754_pow+0x3f8>)
 800f6da:	f7f0 fdf5 	bl	80002c8 <__aeabi_dsub>
 800f6de:	4622      	mov	r2, r4
 800f6e0:	4680      	mov	r8, r0
 800f6e2:	4689      	mov	r9, r1
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	f7f0 ffa5 	bl	8000638 <__aeabi_dmul>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	4640      	mov	r0, r8
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	f7f0 ff9f 	bl	8000638 <__aeabi_dmul>
 800f6fa:	a33f      	add	r3, pc, #252	; (adr r3, 800f7f8 <__ieee754_pow+0x3e0>)
 800f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f700:	f7f0 ff9a 	bl	8000638 <__aeabi_dmul>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4650      	mov	r0, sl
 800f70a:	4659      	mov	r1, fp
 800f70c:	f7f0 fddc 	bl	80002c8 <__aeabi_dsub>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	4680      	mov	r8, r0
 800f716:	4689      	mov	r9, r1
 800f718:	4630      	mov	r0, r6
 800f71a:	4639      	mov	r1, r7
 800f71c:	f7f0 fdd6 	bl	80002cc <__adddf3>
 800f720:	2000      	movs	r0, #0
 800f722:	4632      	mov	r2, r6
 800f724:	463b      	mov	r3, r7
 800f726:	4604      	mov	r4, r0
 800f728:	460d      	mov	r5, r1
 800f72a:	f7f0 fdcd 	bl	80002c8 <__aeabi_dsub>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 fdc7 	bl	80002c8 <__aeabi_dsub>
 800f73a:	9b04      	ldr	r3, [sp, #16]
 800f73c:	9a06      	ldr	r2, [sp, #24]
 800f73e:	3b01      	subs	r3, #1
 800f740:	4313      	orrs	r3, r2
 800f742:	4682      	mov	sl, r0
 800f744:	468b      	mov	fp, r1
 800f746:	f040 81e7 	bne.w	800fb18 <__ieee754_pow+0x700>
 800f74a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f800 <__ieee754_pow+0x3e8>
 800f74e:	eeb0 8a47 	vmov.f32	s16, s14
 800f752:	eef0 8a67 	vmov.f32	s17, s15
 800f756:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f75a:	2600      	movs	r6, #0
 800f75c:	4632      	mov	r2, r6
 800f75e:	463b      	mov	r3, r7
 800f760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f764:	f7f0 fdb0 	bl	80002c8 <__aeabi_dsub>
 800f768:	4622      	mov	r2, r4
 800f76a:	462b      	mov	r3, r5
 800f76c:	f7f0 ff64 	bl	8000638 <__aeabi_dmul>
 800f770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f774:	4680      	mov	r8, r0
 800f776:	4689      	mov	r9, r1
 800f778:	4650      	mov	r0, sl
 800f77a:	4659      	mov	r1, fp
 800f77c:	f7f0 ff5c 	bl	8000638 <__aeabi_dmul>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4640      	mov	r0, r8
 800f786:	4649      	mov	r1, r9
 800f788:	f7f0 fda0 	bl	80002cc <__adddf3>
 800f78c:	4632      	mov	r2, r6
 800f78e:	463b      	mov	r3, r7
 800f790:	4680      	mov	r8, r0
 800f792:	4689      	mov	r9, r1
 800f794:	4620      	mov	r0, r4
 800f796:	4629      	mov	r1, r5
 800f798:	f7f0 ff4e 	bl	8000638 <__aeabi_dmul>
 800f79c:	460b      	mov	r3, r1
 800f79e:	4604      	mov	r4, r0
 800f7a0:	460d      	mov	r5, r1
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	4649      	mov	r1, r9
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	f7f0 fd90 	bl	80002cc <__adddf3>
 800f7ac:	4b19      	ldr	r3, [pc, #100]	; (800f814 <__ieee754_pow+0x3fc>)
 800f7ae:	4299      	cmp	r1, r3
 800f7b0:	ec45 4b19 	vmov	d9, r4, r5
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	460f      	mov	r7, r1
 800f7b8:	468b      	mov	fp, r1
 800f7ba:	f340 82f1 	ble.w	800fda0 <__ieee754_pow+0x988>
 800f7be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f7c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f7c6:	4303      	orrs	r3, r0
 800f7c8:	f000 81e4 	beq.w	800fb94 <__ieee754_pow+0x77c>
 800f7cc:	ec51 0b18 	vmov	r0, r1, d8
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f7f1 f9a2 	bl	8000b1c <__aeabi_dcmplt>
 800f7d8:	3800      	subs	r0, #0
 800f7da:	bf18      	it	ne
 800f7dc:	2001      	movne	r0, #1
 800f7de:	e72b      	b.n	800f638 <__ieee754_pow+0x220>
 800f7e0:	60000000 	.word	0x60000000
 800f7e4:	3ff71547 	.word	0x3ff71547
 800f7e8:	f85ddf44 	.word	0xf85ddf44
 800f7ec:	3e54ae0b 	.word	0x3e54ae0b
 800f7f0:	55555555 	.word	0x55555555
 800f7f4:	3fd55555 	.word	0x3fd55555
 800f7f8:	652b82fe 	.word	0x652b82fe
 800f7fc:	3ff71547 	.word	0x3ff71547
 800f800:	00000000 	.word	0x00000000
 800f804:	bff00000 	.word	0xbff00000
 800f808:	3ff00000 	.word	0x3ff00000
 800f80c:	3fd00000 	.word	0x3fd00000
 800f810:	3fe00000 	.word	0x3fe00000
 800f814:	408fffff 	.word	0x408fffff
 800f818:	4bd5      	ldr	r3, [pc, #852]	; (800fb70 <__ieee754_pow+0x758>)
 800f81a:	402b      	ands	r3, r5
 800f81c:	2200      	movs	r2, #0
 800f81e:	b92b      	cbnz	r3, 800f82c <__ieee754_pow+0x414>
 800f820:	4bd4      	ldr	r3, [pc, #848]	; (800fb74 <__ieee754_pow+0x75c>)
 800f822:	f7f0 ff09 	bl	8000638 <__aeabi_dmul>
 800f826:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f82a:	460c      	mov	r4, r1
 800f82c:	1523      	asrs	r3, r4, #20
 800f82e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f832:	4413      	add	r3, r2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	4bd0      	ldr	r3, [pc, #832]	; (800fb78 <__ieee754_pow+0x760>)
 800f838:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f83c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f840:	429c      	cmp	r4, r3
 800f842:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f846:	dd08      	ble.n	800f85a <__ieee754_pow+0x442>
 800f848:	4bcc      	ldr	r3, [pc, #816]	; (800fb7c <__ieee754_pow+0x764>)
 800f84a:	429c      	cmp	r4, r3
 800f84c:	f340 8162 	ble.w	800fb14 <__ieee754_pow+0x6fc>
 800f850:	9b05      	ldr	r3, [sp, #20]
 800f852:	3301      	adds	r3, #1
 800f854:	9305      	str	r3, [sp, #20]
 800f856:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f85a:	2400      	movs	r4, #0
 800f85c:	00e3      	lsls	r3, r4, #3
 800f85e:	9307      	str	r3, [sp, #28]
 800f860:	4bc7      	ldr	r3, [pc, #796]	; (800fb80 <__ieee754_pow+0x768>)
 800f862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f866:	ed93 7b00 	vldr	d7, [r3]
 800f86a:	4629      	mov	r1, r5
 800f86c:	ec53 2b17 	vmov	r2, r3, d7
 800f870:	eeb0 9a47 	vmov.f32	s18, s14
 800f874:	eef0 9a67 	vmov.f32	s19, s15
 800f878:	4682      	mov	sl, r0
 800f87a:	f7f0 fd25 	bl	80002c8 <__aeabi_dsub>
 800f87e:	4652      	mov	r2, sl
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	462b      	mov	r3, r5
 800f886:	ec51 0b19 	vmov	r0, r1, d9
 800f88a:	f7f0 fd1f 	bl	80002cc <__adddf3>
 800f88e:	4602      	mov	r2, r0
 800f890:	460b      	mov	r3, r1
 800f892:	2000      	movs	r0, #0
 800f894:	49bb      	ldr	r1, [pc, #748]	; (800fb84 <__ieee754_pow+0x76c>)
 800f896:	f7f0 fff9 	bl	800088c <__aeabi_ddiv>
 800f89a:	ec41 0b1a 	vmov	d10, r0, r1
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	f7f0 fec7 	bl	8000638 <__aeabi_dmul>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b0:	9302      	str	r3, [sp, #8]
 800f8b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f8b6:	46ab      	mov	fp, r5
 800f8b8:	106d      	asrs	r5, r5, #1
 800f8ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f8be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f8c2:	ec41 0b18 	vmov	d8, r0, r1
 800f8c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	4649      	mov	r1, r9
 800f8d0:	4614      	mov	r4, r2
 800f8d2:	461d      	mov	r5, r3
 800f8d4:	f7f0 feb0 	bl	8000638 <__aeabi_dmul>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	460b      	mov	r3, r1
 800f8dc:	4630      	mov	r0, r6
 800f8de:	4639      	mov	r1, r7
 800f8e0:	f7f0 fcf2 	bl	80002c8 <__aeabi_dsub>
 800f8e4:	ec53 2b19 	vmov	r2, r3, d9
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	460f      	mov	r7, r1
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f7f0 fcea 	bl	80002c8 <__aeabi_dsub>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	4650      	mov	r0, sl
 800f8fa:	4659      	mov	r1, fp
 800f8fc:	f7f0 fce4 	bl	80002c8 <__aeabi_dsub>
 800f900:	4642      	mov	r2, r8
 800f902:	464b      	mov	r3, r9
 800f904:	f7f0 fe98 	bl	8000638 <__aeabi_dmul>
 800f908:	4602      	mov	r2, r0
 800f90a:	460b      	mov	r3, r1
 800f90c:	4630      	mov	r0, r6
 800f90e:	4639      	mov	r1, r7
 800f910:	f7f0 fcda 	bl	80002c8 <__aeabi_dsub>
 800f914:	ec53 2b1a 	vmov	r2, r3, d10
 800f918:	f7f0 fe8e 	bl	8000638 <__aeabi_dmul>
 800f91c:	ec53 2b18 	vmov	r2, r3, d8
 800f920:	ec41 0b19 	vmov	d9, r0, r1
 800f924:	ec51 0b18 	vmov	r0, r1, d8
 800f928:	f7f0 fe86 	bl	8000638 <__aeabi_dmul>
 800f92c:	a37c      	add	r3, pc, #496	; (adr r3, 800fb20 <__ieee754_pow+0x708>)
 800f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f932:	4604      	mov	r4, r0
 800f934:	460d      	mov	r5, r1
 800f936:	f7f0 fe7f 	bl	8000638 <__aeabi_dmul>
 800f93a:	a37b      	add	r3, pc, #492	; (adr r3, 800fb28 <__ieee754_pow+0x710>)
 800f93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f940:	f7f0 fcc4 	bl	80002cc <__adddf3>
 800f944:	4622      	mov	r2, r4
 800f946:	462b      	mov	r3, r5
 800f948:	f7f0 fe76 	bl	8000638 <__aeabi_dmul>
 800f94c:	a378      	add	r3, pc, #480	; (adr r3, 800fb30 <__ieee754_pow+0x718>)
 800f94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f952:	f7f0 fcbb 	bl	80002cc <__adddf3>
 800f956:	4622      	mov	r2, r4
 800f958:	462b      	mov	r3, r5
 800f95a:	f7f0 fe6d 	bl	8000638 <__aeabi_dmul>
 800f95e:	a376      	add	r3, pc, #472	; (adr r3, 800fb38 <__ieee754_pow+0x720>)
 800f960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f964:	f7f0 fcb2 	bl	80002cc <__adddf3>
 800f968:	4622      	mov	r2, r4
 800f96a:	462b      	mov	r3, r5
 800f96c:	f7f0 fe64 	bl	8000638 <__aeabi_dmul>
 800f970:	a373      	add	r3, pc, #460	; (adr r3, 800fb40 <__ieee754_pow+0x728>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	f7f0 fca9 	bl	80002cc <__adddf3>
 800f97a:	4622      	mov	r2, r4
 800f97c:	462b      	mov	r3, r5
 800f97e:	f7f0 fe5b 	bl	8000638 <__aeabi_dmul>
 800f982:	a371      	add	r3, pc, #452	; (adr r3, 800fb48 <__ieee754_pow+0x730>)
 800f984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f988:	f7f0 fca0 	bl	80002cc <__adddf3>
 800f98c:	4622      	mov	r2, r4
 800f98e:	4606      	mov	r6, r0
 800f990:	460f      	mov	r7, r1
 800f992:	462b      	mov	r3, r5
 800f994:	4620      	mov	r0, r4
 800f996:	4629      	mov	r1, r5
 800f998:	f7f0 fe4e 	bl	8000638 <__aeabi_dmul>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	f7f0 fe48 	bl	8000638 <__aeabi_dmul>
 800f9a8:	4642      	mov	r2, r8
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	460d      	mov	r5, r1
 800f9ae:	464b      	mov	r3, r9
 800f9b0:	ec51 0b18 	vmov	r0, r1, d8
 800f9b4:	f7f0 fc8a 	bl	80002cc <__adddf3>
 800f9b8:	ec53 2b19 	vmov	r2, r3, d9
 800f9bc:	f7f0 fe3c 	bl	8000638 <__aeabi_dmul>
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	f7f0 fc82 	bl	80002cc <__adddf3>
 800f9c8:	4642      	mov	r2, r8
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	468b      	mov	fp, r1
 800f9ce:	464b      	mov	r3, r9
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	4649      	mov	r1, r9
 800f9d4:	f7f0 fe30 	bl	8000638 <__aeabi_dmul>
 800f9d8:	4b6b      	ldr	r3, [pc, #428]	; (800fb88 <__ieee754_pow+0x770>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	4606      	mov	r6, r0
 800f9de:	460f      	mov	r7, r1
 800f9e0:	f7f0 fc74 	bl	80002cc <__adddf3>
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	465b      	mov	r3, fp
 800f9e8:	f7f0 fc70 	bl	80002cc <__adddf3>
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	f7f0 fe1d 	bl	8000638 <__aeabi_dmul>
 800f9fe:	4b62      	ldr	r3, [pc, #392]	; (800fb88 <__ieee754_pow+0x770>)
 800fa00:	4680      	mov	r8, r0
 800fa02:	4689      	mov	r9, r1
 800fa04:	2200      	movs	r2, #0
 800fa06:	4620      	mov	r0, r4
 800fa08:	4629      	mov	r1, r5
 800fa0a:	f7f0 fc5d 	bl	80002c8 <__aeabi_dsub>
 800fa0e:	4632      	mov	r2, r6
 800fa10:	463b      	mov	r3, r7
 800fa12:	f7f0 fc59 	bl	80002c8 <__aeabi_dsub>
 800fa16:	4602      	mov	r2, r0
 800fa18:	460b      	mov	r3, r1
 800fa1a:	4650      	mov	r0, sl
 800fa1c:	4659      	mov	r1, fp
 800fa1e:	f7f0 fc53 	bl	80002c8 <__aeabi_dsub>
 800fa22:	ec53 2b18 	vmov	r2, r3, d8
 800fa26:	f7f0 fe07 	bl	8000638 <__aeabi_dmul>
 800fa2a:	4622      	mov	r2, r4
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	460f      	mov	r7, r1
 800fa30:	462b      	mov	r3, r5
 800fa32:	ec51 0b19 	vmov	r0, r1, d9
 800fa36:	f7f0 fdff 	bl	8000638 <__aeabi_dmul>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4630      	mov	r0, r6
 800fa40:	4639      	mov	r1, r7
 800fa42:	f7f0 fc43 	bl	80002cc <__adddf3>
 800fa46:	4606      	mov	r6, r0
 800fa48:	460f      	mov	r7, r1
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4640      	mov	r0, r8
 800fa50:	4649      	mov	r1, r9
 800fa52:	f7f0 fc3b 	bl	80002cc <__adddf3>
 800fa56:	a33e      	add	r3, pc, #248	; (adr r3, 800fb50 <__ieee754_pow+0x738>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	4604      	mov	r4, r0
 800fa60:	460d      	mov	r5, r1
 800fa62:	f7f0 fde9 	bl	8000638 <__aeabi_dmul>
 800fa66:	4642      	mov	r2, r8
 800fa68:	ec41 0b18 	vmov	d8, r0, r1
 800fa6c:	464b      	mov	r3, r9
 800fa6e:	4620      	mov	r0, r4
 800fa70:	4629      	mov	r1, r5
 800fa72:	f7f0 fc29 	bl	80002c8 <__aeabi_dsub>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	f7f0 fc23 	bl	80002c8 <__aeabi_dsub>
 800fa82:	a335      	add	r3, pc, #212	; (adr r3, 800fb58 <__ieee754_pow+0x740>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	f7f0 fdd6 	bl	8000638 <__aeabi_dmul>
 800fa8c:	a334      	add	r3, pc, #208	; (adr r3, 800fb60 <__ieee754_pow+0x748>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	4606      	mov	r6, r0
 800fa94:	460f      	mov	r7, r1
 800fa96:	4620      	mov	r0, r4
 800fa98:	4629      	mov	r1, r5
 800fa9a:	f7f0 fdcd 	bl	8000638 <__aeabi_dmul>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	460b      	mov	r3, r1
 800faa2:	4630      	mov	r0, r6
 800faa4:	4639      	mov	r1, r7
 800faa6:	f7f0 fc11 	bl	80002cc <__adddf3>
 800faaa:	9a07      	ldr	r2, [sp, #28]
 800faac:	4b37      	ldr	r3, [pc, #220]	; (800fb8c <__ieee754_pow+0x774>)
 800faae:	4413      	add	r3, r2
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fc0a 	bl	80002cc <__adddf3>
 800fab8:	4682      	mov	sl, r0
 800faba:	9805      	ldr	r0, [sp, #20]
 800fabc:	468b      	mov	fp, r1
 800fabe:	f7f0 fd51 	bl	8000564 <__aeabi_i2d>
 800fac2:	9a07      	ldr	r2, [sp, #28]
 800fac4:	4b32      	ldr	r3, [pc, #200]	; (800fb90 <__ieee754_pow+0x778>)
 800fac6:	4413      	add	r3, r2
 800fac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800facc:	4606      	mov	r6, r0
 800face:	460f      	mov	r7, r1
 800fad0:	4652      	mov	r2, sl
 800fad2:	465b      	mov	r3, fp
 800fad4:	ec51 0b18 	vmov	r0, r1, d8
 800fad8:	f7f0 fbf8 	bl	80002cc <__adddf3>
 800fadc:	4642      	mov	r2, r8
 800fade:	464b      	mov	r3, r9
 800fae0:	f7f0 fbf4 	bl	80002cc <__adddf3>
 800fae4:	4632      	mov	r2, r6
 800fae6:	463b      	mov	r3, r7
 800fae8:	f7f0 fbf0 	bl	80002cc <__adddf3>
 800faec:	2000      	movs	r0, #0
 800faee:	4632      	mov	r2, r6
 800faf0:	463b      	mov	r3, r7
 800faf2:	4604      	mov	r4, r0
 800faf4:	460d      	mov	r5, r1
 800faf6:	f7f0 fbe7 	bl	80002c8 <__aeabi_dsub>
 800fafa:	4642      	mov	r2, r8
 800fafc:	464b      	mov	r3, r9
 800fafe:	f7f0 fbe3 	bl	80002c8 <__aeabi_dsub>
 800fb02:	ec53 2b18 	vmov	r2, r3, d8
 800fb06:	f7f0 fbdf 	bl	80002c8 <__aeabi_dsub>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	4650      	mov	r0, sl
 800fb10:	4659      	mov	r1, fp
 800fb12:	e610      	b.n	800f736 <__ieee754_pow+0x31e>
 800fb14:	2401      	movs	r4, #1
 800fb16:	e6a1      	b.n	800f85c <__ieee754_pow+0x444>
 800fb18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fb68 <__ieee754_pow+0x750>
 800fb1c:	e617      	b.n	800f74e <__ieee754_pow+0x336>
 800fb1e:	bf00      	nop
 800fb20:	4a454eef 	.word	0x4a454eef
 800fb24:	3fca7e28 	.word	0x3fca7e28
 800fb28:	93c9db65 	.word	0x93c9db65
 800fb2c:	3fcd864a 	.word	0x3fcd864a
 800fb30:	a91d4101 	.word	0xa91d4101
 800fb34:	3fd17460 	.word	0x3fd17460
 800fb38:	518f264d 	.word	0x518f264d
 800fb3c:	3fd55555 	.word	0x3fd55555
 800fb40:	db6fabff 	.word	0xdb6fabff
 800fb44:	3fdb6db6 	.word	0x3fdb6db6
 800fb48:	33333303 	.word	0x33333303
 800fb4c:	3fe33333 	.word	0x3fe33333
 800fb50:	e0000000 	.word	0xe0000000
 800fb54:	3feec709 	.word	0x3feec709
 800fb58:	dc3a03fd 	.word	0xdc3a03fd
 800fb5c:	3feec709 	.word	0x3feec709
 800fb60:	145b01f5 	.word	0x145b01f5
 800fb64:	be3e2fe0 	.word	0xbe3e2fe0
 800fb68:	00000000 	.word	0x00000000
 800fb6c:	3ff00000 	.word	0x3ff00000
 800fb70:	7ff00000 	.word	0x7ff00000
 800fb74:	43400000 	.word	0x43400000
 800fb78:	0003988e 	.word	0x0003988e
 800fb7c:	000bb679 	.word	0x000bb679
 800fb80:	08010e10 	.word	0x08010e10
 800fb84:	3ff00000 	.word	0x3ff00000
 800fb88:	40080000 	.word	0x40080000
 800fb8c:	08010e30 	.word	0x08010e30
 800fb90:	08010e20 	.word	0x08010e20
 800fb94:	a3b5      	add	r3, pc, #724	; (adr r3, 800fe6c <__ieee754_pow+0xa54>)
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4649      	mov	r1, r9
 800fb9e:	f7f0 fb95 	bl	80002cc <__adddf3>
 800fba2:	4622      	mov	r2, r4
 800fba4:	ec41 0b1a 	vmov	d10, r0, r1
 800fba8:	462b      	mov	r3, r5
 800fbaa:	4630      	mov	r0, r6
 800fbac:	4639      	mov	r1, r7
 800fbae:	f7f0 fb8b 	bl	80002c8 <__aeabi_dsub>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	ec51 0b1a 	vmov	r0, r1, d10
 800fbba:	f7f0 ffcd 	bl	8000b58 <__aeabi_dcmpgt>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f47f ae04 	bne.w	800f7cc <__ieee754_pow+0x3b4>
 800fbc4:	4aa4      	ldr	r2, [pc, #656]	; (800fe58 <__ieee754_pow+0xa40>)
 800fbc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	f340 8108 	ble.w	800fde0 <__ieee754_pow+0x9c8>
 800fbd0:	151b      	asrs	r3, r3, #20
 800fbd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fbd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fbda:	fa4a f303 	asr.w	r3, sl, r3
 800fbde:	445b      	add	r3, fp
 800fbe0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fbe4:	4e9d      	ldr	r6, [pc, #628]	; (800fe5c <__ieee754_pow+0xa44>)
 800fbe6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fbea:	4116      	asrs	r6, r2
 800fbec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	ea23 0106 	bic.w	r1, r3, r6
 800fbf6:	f1c2 0214 	rsb	r2, r2, #20
 800fbfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fbfe:	fa4a fa02 	asr.w	sl, sl, r2
 800fc02:	f1bb 0f00 	cmp.w	fp, #0
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	bfb8      	it	lt
 800fc10:	f1ca 0a00 	rsblt	sl, sl, #0
 800fc14:	f7f0 fb58 	bl	80002c8 <__aeabi_dsub>
 800fc18:	ec41 0b19 	vmov	d9, r0, r1
 800fc1c:	4642      	mov	r2, r8
 800fc1e:	464b      	mov	r3, r9
 800fc20:	ec51 0b19 	vmov	r0, r1, d9
 800fc24:	f7f0 fb52 	bl	80002cc <__adddf3>
 800fc28:	a37b      	add	r3, pc, #492	; (adr r3, 800fe18 <__ieee754_pow+0xa00>)
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	2000      	movs	r0, #0
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	f7f0 fd00 	bl	8000638 <__aeabi_dmul>
 800fc38:	ec53 2b19 	vmov	r2, r3, d9
 800fc3c:	4606      	mov	r6, r0
 800fc3e:	460f      	mov	r7, r1
 800fc40:	4620      	mov	r0, r4
 800fc42:	4629      	mov	r1, r5
 800fc44:	f7f0 fb40 	bl	80002c8 <__aeabi_dsub>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4640      	mov	r0, r8
 800fc4e:	4649      	mov	r1, r9
 800fc50:	f7f0 fb3a 	bl	80002c8 <__aeabi_dsub>
 800fc54:	a372      	add	r3, pc, #456	; (adr r3, 800fe20 <__ieee754_pow+0xa08>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	f7f0 fced 	bl	8000638 <__aeabi_dmul>
 800fc5e:	a372      	add	r3, pc, #456	; (adr r3, 800fe28 <__ieee754_pow+0xa10>)
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	4680      	mov	r8, r0
 800fc66:	4689      	mov	r9, r1
 800fc68:	4620      	mov	r0, r4
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	f7f0 fce4 	bl	8000638 <__aeabi_dmul>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4640      	mov	r0, r8
 800fc76:	4649      	mov	r1, r9
 800fc78:	f7f0 fb28 	bl	80002cc <__adddf3>
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	460d      	mov	r5, r1
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4630      	mov	r0, r6
 800fc86:	4639      	mov	r1, r7
 800fc88:	f7f0 fb20 	bl	80002cc <__adddf3>
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	463b      	mov	r3, r7
 800fc90:	4680      	mov	r8, r0
 800fc92:	4689      	mov	r9, r1
 800fc94:	f7f0 fb18 	bl	80002c8 <__aeabi_dsub>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 fb12 	bl	80002c8 <__aeabi_dsub>
 800fca4:	4642      	mov	r2, r8
 800fca6:	4606      	mov	r6, r0
 800fca8:	460f      	mov	r7, r1
 800fcaa:	464b      	mov	r3, r9
 800fcac:	4640      	mov	r0, r8
 800fcae:	4649      	mov	r1, r9
 800fcb0:	f7f0 fcc2 	bl	8000638 <__aeabi_dmul>
 800fcb4:	a35e      	add	r3, pc, #376	; (adr r3, 800fe30 <__ieee754_pow+0xa18>)
 800fcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcba:	4604      	mov	r4, r0
 800fcbc:	460d      	mov	r5, r1
 800fcbe:	f7f0 fcbb 	bl	8000638 <__aeabi_dmul>
 800fcc2:	a35d      	add	r3, pc, #372	; (adr r3, 800fe38 <__ieee754_pow+0xa20>)
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	f7f0 fafe 	bl	80002c8 <__aeabi_dsub>
 800fccc:	4622      	mov	r2, r4
 800fcce:	462b      	mov	r3, r5
 800fcd0:	f7f0 fcb2 	bl	8000638 <__aeabi_dmul>
 800fcd4:	a35a      	add	r3, pc, #360	; (adr r3, 800fe40 <__ieee754_pow+0xa28>)
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	f7f0 faf7 	bl	80002cc <__adddf3>
 800fcde:	4622      	mov	r2, r4
 800fce0:	462b      	mov	r3, r5
 800fce2:	f7f0 fca9 	bl	8000638 <__aeabi_dmul>
 800fce6:	a358      	add	r3, pc, #352	; (adr r3, 800fe48 <__ieee754_pow+0xa30>)
 800fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcec:	f7f0 faec 	bl	80002c8 <__aeabi_dsub>
 800fcf0:	4622      	mov	r2, r4
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	f7f0 fca0 	bl	8000638 <__aeabi_dmul>
 800fcf8:	a355      	add	r3, pc, #340	; (adr r3, 800fe50 <__ieee754_pow+0xa38>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fae5 	bl	80002cc <__adddf3>
 800fd02:	4622      	mov	r2, r4
 800fd04:	462b      	mov	r3, r5
 800fd06:	f7f0 fc97 	bl	8000638 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4640      	mov	r0, r8
 800fd10:	4649      	mov	r1, r9
 800fd12:	f7f0 fad9 	bl	80002c8 <__aeabi_dsub>
 800fd16:	4604      	mov	r4, r0
 800fd18:	460d      	mov	r5, r1
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	4640      	mov	r0, r8
 800fd20:	4649      	mov	r1, r9
 800fd22:	f7f0 fc89 	bl	8000638 <__aeabi_dmul>
 800fd26:	2200      	movs	r2, #0
 800fd28:	ec41 0b19 	vmov	d9, r0, r1
 800fd2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd30:	4620      	mov	r0, r4
 800fd32:	4629      	mov	r1, r5
 800fd34:	f7f0 fac8 	bl	80002c8 <__aeabi_dsub>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	ec51 0b19 	vmov	r0, r1, d9
 800fd40:	f7f0 fda4 	bl	800088c <__aeabi_ddiv>
 800fd44:	4632      	mov	r2, r6
 800fd46:	4604      	mov	r4, r0
 800fd48:	460d      	mov	r5, r1
 800fd4a:	463b      	mov	r3, r7
 800fd4c:	4640      	mov	r0, r8
 800fd4e:	4649      	mov	r1, r9
 800fd50:	f7f0 fc72 	bl	8000638 <__aeabi_dmul>
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	f7f0 fab8 	bl	80002cc <__adddf3>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	460b      	mov	r3, r1
 800fd60:	4620      	mov	r0, r4
 800fd62:	4629      	mov	r1, r5
 800fd64:	f7f0 fab0 	bl	80002c8 <__aeabi_dsub>
 800fd68:	4642      	mov	r2, r8
 800fd6a:	464b      	mov	r3, r9
 800fd6c:	f7f0 faac 	bl	80002c8 <__aeabi_dsub>
 800fd70:	460b      	mov	r3, r1
 800fd72:	4602      	mov	r2, r0
 800fd74:	493a      	ldr	r1, [pc, #232]	; (800fe60 <__ieee754_pow+0xa48>)
 800fd76:	2000      	movs	r0, #0
 800fd78:	f7f0 faa6 	bl	80002c8 <__aeabi_dsub>
 800fd7c:	ec41 0b10 	vmov	d0, r0, r1
 800fd80:	ee10 3a90 	vmov	r3, s1
 800fd84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fd88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd8c:	da2b      	bge.n	800fde6 <__ieee754_pow+0x9ce>
 800fd8e:	4650      	mov	r0, sl
 800fd90:	f000 f966 	bl	8010060 <scalbn>
 800fd94:	ec51 0b10 	vmov	r0, r1, d0
 800fd98:	ec53 2b18 	vmov	r2, r3, d8
 800fd9c:	f7ff bbed 	b.w	800f57a <__ieee754_pow+0x162>
 800fda0:	4b30      	ldr	r3, [pc, #192]	; (800fe64 <__ieee754_pow+0xa4c>)
 800fda2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fda6:	429e      	cmp	r6, r3
 800fda8:	f77f af0c 	ble.w	800fbc4 <__ieee754_pow+0x7ac>
 800fdac:	4b2e      	ldr	r3, [pc, #184]	; (800fe68 <__ieee754_pow+0xa50>)
 800fdae:	440b      	add	r3, r1
 800fdb0:	4303      	orrs	r3, r0
 800fdb2:	d009      	beq.n	800fdc8 <__ieee754_pow+0x9b0>
 800fdb4:	ec51 0b18 	vmov	r0, r1, d8
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2300      	movs	r3, #0
 800fdbc:	f7f0 feae 	bl	8000b1c <__aeabi_dcmplt>
 800fdc0:	3800      	subs	r0, #0
 800fdc2:	bf18      	it	ne
 800fdc4:	2001      	movne	r0, #1
 800fdc6:	e447      	b.n	800f658 <__ieee754_pow+0x240>
 800fdc8:	4622      	mov	r2, r4
 800fdca:	462b      	mov	r3, r5
 800fdcc:	f7f0 fa7c 	bl	80002c8 <__aeabi_dsub>
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	f7f0 feb6 	bl	8000b44 <__aeabi_dcmpge>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	f43f aef3 	beq.w	800fbc4 <__ieee754_pow+0x7ac>
 800fdde:	e7e9      	b.n	800fdb4 <__ieee754_pow+0x99c>
 800fde0:	f04f 0a00 	mov.w	sl, #0
 800fde4:	e71a      	b.n	800fc1c <__ieee754_pow+0x804>
 800fde6:	ec51 0b10 	vmov	r0, r1, d0
 800fdea:	4619      	mov	r1, r3
 800fdec:	e7d4      	b.n	800fd98 <__ieee754_pow+0x980>
 800fdee:	491c      	ldr	r1, [pc, #112]	; (800fe60 <__ieee754_pow+0xa48>)
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	f7ff bb30 	b.w	800f456 <__ieee754_pow+0x3e>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	f7ff bb2c 	b.w	800f456 <__ieee754_pow+0x3e>
 800fdfe:	4630      	mov	r0, r6
 800fe00:	4639      	mov	r1, r7
 800fe02:	f7ff bb28 	b.w	800f456 <__ieee754_pow+0x3e>
 800fe06:	9204      	str	r2, [sp, #16]
 800fe08:	f7ff bb7a 	b.w	800f500 <__ieee754_pow+0xe8>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	f7ff bb64 	b.w	800f4da <__ieee754_pow+0xc2>
 800fe12:	bf00      	nop
 800fe14:	f3af 8000 	nop.w
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	3fe62e43 	.word	0x3fe62e43
 800fe20:	fefa39ef 	.word	0xfefa39ef
 800fe24:	3fe62e42 	.word	0x3fe62e42
 800fe28:	0ca86c39 	.word	0x0ca86c39
 800fe2c:	be205c61 	.word	0xbe205c61
 800fe30:	72bea4d0 	.word	0x72bea4d0
 800fe34:	3e663769 	.word	0x3e663769
 800fe38:	c5d26bf1 	.word	0xc5d26bf1
 800fe3c:	3ebbbd41 	.word	0x3ebbbd41
 800fe40:	af25de2c 	.word	0xaf25de2c
 800fe44:	3f11566a 	.word	0x3f11566a
 800fe48:	16bebd93 	.word	0x16bebd93
 800fe4c:	3f66c16c 	.word	0x3f66c16c
 800fe50:	5555553e 	.word	0x5555553e
 800fe54:	3fc55555 	.word	0x3fc55555
 800fe58:	3fe00000 	.word	0x3fe00000
 800fe5c:	000fffff 	.word	0x000fffff
 800fe60:	3ff00000 	.word	0x3ff00000
 800fe64:	4090cbff 	.word	0x4090cbff
 800fe68:	3f6f3400 	.word	0x3f6f3400
 800fe6c:	652b82fe 	.word	0x652b82fe
 800fe70:	3c971547 	.word	0x3c971547

0800fe74 <__ieee754_sqrt>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	ec55 4b10 	vmov	r4, r5, d0
 800fe7c:	4e55      	ldr	r6, [pc, #340]	; (800ffd4 <__ieee754_sqrt+0x160>)
 800fe7e:	43ae      	bics	r6, r5
 800fe80:	ee10 0a10 	vmov	r0, s0
 800fe84:	ee10 3a10 	vmov	r3, s0
 800fe88:	462a      	mov	r2, r5
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	d110      	bne.n	800feb0 <__ieee754_sqrt+0x3c>
 800fe8e:	ee10 2a10 	vmov	r2, s0
 800fe92:	462b      	mov	r3, r5
 800fe94:	f7f0 fbd0 	bl	8000638 <__aeabi_dmul>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	4629      	mov	r1, r5
 800fea0:	f7f0 fa14 	bl	80002cc <__adddf3>
 800fea4:	4604      	mov	r4, r0
 800fea6:	460d      	mov	r5, r1
 800fea8:	ec45 4b10 	vmov	d0, r4, r5
 800feac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	dc10      	bgt.n	800fed6 <__ieee754_sqrt+0x62>
 800feb4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800feb8:	4330      	orrs	r0, r6
 800feba:	d0f5      	beq.n	800fea8 <__ieee754_sqrt+0x34>
 800febc:	b15d      	cbz	r5, 800fed6 <__ieee754_sqrt+0x62>
 800febe:	ee10 2a10 	vmov	r2, s0
 800fec2:	462b      	mov	r3, r5
 800fec4:	ee10 0a10 	vmov	r0, s0
 800fec8:	f7f0 f9fe 	bl	80002c8 <__aeabi_dsub>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	f7f0 fcdc 	bl	800088c <__aeabi_ddiv>
 800fed4:	e7e6      	b.n	800fea4 <__ieee754_sqrt+0x30>
 800fed6:	1512      	asrs	r2, r2, #20
 800fed8:	d074      	beq.n	800ffc4 <__ieee754_sqrt+0x150>
 800feda:	07d4      	lsls	r4, r2, #31
 800fedc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fee0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fee8:	bf5e      	ittt	pl
 800feea:	0fda      	lsrpl	r2, r3, #31
 800feec:	005b      	lslpl	r3, r3, #1
 800feee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fef2:	2400      	movs	r4, #0
 800fef4:	0fda      	lsrs	r2, r3, #31
 800fef6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fefa:	107f      	asrs	r7, r7, #1
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	2516      	movs	r5, #22
 800ff00:	4620      	mov	r0, r4
 800ff02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ff06:	1886      	adds	r6, r0, r2
 800ff08:	428e      	cmp	r6, r1
 800ff0a:	bfde      	ittt	le
 800ff0c:	1b89      	suble	r1, r1, r6
 800ff0e:	18b0      	addle	r0, r6, r2
 800ff10:	18a4      	addle	r4, r4, r2
 800ff12:	0049      	lsls	r1, r1, #1
 800ff14:	3d01      	subs	r5, #1
 800ff16:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ff1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ff1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff22:	d1f0      	bne.n	800ff06 <__ieee754_sqrt+0x92>
 800ff24:	462a      	mov	r2, r5
 800ff26:	f04f 0e20 	mov.w	lr, #32
 800ff2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ff2e:	4281      	cmp	r1, r0
 800ff30:	eb06 0c05 	add.w	ip, r6, r5
 800ff34:	dc02      	bgt.n	800ff3c <__ieee754_sqrt+0xc8>
 800ff36:	d113      	bne.n	800ff60 <__ieee754_sqrt+0xec>
 800ff38:	459c      	cmp	ip, r3
 800ff3a:	d811      	bhi.n	800ff60 <__ieee754_sqrt+0xec>
 800ff3c:	f1bc 0f00 	cmp.w	ip, #0
 800ff40:	eb0c 0506 	add.w	r5, ip, r6
 800ff44:	da43      	bge.n	800ffce <__ieee754_sqrt+0x15a>
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	db41      	blt.n	800ffce <__ieee754_sqrt+0x15a>
 800ff4a:	f100 0801 	add.w	r8, r0, #1
 800ff4e:	1a09      	subs	r1, r1, r0
 800ff50:	459c      	cmp	ip, r3
 800ff52:	bf88      	it	hi
 800ff54:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ff58:	eba3 030c 	sub.w	r3, r3, ip
 800ff5c:	4432      	add	r2, r6
 800ff5e:	4640      	mov	r0, r8
 800ff60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ff64:	f1be 0e01 	subs.w	lr, lr, #1
 800ff68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ff6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ff74:	d1db      	bne.n	800ff2e <__ieee754_sqrt+0xba>
 800ff76:	430b      	orrs	r3, r1
 800ff78:	d006      	beq.n	800ff88 <__ieee754_sqrt+0x114>
 800ff7a:	1c50      	adds	r0, r2, #1
 800ff7c:	bf13      	iteet	ne
 800ff7e:	3201      	addne	r2, #1
 800ff80:	3401      	addeq	r4, #1
 800ff82:	4672      	moveq	r2, lr
 800ff84:	f022 0201 	bicne.w	r2, r2, #1
 800ff88:	1063      	asrs	r3, r4, #1
 800ff8a:	0852      	lsrs	r2, r2, #1
 800ff8c:	07e1      	lsls	r1, r4, #31
 800ff8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ff92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ff96:	bf48      	it	mi
 800ff98:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ff9c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ffa0:	4614      	mov	r4, r2
 800ffa2:	e781      	b.n	800fea8 <__ieee754_sqrt+0x34>
 800ffa4:	0ad9      	lsrs	r1, r3, #11
 800ffa6:	3815      	subs	r0, #21
 800ffa8:	055b      	lsls	r3, r3, #21
 800ffaa:	2900      	cmp	r1, #0
 800ffac:	d0fa      	beq.n	800ffa4 <__ieee754_sqrt+0x130>
 800ffae:	02cd      	lsls	r5, r1, #11
 800ffb0:	d50a      	bpl.n	800ffc8 <__ieee754_sqrt+0x154>
 800ffb2:	f1c2 0420 	rsb	r4, r2, #32
 800ffb6:	fa23 f404 	lsr.w	r4, r3, r4
 800ffba:	1e55      	subs	r5, r2, #1
 800ffbc:	4093      	lsls	r3, r2
 800ffbe:	4321      	orrs	r1, r4
 800ffc0:	1b42      	subs	r2, r0, r5
 800ffc2:	e78a      	b.n	800feda <__ieee754_sqrt+0x66>
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	e7f0      	b.n	800ffaa <__ieee754_sqrt+0x136>
 800ffc8:	0049      	lsls	r1, r1, #1
 800ffca:	3201      	adds	r2, #1
 800ffcc:	e7ef      	b.n	800ffae <__ieee754_sqrt+0x13a>
 800ffce:	4680      	mov	r8, r0
 800ffd0:	e7bd      	b.n	800ff4e <__ieee754_sqrt+0xda>
 800ffd2:	bf00      	nop
 800ffd4:	7ff00000 	.word	0x7ff00000

0800ffd8 <with_errno>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	4604      	mov	r4, r0
 800ffdc:	460d      	mov	r5, r1
 800ffde:	4616      	mov	r6, r2
 800ffe0:	f000 f8cc 	bl	801017c <__errno>
 800ffe4:	4629      	mov	r1, r5
 800ffe6:	6006      	str	r6, [r0, #0]
 800ffe8:	4620      	mov	r0, r4
 800ffea:	bd70      	pop	{r4, r5, r6, pc}

0800ffec <xflow>:
 800ffec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffee:	4614      	mov	r4, r2
 800fff0:	461d      	mov	r5, r3
 800fff2:	b108      	cbz	r0, 800fff8 <xflow+0xc>
 800fff4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fff8:	e9cd 2300 	strd	r2, r3, [sp]
 800fffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010000:	4620      	mov	r0, r4
 8010002:	4629      	mov	r1, r5
 8010004:	f7f0 fb18 	bl	8000638 <__aeabi_dmul>
 8010008:	2222      	movs	r2, #34	; 0x22
 801000a:	b003      	add	sp, #12
 801000c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010010:	f7ff bfe2 	b.w	800ffd8 <with_errno>

08010014 <__math_uflow>:
 8010014:	b508      	push	{r3, lr}
 8010016:	2200      	movs	r2, #0
 8010018:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801001c:	f7ff ffe6 	bl	800ffec <xflow>
 8010020:	ec41 0b10 	vmov	d0, r0, r1
 8010024:	bd08      	pop	{r3, pc}

08010026 <__math_oflow>:
 8010026:	b508      	push	{r3, lr}
 8010028:	2200      	movs	r2, #0
 801002a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801002e:	f7ff ffdd 	bl	800ffec <xflow>
 8010032:	ec41 0b10 	vmov	d0, r0, r1
 8010036:	bd08      	pop	{r3, pc}

08010038 <fabs>:
 8010038:	ec51 0b10 	vmov	r0, r1, d0
 801003c:	ee10 2a10 	vmov	r2, s0
 8010040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010044:	ec43 2b10 	vmov	d0, r2, r3
 8010048:	4770      	bx	lr

0801004a <finite>:
 801004a:	b082      	sub	sp, #8
 801004c:	ed8d 0b00 	vstr	d0, [sp]
 8010050:	9801      	ldr	r0, [sp, #4]
 8010052:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010056:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801005a:	0fc0      	lsrs	r0, r0, #31
 801005c:	b002      	add	sp, #8
 801005e:	4770      	bx	lr

08010060 <scalbn>:
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	ec55 4b10 	vmov	r4, r5, d0
 8010066:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801006a:	4606      	mov	r6, r0
 801006c:	462b      	mov	r3, r5
 801006e:	b99a      	cbnz	r2, 8010098 <scalbn+0x38>
 8010070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010074:	4323      	orrs	r3, r4
 8010076:	d036      	beq.n	80100e6 <scalbn+0x86>
 8010078:	4b39      	ldr	r3, [pc, #228]	; (8010160 <scalbn+0x100>)
 801007a:	4629      	mov	r1, r5
 801007c:	ee10 0a10 	vmov	r0, s0
 8010080:	2200      	movs	r2, #0
 8010082:	f7f0 fad9 	bl	8000638 <__aeabi_dmul>
 8010086:	4b37      	ldr	r3, [pc, #220]	; (8010164 <scalbn+0x104>)
 8010088:	429e      	cmp	r6, r3
 801008a:	4604      	mov	r4, r0
 801008c:	460d      	mov	r5, r1
 801008e:	da10      	bge.n	80100b2 <scalbn+0x52>
 8010090:	a32b      	add	r3, pc, #172	; (adr r3, 8010140 <scalbn+0xe0>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	e03a      	b.n	801010e <scalbn+0xae>
 8010098:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801009c:	428a      	cmp	r2, r1
 801009e:	d10c      	bne.n	80100ba <scalbn+0x5a>
 80100a0:	ee10 2a10 	vmov	r2, s0
 80100a4:	4620      	mov	r0, r4
 80100a6:	4629      	mov	r1, r5
 80100a8:	f7f0 f910 	bl	80002cc <__adddf3>
 80100ac:	4604      	mov	r4, r0
 80100ae:	460d      	mov	r5, r1
 80100b0:	e019      	b.n	80100e6 <scalbn+0x86>
 80100b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100b6:	460b      	mov	r3, r1
 80100b8:	3a36      	subs	r2, #54	; 0x36
 80100ba:	4432      	add	r2, r6
 80100bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80100c0:	428a      	cmp	r2, r1
 80100c2:	dd08      	ble.n	80100d6 <scalbn+0x76>
 80100c4:	2d00      	cmp	r5, #0
 80100c6:	a120      	add	r1, pc, #128	; (adr r1, 8010148 <scalbn+0xe8>)
 80100c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100cc:	da1c      	bge.n	8010108 <scalbn+0xa8>
 80100ce:	a120      	add	r1, pc, #128	; (adr r1, 8010150 <scalbn+0xf0>)
 80100d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d4:	e018      	b.n	8010108 <scalbn+0xa8>
 80100d6:	2a00      	cmp	r2, #0
 80100d8:	dd08      	ble.n	80100ec <scalbn+0x8c>
 80100da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100e6:	ec45 4b10 	vmov	d0, r4, r5
 80100ea:	bd70      	pop	{r4, r5, r6, pc}
 80100ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80100f0:	da19      	bge.n	8010126 <scalbn+0xc6>
 80100f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100f6:	429e      	cmp	r6, r3
 80100f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80100fc:	dd0a      	ble.n	8010114 <scalbn+0xb4>
 80100fe:	a112      	add	r1, pc, #72	; (adr r1, 8010148 <scalbn+0xe8>)
 8010100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1e2      	bne.n	80100ce <scalbn+0x6e>
 8010108:	a30f      	add	r3, pc, #60	; (adr r3, 8010148 <scalbn+0xe8>)
 801010a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010e:	f7f0 fa93 	bl	8000638 <__aeabi_dmul>
 8010112:	e7cb      	b.n	80100ac <scalbn+0x4c>
 8010114:	a10a      	add	r1, pc, #40	; (adr r1, 8010140 <scalbn+0xe0>)
 8010116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d0b8      	beq.n	8010090 <scalbn+0x30>
 801011e:	a10e      	add	r1, pc, #56	; (adr r1, 8010158 <scalbn+0xf8>)
 8010120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010124:	e7b4      	b.n	8010090 <scalbn+0x30>
 8010126:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801012a:	3236      	adds	r2, #54	; 0x36
 801012c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010130:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010134:	4620      	mov	r0, r4
 8010136:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <scalbn+0x108>)
 8010138:	2200      	movs	r2, #0
 801013a:	e7e8      	b.n	801010e <scalbn+0xae>
 801013c:	f3af 8000 	nop.w
 8010140:	c2f8f359 	.word	0xc2f8f359
 8010144:	01a56e1f 	.word	0x01a56e1f
 8010148:	8800759c 	.word	0x8800759c
 801014c:	7e37e43c 	.word	0x7e37e43c
 8010150:	8800759c 	.word	0x8800759c
 8010154:	fe37e43c 	.word	0xfe37e43c
 8010158:	c2f8f359 	.word	0xc2f8f359
 801015c:	81a56e1f 	.word	0x81a56e1f
 8010160:	43500000 	.word	0x43500000
 8010164:	ffff3cb0 	.word	0xffff3cb0
 8010168:	3c900000 	.word	0x3c900000

0801016c <abort>:
 801016c:	b508      	push	{r3, lr}
 801016e:	2006      	movs	r0, #6
 8010170:	f000 f95e 	bl	8010430 <raise>
 8010174:	2001      	movs	r0, #1
 8010176:	f7f5 fb0b 	bl	8005790 <_exit>
	...

0801017c <__errno>:
 801017c:	4b01      	ldr	r3, [pc, #4]	; (8010184 <__errno+0x8>)
 801017e:	6818      	ldr	r0, [r3, #0]
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	20000010 	.word	0x20000010

08010188 <__libc_init_array>:
 8010188:	b570      	push	{r4, r5, r6, lr}
 801018a:	4d0d      	ldr	r5, [pc, #52]	; (80101c0 <__libc_init_array+0x38>)
 801018c:	4c0d      	ldr	r4, [pc, #52]	; (80101c4 <__libc_init_array+0x3c>)
 801018e:	1b64      	subs	r4, r4, r5
 8010190:	10a4      	asrs	r4, r4, #2
 8010192:	2600      	movs	r6, #0
 8010194:	42a6      	cmp	r6, r4
 8010196:	d109      	bne.n	80101ac <__libc_init_array+0x24>
 8010198:	4d0b      	ldr	r5, [pc, #44]	; (80101c8 <__libc_init_array+0x40>)
 801019a:	4c0c      	ldr	r4, [pc, #48]	; (80101cc <__libc_init_array+0x44>)
 801019c:	f000 fcf6 	bl	8010b8c <_init>
 80101a0:	1b64      	subs	r4, r4, r5
 80101a2:	10a4      	asrs	r4, r4, #2
 80101a4:	2600      	movs	r6, #0
 80101a6:	42a6      	cmp	r6, r4
 80101a8:	d105      	bne.n	80101b6 <__libc_init_array+0x2e>
 80101aa:	bd70      	pop	{r4, r5, r6, pc}
 80101ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80101b0:	4798      	blx	r3
 80101b2:	3601      	adds	r6, #1
 80101b4:	e7ee      	b.n	8010194 <__libc_init_array+0xc>
 80101b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80101ba:	4798      	blx	r3
 80101bc:	3601      	adds	r6, #1
 80101be:	e7f2      	b.n	80101a6 <__libc_init_array+0x1e>
 80101c0:	08010e7c 	.word	0x08010e7c
 80101c4:	08010e7c 	.word	0x08010e7c
 80101c8:	08010e7c 	.word	0x08010e7c
 80101cc:	08010e84 	.word	0x08010e84

080101d0 <malloc>:
 80101d0:	4b02      	ldr	r3, [pc, #8]	; (80101dc <malloc+0xc>)
 80101d2:	4601      	mov	r1, r0
 80101d4:	6818      	ldr	r0, [r3, #0]
 80101d6:	f000 b87f 	b.w	80102d8 <_malloc_r>
 80101da:	bf00      	nop
 80101dc:	20000010 	.word	0x20000010

080101e0 <free>:
 80101e0:	4b02      	ldr	r3, [pc, #8]	; (80101ec <free+0xc>)
 80101e2:	4601      	mov	r1, r0
 80101e4:	6818      	ldr	r0, [r3, #0]
 80101e6:	f000 b80b 	b.w	8010200 <_free_r>
 80101ea:	bf00      	nop
 80101ec:	20000010 	.word	0x20000010

080101f0 <memset>:
 80101f0:	4402      	add	r2, r0
 80101f2:	4603      	mov	r3, r0
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d100      	bne.n	80101fa <memset+0xa>
 80101f8:	4770      	bx	lr
 80101fa:	f803 1b01 	strb.w	r1, [r3], #1
 80101fe:	e7f9      	b.n	80101f4 <memset+0x4>

08010200 <_free_r>:
 8010200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010202:	2900      	cmp	r1, #0
 8010204:	d044      	beq.n	8010290 <_free_r+0x90>
 8010206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801020a:	9001      	str	r0, [sp, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	f1a1 0404 	sub.w	r4, r1, #4
 8010212:	bfb8      	it	lt
 8010214:	18e4      	addlt	r4, r4, r3
 8010216:	f000 f95b 	bl	80104d0 <__malloc_lock>
 801021a:	4a1e      	ldr	r2, [pc, #120]	; (8010294 <_free_r+0x94>)
 801021c:	9801      	ldr	r0, [sp, #4]
 801021e:	6813      	ldr	r3, [r2, #0]
 8010220:	b933      	cbnz	r3, 8010230 <_free_r+0x30>
 8010222:	6063      	str	r3, [r4, #4]
 8010224:	6014      	str	r4, [r2, #0]
 8010226:	b003      	add	sp, #12
 8010228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801022c:	f000 b956 	b.w	80104dc <__malloc_unlock>
 8010230:	42a3      	cmp	r3, r4
 8010232:	d908      	bls.n	8010246 <_free_r+0x46>
 8010234:	6825      	ldr	r5, [r4, #0]
 8010236:	1961      	adds	r1, r4, r5
 8010238:	428b      	cmp	r3, r1
 801023a:	bf01      	itttt	eq
 801023c:	6819      	ldreq	r1, [r3, #0]
 801023e:	685b      	ldreq	r3, [r3, #4]
 8010240:	1949      	addeq	r1, r1, r5
 8010242:	6021      	streq	r1, [r4, #0]
 8010244:	e7ed      	b.n	8010222 <_free_r+0x22>
 8010246:	461a      	mov	r2, r3
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	b10b      	cbz	r3, 8010250 <_free_r+0x50>
 801024c:	42a3      	cmp	r3, r4
 801024e:	d9fa      	bls.n	8010246 <_free_r+0x46>
 8010250:	6811      	ldr	r1, [r2, #0]
 8010252:	1855      	adds	r5, r2, r1
 8010254:	42a5      	cmp	r5, r4
 8010256:	d10b      	bne.n	8010270 <_free_r+0x70>
 8010258:	6824      	ldr	r4, [r4, #0]
 801025a:	4421      	add	r1, r4
 801025c:	1854      	adds	r4, r2, r1
 801025e:	42a3      	cmp	r3, r4
 8010260:	6011      	str	r1, [r2, #0]
 8010262:	d1e0      	bne.n	8010226 <_free_r+0x26>
 8010264:	681c      	ldr	r4, [r3, #0]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	6053      	str	r3, [r2, #4]
 801026a:	4421      	add	r1, r4
 801026c:	6011      	str	r1, [r2, #0]
 801026e:	e7da      	b.n	8010226 <_free_r+0x26>
 8010270:	d902      	bls.n	8010278 <_free_r+0x78>
 8010272:	230c      	movs	r3, #12
 8010274:	6003      	str	r3, [r0, #0]
 8010276:	e7d6      	b.n	8010226 <_free_r+0x26>
 8010278:	6825      	ldr	r5, [r4, #0]
 801027a:	1961      	adds	r1, r4, r5
 801027c:	428b      	cmp	r3, r1
 801027e:	bf04      	itt	eq
 8010280:	6819      	ldreq	r1, [r3, #0]
 8010282:	685b      	ldreq	r3, [r3, #4]
 8010284:	6063      	str	r3, [r4, #4]
 8010286:	bf04      	itt	eq
 8010288:	1949      	addeq	r1, r1, r5
 801028a:	6021      	streq	r1, [r4, #0]
 801028c:	6054      	str	r4, [r2, #4]
 801028e:	e7ca      	b.n	8010226 <_free_r+0x26>
 8010290:	b003      	add	sp, #12
 8010292:	bd30      	pop	{r4, r5, pc}
 8010294:	20001588 	.word	0x20001588

08010298 <sbrk_aligned>:
 8010298:	b570      	push	{r4, r5, r6, lr}
 801029a:	4e0e      	ldr	r6, [pc, #56]	; (80102d4 <sbrk_aligned+0x3c>)
 801029c:	460c      	mov	r4, r1
 801029e:	6831      	ldr	r1, [r6, #0]
 80102a0:	4605      	mov	r5, r0
 80102a2:	b911      	cbnz	r1, 80102aa <sbrk_aligned+0x12>
 80102a4:	f000 f88c 	bl	80103c0 <_sbrk_r>
 80102a8:	6030      	str	r0, [r6, #0]
 80102aa:	4621      	mov	r1, r4
 80102ac:	4628      	mov	r0, r5
 80102ae:	f000 f887 	bl	80103c0 <_sbrk_r>
 80102b2:	1c43      	adds	r3, r0, #1
 80102b4:	d00a      	beq.n	80102cc <sbrk_aligned+0x34>
 80102b6:	1cc4      	adds	r4, r0, #3
 80102b8:	f024 0403 	bic.w	r4, r4, #3
 80102bc:	42a0      	cmp	r0, r4
 80102be:	d007      	beq.n	80102d0 <sbrk_aligned+0x38>
 80102c0:	1a21      	subs	r1, r4, r0
 80102c2:	4628      	mov	r0, r5
 80102c4:	f000 f87c 	bl	80103c0 <_sbrk_r>
 80102c8:	3001      	adds	r0, #1
 80102ca:	d101      	bne.n	80102d0 <sbrk_aligned+0x38>
 80102cc:	f04f 34ff 	mov.w	r4, #4294967295
 80102d0:	4620      	mov	r0, r4
 80102d2:	bd70      	pop	{r4, r5, r6, pc}
 80102d4:	2000158c 	.word	0x2000158c

080102d8 <_malloc_r>:
 80102d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102dc:	1ccd      	adds	r5, r1, #3
 80102de:	f025 0503 	bic.w	r5, r5, #3
 80102e2:	3508      	adds	r5, #8
 80102e4:	2d0c      	cmp	r5, #12
 80102e6:	bf38      	it	cc
 80102e8:	250c      	movcc	r5, #12
 80102ea:	2d00      	cmp	r5, #0
 80102ec:	4607      	mov	r7, r0
 80102ee:	db01      	blt.n	80102f4 <_malloc_r+0x1c>
 80102f0:	42a9      	cmp	r1, r5
 80102f2:	d905      	bls.n	8010300 <_malloc_r+0x28>
 80102f4:	230c      	movs	r3, #12
 80102f6:	603b      	str	r3, [r7, #0]
 80102f8:	2600      	movs	r6, #0
 80102fa:	4630      	mov	r0, r6
 80102fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010300:	4e2e      	ldr	r6, [pc, #184]	; (80103bc <_malloc_r+0xe4>)
 8010302:	f000 f8e5 	bl	80104d0 <__malloc_lock>
 8010306:	6833      	ldr	r3, [r6, #0]
 8010308:	461c      	mov	r4, r3
 801030a:	bb34      	cbnz	r4, 801035a <_malloc_r+0x82>
 801030c:	4629      	mov	r1, r5
 801030e:	4638      	mov	r0, r7
 8010310:	f7ff ffc2 	bl	8010298 <sbrk_aligned>
 8010314:	1c43      	adds	r3, r0, #1
 8010316:	4604      	mov	r4, r0
 8010318:	d14d      	bne.n	80103b6 <_malloc_r+0xde>
 801031a:	6834      	ldr	r4, [r6, #0]
 801031c:	4626      	mov	r6, r4
 801031e:	2e00      	cmp	r6, #0
 8010320:	d140      	bne.n	80103a4 <_malloc_r+0xcc>
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	4631      	mov	r1, r6
 8010326:	4638      	mov	r0, r7
 8010328:	eb04 0803 	add.w	r8, r4, r3
 801032c:	f000 f848 	bl	80103c0 <_sbrk_r>
 8010330:	4580      	cmp	r8, r0
 8010332:	d13a      	bne.n	80103aa <_malloc_r+0xd2>
 8010334:	6821      	ldr	r1, [r4, #0]
 8010336:	3503      	adds	r5, #3
 8010338:	1a6d      	subs	r5, r5, r1
 801033a:	f025 0503 	bic.w	r5, r5, #3
 801033e:	3508      	adds	r5, #8
 8010340:	2d0c      	cmp	r5, #12
 8010342:	bf38      	it	cc
 8010344:	250c      	movcc	r5, #12
 8010346:	4629      	mov	r1, r5
 8010348:	4638      	mov	r0, r7
 801034a:	f7ff ffa5 	bl	8010298 <sbrk_aligned>
 801034e:	3001      	adds	r0, #1
 8010350:	d02b      	beq.n	80103aa <_malloc_r+0xd2>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	442b      	add	r3, r5
 8010356:	6023      	str	r3, [r4, #0]
 8010358:	e00e      	b.n	8010378 <_malloc_r+0xa0>
 801035a:	6822      	ldr	r2, [r4, #0]
 801035c:	1b52      	subs	r2, r2, r5
 801035e:	d41e      	bmi.n	801039e <_malloc_r+0xc6>
 8010360:	2a0b      	cmp	r2, #11
 8010362:	d916      	bls.n	8010392 <_malloc_r+0xba>
 8010364:	1961      	adds	r1, r4, r5
 8010366:	42a3      	cmp	r3, r4
 8010368:	6025      	str	r5, [r4, #0]
 801036a:	bf18      	it	ne
 801036c:	6059      	strne	r1, [r3, #4]
 801036e:	6863      	ldr	r3, [r4, #4]
 8010370:	bf08      	it	eq
 8010372:	6031      	streq	r1, [r6, #0]
 8010374:	5162      	str	r2, [r4, r5]
 8010376:	604b      	str	r3, [r1, #4]
 8010378:	4638      	mov	r0, r7
 801037a:	f104 060b 	add.w	r6, r4, #11
 801037e:	f000 f8ad 	bl	80104dc <__malloc_unlock>
 8010382:	f026 0607 	bic.w	r6, r6, #7
 8010386:	1d23      	adds	r3, r4, #4
 8010388:	1af2      	subs	r2, r6, r3
 801038a:	d0b6      	beq.n	80102fa <_malloc_r+0x22>
 801038c:	1b9b      	subs	r3, r3, r6
 801038e:	50a3      	str	r3, [r4, r2]
 8010390:	e7b3      	b.n	80102fa <_malloc_r+0x22>
 8010392:	6862      	ldr	r2, [r4, #4]
 8010394:	42a3      	cmp	r3, r4
 8010396:	bf0c      	ite	eq
 8010398:	6032      	streq	r2, [r6, #0]
 801039a:	605a      	strne	r2, [r3, #4]
 801039c:	e7ec      	b.n	8010378 <_malloc_r+0xa0>
 801039e:	4623      	mov	r3, r4
 80103a0:	6864      	ldr	r4, [r4, #4]
 80103a2:	e7b2      	b.n	801030a <_malloc_r+0x32>
 80103a4:	4634      	mov	r4, r6
 80103a6:	6876      	ldr	r6, [r6, #4]
 80103a8:	e7b9      	b.n	801031e <_malloc_r+0x46>
 80103aa:	230c      	movs	r3, #12
 80103ac:	603b      	str	r3, [r7, #0]
 80103ae:	4638      	mov	r0, r7
 80103b0:	f000 f894 	bl	80104dc <__malloc_unlock>
 80103b4:	e7a1      	b.n	80102fa <_malloc_r+0x22>
 80103b6:	6025      	str	r5, [r4, #0]
 80103b8:	e7de      	b.n	8010378 <_malloc_r+0xa0>
 80103ba:	bf00      	nop
 80103bc:	20001588 	.word	0x20001588

080103c0 <_sbrk_r>:
 80103c0:	b538      	push	{r3, r4, r5, lr}
 80103c2:	4d06      	ldr	r5, [pc, #24]	; (80103dc <_sbrk_r+0x1c>)
 80103c4:	2300      	movs	r3, #0
 80103c6:	4604      	mov	r4, r0
 80103c8:	4608      	mov	r0, r1
 80103ca:	602b      	str	r3, [r5, #0]
 80103cc:	f7f5 f9ea 	bl	80057a4 <_sbrk>
 80103d0:	1c43      	adds	r3, r0, #1
 80103d2:	d102      	bne.n	80103da <_sbrk_r+0x1a>
 80103d4:	682b      	ldr	r3, [r5, #0]
 80103d6:	b103      	cbz	r3, 80103da <_sbrk_r+0x1a>
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	bd38      	pop	{r3, r4, r5, pc}
 80103dc:	20001590 	.word	0x20001590

080103e0 <_raise_r>:
 80103e0:	291f      	cmp	r1, #31
 80103e2:	b538      	push	{r3, r4, r5, lr}
 80103e4:	4604      	mov	r4, r0
 80103e6:	460d      	mov	r5, r1
 80103e8:	d904      	bls.n	80103f4 <_raise_r+0x14>
 80103ea:	2316      	movs	r3, #22
 80103ec:	6003      	str	r3, [r0, #0]
 80103ee:	f04f 30ff 	mov.w	r0, #4294967295
 80103f2:	bd38      	pop	{r3, r4, r5, pc}
 80103f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103f6:	b112      	cbz	r2, 80103fe <_raise_r+0x1e>
 80103f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103fc:	b94b      	cbnz	r3, 8010412 <_raise_r+0x32>
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 f830 	bl	8010464 <_getpid_r>
 8010404:	462a      	mov	r2, r5
 8010406:	4601      	mov	r1, r0
 8010408:	4620      	mov	r0, r4
 801040a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801040e:	f000 b817 	b.w	8010440 <_kill_r>
 8010412:	2b01      	cmp	r3, #1
 8010414:	d00a      	beq.n	801042c <_raise_r+0x4c>
 8010416:	1c59      	adds	r1, r3, #1
 8010418:	d103      	bne.n	8010422 <_raise_r+0x42>
 801041a:	2316      	movs	r3, #22
 801041c:	6003      	str	r3, [r0, #0]
 801041e:	2001      	movs	r0, #1
 8010420:	e7e7      	b.n	80103f2 <_raise_r+0x12>
 8010422:	2400      	movs	r4, #0
 8010424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010428:	4628      	mov	r0, r5
 801042a:	4798      	blx	r3
 801042c:	2000      	movs	r0, #0
 801042e:	e7e0      	b.n	80103f2 <_raise_r+0x12>

08010430 <raise>:
 8010430:	4b02      	ldr	r3, [pc, #8]	; (801043c <raise+0xc>)
 8010432:	4601      	mov	r1, r0
 8010434:	6818      	ldr	r0, [r3, #0]
 8010436:	f7ff bfd3 	b.w	80103e0 <_raise_r>
 801043a:	bf00      	nop
 801043c:	20000010 	.word	0x20000010

08010440 <_kill_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d07      	ldr	r5, [pc, #28]	; (8010460 <_kill_r+0x20>)
 8010444:	2300      	movs	r3, #0
 8010446:	4604      	mov	r4, r0
 8010448:	4608      	mov	r0, r1
 801044a:	4611      	mov	r1, r2
 801044c:	602b      	str	r3, [r5, #0]
 801044e:	f7f5 f98f 	bl	8005770 <_kill>
 8010452:	1c43      	adds	r3, r0, #1
 8010454:	d102      	bne.n	801045c <_kill_r+0x1c>
 8010456:	682b      	ldr	r3, [r5, #0]
 8010458:	b103      	cbz	r3, 801045c <_kill_r+0x1c>
 801045a:	6023      	str	r3, [r4, #0]
 801045c:	bd38      	pop	{r3, r4, r5, pc}
 801045e:	bf00      	nop
 8010460:	20001590 	.word	0x20001590

08010464 <_getpid_r>:
 8010464:	f7f5 b97c 	b.w	8005760 <_getpid>

08010468 <sniprintf>:
 8010468:	b40c      	push	{r2, r3}
 801046a:	b530      	push	{r4, r5, lr}
 801046c:	4b17      	ldr	r3, [pc, #92]	; (80104cc <sniprintf+0x64>)
 801046e:	1e0c      	subs	r4, r1, #0
 8010470:	681d      	ldr	r5, [r3, #0]
 8010472:	b09d      	sub	sp, #116	; 0x74
 8010474:	da08      	bge.n	8010488 <sniprintf+0x20>
 8010476:	238b      	movs	r3, #139	; 0x8b
 8010478:	602b      	str	r3, [r5, #0]
 801047a:	f04f 30ff 	mov.w	r0, #4294967295
 801047e:	b01d      	add	sp, #116	; 0x74
 8010480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010484:	b002      	add	sp, #8
 8010486:	4770      	bx	lr
 8010488:	f44f 7302 	mov.w	r3, #520	; 0x208
 801048c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010490:	bf14      	ite	ne
 8010492:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010496:	4623      	moveq	r3, r4
 8010498:	9304      	str	r3, [sp, #16]
 801049a:	9307      	str	r3, [sp, #28]
 801049c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104a0:	9002      	str	r0, [sp, #8]
 80104a2:	9006      	str	r0, [sp, #24]
 80104a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80104aa:	ab21      	add	r3, sp, #132	; 0x84
 80104ac:	a902      	add	r1, sp, #8
 80104ae:	4628      	mov	r0, r5
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	f000 f875 	bl	80105a0 <_svfiprintf_r>
 80104b6:	1c43      	adds	r3, r0, #1
 80104b8:	bfbc      	itt	lt
 80104ba:	238b      	movlt	r3, #139	; 0x8b
 80104bc:	602b      	strlt	r3, [r5, #0]
 80104be:	2c00      	cmp	r4, #0
 80104c0:	d0dd      	beq.n	801047e <sniprintf+0x16>
 80104c2:	9b02      	ldr	r3, [sp, #8]
 80104c4:	2200      	movs	r2, #0
 80104c6:	701a      	strb	r2, [r3, #0]
 80104c8:	e7d9      	b.n	801047e <sniprintf+0x16>
 80104ca:	bf00      	nop
 80104cc:	20000010 	.word	0x20000010

080104d0 <__malloc_lock>:
 80104d0:	4801      	ldr	r0, [pc, #4]	; (80104d8 <__malloc_lock+0x8>)
 80104d2:	f000 baf9 	b.w	8010ac8 <__retarget_lock_acquire_recursive>
 80104d6:	bf00      	nop
 80104d8:	20001594 	.word	0x20001594

080104dc <__malloc_unlock>:
 80104dc:	4801      	ldr	r0, [pc, #4]	; (80104e4 <__malloc_unlock+0x8>)
 80104de:	f000 baf4 	b.w	8010aca <__retarget_lock_release_recursive>
 80104e2:	bf00      	nop
 80104e4:	20001594 	.word	0x20001594

080104e8 <__ssputs_r>:
 80104e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ec:	688e      	ldr	r6, [r1, #8]
 80104ee:	429e      	cmp	r6, r3
 80104f0:	4682      	mov	sl, r0
 80104f2:	460c      	mov	r4, r1
 80104f4:	4690      	mov	r8, r2
 80104f6:	461f      	mov	r7, r3
 80104f8:	d838      	bhi.n	801056c <__ssputs_r+0x84>
 80104fa:	898a      	ldrh	r2, [r1, #12]
 80104fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010500:	d032      	beq.n	8010568 <__ssputs_r+0x80>
 8010502:	6825      	ldr	r5, [r4, #0]
 8010504:	6909      	ldr	r1, [r1, #16]
 8010506:	eba5 0901 	sub.w	r9, r5, r1
 801050a:	6965      	ldr	r5, [r4, #20]
 801050c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010514:	3301      	adds	r3, #1
 8010516:	444b      	add	r3, r9
 8010518:	106d      	asrs	r5, r5, #1
 801051a:	429d      	cmp	r5, r3
 801051c:	bf38      	it	cc
 801051e:	461d      	movcc	r5, r3
 8010520:	0553      	lsls	r3, r2, #21
 8010522:	d531      	bpl.n	8010588 <__ssputs_r+0xa0>
 8010524:	4629      	mov	r1, r5
 8010526:	f7ff fed7 	bl	80102d8 <_malloc_r>
 801052a:	4606      	mov	r6, r0
 801052c:	b950      	cbnz	r0, 8010544 <__ssputs_r+0x5c>
 801052e:	230c      	movs	r3, #12
 8010530:	f8ca 3000 	str.w	r3, [sl]
 8010534:	89a3      	ldrh	r3, [r4, #12]
 8010536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801053a:	81a3      	strh	r3, [r4, #12]
 801053c:	f04f 30ff 	mov.w	r0, #4294967295
 8010540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010544:	6921      	ldr	r1, [r4, #16]
 8010546:	464a      	mov	r2, r9
 8010548:	f000 fac0 	bl	8010acc <memcpy>
 801054c:	89a3      	ldrh	r3, [r4, #12]
 801054e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010556:	81a3      	strh	r3, [r4, #12]
 8010558:	6126      	str	r6, [r4, #16]
 801055a:	6165      	str	r5, [r4, #20]
 801055c:	444e      	add	r6, r9
 801055e:	eba5 0509 	sub.w	r5, r5, r9
 8010562:	6026      	str	r6, [r4, #0]
 8010564:	60a5      	str	r5, [r4, #8]
 8010566:	463e      	mov	r6, r7
 8010568:	42be      	cmp	r6, r7
 801056a:	d900      	bls.n	801056e <__ssputs_r+0x86>
 801056c:	463e      	mov	r6, r7
 801056e:	6820      	ldr	r0, [r4, #0]
 8010570:	4632      	mov	r2, r6
 8010572:	4641      	mov	r1, r8
 8010574:	f000 fab8 	bl	8010ae8 <memmove>
 8010578:	68a3      	ldr	r3, [r4, #8]
 801057a:	1b9b      	subs	r3, r3, r6
 801057c:	60a3      	str	r3, [r4, #8]
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	4433      	add	r3, r6
 8010582:	6023      	str	r3, [r4, #0]
 8010584:	2000      	movs	r0, #0
 8010586:	e7db      	b.n	8010540 <__ssputs_r+0x58>
 8010588:	462a      	mov	r2, r5
 801058a:	f000 fac7 	bl	8010b1c <_realloc_r>
 801058e:	4606      	mov	r6, r0
 8010590:	2800      	cmp	r0, #0
 8010592:	d1e1      	bne.n	8010558 <__ssputs_r+0x70>
 8010594:	6921      	ldr	r1, [r4, #16]
 8010596:	4650      	mov	r0, sl
 8010598:	f7ff fe32 	bl	8010200 <_free_r>
 801059c:	e7c7      	b.n	801052e <__ssputs_r+0x46>
	...

080105a0 <_svfiprintf_r>:
 80105a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	4698      	mov	r8, r3
 80105a6:	898b      	ldrh	r3, [r1, #12]
 80105a8:	061b      	lsls	r3, r3, #24
 80105aa:	b09d      	sub	sp, #116	; 0x74
 80105ac:	4607      	mov	r7, r0
 80105ae:	460d      	mov	r5, r1
 80105b0:	4614      	mov	r4, r2
 80105b2:	d50e      	bpl.n	80105d2 <_svfiprintf_r+0x32>
 80105b4:	690b      	ldr	r3, [r1, #16]
 80105b6:	b963      	cbnz	r3, 80105d2 <_svfiprintf_r+0x32>
 80105b8:	2140      	movs	r1, #64	; 0x40
 80105ba:	f7ff fe8d 	bl	80102d8 <_malloc_r>
 80105be:	6028      	str	r0, [r5, #0]
 80105c0:	6128      	str	r0, [r5, #16]
 80105c2:	b920      	cbnz	r0, 80105ce <_svfiprintf_r+0x2e>
 80105c4:	230c      	movs	r3, #12
 80105c6:	603b      	str	r3, [r7, #0]
 80105c8:	f04f 30ff 	mov.w	r0, #4294967295
 80105cc:	e0d1      	b.n	8010772 <_svfiprintf_r+0x1d2>
 80105ce:	2340      	movs	r3, #64	; 0x40
 80105d0:	616b      	str	r3, [r5, #20]
 80105d2:	2300      	movs	r3, #0
 80105d4:	9309      	str	r3, [sp, #36]	; 0x24
 80105d6:	2320      	movs	r3, #32
 80105d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80105e0:	2330      	movs	r3, #48	; 0x30
 80105e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801078c <_svfiprintf_r+0x1ec>
 80105e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ea:	f04f 0901 	mov.w	r9, #1
 80105ee:	4623      	mov	r3, r4
 80105f0:	469a      	mov	sl, r3
 80105f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105f6:	b10a      	cbz	r2, 80105fc <_svfiprintf_r+0x5c>
 80105f8:	2a25      	cmp	r2, #37	; 0x25
 80105fa:	d1f9      	bne.n	80105f0 <_svfiprintf_r+0x50>
 80105fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010600:	d00b      	beq.n	801061a <_svfiprintf_r+0x7a>
 8010602:	465b      	mov	r3, fp
 8010604:	4622      	mov	r2, r4
 8010606:	4629      	mov	r1, r5
 8010608:	4638      	mov	r0, r7
 801060a:	f7ff ff6d 	bl	80104e8 <__ssputs_r>
 801060e:	3001      	adds	r0, #1
 8010610:	f000 80aa 	beq.w	8010768 <_svfiprintf_r+0x1c8>
 8010614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010616:	445a      	add	r2, fp
 8010618:	9209      	str	r2, [sp, #36]	; 0x24
 801061a:	f89a 3000 	ldrb.w	r3, [sl]
 801061e:	2b00      	cmp	r3, #0
 8010620:	f000 80a2 	beq.w	8010768 <_svfiprintf_r+0x1c8>
 8010624:	2300      	movs	r3, #0
 8010626:	f04f 32ff 	mov.w	r2, #4294967295
 801062a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801062e:	f10a 0a01 	add.w	sl, sl, #1
 8010632:	9304      	str	r3, [sp, #16]
 8010634:	9307      	str	r3, [sp, #28]
 8010636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801063a:	931a      	str	r3, [sp, #104]	; 0x68
 801063c:	4654      	mov	r4, sl
 801063e:	2205      	movs	r2, #5
 8010640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010644:	4851      	ldr	r0, [pc, #324]	; (801078c <_svfiprintf_r+0x1ec>)
 8010646:	f7ef fdeb 	bl	8000220 <memchr>
 801064a:	9a04      	ldr	r2, [sp, #16]
 801064c:	b9d8      	cbnz	r0, 8010686 <_svfiprintf_r+0xe6>
 801064e:	06d0      	lsls	r0, r2, #27
 8010650:	bf44      	itt	mi
 8010652:	2320      	movmi	r3, #32
 8010654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010658:	0711      	lsls	r1, r2, #28
 801065a:	bf44      	itt	mi
 801065c:	232b      	movmi	r3, #43	; 0x2b
 801065e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010662:	f89a 3000 	ldrb.w	r3, [sl]
 8010666:	2b2a      	cmp	r3, #42	; 0x2a
 8010668:	d015      	beq.n	8010696 <_svfiprintf_r+0xf6>
 801066a:	9a07      	ldr	r2, [sp, #28]
 801066c:	4654      	mov	r4, sl
 801066e:	2000      	movs	r0, #0
 8010670:	f04f 0c0a 	mov.w	ip, #10
 8010674:	4621      	mov	r1, r4
 8010676:	f811 3b01 	ldrb.w	r3, [r1], #1
 801067a:	3b30      	subs	r3, #48	; 0x30
 801067c:	2b09      	cmp	r3, #9
 801067e:	d94e      	bls.n	801071e <_svfiprintf_r+0x17e>
 8010680:	b1b0      	cbz	r0, 80106b0 <_svfiprintf_r+0x110>
 8010682:	9207      	str	r2, [sp, #28]
 8010684:	e014      	b.n	80106b0 <_svfiprintf_r+0x110>
 8010686:	eba0 0308 	sub.w	r3, r0, r8
 801068a:	fa09 f303 	lsl.w	r3, r9, r3
 801068e:	4313      	orrs	r3, r2
 8010690:	9304      	str	r3, [sp, #16]
 8010692:	46a2      	mov	sl, r4
 8010694:	e7d2      	b.n	801063c <_svfiprintf_r+0x9c>
 8010696:	9b03      	ldr	r3, [sp, #12]
 8010698:	1d19      	adds	r1, r3, #4
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	9103      	str	r1, [sp, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	bfbb      	ittet	lt
 80106a2:	425b      	neglt	r3, r3
 80106a4:	f042 0202 	orrlt.w	r2, r2, #2
 80106a8:	9307      	strge	r3, [sp, #28]
 80106aa:	9307      	strlt	r3, [sp, #28]
 80106ac:	bfb8      	it	lt
 80106ae:	9204      	strlt	r2, [sp, #16]
 80106b0:	7823      	ldrb	r3, [r4, #0]
 80106b2:	2b2e      	cmp	r3, #46	; 0x2e
 80106b4:	d10c      	bne.n	80106d0 <_svfiprintf_r+0x130>
 80106b6:	7863      	ldrb	r3, [r4, #1]
 80106b8:	2b2a      	cmp	r3, #42	; 0x2a
 80106ba:	d135      	bne.n	8010728 <_svfiprintf_r+0x188>
 80106bc:	9b03      	ldr	r3, [sp, #12]
 80106be:	1d1a      	adds	r2, r3, #4
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	9203      	str	r2, [sp, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	bfb8      	it	lt
 80106c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80106cc:	3402      	adds	r4, #2
 80106ce:	9305      	str	r3, [sp, #20]
 80106d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801079c <_svfiprintf_r+0x1fc>
 80106d4:	7821      	ldrb	r1, [r4, #0]
 80106d6:	2203      	movs	r2, #3
 80106d8:	4650      	mov	r0, sl
 80106da:	f7ef fda1 	bl	8000220 <memchr>
 80106de:	b140      	cbz	r0, 80106f2 <_svfiprintf_r+0x152>
 80106e0:	2340      	movs	r3, #64	; 0x40
 80106e2:	eba0 000a 	sub.w	r0, r0, sl
 80106e6:	fa03 f000 	lsl.w	r0, r3, r0
 80106ea:	9b04      	ldr	r3, [sp, #16]
 80106ec:	4303      	orrs	r3, r0
 80106ee:	3401      	adds	r4, #1
 80106f0:	9304      	str	r3, [sp, #16]
 80106f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106f6:	4826      	ldr	r0, [pc, #152]	; (8010790 <_svfiprintf_r+0x1f0>)
 80106f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106fc:	2206      	movs	r2, #6
 80106fe:	f7ef fd8f 	bl	8000220 <memchr>
 8010702:	2800      	cmp	r0, #0
 8010704:	d038      	beq.n	8010778 <_svfiprintf_r+0x1d8>
 8010706:	4b23      	ldr	r3, [pc, #140]	; (8010794 <_svfiprintf_r+0x1f4>)
 8010708:	bb1b      	cbnz	r3, 8010752 <_svfiprintf_r+0x1b2>
 801070a:	9b03      	ldr	r3, [sp, #12]
 801070c:	3307      	adds	r3, #7
 801070e:	f023 0307 	bic.w	r3, r3, #7
 8010712:	3308      	adds	r3, #8
 8010714:	9303      	str	r3, [sp, #12]
 8010716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010718:	4433      	add	r3, r6
 801071a:	9309      	str	r3, [sp, #36]	; 0x24
 801071c:	e767      	b.n	80105ee <_svfiprintf_r+0x4e>
 801071e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010722:	460c      	mov	r4, r1
 8010724:	2001      	movs	r0, #1
 8010726:	e7a5      	b.n	8010674 <_svfiprintf_r+0xd4>
 8010728:	2300      	movs	r3, #0
 801072a:	3401      	adds	r4, #1
 801072c:	9305      	str	r3, [sp, #20]
 801072e:	4619      	mov	r1, r3
 8010730:	f04f 0c0a 	mov.w	ip, #10
 8010734:	4620      	mov	r0, r4
 8010736:	f810 2b01 	ldrb.w	r2, [r0], #1
 801073a:	3a30      	subs	r2, #48	; 0x30
 801073c:	2a09      	cmp	r2, #9
 801073e:	d903      	bls.n	8010748 <_svfiprintf_r+0x1a8>
 8010740:	2b00      	cmp	r3, #0
 8010742:	d0c5      	beq.n	80106d0 <_svfiprintf_r+0x130>
 8010744:	9105      	str	r1, [sp, #20]
 8010746:	e7c3      	b.n	80106d0 <_svfiprintf_r+0x130>
 8010748:	fb0c 2101 	mla	r1, ip, r1, r2
 801074c:	4604      	mov	r4, r0
 801074e:	2301      	movs	r3, #1
 8010750:	e7f0      	b.n	8010734 <_svfiprintf_r+0x194>
 8010752:	ab03      	add	r3, sp, #12
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	462a      	mov	r2, r5
 8010758:	4b0f      	ldr	r3, [pc, #60]	; (8010798 <_svfiprintf_r+0x1f8>)
 801075a:	a904      	add	r1, sp, #16
 801075c:	4638      	mov	r0, r7
 801075e:	f3af 8000 	nop.w
 8010762:	1c42      	adds	r2, r0, #1
 8010764:	4606      	mov	r6, r0
 8010766:	d1d6      	bne.n	8010716 <_svfiprintf_r+0x176>
 8010768:	89ab      	ldrh	r3, [r5, #12]
 801076a:	065b      	lsls	r3, r3, #25
 801076c:	f53f af2c 	bmi.w	80105c8 <_svfiprintf_r+0x28>
 8010770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010772:	b01d      	add	sp, #116	; 0x74
 8010774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010778:	ab03      	add	r3, sp, #12
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	462a      	mov	r2, r5
 801077e:	4b06      	ldr	r3, [pc, #24]	; (8010798 <_svfiprintf_r+0x1f8>)
 8010780:	a904      	add	r1, sp, #16
 8010782:	4638      	mov	r0, r7
 8010784:	f000 f87a 	bl	801087c <_printf_i>
 8010788:	e7eb      	b.n	8010762 <_svfiprintf_r+0x1c2>
 801078a:	bf00      	nop
 801078c:	08010e40 	.word	0x08010e40
 8010790:	08010e4a 	.word	0x08010e4a
 8010794:	00000000 	.word	0x00000000
 8010798:	080104e9 	.word	0x080104e9
 801079c:	08010e46 	.word	0x08010e46

080107a0 <_printf_common>:
 80107a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107a4:	4616      	mov	r6, r2
 80107a6:	4699      	mov	r9, r3
 80107a8:	688a      	ldr	r2, [r1, #8]
 80107aa:	690b      	ldr	r3, [r1, #16]
 80107ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107b0:	4293      	cmp	r3, r2
 80107b2:	bfb8      	it	lt
 80107b4:	4613      	movlt	r3, r2
 80107b6:	6033      	str	r3, [r6, #0]
 80107b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107bc:	4607      	mov	r7, r0
 80107be:	460c      	mov	r4, r1
 80107c0:	b10a      	cbz	r2, 80107c6 <_printf_common+0x26>
 80107c2:	3301      	adds	r3, #1
 80107c4:	6033      	str	r3, [r6, #0]
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	0699      	lsls	r1, r3, #26
 80107ca:	bf42      	ittt	mi
 80107cc:	6833      	ldrmi	r3, [r6, #0]
 80107ce:	3302      	addmi	r3, #2
 80107d0:	6033      	strmi	r3, [r6, #0]
 80107d2:	6825      	ldr	r5, [r4, #0]
 80107d4:	f015 0506 	ands.w	r5, r5, #6
 80107d8:	d106      	bne.n	80107e8 <_printf_common+0x48>
 80107da:	f104 0a19 	add.w	sl, r4, #25
 80107de:	68e3      	ldr	r3, [r4, #12]
 80107e0:	6832      	ldr	r2, [r6, #0]
 80107e2:	1a9b      	subs	r3, r3, r2
 80107e4:	42ab      	cmp	r3, r5
 80107e6:	dc26      	bgt.n	8010836 <_printf_common+0x96>
 80107e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80107ec:	1e13      	subs	r3, r2, #0
 80107ee:	6822      	ldr	r2, [r4, #0]
 80107f0:	bf18      	it	ne
 80107f2:	2301      	movne	r3, #1
 80107f4:	0692      	lsls	r2, r2, #26
 80107f6:	d42b      	bmi.n	8010850 <_printf_common+0xb0>
 80107f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107fc:	4649      	mov	r1, r9
 80107fe:	4638      	mov	r0, r7
 8010800:	47c0      	blx	r8
 8010802:	3001      	adds	r0, #1
 8010804:	d01e      	beq.n	8010844 <_printf_common+0xa4>
 8010806:	6823      	ldr	r3, [r4, #0]
 8010808:	68e5      	ldr	r5, [r4, #12]
 801080a:	6832      	ldr	r2, [r6, #0]
 801080c:	f003 0306 	and.w	r3, r3, #6
 8010810:	2b04      	cmp	r3, #4
 8010812:	bf08      	it	eq
 8010814:	1aad      	subeq	r5, r5, r2
 8010816:	68a3      	ldr	r3, [r4, #8]
 8010818:	6922      	ldr	r2, [r4, #16]
 801081a:	bf0c      	ite	eq
 801081c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010820:	2500      	movne	r5, #0
 8010822:	4293      	cmp	r3, r2
 8010824:	bfc4      	itt	gt
 8010826:	1a9b      	subgt	r3, r3, r2
 8010828:	18ed      	addgt	r5, r5, r3
 801082a:	2600      	movs	r6, #0
 801082c:	341a      	adds	r4, #26
 801082e:	42b5      	cmp	r5, r6
 8010830:	d11a      	bne.n	8010868 <_printf_common+0xc8>
 8010832:	2000      	movs	r0, #0
 8010834:	e008      	b.n	8010848 <_printf_common+0xa8>
 8010836:	2301      	movs	r3, #1
 8010838:	4652      	mov	r2, sl
 801083a:	4649      	mov	r1, r9
 801083c:	4638      	mov	r0, r7
 801083e:	47c0      	blx	r8
 8010840:	3001      	adds	r0, #1
 8010842:	d103      	bne.n	801084c <_printf_common+0xac>
 8010844:	f04f 30ff 	mov.w	r0, #4294967295
 8010848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801084c:	3501      	adds	r5, #1
 801084e:	e7c6      	b.n	80107de <_printf_common+0x3e>
 8010850:	18e1      	adds	r1, r4, r3
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	2030      	movs	r0, #48	; 0x30
 8010856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801085a:	4422      	add	r2, r4
 801085c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010864:	3302      	adds	r3, #2
 8010866:	e7c7      	b.n	80107f8 <_printf_common+0x58>
 8010868:	2301      	movs	r3, #1
 801086a:	4622      	mov	r2, r4
 801086c:	4649      	mov	r1, r9
 801086e:	4638      	mov	r0, r7
 8010870:	47c0      	blx	r8
 8010872:	3001      	adds	r0, #1
 8010874:	d0e6      	beq.n	8010844 <_printf_common+0xa4>
 8010876:	3601      	adds	r6, #1
 8010878:	e7d9      	b.n	801082e <_printf_common+0x8e>
	...

0801087c <_printf_i>:
 801087c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010880:	7e0f      	ldrb	r7, [r1, #24]
 8010882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010884:	2f78      	cmp	r7, #120	; 0x78
 8010886:	4691      	mov	r9, r2
 8010888:	4680      	mov	r8, r0
 801088a:	460c      	mov	r4, r1
 801088c:	469a      	mov	sl, r3
 801088e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010892:	d807      	bhi.n	80108a4 <_printf_i+0x28>
 8010894:	2f62      	cmp	r7, #98	; 0x62
 8010896:	d80a      	bhi.n	80108ae <_printf_i+0x32>
 8010898:	2f00      	cmp	r7, #0
 801089a:	f000 80d8 	beq.w	8010a4e <_printf_i+0x1d2>
 801089e:	2f58      	cmp	r7, #88	; 0x58
 80108a0:	f000 80a3 	beq.w	80109ea <_printf_i+0x16e>
 80108a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108ac:	e03a      	b.n	8010924 <_printf_i+0xa8>
 80108ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108b2:	2b15      	cmp	r3, #21
 80108b4:	d8f6      	bhi.n	80108a4 <_printf_i+0x28>
 80108b6:	a101      	add	r1, pc, #4	; (adr r1, 80108bc <_printf_i+0x40>)
 80108b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108bc:	08010915 	.word	0x08010915
 80108c0:	08010929 	.word	0x08010929
 80108c4:	080108a5 	.word	0x080108a5
 80108c8:	080108a5 	.word	0x080108a5
 80108cc:	080108a5 	.word	0x080108a5
 80108d0:	080108a5 	.word	0x080108a5
 80108d4:	08010929 	.word	0x08010929
 80108d8:	080108a5 	.word	0x080108a5
 80108dc:	080108a5 	.word	0x080108a5
 80108e0:	080108a5 	.word	0x080108a5
 80108e4:	080108a5 	.word	0x080108a5
 80108e8:	08010a35 	.word	0x08010a35
 80108ec:	08010959 	.word	0x08010959
 80108f0:	08010a17 	.word	0x08010a17
 80108f4:	080108a5 	.word	0x080108a5
 80108f8:	080108a5 	.word	0x080108a5
 80108fc:	08010a57 	.word	0x08010a57
 8010900:	080108a5 	.word	0x080108a5
 8010904:	08010959 	.word	0x08010959
 8010908:	080108a5 	.word	0x080108a5
 801090c:	080108a5 	.word	0x080108a5
 8010910:	08010a1f 	.word	0x08010a1f
 8010914:	682b      	ldr	r3, [r5, #0]
 8010916:	1d1a      	adds	r2, r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	602a      	str	r2, [r5, #0]
 801091c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010924:	2301      	movs	r3, #1
 8010926:	e0a3      	b.n	8010a70 <_printf_i+0x1f4>
 8010928:	6820      	ldr	r0, [r4, #0]
 801092a:	6829      	ldr	r1, [r5, #0]
 801092c:	0606      	lsls	r6, r0, #24
 801092e:	f101 0304 	add.w	r3, r1, #4
 8010932:	d50a      	bpl.n	801094a <_printf_i+0xce>
 8010934:	680e      	ldr	r6, [r1, #0]
 8010936:	602b      	str	r3, [r5, #0]
 8010938:	2e00      	cmp	r6, #0
 801093a:	da03      	bge.n	8010944 <_printf_i+0xc8>
 801093c:	232d      	movs	r3, #45	; 0x2d
 801093e:	4276      	negs	r6, r6
 8010940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010944:	485e      	ldr	r0, [pc, #376]	; (8010ac0 <_printf_i+0x244>)
 8010946:	230a      	movs	r3, #10
 8010948:	e019      	b.n	801097e <_printf_i+0x102>
 801094a:	680e      	ldr	r6, [r1, #0]
 801094c:	602b      	str	r3, [r5, #0]
 801094e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010952:	bf18      	it	ne
 8010954:	b236      	sxthne	r6, r6
 8010956:	e7ef      	b.n	8010938 <_printf_i+0xbc>
 8010958:	682b      	ldr	r3, [r5, #0]
 801095a:	6820      	ldr	r0, [r4, #0]
 801095c:	1d19      	adds	r1, r3, #4
 801095e:	6029      	str	r1, [r5, #0]
 8010960:	0601      	lsls	r1, r0, #24
 8010962:	d501      	bpl.n	8010968 <_printf_i+0xec>
 8010964:	681e      	ldr	r6, [r3, #0]
 8010966:	e002      	b.n	801096e <_printf_i+0xf2>
 8010968:	0646      	lsls	r6, r0, #25
 801096a:	d5fb      	bpl.n	8010964 <_printf_i+0xe8>
 801096c:	881e      	ldrh	r6, [r3, #0]
 801096e:	4854      	ldr	r0, [pc, #336]	; (8010ac0 <_printf_i+0x244>)
 8010970:	2f6f      	cmp	r7, #111	; 0x6f
 8010972:	bf0c      	ite	eq
 8010974:	2308      	moveq	r3, #8
 8010976:	230a      	movne	r3, #10
 8010978:	2100      	movs	r1, #0
 801097a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801097e:	6865      	ldr	r5, [r4, #4]
 8010980:	60a5      	str	r5, [r4, #8]
 8010982:	2d00      	cmp	r5, #0
 8010984:	bfa2      	ittt	ge
 8010986:	6821      	ldrge	r1, [r4, #0]
 8010988:	f021 0104 	bicge.w	r1, r1, #4
 801098c:	6021      	strge	r1, [r4, #0]
 801098e:	b90e      	cbnz	r6, 8010994 <_printf_i+0x118>
 8010990:	2d00      	cmp	r5, #0
 8010992:	d04d      	beq.n	8010a30 <_printf_i+0x1b4>
 8010994:	4615      	mov	r5, r2
 8010996:	fbb6 f1f3 	udiv	r1, r6, r3
 801099a:	fb03 6711 	mls	r7, r3, r1, r6
 801099e:	5dc7      	ldrb	r7, [r0, r7]
 80109a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80109a4:	4637      	mov	r7, r6
 80109a6:	42bb      	cmp	r3, r7
 80109a8:	460e      	mov	r6, r1
 80109aa:	d9f4      	bls.n	8010996 <_printf_i+0x11a>
 80109ac:	2b08      	cmp	r3, #8
 80109ae:	d10b      	bne.n	80109c8 <_printf_i+0x14c>
 80109b0:	6823      	ldr	r3, [r4, #0]
 80109b2:	07de      	lsls	r6, r3, #31
 80109b4:	d508      	bpl.n	80109c8 <_printf_i+0x14c>
 80109b6:	6923      	ldr	r3, [r4, #16]
 80109b8:	6861      	ldr	r1, [r4, #4]
 80109ba:	4299      	cmp	r1, r3
 80109bc:	bfde      	ittt	le
 80109be:	2330      	movle	r3, #48	; 0x30
 80109c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109c8:	1b52      	subs	r2, r2, r5
 80109ca:	6122      	str	r2, [r4, #16]
 80109cc:	f8cd a000 	str.w	sl, [sp]
 80109d0:	464b      	mov	r3, r9
 80109d2:	aa03      	add	r2, sp, #12
 80109d4:	4621      	mov	r1, r4
 80109d6:	4640      	mov	r0, r8
 80109d8:	f7ff fee2 	bl	80107a0 <_printf_common>
 80109dc:	3001      	adds	r0, #1
 80109de:	d14c      	bne.n	8010a7a <_printf_i+0x1fe>
 80109e0:	f04f 30ff 	mov.w	r0, #4294967295
 80109e4:	b004      	add	sp, #16
 80109e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ea:	4835      	ldr	r0, [pc, #212]	; (8010ac0 <_printf_i+0x244>)
 80109ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80109f0:	6829      	ldr	r1, [r5, #0]
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80109f8:	6029      	str	r1, [r5, #0]
 80109fa:	061d      	lsls	r5, r3, #24
 80109fc:	d514      	bpl.n	8010a28 <_printf_i+0x1ac>
 80109fe:	07df      	lsls	r7, r3, #31
 8010a00:	bf44      	itt	mi
 8010a02:	f043 0320 	orrmi.w	r3, r3, #32
 8010a06:	6023      	strmi	r3, [r4, #0]
 8010a08:	b91e      	cbnz	r6, 8010a12 <_printf_i+0x196>
 8010a0a:	6823      	ldr	r3, [r4, #0]
 8010a0c:	f023 0320 	bic.w	r3, r3, #32
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	2310      	movs	r3, #16
 8010a14:	e7b0      	b.n	8010978 <_printf_i+0xfc>
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	f043 0320 	orr.w	r3, r3, #32
 8010a1c:	6023      	str	r3, [r4, #0]
 8010a1e:	2378      	movs	r3, #120	; 0x78
 8010a20:	4828      	ldr	r0, [pc, #160]	; (8010ac4 <_printf_i+0x248>)
 8010a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a26:	e7e3      	b.n	80109f0 <_printf_i+0x174>
 8010a28:	0659      	lsls	r1, r3, #25
 8010a2a:	bf48      	it	mi
 8010a2c:	b2b6      	uxthmi	r6, r6
 8010a2e:	e7e6      	b.n	80109fe <_printf_i+0x182>
 8010a30:	4615      	mov	r5, r2
 8010a32:	e7bb      	b.n	80109ac <_printf_i+0x130>
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	6826      	ldr	r6, [r4, #0]
 8010a38:	6961      	ldr	r1, [r4, #20]
 8010a3a:	1d18      	adds	r0, r3, #4
 8010a3c:	6028      	str	r0, [r5, #0]
 8010a3e:	0635      	lsls	r5, r6, #24
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	d501      	bpl.n	8010a48 <_printf_i+0x1cc>
 8010a44:	6019      	str	r1, [r3, #0]
 8010a46:	e002      	b.n	8010a4e <_printf_i+0x1d2>
 8010a48:	0670      	lsls	r0, r6, #25
 8010a4a:	d5fb      	bpl.n	8010a44 <_printf_i+0x1c8>
 8010a4c:	8019      	strh	r1, [r3, #0]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	6123      	str	r3, [r4, #16]
 8010a52:	4615      	mov	r5, r2
 8010a54:	e7ba      	b.n	80109cc <_printf_i+0x150>
 8010a56:	682b      	ldr	r3, [r5, #0]
 8010a58:	1d1a      	adds	r2, r3, #4
 8010a5a:	602a      	str	r2, [r5, #0]
 8010a5c:	681d      	ldr	r5, [r3, #0]
 8010a5e:	6862      	ldr	r2, [r4, #4]
 8010a60:	2100      	movs	r1, #0
 8010a62:	4628      	mov	r0, r5
 8010a64:	f7ef fbdc 	bl	8000220 <memchr>
 8010a68:	b108      	cbz	r0, 8010a6e <_printf_i+0x1f2>
 8010a6a:	1b40      	subs	r0, r0, r5
 8010a6c:	6060      	str	r0, [r4, #4]
 8010a6e:	6863      	ldr	r3, [r4, #4]
 8010a70:	6123      	str	r3, [r4, #16]
 8010a72:	2300      	movs	r3, #0
 8010a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a78:	e7a8      	b.n	80109cc <_printf_i+0x150>
 8010a7a:	6923      	ldr	r3, [r4, #16]
 8010a7c:	462a      	mov	r2, r5
 8010a7e:	4649      	mov	r1, r9
 8010a80:	4640      	mov	r0, r8
 8010a82:	47d0      	blx	sl
 8010a84:	3001      	adds	r0, #1
 8010a86:	d0ab      	beq.n	80109e0 <_printf_i+0x164>
 8010a88:	6823      	ldr	r3, [r4, #0]
 8010a8a:	079b      	lsls	r3, r3, #30
 8010a8c:	d413      	bmi.n	8010ab6 <_printf_i+0x23a>
 8010a8e:	68e0      	ldr	r0, [r4, #12]
 8010a90:	9b03      	ldr	r3, [sp, #12]
 8010a92:	4298      	cmp	r0, r3
 8010a94:	bfb8      	it	lt
 8010a96:	4618      	movlt	r0, r3
 8010a98:	e7a4      	b.n	80109e4 <_printf_i+0x168>
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	4632      	mov	r2, r6
 8010a9e:	4649      	mov	r1, r9
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	47d0      	blx	sl
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	d09b      	beq.n	80109e0 <_printf_i+0x164>
 8010aa8:	3501      	adds	r5, #1
 8010aaa:	68e3      	ldr	r3, [r4, #12]
 8010aac:	9903      	ldr	r1, [sp, #12]
 8010aae:	1a5b      	subs	r3, r3, r1
 8010ab0:	42ab      	cmp	r3, r5
 8010ab2:	dcf2      	bgt.n	8010a9a <_printf_i+0x21e>
 8010ab4:	e7eb      	b.n	8010a8e <_printf_i+0x212>
 8010ab6:	2500      	movs	r5, #0
 8010ab8:	f104 0619 	add.w	r6, r4, #25
 8010abc:	e7f5      	b.n	8010aaa <_printf_i+0x22e>
 8010abe:	bf00      	nop
 8010ac0:	08010e51 	.word	0x08010e51
 8010ac4:	08010e62 	.word	0x08010e62

08010ac8 <__retarget_lock_acquire_recursive>:
 8010ac8:	4770      	bx	lr

08010aca <__retarget_lock_release_recursive>:
 8010aca:	4770      	bx	lr

08010acc <memcpy>:
 8010acc:	440a      	add	r2, r1
 8010ace:	4291      	cmp	r1, r2
 8010ad0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ad4:	d100      	bne.n	8010ad8 <memcpy+0xc>
 8010ad6:	4770      	bx	lr
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ae2:	4291      	cmp	r1, r2
 8010ae4:	d1f9      	bne.n	8010ada <memcpy+0xe>
 8010ae6:	bd10      	pop	{r4, pc}

08010ae8 <memmove>:
 8010ae8:	4288      	cmp	r0, r1
 8010aea:	b510      	push	{r4, lr}
 8010aec:	eb01 0402 	add.w	r4, r1, r2
 8010af0:	d902      	bls.n	8010af8 <memmove+0x10>
 8010af2:	4284      	cmp	r4, r0
 8010af4:	4623      	mov	r3, r4
 8010af6:	d807      	bhi.n	8010b08 <memmove+0x20>
 8010af8:	1e43      	subs	r3, r0, #1
 8010afa:	42a1      	cmp	r1, r4
 8010afc:	d008      	beq.n	8010b10 <memmove+0x28>
 8010afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b06:	e7f8      	b.n	8010afa <memmove+0x12>
 8010b08:	4402      	add	r2, r0
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	428a      	cmp	r2, r1
 8010b0e:	d100      	bne.n	8010b12 <memmove+0x2a>
 8010b10:	bd10      	pop	{r4, pc}
 8010b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b1a:	e7f7      	b.n	8010b0c <memmove+0x24>

08010b1c <_realloc_r>:
 8010b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b20:	4680      	mov	r8, r0
 8010b22:	4614      	mov	r4, r2
 8010b24:	460e      	mov	r6, r1
 8010b26:	b921      	cbnz	r1, 8010b32 <_realloc_r+0x16>
 8010b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	f7ff bbd3 	b.w	80102d8 <_malloc_r>
 8010b32:	b92a      	cbnz	r2, 8010b40 <_realloc_r+0x24>
 8010b34:	f7ff fb64 	bl	8010200 <_free_r>
 8010b38:	4625      	mov	r5, r4
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b40:	f000 f81b 	bl	8010b7a <_malloc_usable_size_r>
 8010b44:	4284      	cmp	r4, r0
 8010b46:	4607      	mov	r7, r0
 8010b48:	d802      	bhi.n	8010b50 <_realloc_r+0x34>
 8010b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b4e:	d812      	bhi.n	8010b76 <_realloc_r+0x5a>
 8010b50:	4621      	mov	r1, r4
 8010b52:	4640      	mov	r0, r8
 8010b54:	f7ff fbc0 	bl	80102d8 <_malloc_r>
 8010b58:	4605      	mov	r5, r0
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d0ed      	beq.n	8010b3a <_realloc_r+0x1e>
 8010b5e:	42bc      	cmp	r4, r7
 8010b60:	4622      	mov	r2, r4
 8010b62:	4631      	mov	r1, r6
 8010b64:	bf28      	it	cs
 8010b66:	463a      	movcs	r2, r7
 8010b68:	f7ff ffb0 	bl	8010acc <memcpy>
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	4640      	mov	r0, r8
 8010b70:	f7ff fb46 	bl	8010200 <_free_r>
 8010b74:	e7e1      	b.n	8010b3a <_realloc_r+0x1e>
 8010b76:	4635      	mov	r5, r6
 8010b78:	e7df      	b.n	8010b3a <_realloc_r+0x1e>

08010b7a <_malloc_usable_size_r>:
 8010b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b7e:	1f18      	subs	r0, r3, #4
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	bfbc      	itt	lt
 8010b84:	580b      	ldrlt	r3, [r1, r0]
 8010b86:	18c0      	addlt	r0, r0, r3
 8010b88:	4770      	bx	lr
	...

08010b8c <_init>:
 8010b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8e:	bf00      	nop
 8010b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b92:	bc08      	pop	{r3}
 8010b94:	469e      	mov	lr, r3
 8010b96:	4770      	bx	lr

08010b98 <_fini>:
 8010b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9a:	bf00      	nop
 8010b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b9e:	bc08      	pop	{r3}
 8010ba0:	469e      	mov	lr, r3
 8010ba2:	4770      	bx	lr
