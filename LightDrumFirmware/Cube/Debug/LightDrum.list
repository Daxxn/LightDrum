
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800aed0  0800aed0  0001aed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af40  0800af40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800af40  0800af40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af48  0800af48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800af58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000070  0800afc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  0800afc8  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dec3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000557b  00000000  00000000  0004df63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  000534e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f90  00000000  00000000  00055650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b1cd  00000000  00000000  000575e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac19  00000000  00000000  000827ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebcf6  00000000  00000000  000ad3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001990bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009344  00000000  00000000  0019910c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800aeb8 	.word	0x0800aeb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	0800aeb8 	.word	0x0800aeb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN6ButtonC1Ev>:
 */

#include "Button.h"


Button::Button()
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <_ZN6ButtonC1Ev+0x1c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
{
}
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	0800aed8 	.word	0x0800aed8

08000528 <_ZN6ButtonD1Ev>:

Button::~Button()
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <_ZN6ButtonD1Ev+0x1c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
{
}
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	0800aed8 	.word	0x0800aed8

08000548 <_ZN6ButtonD0Ev>:
Button::~Button()
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
}
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffe9 	bl	8000528 <_ZN6ButtonD1Ev>
 8000556:	2110      	movs	r1, #16
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f00a faff 	bl	800ab5c <_ZdlPvj>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f004 ff7f 	bl	80054a8 <HAL_GPIO_WritePin>
	};
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef *port, uint16_t pin, GPIO_Default_State defaultState)
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	460b      	mov	r3, r1
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4613      	mov	r3, r2
 80005c8:	717b      	strb	r3, [r7, #5]
	{
		this->port = port;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	68ba      	ldr	r2, [r7, #8]
 80005ce:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	88fa      	ldrh	r2, [r7, #6]
 80005d4:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	797a      	ldrb	r2, [r7, #5]
 80005da:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, (GPIO_PinState)defaultState);
 80005dc:	797a      	ldrb	r2, [r7, #5]
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	4619      	mov	r1, r3
 80005e2:	68b8      	ldr	r0, [r7, #8]
 80005e4:	f004 ff60 	bl	80054a8 <HAL_GPIO_WritePin>
	}
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <_ZN12StripCurrentC1Ev>:
 *
 */
class StripCurrent
{
public:
	StripCurrent() {};
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <_ZN12StripCurrentC1Ev+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	0800af18 	.word	0x0800af18

08000614 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <_ZN9ShiftRegsC1Ev+0x2c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3308      	adds	r3, #8
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff9e 	bl	8000568 <_ZN3PinC1Ev>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3310      	adds	r3, #16
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff99 	bl	8000568 <_ZN3PinC1Ev>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	0800af08 	.word	0x0800af08

08000644 <_ZN15PCA9634SettingsC1Ev>:
	uint8_t green = 0;
	uint8_t blue = 0;
	bool en = 1;
};

struct PCA9634Settings
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	719a      	strb	r2, [r3, #6]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	71da      	strb	r2, [r3, #7]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	721a      	strb	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	725a      	strb	r2, [r3, #9]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <_ZN7PCA9634C1Ev>:
 *
 */
class PCA9634
{
public:
	PCA9634() {};
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <_ZN7PCA9634C1Ev+0x34>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	227f      	movs	r2, #127	; 0x7f
 8000686:	751a      	strb	r2, [r3, #20]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3315      	adds	r3, #21
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffd9 	bl	8000644 <_ZN15PCA9634SettingsC1Ev>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3320      	adds	r3, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff66 	bl	8000568 <_ZN3PinC1Ev>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	0800aef8 	.word	0x0800aef8

080006ac <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	3308      	adds	r3, #8
 80006c4:	3208      	adds	r2, #8
 80006c6:	6811      	ldr	r1, [r2, #0]
 80006c8:	6019      	str	r1, [r3, #0]
 80006ca:	8891      	ldrh	r1, [r2, #4]
 80006cc:	7992      	ldrb	r2, [r2, #6]
 80006ce:	8099      	strh	r1, [r3, #4]
 80006d0:	719a      	strb	r2, [r3, #6]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	3310      	adds	r3, #16
 80006d8:	3210      	adds	r2, #16
 80006da:	6811      	ldr	r1, [r2, #0]
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	8891      	ldrh	r1, [r2, #4]
 80006e0:	7992      	ldrb	r2, [r2, #6]
 80006e2:	8099      	strh	r1, [r3, #4]
 80006e4:	719a      	strb	r2, [r3, #6]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	8b1a      	ldrh	r2, [r3, #24]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	831a      	strh	r2, [r3, #24]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	61da      	str	r2, [r3, #28]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	6a1a      	ldr	r2, [r3, #32]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	621a      	str	r2, [r3, #32]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZN12StripCurrentaSERKS_>:
class StripCurrent
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	68da      	ldr	r2, [r3, #12]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	8a1a      	ldrh	r2, [r3, #16]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	821a      	strh	r2, [r3, #16]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_ZN7PCA9634aSERKS_>:
class PCA9634
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	791a      	ldrb	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	711a      	strb	r2, [r3, #4]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	691a      	ldr	r2, [r3, #16]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	7d1a      	ldrb	r2, [r3, #20]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	751a      	strb	r2, [r3, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	3315      	adds	r3, #21
 800077c:	3215      	adds	r2, #21
 800077e:	6810      	ldr	r0, [r2, #0]
 8000780:	6851      	ldr	r1, [r2, #4]
 8000782:	6018      	str	r0, [r3, #0]
 8000784:	6059      	str	r1, [r3, #4]
 8000786:	8912      	ldrh	r2, [r2, #8]
 8000788:	811a      	strh	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	3320      	adds	r3, #32
 8000790:	3220      	adds	r2, #32
 8000792:	6811      	ldr	r1, [r2, #0]
 8000794:	6019      	str	r1, [r3, #0]
 8000796:	8891      	ldrh	r1, [r2, #4]
 8000798:	7992      	ldrb	r2, [r2, #6]
 800079a:	8099      	strh	r1, [r3, #4]
 800079c:	719a      	strb	r2, [r3, #6]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <Init>:
		TIM_HandleTypeDef    *in_htim8,
		UART_HandleTypeDef   *in_huart1,
		UART_HandleTypeDef   *in_huart2,
		UART_HandleTypeDef   *in_huart3
	)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b0a4      	sub	sp, #144	; 0x90
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	603b      	str	r3, [r7, #0]

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	4966      	ldr	r1, [pc, #408]	; (800095c <Init+0x1b0>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff feda 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007d2:	4962      	ldr	r1, [pc, #392]	; (800095c <Init+0x1b0>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fed2 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin pwmOE = Pin(PWM_OE_GPIO_Port, PWM_OE_Pin, GPIO_Default_State::ACTIVE_LOW);
 80007da:	f107 0010 	add.w	r0, r7, #16
 80007de:	2301      	movs	r3, #1
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	495f      	ldr	r1, [pc, #380]	; (8000960 <Init+0x1b4>)
 80007e4:	f7ff fee6 	bl	80005b4 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	currentADCHandle = in_hadc1;
 80007e8:	4a5e      	ldr	r2, [pc, #376]	; (8000964 <Init+0x1b8>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6013      	str	r3, [r2, #0]
	currentADCMemHandle = in_hdma_adc1;
 80007ee:	4a5e      	ldr	r2, [pc, #376]	; (8000968 <Init+0x1bc>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	6013      	str	r3, [r2, #0]
	stripI2cHandle = in_hfmpi2c1;
 80007f4:	4a5d      	ldr	r2, [pc, #372]	; (800096c <Init+0x1c0>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 80007fa:	4a5d      	ldr	r2, [pc, #372]	; (8000970 <Init+0x1c4>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	6013      	str	r3, [r2, #0]
	i2cHandle = in_hi2c1;
 8000800:	4a5c      	ldr	r2, [pc, #368]	; (8000974 <Init+0x1c8>)
 8000802:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000806:	6013      	str	r3, [r2, #0]
	audioHandle = in_hi2s3;
 8000808:	4a5b      	ldr	r2, [pc, #364]	; (8000978 <Init+0x1cc>)
 800080a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800080e:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = in_hdma_spi3_rx;
 8000810:	4a5a      	ldr	r2, [pc, #360]	; (800097c <Init+0x1d0>)
 8000812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000816:	6013      	str	r3, [r2, #0]
	rtcHandle = in_hrtc;
 8000818:	4a59      	ldr	r2, [pc, #356]	; (8000980 <Init+0x1d4>)
 800081a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800081e:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 8000820:	4a58      	ldr	r2, [pc, #352]	; (8000984 <Init+0x1d8>)
 8000822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000826:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 8000828:	4a57      	ldr	r2, [pc, #348]	; (8000988 <Init+0x1dc>)
 800082a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800082e:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 8000830:	4a56      	ldr	r2, [pc, #344]	; (800098c <Init+0x1e0>)
 8000832:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000836:	6013      	str	r3, [r2, #0]
	pwm2Handle = in_htim2;
 8000838:	4a55      	ldr	r2, [pc, #340]	; (8000990 <Init+0x1e4>)
 800083a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800083e:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8000840:	4a54      	ldr	r2, [pc, #336]	; (8000994 <Init+0x1e8>)
 8000842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000846:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 8000848:	4a53      	ldr	r2, [pc, #332]	; (8000998 <Init+0x1ec>)
 800084a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800084e:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 8000850:	4a52      	ldr	r2, [pc, #328]	; (800099c <Init+0x1f0>)
 8000852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000856:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 8000858:	4a51      	ldr	r2, [pc, #324]	; (80009a0 <Init+0x1f4>)
 800085a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800085e:	6013      	str	r3, [r2, #0]
	adcTimHandle = in_htim8;
 8000860:	4a50      	ldr	r2, [pc, #320]	; (80009a4 <Init+0x1f8>)
 8000862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000866:	6013      	str	r3, [r2, #0]

//	screen.Startup(screenHandle);
	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 8000868:	4b47      	ldr	r3, [pc, #284]	; (8000988 <Init+0x1dc>)
 800086a:	681d      	ldr	r5, [r3, #0]
 800086c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000870:	466a      	mov	r2, sp
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	e893 0003 	ldmia.w	r3, {r0, r1}
 800087a:	e882 0003 	stmia.w	r2, {r0, r1}
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	cb0c      	ldmia	r3, {r2, r3}
 8000884:	4629      	mov	r1, r5
 8000886:	4620      	mov	r0, r4
 8000888:	f000 fa2c 	bl	8000ce4 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 800088c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000890:	4619      	mov	r1, r3
 8000892:	4845      	ldr	r0, [pc, #276]	; (80009a8 <Init+0x1fc>)
 8000894:	f7ff ff0a 	bl	80006ac <_ZN9ShiftRegsaSERKS_>
 8000898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fa63 	bl	8000d68 <_ZN9ShiftRegsD1Ev>
	stripCurr = StripCurrent(currentADCHandle, adcTimHandle);
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <Init+0x1b8>)
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <Init+0x1f8>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fb4c 	bl	8000f4c <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>
 80008b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b8:	4619      	mov	r1, r3
 80008ba:	483c      	ldr	r0, [pc, #240]	; (80009ac <Init+0x200>)
 80008bc:	f7ff ff26 	bl	800070c <_ZN12StripCurrentaSERKS_>
 80008c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fb59 	bl	8000f7c <_ZN12StripCurrentD1Ev>
	ledA = PCA9634(stripI2cHandle, pwmOE);
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <Init+0x1c0>)
 80008cc:	6819      	ldr	r1, [r3, #0]
 80008ce:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	cb0c      	ldmia	r3, {r2, r3}
 80008d8:	f000 f9a2 	bl	8000c20 <_ZN7PCA9634C1EP22__FMPI2C_HandleTypeDef3Pin>
 80008dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008e0:	4619      	mov	r1, r3
 80008e2:	4833      	ldr	r0, [pc, #204]	; (80009b0 <Init+0x204>)
 80008e4:	f7ff ff2e 	bl	8000744 <_ZN7PCA9634aSERKS_>
 80008e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9d1 	bl	8000c94 <_ZN7PCA9634D1Ev>

	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_1);
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <Init+0x1e0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f008 fa17 	bl	8008d2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2Handle, TIM_CHANNEL_1);
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <Init+0x1e4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f008 fa11 	bl	8008d2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2Handle, TIM_CHANNEL_2);
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <Init+0x1e4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2104      	movs	r1, #4
 8000910:	4618      	mov	r0, r3
 8000912:	f008 fa0b 	bl	8008d2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_1);
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <Init+0x1e8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f008 fa05 	bl	8008d2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_4);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <Init+0x1e8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	210c      	movs	r1, #12
 8000928:	4618      	mov	r0, r3
 800092a:	f008 f9ff 	bl	8008d2c <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <Init+0x1b0>)
 8000936:	f004 fdb7 	bl	80054a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <Init+0x1b0>)
 8000942:	f004 fdb1 	bl	80054a8 <HAL_GPIO_WritePin>

	stripCurr.Init();
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <Init+0x200>)
 8000948:	f000 fb40 	bl	8000fcc <_ZN12StripCurrent4InitEv>

	shiftReg.Init();
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <Init+0x1fc>)
 800094e:	f000 fa33 	bl	8000db8 <_ZN9ShiftRegs4InitEv>

	return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3788      	adds	r7, #136	; 0x88
 8000958:	46bd      	mov	sp, r7
 800095a:	bdb0      	pop	{r4, r5, r7, pc}
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020800 	.word	0x40020800
 8000964:	2000008c 	.word	0x2000008c
 8000968:	20000090 	.word	0x20000090
 800096c:	20000094 	.word	0x20000094
 8000970:	20000098 	.word	0x20000098
 8000974:	2000009c 	.word	0x2000009c
 8000978:	200000a0 	.word	0x200000a0
 800097c:	200000a4 	.word	0x200000a4
 8000980:	200000a8 	.word	0x200000a8
 8000984:	200000ac 	.word	0x200000ac
 8000988:	200000b0 	.word	0x200000b0
 800098c:	200000b4 	.word	0x200000b4
 8000990:	200000b8 	.word	0x200000b8
 8000994:	200000bc 	.word	0x200000bc
 8000998:	200000c4 	.word	0x200000c4
 800099c:	200000c8 	.word	0x200000c8
 80009a0:	200000cc 	.word	0x200000cc
 80009a4:	200000c0 	.word	0x200000c0
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	2000012c 	.word	0x2000012c
 80009b0:	20000140 	.word	0x20000140

080009b4 <InitTest>:

void InitTest()
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	shiftReg.IndicatorTest();
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <InitTest+0x10>)
 80009ba:	f000 fa0f 	bl	8000ddc <_ZN9ShiftRegs13IndicatorTestEv>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000d0 	.word	0x200000d0

080009c8 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, 0);
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <Main+0x30>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 80009d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009da:	f002 fa83 	bl	8002ee4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, UINT32_MAX / 2);
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <Main+0x30>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 80009ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ee:	f002 fa79 	bl	8002ee4 <HAL_Delay>
//		Screen Nav Testing

//
//	ReadCurrent();
//	shiftReg.Update();
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000b8 	.word	0x200000b8

080009fc <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_UP_IND);
 8000a00:	2103      	movs	r1, #3
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <MenuUpInterruptCallback+0x10>)
 8000a04:	f000 fa3d 	bl	8000e82 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000d0 	.word	0x200000d0

08000a10 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_DOWN_IND);
 8000a14:	2102      	movs	r1, #2
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <MenuDownInterruptCallback+0x10>)
 8000a18:	f000 fa33 	bl	8000e82 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000d0 	.word	0x200000d0

08000a24 <MenuRightInterruptCallback>:
//void MenuLeftInterruptCallback()
//{
//
//}
void MenuRightInterruptCallback()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_RIGHT_IND);
 8000a28:	2105      	movs	r1, #5
 8000a2a:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MenuRightInterruptCallback+0x10>)
 8000a2c:	f000 fa29 	bl	8000e82 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000d0 	.word	0x200000d0

08000a38 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <MenuActInterruptCallback+0x10>)
 8000a40:	f000 fa1f 	bl	8000e82 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000d0 	.word	0x200000d0

08000a4c <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	relayState = relayState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MenuBackInterruptCallback+0x38>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MenuBackInterruptCallback+0x38>)
 8000a62:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin, relayState);
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MenuBackInterruptCallback+0x38>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MenuBackInterruptCallback+0x3c>)
 8000a6e:	f004 fd1b 	bl	80054a8 <HAL_GPIO_WritePin>
	shiftReg.SetValue((uint8_t)relayState, MENU_BACK_IND);
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <MenuBackInterruptCallback+0x38>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2201      	movs	r2, #1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MenuBackInterruptCallback+0x40>)
 8000a7c:	f000 f9d4 	bl	8000e28 <_ZN9ShiftRegs8SetValueEhj>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000168 	.word	0x20000168
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	200000d0 	.word	0x200000d0

08000a90 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_Z41__static_initialization_and_destruction_0ii>:
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d116      	bne.n	8000aea <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d111      	bne.n	8000aea <_Z41__static_initialization_and_destruction_0ii+0x3e>
ShiftRegs shiftReg;
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000ac8:	f7ff fda4 	bl	8000614 <_ZN9ShiftRegsC1Ev>
Nextion screen = Nextion();
 8000acc:	4817      	ldr	r0, [pc, #92]	; (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000ace:	f000 f847 	bl	8000b60 <_ZN7NextionC1Ev>
Button menuUp = Button();
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000ad4:	f7ff fd18 	bl	8000508 <_ZN6ButtonC1Ev>
Button menuDown = Button();
 8000ad8:	4816      	ldr	r0, [pc, #88]	; (8000b34 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000ada:	f7ff fd15 	bl	8000508 <_ZN6ButtonC1Ev>
StripCurrent stripCurr;
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000ae0:	f7ff fd88 	bl	80005f4 <_ZN12StripCurrentC1Ev>
PCA9634 ledA;
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000ae6:	f7ff fdc5 	bl	8000674 <_ZN7PCA9634C1Ev>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d116      	bne.n	8000b1e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d111      	bne.n	8000b1e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000afc:	f000 f8ca 	bl	8000c94 <_ZN7PCA9634D1Ev>
StripCurrent stripCurr;
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000b02:	f000 fa3b 	bl	8000f7c <_ZN12StripCurrentD1Ev>
Button menuDown = Button();
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000b08:	f7ff fd0e 	bl	8000528 <_ZN6ButtonD1Ev>
Button menuUp = Button();
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000b0e:	f7ff fd0b 	bl	8000528 <_ZN6ButtonD1Ev>
Nextion screen = Nextion();
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000b14:	f000 f84a 	bl	8000bac <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000b1a:	f000 f925 	bl	8000d68 <_ZN9ShiftRegsD1Ev>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000d0 	.word	0x200000d0
 8000b2c:	200000f4 	.word	0x200000f4
 8000b30:	2000010c 	.word	0x2000010c
 8000b34:	2000011c 	.word	0x2000011c
 8000b38:	2000012c 	.word	0x2000012c
 8000b3c:	20000140 	.word	0x20000140

08000b40 <_GLOBAL__sub_I_currentADCHandle>:
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff ffaf 	bl	8000aac <_Z41__static_initialization_and_destruction_0ii>
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_GLOBAL__sub_D_currentADCHandle>:
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ffa7 	bl	8000aac <_Z41__static_initialization_and_destruction_0ii>
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <_ZN7NextionC1Ev+0x48>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8000b6e:	2010      	movs	r0, #16
 8000b70:	f009 fff8 	bl	800ab64 <_Znaj>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8000b7c:	2008      	movs	r0, #8
 8000b7e:	f009 fff1 	bl	800ab64 <_Znaj>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 8000b8a:	2010      	movs	r0, #16
 8000b8c:	f009 ffea 	bl	800ab64 <_Znaj>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	611a      	str	r2, [r3, #16]
	this->index = 0;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	719a      	strb	r2, [r3, #6]
}
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800aee8 	.word	0x0800aee8

08000bac <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <_ZN7NextionD1Ev+0x50>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
{
	delete[] cmdBuffer;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <_ZN7NextionD1Ev+0x20>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 ffca 	bl	800ab60 <_ZdaPv>
	delete[] recBuffer;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d004      	beq.n	8000bde <_ZN7NextionD1Ev+0x32>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f009 ffc1 	bl	800ab60 <_ZdaPv>
	delete[] buffer;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <_ZN7NextionD1Ev+0x44>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f009 ffb8 	bl	800ab60 <_ZdaPv>
}
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0800aee8 	.word	0x0800aee8

08000c00 <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
}
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ffcf 	bl	8000bac <_ZN7NextionD1Ev>
 8000c0e:	2118      	movs	r1, #24
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f009 ffa3 	bl	800ab5c <_ZdlPvj>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZN7PCA9634C1EP22__FMPI2C_HandleTypeDef3Pin>:
	return result;
}

/* PCA9634 Class Methods -----------------------------------------------------*/

PCA9634::PCA9634(FMPI2C_HandleTypeDef *i2cBus, Pin oePin)
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4639      	mov	r1, r7
 8000c2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <_ZN7PCA9634C1EP22__FMPI2C_HandleTypeDef3Pin+0x70>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	227f      	movs	r2, #127	; 0x7f
 8000c3a:	751a      	strb	r2, [r3, #20]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3315      	adds	r3, #21
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fcff 	bl	8000644 <_ZN15PCA9634SettingsC1Ev>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3320      	adds	r3, #32
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc8c 	bl	8000568 <_ZN3PinC1Ev>
{
	this->i2cBus = i2cBus;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	609a      	str	r2, [r3, #8]
	this->channels = new uint8_t[RGB_CHANNELS];
 8000c56:	2008      	movs	r0, #8
 8000c58:	f009 ff84 	bl	800ab64 <_Znaj>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	60da      	str	r2, [r3, #12]
	this->channelState = new PCA9634_LEDOUT[RGB_CHANNELS];
 8000c64:	2008      	movs	r0, #8
 8000c66:	f009 ff7d 	bl	800ab64 <_Znaj>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	611a      	str	r2, [r3, #16]
	this->oePin = oePin;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3320      	adds	r3, #32
 8000c76:	463a      	mov	r2, r7
 8000c78:	6810      	ldr	r0, [r2, #0]
 8000c7a:	6018      	str	r0, [r3, #0]
 8000c7c:	8891      	ldrh	r1, [r2, #4]
 8000c7e:	7992      	ldrb	r2, [r2, #6]
 8000c80:	8099      	strh	r1, [r3, #4]
 8000c82:	719a      	strb	r2, [r3, #6]
}
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800aef8 	.word	0x0800aef8

08000c94 <_ZN7PCA9634D1Ev>:

PCA9634::~PCA9634()
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <_ZN7PCA9634D1Ev+0x2c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
{
	delete[] channels;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <_ZN7PCA9634D1Ev+0x20>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f009 ff56 	bl	800ab60 <_ZdaPv>
}
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	0800aef8 	.word	0x0800aef8

08000cc4 <_ZN7PCA9634D0Ev>:
PCA9634::~PCA9634()
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
}
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ffe1 	bl	8000c94 <_ZN7PCA9634D1Ev>
 8000cd2:	2128      	movs	r1, #40	; 0x28
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f009 ff41 	bl	800ab5c <_ZdlPvj>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4639      	mov	r1, r7
 8000cf0:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3308      	adds	r3, #8
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fc32 	bl	8000568 <_ZN3PinC1Ev>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3310      	adds	r3, #16
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fc2d 	bl	8000568 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3308      	adds	r3, #8
 8000d18:	463a      	mov	r2, r7
 8000d1a:	6810      	ldr	r0, [r2, #0]
 8000d1c:	6018      	str	r0, [r3, #0]
 8000d1e:	8891      	ldrh	r1, [r2, #4]
 8000d20:	7992      	ldrb	r2, [r2, #6]
 8000d22:	8099      	strh	r1, [r3, #4]
 8000d24:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3310      	adds	r3, #16
 8000d2a:	f107 0218 	add.w	r2, r7, #24
 8000d2e:	6810      	ldr	r0, [r2, #0]
 8000d30:	6018      	str	r0, [r3, #0]
 8000d32:	8891      	ldrh	r1, [r2, #4]
 8000d34:	7992      	ldrb	r2, [r2, #6]
 8000d36:	8099      	strh	r1, [r3, #4]
 8000d38:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f009 ff12 	bl	800ab64 <_Znaj>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4613      	mov	r3, r2
 8000d46:	2100      	movs	r1, #0
 8000d48:	7019      	strb	r1, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	7019      	strb	r1, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	831a      	strh	r2, [r3, #24]
}
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	0800af08 	.word	0x0800af08

08000d68 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <_ZN9ShiftRegsD1Ev+0x2c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <_ZN9ShiftRegsD1Ev+0x20>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f009 feec 	bl	800ab60 <_ZdaPv>
}
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0800af08 	.word	0x0800af08

08000d98 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
}
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ffe1 	bl	8000d68 <_ZN9ShiftRegsD1Ev>
 8000da6:	2124      	movs	r1, #36	; 0x24
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f009 fed7 	bl	800ab5c <_ZdlPvj>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f941 	bl	800104c <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3310      	adds	r3, #16
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f93c 	bl	800104c <_ZN3Pin5ClearEv>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZN9ShiftRegs13IndicatorTestEv>:

void ShiftRegs::IndicatorTest()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 32; ++i) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b1f      	cmp	r3, #31
 8000df0:	dc16      	bgt.n	8000e20 <_ZN9ShiftRegs13IndicatorTestEv+0x44>

		ToggleValue(count);
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f843 	bl	8000e82 <_ZN9ShiftRegs11ToggleValueEj>
		Update();
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f86d 	bl	8000edc <_ZN9ShiftRegs6UpdateEv>
		count++;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
		if (count >= 16)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b0f      	cmp	r3, #15
 8000e0c:	d901      	bls.n	8000e12 <_ZN9ShiftRegs13IndicatorTestEv+0x36>
		{
			count = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(50);
 8000e12:	2032      	movs	r0, #50	; 0x32
 8000e14:	f002 f866 	bl	8002ee4 <HAL_Delay>
	for (int i = 0; i < 32; ++i) {
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	e7e5      	b.n	8000dec <_ZN9ShiftRegs13IndicatorTestEv+0x10>
	}
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	460b      	mov	r3, r1
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10d      	bne.n	8000e58 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	8b1b      	ldrh	r3, [r3, #24]
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	2101      	movs	r1, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8000e56:	e00e      	b.n	8000e76 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	8b1b      	ldrh	r3, [r3, #24]
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	2101      	movs	r1, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	831a      	strh	r2, [r3, #24]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f80f 	bl	8000eb2 <_ZN9ShiftRegs8GetValueEj>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf0c      	ite	eq
 8000e9a:	2301      	moveq	r3, #1
 8000e9c:	2300      	movne	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffbf 	bl	8000e28 <_ZN9ShiftRegs8SetValueEhj>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8b1b      	ldrh	r3, [r3, #24]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	fa42 f303 	asr.w	r3, r2, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN9ShiftRegs6UpdateEv>:

void ShiftRegs::Update()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	this->_buffer[0] = this->_number & 0xFF;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	8b1a      	ldrh	r2, [r3, #24]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
	this->_buffer[1] = (this->_number & 0xFF00) >> 8;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	8b1b      	ldrh	r3, [r3, #24]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	701a      	strb	r2, [r3, #0]
	this->OEPin.Write(GPIO_PIN_SET);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3308      	adds	r3, #8
 8000f06:	2101      	movs	r1, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f882 	bl	8001012 <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_SET);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3310      	adds	r3, #16
 8000f12:	2101      	movs	r1, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f87c 	bl	8001012 <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_SET);
	HAL_SPI_Transmit(this->_spi, this->_buffer, 2, Timeout);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69d8      	ldr	r0, [r3, #28]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a19      	ldr	r1, [r3, #32]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2202      	movs	r2, #2
 8000f28:	f007 fbe7 	bl	80086fa <HAL_SPI_Transmit>
	this->OEPin.Write(GPIO_PIN_RESET);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f86d 	bl	8001012 <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_RESET);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f867 	bl	8001012 <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>:
 */

#include "main.h"
#include <StripCurrent.h>

StripCurrent::StripCurrent(ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *timerHandle)
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef+0x2c>)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]
{
	this->adc = adcHandle;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	605a      	str	r2, [r3, #4]
	this->timer = timerHandle;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]
}
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	0800af18 	.word	0x0800af18

08000f7c <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <_ZN12StripCurrentD1Ev+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
{
	delete[] this->buffer;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <_ZN12StripCurrentD1Ev+0x20>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fde2 	bl	800ab60 <_ZdaPv>
}
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	0800af18 	.word	0x0800af18

08000fac <_ZN12StripCurrentD0Ev>:
StripCurrent::~StripCurrent()
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
}
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffe1 	bl	8000f7c <_ZN12StripCurrentD1Ev>
 8000fba:	2114      	movs	r1, #20
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fdcd 	bl	800ab5c <_ZdlPvj>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN12StripCurrent4InitEv>:

void StripCurrent::Init()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	this->buffer = new uint8_t[STRIP_CURR_BUFFER_LEN];
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f009 fdc4 	bl	800ab64 <_Znaj>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]
	HAL_ADC_Start(this->adc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 f805 	bl	8002ff8 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(this->adc, (uint32_t *)this->buffer, STRIP_CURR_BUFFER_LEN);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6858      	ldr	r0, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f002 f9c4 	bl	8003388 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(this->timer);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4618      	mov	r0, r3
 8001006:	f007 fdcf 	bl	8008ba8 <HAL_TIM_Base_Start>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8899      	ldrh	r1, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	799b      	ldrb	r3, [r3, #6]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d106      	bne.n	800103c <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	e000      	b.n	800103e <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	461a      	mov	r2, r3
 8001040:	f004 fa32 	bl	80054a8 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	8899      	ldrh	r1, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	799b      	ldrb	r3, [r3, #6]
 8001060:	461a      	mov	r2, r3
 8001062:	f004 fa21 	bl	80054a8 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800107e:	d020      	beq.n	80010c2 <HAL_GPIO_EXTI_Callback+0x54>
 8001080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001084:	dc31      	bgt.n	80010ea <HAL_GPIO_EXTI_Callback+0x7c>
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108a:	d01d      	beq.n	80010c8 <HAL_GPIO_EXTI_Callback+0x5a>
 800108c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001090:	dc2b      	bgt.n	80010ea <HAL_GPIO_EXTI_Callback+0x7c>
 8001092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001096:	d01a      	beq.n	80010ce <HAL_GPIO_EXTI_Callback+0x60>
 8001098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800109c:	dc25      	bgt.n	80010ea <HAL_GPIO_EXTI_Callback+0x7c>
 800109e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a2:	d020      	beq.n	80010e6 <HAL_GPIO_EXTI_Callback+0x78>
 80010a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a8:	dc1f      	bgt.n	80010ea <HAL_GPIO_EXTI_Callback+0x7c>
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_EXTI_Callback+0x72>
 80010b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b4:	dc19      	bgt.n	80010ea <HAL_GPIO_EXTI_Callback+0x7c>
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d00c      	beq.n	80010d4 <HAL_GPIO_EXTI_Callback+0x66>
 80010ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010be:	d00c      	beq.n	80010da <HAL_GPIO_EXTI_Callback+0x6c>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 80010c0:	e013      	b.n	80010ea <HAL_GPIO_EXTI_Callback+0x7c>
			Enc1TurnInterruptCallback();
 80010c2:	f7ff fce5 	bl	8000a90 <Enc1TurnInterruptCallback>
			break;
 80010c6:	e011      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x7e>
			Enc2TurnInterruptCallback();
 80010c8:	f7ff fce9 	bl	8000a9e <Enc2TurnInterruptCallback>
			break;
 80010cc:	e00e      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x7e>
			MenuUpInterruptCallback();
 80010ce:	f7ff fc95 	bl	80009fc <MenuUpInterruptCallback>
			break;
 80010d2:	e00b      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x7e>
			MenuDownInterruptCallback();
 80010d4:	f7ff fc9c 	bl	8000a10 <MenuDownInterruptCallback>
			break;
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x7e>
			MenuRightInterruptCallback();
 80010da:	f7ff fca3 	bl	8000a24 <MenuRightInterruptCallback>
			break;
 80010de:	e005      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
 80010e0:	f7ff fcaa 	bl	8000a38 <MenuActInterruptCallback>
			break;
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_EXTI_Callback+0x7e>
			MenuBackInterruptCallback();
 80010e6:	f7ff fcb1 	bl	8000a4c <MenuBackInterruptCallback>
			break;
 80010ea:	bf00      	nop
	}
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fa:	f001 fe81 	bl	8002e00 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fe:	f000 f86f 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001102:	f000 fe1d 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001106:	f000 fddd 	bl	8001cc4 <MX_DMA_Init>
  MX_ADC1_Init();
 800110a:	f000 f8d5 	bl	80012b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800110e:	f000 fbc9 	bl	80018a4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001112:	f000 f9dd 	bl	80014d0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001116:	f000 fc45 	bl	80019a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800111a:	f000 fd55 	bl	8001bc8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800111e:	f000 fd7d 	bl	8001c1c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001122:	f000 fcc1 	bl	8001aa8 <MX_TIM6_Init>
  MX_RTC_Init();
 8001126:	f000 fa2f 	bl	8001588 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800112a:	f000 fabf 	bl	80016ac <MX_SDIO_SD_Init>
  MX_SPI4_Init();
 800112e:	f000 fae3 	bl	80016f8 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8001132:	f000 f991 	bl	8001458 <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8001136:	f000 fd9b 	bl	8001c70 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800113a:	f000 fb13 	bl	8001764 <MX_TIM1_Init>
  MX_I2S3_Init();
 800113e:	f000 f9f5 	bl	800152c <MX_I2S3_Init>
  MX_TIM8_Init();
 8001142:	f000 fcef 	bl	8001b24 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, pData, Length);
  if (Init(
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <main+0xa8>)
 8001148:	930c      	str	r3, [sp, #48]	; 0x30
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <main+0xac>)
 800114c:	930b      	str	r3, [sp, #44]	; 0x2c
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <main+0xb0>)
 8001150:	930a      	str	r3, [sp, #40]	; 0x28
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <main+0xb4>)
 8001154:	9309      	str	r3, [sp, #36]	; 0x24
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <main+0xb8>)
 8001158:	9308      	str	r3, [sp, #32]
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <main+0xbc>)
 800115c:	9307      	str	r3, [sp, #28]
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0xc0>)
 8001160:	9306      	str	r3, [sp, #24]
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <main+0xc4>)
 8001164:	9305      	str	r3, [sp, #20]
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <main+0xc8>)
 8001168:	9304      	str	r3, [sp, #16]
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <main+0xcc>)
 800116c:	9303      	str	r3, [sp, #12]
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <main+0xd0>)
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <main+0xd4>)
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <main+0xd8>)
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <main+0xdc>)
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <main+0xe0>)
 800117e:	4916      	ldr	r1, [pc, #88]	; (80011d8 <main+0xe4>)
 8001180:	4816      	ldr	r0, [pc, #88]	; (80011dc <main+0xe8>)
 8001182:	f7ff fb13 	bl	80007ac <Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <main+0x9c>
		  &huart1,
		  &huart2,
		  &huart3
  ))
  {
	  Error_Handler();
 800118c:	f000 ff08 	bl	8001fa0 <Error_Handler>
  }

  // For Init tests
  InitTest();
 8001190:	f7ff fc10 	bl	80009b4 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8001194:	f7ff fc18 	bl	80009c8 <Main>
 8001198:	e7fc      	b.n	8001194 <main+0xa0>
 800119a:	bf00      	nop
 800119c:	200006c4 	.word	0x200006c4
 80011a0:	20000680 	.word	0x20000680
 80011a4:	2000063c 	.word	0x2000063c
 80011a8:	200005f4 	.word	0x200005f4
 80011ac:	20000564 	.word	0x20000564
 80011b0:	2000051c 	.word	0x2000051c
 80011b4:	200004d4 	.word	0x200004d4
 80011b8:	2000047c 	.word	0x2000047c
 80011bc:	200003f8 	.word	0x200003f8
 80011c0:	200003d8 	.word	0x200003d8
 80011c4:	20000378 	.word	0x20000378
 80011c8:	20000330 	.word	0x20000330
 80011cc:	200002dc 	.word	0x200002dc
 80011d0:	2000027c 	.word	0x2000027c
 80011d4:	20000230 	.word	0x20000230
 80011d8:	200001d0 	.word	0x200001d0
 80011dc:	2000016c 	.word	0x2000016c

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	; 0x50
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2234      	movs	r2, #52	; 0x34
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f009 fd18 	bl	800ac24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <SystemClock_Config+0xd0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <SystemClock_Config+0xd0>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <SystemClock_Config+0xd0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <SystemClock_Config+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <SystemClock_Config+0xd4>)
 800122a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SystemClock_Config+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800123c:	2305      	movs	r3, #5
 800123e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001246:	2301      	movs	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001258:	2332      	movs	r3, #50	; 0x32
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4618      	mov	r0, r3
 800126e:	f005 fcbb 	bl	8006be8 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001278:	f000 fe92 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2302      	movs	r3, #2
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f004 ff58 	bl	800614c <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012a2:	f000 fe7d 	bl	8001fa0 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	; 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <MX_ADC1_Init+0x198>)
 80012cc:	4a61      	ldr	r2, [pc, #388]	; (8001454 <MX_ADC1_Init+0x19c>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012d0:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <MX_ADC1_Init+0x198>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80012d6:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <MX_ADC1_Init+0x198>)
 80012d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <MX_ADC1_Init+0x198>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012e4:	4b5a      	ldr	r3, [pc, #360]	; (8001450 <MX_ADC1_Init+0x198>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ea:	4b59      	ldr	r3, [pc, #356]	; (8001450 <MX_ADC1_Init+0x198>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <MX_ADC1_Init+0x198>)
 80012f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80012fa:	4b55      	ldr	r3, [pc, #340]	; (8001450 <MX_ADC1_Init+0x198>)
 80012fc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <MX_ADC1_Init+0x198>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8001308:	4b51      	ldr	r3, [pc, #324]	; (8001450 <MX_ADC1_Init+0x198>)
 800130a:	220a      	movs	r2, #10
 800130c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800130e:	4b50      	ldr	r3, [pc, #320]	; (8001450 <MX_ADC1_Init+0x198>)
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <MX_ADC1_Init+0x198>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800131c:	484c      	ldr	r0, [pc, #304]	; (8001450 <MX_ADC1_Init+0x198>)
 800131e:	f001 fe05 	bl	8002f2c <HAL_ADC_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001328:	f000 fe3a 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800132c:	2304      	movs	r3, #4
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4844      	ldr	r0, [pc, #272]	; (8001450 <MX_ADC1_Init+0x198>)
 800133e:	f002 f93b 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001348:	f000 fe2a 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800134c:	2305      	movs	r3, #5
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	483d      	ldr	r0, [pc, #244]	; (8001450 <MX_ADC1_Init+0x198>)
 800135a:	f002 f92d 	bl	80035b8 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001364:	f000 fe1c 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001368:	2306      	movs	r3, #6
 800136a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800136c:	2303      	movs	r3, #3
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4836      	ldr	r0, [pc, #216]	; (8001450 <MX_ADC1_Init+0x198>)
 8001376:	f002 f91f 	bl	80035b8 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001380:	f000 fe0e 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001384:	2307      	movs	r3, #7
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	482f      	ldr	r0, [pc, #188]	; (8001450 <MX_ADC1_Init+0x198>)
 8001392:	f002 f911 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800139c:	f000 fe00 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013a4:	2305      	movs	r3, #5
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4828      	ldr	r0, [pc, #160]	; (8001450 <MX_ADC1_Init+0x198>)
 80013ae:	f002 f903 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80013b8:	f000 fdf2 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013bc:	2309      	movs	r3, #9
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80013c0:	2306      	movs	r3, #6
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_ADC1_Init+0x198>)
 80013ca:	f002 f8f5 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80013d4:	f000 fde4 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013d8:	230e      	movs	r3, #14
 80013da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80013dc:	2307      	movs	r3, #7
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_ADC1_Init+0x198>)
 80013e6:	f002 f8e7 	bl	80035b8 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80013f0:	f000 fdd6 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013f4:	230f      	movs	r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80013f8:	2308      	movs	r3, #8
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_ADC1_Init+0x198>)
 8001402:	f002 f8d9 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 800140c:	f000 fdc8 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001410:	2311      	movs	r3, #17
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001414:	2309      	movs	r3, #9
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_ADC1_Init+0x198>)
 800141e:	f002 f8cb 	bl	80035b8 <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8001428:	f000 fdba 	bl	8001fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800142c:	2310      	movs	r3, #16
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001430:	230a      	movs	r3, #10
 8001432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_ADC1_Init+0x198>)
 800143a:	f002 f8bd 	bl	80035b8 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8001444:	f000 fdac 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000016c 	.word	0x2000016c
 8001454:	40012000 	.word	0x40012000

08001458 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 800145e:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <MX_FMPI2C1_Init+0x70>)
 8001460:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x0020081F;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <MX_FMPI2C1_Init+0x74>)
 8001466:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 8001470:	2201      	movs	r2, #1
 8001472:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001492:	480c      	ldr	r0, [pc, #48]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 8001494:	f002 fff0 	bl	8004478 <HAL_FMPI2C_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800149e:	f000 fd7f 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a2:	2100      	movs	r1, #0
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_FMPI2C1_Init+0x6c>)
 80014a6:	f003 fe0e 	bl	80050c6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 fd76 	bl	8001fa0 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f003 fe51 	bl	800515c <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 80014ba:	2002      	movs	r0, #2
 80014bc:	f003 fe4e 	bl	800515c <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000230 	.word	0x20000230
 80014c8:	40006000 	.word	0x40006000
 80014cc:	0020081f 	.word	0x0020081f

080014d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x50>)
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <MX_I2C1_Init+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x50>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_I2C1_Init+0x58>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_I2C1_Init+0x50>)
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_I2C1_Init+0x50>)
 800150e:	f004 f817 	bl	8005540 <HAL_I2C_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001518:	f000 fd42 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200002dc 	.word	0x200002dc
 8001524:	40005400 	.word	0x40005400
 8001528:	000186a0 	.word	0x000186a0

0800152c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_I2S3_Init+0x54>)
 8001532:	4a14      	ldr	r2, [pc, #80]	; (8001584 <MX_I2S3_Init+0x58>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2S3_Init+0x54>)
 8001538:	f44f 7240 	mov.w	r2, #768	; 0x300
 800153c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_I2S3_Init+0x54>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2S3_Init+0x54>)
 8001546:	2205      	movs	r2, #5
 8001548:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <MX_I2S3_Init+0x54>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_I2S3_Init+0x54>)
 8001552:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001556:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2S3_Init+0x54>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_I2S3_Init+0x54>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2S3_Init+0x54>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_I2S3_Init+0x54>)
 800156c:	f004 f92c 	bl	80057c8 <HAL_I2S_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001576:	f000 fd13 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000330 	.word	0x20000330
 8001584:	40003c00 	.word	0x40003c00

08001588 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b090      	sub	sp, #64	; 0x40
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2228      	movs	r2, #40	; 0x28
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f009 fb3b 	bl	800ac24 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015b0:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <MX_RTC_Init+0x120>)
 80015b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80015b4:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015bc:	227f      	movs	r2, #127	; 0x7f
 80015be:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015d8:	4832      	ldr	r0, [pc, #200]	; (80016a4 <MX_RTC_Init+0x11c>)
 80015da:	f005 fd89 	bl	80070f0 <HAL_RTC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80015e4:	f000 fcdc 	bl	8001fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	4824      	ldr	r0, [pc, #144]	; (80016a4 <MX_RTC_Init+0x11c>)
 8001612:	f005 fde3 	bl	80071dc <HAL_RTC_SetTime>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800161c:	f000 fcc0 	bl	8001fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001620:	2301      	movs	r3, #1
 8001622:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163c:	2201      	movs	r2, #1
 800163e:	4619      	mov	r1, r3
 8001640:	4818      	ldr	r0, [pc, #96]	; (80016a4 <MX_RTC_Init+0x11c>)
 8001642:	f005 fe65 	bl	8007310 <HAL_RTC_SetDate>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800164c:	f000 fca8 	bl	8001fa0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001650:	2301      	movs	r3, #1
 8001652:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001654:	2301      	movs	r3, #1
 8001656:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001658:	2300      	movs	r3, #0
 800165a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001660:	2300      	movs	r3, #0
 8001662:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	2201      	movs	r2, #1
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_RTC_Init+0x11c>)
 800168c:	f005 fec4 	bl	8007418 <HAL_RTC_SetAlarm_IT>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001696:	f000 fc83 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3740      	adds	r7, #64	; 0x40
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200003d8 	.word	0x200003d8
 80016a8:	40002800 	.word	0x40002800

080016ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <MX_SDIO_SD_Init+0x48>)
 80016b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_SDIO_SD_Init+0x44>)
 80016de:	f006 f8d8 	bl	8007892 <HAL_SD_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 80016e8:	f000 fc5a 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200003f8 	.word	0x200003f8
 80016f4:	40012c00 	.word	0x40012c00

080016f8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI4_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <MX_SPI4_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI4_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI4_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_SPI4_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI4_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI4_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI4_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI4_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI4_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI4_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_SPI4_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI4_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI4_Init+0x64>)
 800174a:	f006 ff4d 	bl	80085e8 <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 fc24 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000047c 	.word	0x2000047c
 8001760:	40013400 	.word	0x40013400

08001764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b096      	sub	sp, #88	; 0x58
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2220      	movs	r2, #32
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f009 fa41 	bl	800ac24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <MX_TIM1_Init+0x138>)
 80017a4:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <MX_TIM1_Init+0x13c>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017a8:	4b3c      	ldr	r3, [pc, #240]	; (800189c <MX_TIM1_Init+0x138>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <MX_TIM1_Init+0x138>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <MX_TIM1_Init+0x138>)
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <MX_TIM1_Init+0x138>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <MX_TIM1_Init+0x138>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <MX_TIM1_Init+0x138>)
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ce:	4833      	ldr	r0, [pc, #204]	; (800189c <MX_TIM1_Init+0x138>)
 80017d0:	f007 f99a 	bl	8008b08 <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017da:	f000 fbe1 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e8:	4619      	mov	r1, r3
 80017ea:	482c      	ldr	r0, [pc, #176]	; (800189c <MX_TIM1_Init+0x138>)
 80017ec:	f007 fd8a 	bl	8009304 <HAL_TIM_ConfigClockSource>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017f6:	f000 fbd3 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017fa:	4828      	ldr	r0, [pc, #160]	; (800189c <MX_TIM1_Init+0x138>)
 80017fc:	f007 fa3c 	bl	8008c78 <HAL_TIM_PWM_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001806:	f000 fbcb 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001816:	4619      	mov	r1, r3
 8001818:	4820      	ldr	r0, [pc, #128]	; (800189c <MX_TIM1_Init+0x138>)
 800181a:	f008 f97d 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001824:	f000 fbbc 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001828:	2360      	movs	r3, #96	; 0x60
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	4813      	ldr	r0, [pc, #76]	; (800189c <MX_TIM1_Init+0x138>)
 800184e:	f007 fc97 	bl	8009180 <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001858:	f000 fba2 	bl	8001fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_TIM1_Init+0x138>)
 8001880:	f008 f9c6 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800188a:	f000 fb89 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_TIM1_Init+0x138>)
 8001890:	f001 f800 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8001894:	bf00      	nop
 8001896:	3758      	adds	r7, #88	; 0x58
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200004d4 	.word	0x200004d4
 80018a0:	40010000 	.word	0x40010000

080018a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018fc:	4828      	ldr	r0, [pc, #160]	; (80019a0 <MX_TIM2_Init+0xfc>)
 80018fe:	f007 f903 	bl	8008b08 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001908:	f000 fb4a 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001916:	4619      	mov	r1, r3
 8001918:	4821      	ldr	r0, [pc, #132]	; (80019a0 <MX_TIM2_Init+0xfc>)
 800191a:	f007 fcf3 	bl	8009304 <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001924:	f000 fb3c 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001928:	481d      	ldr	r0, [pc, #116]	; (80019a0 <MX_TIM2_Init+0xfc>)
 800192a:	f007 f9a5 	bl	8008c78 <HAL_TIM_PWM_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001934:	f000 fb34 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4619      	mov	r1, r3
 8001946:	4816      	ldr	r0, [pc, #88]	; (80019a0 <MX_TIM2_Init+0xfc>)
 8001948:	f008 f8e6 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001952:	f000 fb25 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001956:	2360      	movs	r3, #96	; 0x60
 8001958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <MX_TIM2_Init+0xfc>)
 800196e:	f007 fc07 	bl	8009180 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001978:	f000 fb12 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2204      	movs	r2, #4
 8001980:	4619      	mov	r1, r3
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <MX_TIM2_Init+0xfc>)
 8001984:	f007 fbfc 	bl	8009180 <HAL_TIM_PWM_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800198e:	f000 fb07 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <MX_TIM2_Init+0xfc>)
 8001994:	f000 ff7e 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8001998:	bf00      	nop
 800199a:	3738      	adds	r7, #56	; 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000051c 	.word	0x2000051c

080019a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d4:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <MX_TIM3_Init+0x100>)
 80019d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019fa:	4829      	ldr	r0, [pc, #164]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 80019fc:	f007 f884 	bl	8008b08 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a06:	f000 facb 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4822      	ldr	r0, [pc, #136]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 8001a18:	f007 fc74 	bl	8009304 <HAL_TIM_ConfigClockSource>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a22:	f000 fabd 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a26:	481e      	ldr	r0, [pc, #120]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 8001a28:	f007 f926 	bl	8008c78 <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a32:	f000 fab5 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	4619      	mov	r1, r3
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 8001a46:	f008 f867 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a50:	f000 faa6 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 8001a6c:	f007 fb88 	bl	8009180 <HAL_TIM_PWM_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a76:	f000 fa93 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 8001a82:	f007 fb7d 	bl	8009180 <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a8c:	f000 fa88 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_TIM3_Init+0xfc>)
 8001a92:	f000 feff 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8001a96:	bf00      	nop
 8001a98:	3738      	adds	r7, #56	; 0x38
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000564 	.word	0x20000564
 8001aa4:	40000400 	.word	0x40000400

08001aa8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <MX_TIM6_Init+0x78>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ad4:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001ad6:	f007 f817 	bl	8008b08 <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001ae0:	f000 fa5e 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001ae8:	f007 f9e8 	bl	8008ebc <HAL_TIM_OnePulse_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 8001af2:	f000 fa55 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af6:	2320      	movs	r3, #32
 8001af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM6_Init+0x74>)
 8001b04:	f008 f808 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 8001b0e:	f000 fa47 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200005ac 	.word	0x200005ac
 8001b20:	40001000 	.word	0x40001000

08001b24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b42:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <MX_TIM8_Init+0xa0>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 11999;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b48:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001b4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b72:	f006 ffc9 	bl	8008b08 <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001b7c:	f000 fa10 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001b8e:	f007 fbb9 	bl	8009304 <HAL_TIM_ConfigClockSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001b98:	f000 fa02 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_TIM8_Init+0x9c>)
 8001baa:	f007 ffb5 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001bb4:	f000 f9f4 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200005f4 	.word	0x200005f4
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART1_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001c00:	f008 f86c 	bl	8009cdc <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f000 f9c9 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000063c 	.word	0x2000063c
 8001c18:	40011000 	.word	0x40011000

08001c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f008 f842 	bl	8009cdc <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 f99f 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000680 	.word	0x20000680
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <MX_USART3_UART_Init+0x50>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART3_UART_Init+0x4c>)
 8001ca8:	f008 f818 	bl	8009cdc <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cb2:	f000 f975 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200006c4 	.word	0x200006c4
 8001cc0:	40004800 	.word	0x40004800

08001cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	200b      	movs	r0, #11
 8001d08:	f001 ffdf 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d0c:	200b      	movs	r0, #11
 8001d0e:	f001 fff8 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	200c      	movs	r0, #12
 8001d18:	f001 ffd7 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d1c:	200c      	movs	r0, #12
 8001d1e:	f001 fff0 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2038      	movs	r0, #56	; 0x38
 8001d28:	f001 ffcf 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d2c:	2038      	movs	r0, #56	; 0x38
 8001d2e:	f001 ffe8 	bl	8003d02 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a8b      	ldr	r2, [pc, #556]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a84      	ldr	r2, [pc, #528]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a7d      	ldr	r2, [pc, #500]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a76      	ldr	r2, [pc, #472]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b70      	ldr	r3, [pc, #448]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a6f      	ldr	r2, [pc, #444]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a68      	ldr	r2, [pc, #416]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <MX_GPIO_Init+0x24c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2101      	movs	r1, #1
 8001e02:	4863      	ldr	r0, [pc, #396]	; (8001f90 <MX_GPIO_Init+0x250>)
 8001e04:	f003 fb50 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f24e 0101 	movw	r1, #57345	; 0xe001
 8001e0e:	4861      	ldr	r0, [pc, #388]	; (8001f94 <MX_GPIO_Init+0x254>)
 8001e10:	f003 fb4a 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1a:	485d      	ldr	r0, [pc, #372]	; (8001f90 <MX_GPIO_Init+0x250>)
 8001e1c:	f003 fb44 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_EN_GPIO_Port, DMX_EN_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e26:	485c      	ldr	r0, [pc, #368]	; (8001f98 <MX_GPIO_Init+0x258>)
 8001e28:	f003 fb3e 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin;
 8001e2c:	f240 1301 	movw	r3, #257	; 0x101
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4852      	ldr	r0, [pc, #328]	; (8001f90 <MX_GPIO_Init+0x250>)
 8001e46:	f003 f9ab 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VDDA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VDDA_PG_Pin|STRIP_PG_Pin;
 8001e4a:	230e      	movs	r3, #14
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	484c      	ldr	r0, [pc, #304]	; (8001f90 <MX_GPIO_Init+0x250>)
 8001e5e:	f003 f99f 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 8001e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	4848      	ldr	r0, [pc, #288]	; (8001f9c <MX_GPIO_Init+0x25c>)
 8001e7a:	f003 f991 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	4841      	ldr	r0, [pc, #260]	; (8001f98 <MX_GPIO_Init+0x258>)
 8001e94:	f003 f984 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8001e98:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	483a      	ldr	r0, [pc, #232]	; (8001f98 <MX_GPIO_Init+0x258>)
 8001eb0:	f003 f976 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 8001eb4:	f641 7328 	movw	r3, #7976	; 0x1f28
 8001eb8:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4832      	ldr	r0, [pc, #200]	; (8001f94 <MX_GPIO_Init+0x254>)
 8001ecc:	f003 f968 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 8001ed0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	482a      	ldr	r0, [pc, #168]	; (8001f94 <MX_GPIO_Init+0x254>)
 8001eea:	f003 f959 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 8001eee:	f244 0301 	movw	r3, #16385	; 0x4001
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4823      	ldr	r0, [pc, #140]	; (8001f94 <MX_GPIO_Init+0x254>)
 8001f08:	f003 f94a 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f10:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481c      	ldr	r0, [pc, #112]	; (8001f94 <MX_GPIO_Init+0x254>)
 8001f22:	f003 f93d 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DMX_EN_Pin */
  GPIO_InitStruct.Pin = DMX_EN_Pin;
 8001f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DMX_EN_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4816      	ldr	r0, [pc, #88]	; (8001f98 <MX_GPIO_Init+0x258>)
 8001f40:	f003 f92e 	bl	80051a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	2007      	movs	r0, #7
 8001f4a:	f001 febe 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f4e:	2007      	movs	r0, #7
 8001f50:	f001 fed7 	bl	8003d02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2009      	movs	r0, #9
 8001f5a:	f001 feb6 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f5e:	2009      	movs	r0, #9
 8001f60:	f001 fecf 	bl	8003d02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2017      	movs	r0, #23
 8001f6a:	f001 feae 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f6e:	2017      	movs	r0, #23
 8001f70:	f001 fec7 	bl	8003d02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2028      	movs	r0, #40	; 0x28
 8001f7a:	f001 fea6 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f7e:	2028      	movs	r0, #40	; 0x28
 8001f80:	f001 febf 	bl	8003d02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	; 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <Error_Handler+0x1c>)
 8001fae:	f003 fa94 	bl	80054da <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001fb2:	20c8      	movs	r0, #200	; 0xc8
 8001fb4:	f000 ff96 	bl	8002ee4 <HAL_Delay>
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 8001fb8:	e7f6      	b.n	8001fa8 <Error_Handler+0x8>
 8001fba:	bf00      	nop
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_MspInit+0x58>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_MspInit+0x58>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_MspInit+0x58>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_MspInit+0x58>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_MspInit+0x58>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_MspInit+0x58>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2005      	movs	r0, #5
 8002004:	f001 fe61 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002008:	2005      	movs	r0, #5
 800200a:	f001 fe7a 	bl	8003d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_ADC_MspInit+0x150>)
 800203a:	4293      	cmp	r3, r2
 800203c:	f040 8092 	bne.w	8002164 <HAL_ADC_MspInit+0x148>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_ADC_MspInit+0x154>)
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_ADC_MspInit+0x154>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6453      	str	r3, [r2, #68]	; 0x44
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_ADC_MspInit+0x154>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_ADC_MspInit+0x154>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_ADC_MspInit+0x154>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
 800206c:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_ADC_MspInit+0x154>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_ADC_MspInit+0x154>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_ADC_MspInit+0x154>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_ADC_MspInit+0x154>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_ADC_MspInit+0x154>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_ADC_MspInit+0x154>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	6313      	str	r3, [r2, #48]	; 0x30
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_ADC_MspInit+0x154>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STRIP1_MON_Pin|STRIP5_MON_Pin|STRIP2_MON_Pin|STRIP6_MON_Pin;
 80020b0:	23f0      	movs	r3, #240	; 0xf0
 80020b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b4:	2303      	movs	r3, #3
 80020b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	482c      	ldr	r0, [pc, #176]	; (8002174 <HAL_ADC_MspInit+0x158>)
 80020c4:	f003 f86c 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP7_MON_Pin|STRIP3_MON_Pin;
 80020c8:	2330      	movs	r3, #48	; 0x30
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	4827      	ldr	r0, [pc, #156]	; (8002178 <HAL_ADC_MspInit+0x15c>)
 80020dc:	f003 f860 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP4_MON_Pin|STRIP8_MON_Pin;
 80020e0:	2303      	movs	r3, #3
 80020e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e4:	2303      	movs	r3, #3
 80020e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	4822      	ldr	r0, [pc, #136]	; (800217c <HAL_ADC_MspInit+0x160>)
 80020f4:	f003 f854 	bl	80051a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_ADC_MspInit+0x164>)
 80020fa:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_ADC_MspInit+0x168>)
 80020fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_ADC_MspInit+0x164>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002116:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_ADC_MspInit+0x164>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_ADC_MspInit+0x164>)
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002134:	2200      	movs	r2, #0
 8002136:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <HAL_ADC_MspInit+0x164>)
 800213a:	f001 fdfd 	bl	8003d38 <HAL_DMA_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8002144:	f7ff ff2c 	bl	8001fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_ADC_MspInit+0x164>)
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_ADC_MspInit+0x164>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2012      	movs	r0, #18
 800215a:	f001 fdb6 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800215e:	2012      	movs	r0, #18
 8002160:	f001 fdcf 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	; 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012000 	.word	0x40012000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020800 	.word	0x40020800
 800217c:	40020400 	.word	0x40020400
 8002180:	200001d0 	.word	0x200001d0
 8002184:	40026410 	.word	0x40026410

08002188 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b09a      	sub	sp, #104	; 0x68
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a0:	f107 0318 	add.w	r3, r7, #24
 80021a4:	223c      	movs	r2, #60	; 0x3c
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f008 fd3b 	bl	800ac24 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_FMPI2C_MspInit+0x168>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f040 8097 	bne.w	80022e8 <HAL_FMPI2C_MspInit+0x160>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80021ba:	2310      	movs	r3, #16
 80021bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80021be:	2300      	movs	r3, #0
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 f9de 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 80021d2:	f7ff fee5 	bl	8001fa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800220e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002212:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002214:	2312      	movs	r3, #18
 8002216:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002218:	2301      	movs	r3, #1
 800221a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002220:	2304      	movs	r3, #4
 8002222:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002228:	4619      	mov	r1, r3
 800222a:	4833      	ldr	r0, [pc, #204]	; (80022f8 <HAL_FMPI2C_MspInit+0x170>)
 800222c:	f002 ffb8 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002238:	2301      	movs	r3, #1
 800223a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002240:	2304      	movs	r3, #4
 8002242:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002248:	4619      	mov	r1, r3
 800224a:	482c      	ldr	r0, [pc, #176]	; (80022fc <HAL_FMPI2C_MspInit+0x174>)
 800224c:	f002 ffa8 	bl	80051a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_FMPI2C_MspInit+0x16c>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 800226e:	4a25      	ldr	r2, [pc, #148]	; (8002304 <HAL_FMPI2C_MspInit+0x17c>)
 8002270:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 8002274:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002278:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 8002288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228c:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 80022ac:	4814      	ldr	r0, [pc, #80]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 80022ae:	f001 fd43 	bl	8003d38 <HAL_DMA_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_FMPI2C_MspInit+0x134>
    {
      Error_Handler();
 80022b8:	f7ff fe72 	bl	8001fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_FMPI2C_MspInit+0x178>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	205f      	movs	r0, #95	; 0x5f
 80022ce:	f001 fcfc 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 80022d2:	205f      	movs	r0, #95	; 0x5f
 80022d4:	f001 fd15 	bl	8003d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	2060      	movs	r0, #96	; 0x60
 80022de:	f001 fcf4 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 80022e2:	2060      	movs	r0, #96	; 0x60
 80022e4:	f001 fd0d 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3768      	adds	r7, #104	; 0x68
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40006000 	.word	0x40006000
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40020800 	.word	0x40020800
 8002300:	2000027c 	.word	0x2000027c
 8002304:	40026028 	.word	0x40026028

08002308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002346:	23c0      	movs	r3, #192	; 0xc0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234a:	2312      	movs	r3, #18
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002356:	2304      	movs	r3, #4
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <HAL_I2C_MspInit+0x8c>)
 8002362:	f002 ff1d 	bl	80051a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40005400 	.word	0x40005400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09a      	sub	sp, #104	; 0x68
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	223c      	movs	r2, #60	; 0x3c
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f008 fc33 	bl	800ac24 <memset>
  if(hi2s->Instance==SPI3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_I2S_MspInit+0x1a0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	f040 80b2 	bne.w	800252e <HAL_I2S_MspInit+0x196>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 80023ca:	2381      	movs	r3, #129	; 0x81
 80023cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80023ce:	2332      	movs	r3, #50	; 0x32
 80023d0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80023d2:	2308      	movs	r3, #8
 80023d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023d6:	2302      	movs	r3, #2
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80023da:	2302      	movs	r3, #2
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80023de:	2300      	movs	r3, #0
 80023e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e6:	f107 0318 	add.w	r3, r7, #24
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 f8cc 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 80023f6:	f7ff fdd3 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	4b4f      	ldr	r3, [pc, #316]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a4e      	ldr	r2, [pc, #312]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b48      	ldr	r3, [pc, #288]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a47      	ldr	r2, [pc, #284]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a40      	ldr	r2, [pc, #256]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b3e      	ldr	r3, [pc, #248]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a39      	ldr	r2, [pc, #228]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <HAL_I2S_MspInit+0x1a4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PD6     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800246a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800247c:	2306      	movs	r3, #6
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002484:	4619      	mov	r1, r3
 8002486:	482e      	ldr	r0, [pc, #184]	; (8002540 <HAL_I2S_MspInit+0x1a8>)
 8002488:	f002 fe8a 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800248c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002490:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800249e:	2306      	movs	r3, #6
 80024a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024a6:	4619      	mov	r1, r3
 80024a8:	4826      	ldr	r0, [pc, #152]	; (8002544 <HAL_I2S_MspInit+0x1ac>)
 80024aa:	f002 fe79 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80024be:	2305      	movs	r3, #5
 80024c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c6:	4619      	mov	r1, r3
 80024c8:	481f      	ldr	r0, [pc, #124]	; (8002548 <HAL_I2S_MspInit+0x1b0>)
 80024ca:	f002 fe69 	bl	80051a0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_I2S_MspInit+0x1b8>)
 80024d2:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ec:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f4:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 80024f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 8002500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002504:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002512:	480e      	ldr	r0, [pc, #56]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 8002514:	f001 fc10 	bl	8003d38 <HAL_DMA_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2S_MspInit+0x18a>
    {
      Error_Handler();
 800251e:	f7ff fd3f 	bl	8001fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
 8002528:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_I2S_MspInit+0x1b4>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3768      	adds	r7, #104	; 0x68
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40003c00 	.word	0x40003c00
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	20000378 	.word	0x20000378
 8002550:	40026010 	.word	0x40026010

08002554 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b092      	sub	sp, #72	; 0x48
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	223c      	movs	r2, #60	; 0x3c
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f008 fb5d 	bl	800ac24 <memset>
  if(hrtc->Instance==RTC)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <HAL_RTC_MspInit+0x5c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d119      	bne.n	80025a8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002574:	2308      	movs	r3, #8
 8002576:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4618      	mov	r0, r3
 8002584:	f004 f800 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800258e:	f7ff fd07 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RTC_MspInit+0x60>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2029      	movs	r0, #41	; 0x29
 800259e:	f001 fb94 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80025a2:	2029      	movs	r0, #41	; 0x29
 80025a4:	f001 fbad 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025a8:	bf00      	nop
 80025aa:	3748      	adds	r7, #72	; 0x48
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40002800 	.word	0x40002800
 80025b4:	42470e3c 	.word	0x42470e3c

080025b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09a      	sub	sp, #104	; 0x68
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	223c      	movs	r2, #60	; 0x3c
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f008 fb23 	bl	800ac24 <memset>
  if(hsd->Instance==SDIO)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a44      	ldr	r2, [pc, #272]	; (80026f4 <HAL_SD_MspInit+0x13c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	f040 8081 	bne.w	80026ec <HAL_SD_MspInit+0x134>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80025ea:	2360      	movs	r3, #96	; 0x60
 80025ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80025ee:	2300      	movs	r3, #0
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80025f2:	2300      	movs	r3, #0
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0318 	add.w	r3, r7, #24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 ffc4 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8002606:	f7ff fccb 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_SD_MspInit+0x140>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_SD_MspInit+0x140>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a32      	ldr	r2, [pc, #200]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_SD_MspInit+0x140>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_SD_MspInit+0x140>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800267a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800268c:	230c      	movs	r3, #12
 800268e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002694:	4619      	mov	r1, r3
 8002696:	4819      	ldr	r0, [pc, #100]	; (80026fc <HAL_SD_MspInit+0x144>)
 8002698:	f002 fd82 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800269c:	2304      	movs	r3, #4
 800269e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026ac:	230c      	movs	r3, #12
 80026ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026b4:	4619      	mov	r1, r3
 80026b6:	4812      	ldr	r0, [pc, #72]	; (8002700 <HAL_SD_MspInit+0x148>)
 80026b8:	f002 fd72 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026bc:	2310      	movs	r3, #16
 80026be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026cc:	230c      	movs	r3, #12
 80026ce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026d4:	4619      	mov	r1, r3
 80026d6:	480b      	ldr	r0, [pc, #44]	; (8002704 <HAL_SD_MspInit+0x14c>)
 80026d8:	f002 fd62 	bl	80051a0 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2031      	movs	r0, #49	; 0x31
 80026e2:	f001 faf2 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80026e6:	2031      	movs	r0, #49	; 0x31
 80026e8:	f001 fb0b 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3768      	adds	r7, #104	; 0x68
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40020400 	.word	0x40020400

08002708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_SPI_MspInit+0x84>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d12c      	bne.n	8002784 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002734:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_SPI_MspInit+0x88>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_SPI_MspInit+0x88>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_SPI_MspInit+0x88>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GRAPH_SDI_Pin|GRAPH_CLK_Pin;
 8002762:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002774:	2305      	movs	r3, #5
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_SPI_MspInit+0x8c>)
 8002780:	f002 fd0e 	bl	80051a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40013400 	.word	0x40013400
 8002790:	40023800 	.word	0x40023800
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_TIM_Base_MspInit+0xe8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10e      	bne.n	80027c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	4b35      	ldr	r3, [pc, #212]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80027c6:	e056      	b.n	8002876 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
}
 80027ee:	e042      	b.n	8002876 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a24      	ldr	r2, [pc, #144]	; (8002888 <HAL_TIM_Base_MspInit+0xf0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a20      	ldr	r2, [pc, #128]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
}
 8002816:	e02e      	b.n	8002876 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_TIM_Base_MspInit+0xf4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d116      	bne.n	8002850 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2036      	movs	r0, #54	; 0x36
 8002844:	f001 fa41 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002848:	2036      	movs	r0, #54	; 0x36
 800284a:	f001 fa5a 	bl	8003d02 <HAL_NVIC_EnableIRQ>
}
 800284e:	e012      	b.n	8002876 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_TIM_Base_MspInit+0xf8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10d      	bne.n	8002876 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_TIM_Base_MspInit+0xec>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40023800 	.word	0x40023800
 8002888:	40000400 	.word	0x40000400
 800288c:	40001000 	.word	0x40001000
 8002890:	40010400 	.word	0x40010400

08002894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a37      	ldr	r2, [pc, #220]	; (8002990 <HAL_TIM_MspPostInit+0xfc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11f      	bne.n	80028f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a35      	ldr	r2, [pc, #212]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b33      	ldr	r3, [pc, #204]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = AUDIO_SRC_IND_Pin;
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_SRC_IND_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	482a      	ldr	r0, [pc, #168]	; (8002998 <HAL_TIM_MspPostInit+0x104>)
 80028f0:	f002 fc56 	bl	80051a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028f4:	e047      	b.n	8002986 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d11e      	bne.n	800293e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HP_SEL_IND_Pin|XLR_SEL_IND_Pin;
 800291c:	2303      	movs	r3, #3
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800292c:	2301      	movs	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	4818      	ldr	r0, [pc, #96]	; (8002998 <HAL_TIM_MspPostInit+0x104>)
 8002938:	f002 fc32 	bl	80051a0 <HAL_GPIO_Init>
}
 800293c:	e023      	b.n	8002986 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIM_MspPostInit+0x108>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d11e      	bne.n	8002986 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_TIM_MspPostInit+0x100>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 8002964:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002976:	2302      	movs	r3, #2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4807      	ldr	r0, [pc, #28]	; (80029a0 <HAL_TIM_MspPostInit+0x10c>)
 8002982:	f002 fc0d 	bl	80051a0 <HAL_GPIO_Init>
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000
 8002994:	40023800 	.word	0x40023800
 8002998:	40020000 	.word	0x40020000
 800299c:	40000400 	.word	0x40000400
 80029a0:	40020800 	.word	0x40020800

080029a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5b      	ldr	r2, [pc, #364]	; (8002b30 <HAL_UART_MspInit+0x18c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12d      	bne.n	8002a22 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	4b5a      	ldr	r3, [pc, #360]	; (8002b34 <HAL_UART_MspInit+0x190>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a59      	ldr	r2, [pc, #356]	; (8002b34 <HAL_UART_MspInit+0x190>)
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b57      	ldr	r3, [pc, #348]	; (8002b34 <HAL_UART_MspInit+0x190>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_UART_MspInit+0x190>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_UART_MspInit+0x190>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_UART_MspInit+0x190>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 80029fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a10:	2307      	movs	r3, #7
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4847      	ldr	r0, [pc, #284]	; (8002b38 <HAL_UART_MspInit+0x194>)
 8002a1c:	f002 fbc0 	bl	80051a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a20:	e082      	b.n	8002b28 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a45      	ldr	r2, [pc, #276]	; (8002b3c <HAL_UART_MspInit+0x198>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d12c      	bne.n	8002a86 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a3f      	ldr	r2, [pc, #252]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6313      	str	r3, [r2, #48]	; 0x30
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 8002a64:	230c      	movs	r3, #12
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a74:	2307      	movs	r3, #7
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	482e      	ldr	r0, [pc, #184]	; (8002b38 <HAL_UART_MspInit+0x194>)
 8002a80:	f002 fb8e 	bl	80051a0 <HAL_GPIO_Init>
}
 8002a84:	e050      	b.n	8002b28 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_UART_MspInit+0x19c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d14b      	bne.n	8002b28 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa0:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	6313      	str	r3, [r2, #48]	; 0x30
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_UART_MspInit+0x190>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af6:	2307      	movs	r3, #7
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	4810      	ldr	r0, [pc, #64]	; (8002b44 <HAL_UART_MspInit+0x1a0>)
 8002b02:	f002 fb4d 	bl	80051a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 8002b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b20:	4619      	mov	r1, r3
 8002b22:	4809      	ldr	r0, [pc, #36]	; (8002b48 <HAL_UART_MspInit+0x1a4>)
 8002b24:	f002 fb3c 	bl	80051a0 <HAL_GPIO_Init>
}
 8002b28:	bf00      	nop
 8002b2a:	3738      	adds	r7, #56	; 0x38
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40004400 	.word	0x40004400
 8002b40:	40004800 	.word	0x40004800
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b98:	f000 f984 	bl	8002ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDIO_CD_Pin);
 8002bb2:	2002      	movs	r0, #2
 8002bb4:	f002 fcac 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 8002bc0:	2008      	movs	r0, #8
 8002bc2:	f002 fca5 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <DMA1_Stream0_IRQHandler+0x10>)
 8002bd2:	f001 f9d9 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000378 	.word	0x20000378

08002be0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <DMA1_Stream1_IRQHandler+0x10>)
 8002be6:	f001 f9cf 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000027c 	.word	0x2000027c

08002bf4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <ADC_IRQHandler+0x10>)
 8002bfa:	f000 fab1 	bl	8003160 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000016c 	.word	0x2000016c

08002c08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 8002c0c:	2020      	movs	r0, #32
 8002c0e:	f002 fc7f 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 8002c12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c16:	f002 fc7b 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 8002c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c1e:	f002 fc77 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 8002c2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c2e:	f002 fc6f 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 8002c32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c36:	f002 fc6b 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 8002c3a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c3e:	f002 fc67 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8002c42:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c46:	f002 fc63 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8002c4a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c4e:	f002 fc5f 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 8002c52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c56:	f002 fc5b 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <RTC_Alarm_IRQHandler+0x10>)
 8002c66:	f004 fd19 	bl	800769c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200003d8 	.word	0x200003d8

08002c74 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <SDIO_IRQHandler+0x10>)
 8002c7a:	f004 febb 	bl	80079f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003f8 	.word	0x200003f8

08002c88 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <TIM6_IRQHandler+0x10>)
 8002c8e:	f006 f96f 	bl	8008f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200005ac 	.word	0x200005ac

08002c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA2_Stream0_IRQHandler+0x10>)
 8002ca2:	f001 f971 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200001d0 	.word	0x200001d0

08002cb0 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <FMPI2C1_EV_IRQHandler+0x10>)
 8002cb6:	f001 fc6e 	bl	8004596 <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000230 	.word	0x20000230

08002cc4 <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <FMPI2C1_ER_IRQHandler+0x10>)
 8002cca:	f001 fc7e 	bl	80045ca <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000230 	.word	0x20000230

08002cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return 1;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_kill>:

int _kill(int pid, int sig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf2:	f007 ff5d 	bl	800abb0 <__errno>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2216      	movs	r2, #22
 8002cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_exit>:

void _exit (int status)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ffe7 	bl	8002ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1a:	e7fe      	b.n	8002d1a <_exit+0x12>

08002d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <_sbrk+0x5c>)
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <_sbrk+0x60>)
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <_sbrk+0x64>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <_sbrk+0x68>)
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d207      	bcs.n	8002d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d4c:	f007 ff30 	bl	800abb0 <__errno>
 8002d50:	4603      	mov	r3, r0
 8002d52:	220c      	movs	r2, #12
 8002d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	e009      	b.n	8002d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <_sbrk+0x64>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <_sbrk+0x64>)
 8002d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20040000 	.word	0x20040000
 8002d7c:	00000400 	.word	0x00000400
 8002d80:	20000708 	.word	0x20000708
 8002d84:	20000728 	.word	0x20000728

08002d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SystemInit+0x20>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <SystemInit+0x20>)
 8002d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002db2:	490e      	ldr	r1, [pc, #56]	; (8002dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc8:	4c0b      	ldr	r4, [pc, #44]	; (8002df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd6:	f7ff ffd7 	bl	8002d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f007 feef 	bl	800abbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dde:	f7fe f989 	bl	80010f4 <main>
  bx  lr    
 8002de2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002de4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002df0:	0800af58 	.word	0x0800af58
  ldr r2, =_sbss
 8002df4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002df8:	20000724 	.word	0x20000724

08002dfc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <CAN1_RX0_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_Init+0x40>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_Init+0x40>)
 8002e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_Init+0x40>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f000 ff43 	bl	8003cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	200f      	movs	r0, #15
 8002e30:	f000 f808 	bl	8002e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff f8c4 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x54>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ff5b 	bl	8003d1e <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f000 ff23 	bl	8003cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <HAL_InitTick+0x5c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000008 	.word	0x20000008
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	2000070c 	.word	0x2000070c

08002ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000070c 	.word	0x2000070c

08002ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d005      	beq.n	8002f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_Delay+0x44>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f0a:	bf00      	nop
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d8f7      	bhi.n	8002f0c <HAL_Delay+0x28>
  {
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000008 	.word	0x20000008

08002f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e04a      	b.n	8002fd8 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d120      	bne.n	8002f8c <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <HAL_ADC_Init+0xb4>)
 8002f4e:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <HAL_ADC_Init+0xb8>)
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_ADC_Init+0xbc>)
 8002f5a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_ADC_Init+0xc0>)
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_ADC_Init+0xc4>)
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <HAL_ADC_Init+0xc8>)
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d118      	bne.n	8002fca <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fa0:	f023 0302 	bic.w	r3, r3, #2
 8002fa4:	f043 0202 	orr.w	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fc25 	bl	80037fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc8:	e001      	b.n	8002fce <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	08003569 	.word	0x08003569
 8002fe4:	0800357d 	.word	0x0800357d
 8002fe8:	08003591 	.word	0x08003591
 8002fec:	080035a5 	.word	0x080035a5
 8002ff0:	08003b01 	.word	0x08003b01
 8002ff4:	0800201d 	.word	0x0800201d

08002ff8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_ADC_Start+0x1a>
 800300e:	2302      	movs	r3, #2
 8003010:	e097      	b.n	8003142 <HAL_ADC_Start+0x14a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d018      	beq.n	800305a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <HAL_ADC_Start+0x158>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a45      	ldr	r2, [pc, #276]	; (8003154 <HAL_ADC_Start+0x15c>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9a      	lsrs	r2, r3, #18
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800304c:	e002      	b.n	8003054 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3b01      	subs	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f9      	bne.n	800304e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d15f      	bne.n	8003128 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003092:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d106      	bne.n	80030b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	f023 0206 	bic.w	r2, r3, #6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
 80030b4:	e002      	b.n	80030bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_ADC_Start+0x160>)
 80030c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d129      	bne.n	8003140 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e020      	b.n	8003140 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_ADC_Start+0x164>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d11b      	bne.n	8003140 <HAL_ADC_Start+0x148>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d114      	bne.n	8003140 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e00b      	b.n	8003140 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0210 	orr.w	r2, r3, #16
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000
 8003154:	431bde83 	.word	0x431bde83
 8003158:	40012300 	.word	0x40012300
 800315c:	40012000 	.word	0x40012000

08003160 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04a      	beq.n	800322c <HAL_ADC_IRQHandler+0xcc>
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d047      	beq.n	800322c <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12b      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d127      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d119      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0220 	bic.w	r2, r2, #32
 80031f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0212 	mvn.w	r2, #18
 800322a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d058      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x194>
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d055      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d139      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	d12b      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003294:	2b00      	cmp	r3, #0
 8003296:	d124      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11d      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d119      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 020c 	mvn.w	r2, #12
 80032f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <HAL_ADC_IRQHandler+0x1dc>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10e      	bne.n	800333c <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0201 	mvn.w	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800334a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_ADC_IRQHandler+0x220>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f043 0202 	orr.w	r2, r3, #2
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0220 	mvn.w	r2, #32
 800336c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0220 	mvn.w	r2, #32
 800337e:	601a      	str	r2, [r3, #0]
  }
}
 8003380:	bf00      	nop
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start_DMA+0x1e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0ce      	b.n	8003544 <HAL_ADC_Start_DMA+0x1bc>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d018      	beq.n	80033ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033cc:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_ADC_Start_DMA+0x1c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5f      	ldr	r2, [pc, #380]	; (8003550 <HAL_ADC_Start_DMA+0x1c8>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0c9a      	lsrs	r2, r3, #18
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fc:	d107      	bne.n	800340e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800340c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 8086 	bne.w	800352a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d106      	bne.n	800346c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f023 0206 	bic.w	r2, r3, #6
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
 800346a:	e002      	b.n	8003472 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_ADC_Start_DMA+0x1cc>)
 800347c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	4a35      	ldr	r2, [pc, #212]	; (8003558 <HAL_ADC_Start_DMA+0x1d0>)
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	4a34      	ldr	r2, [pc, #208]	; (800355c <HAL_ADC_Start_DMA+0x1d4>)
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	4a33      	ldr	r2, [pc, #204]	; (8003560 <HAL_ADC_Start_DMA+0x1d8>)
 8003494:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800349e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	334c      	adds	r3, #76	; 0x4c
 80034ca:	4619      	mov	r1, r3
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f000 fce0 	bl	8003e94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d129      	bne.n	8003542 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	e020      	b.n	8003542 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a17      	ldr	r2, [pc, #92]	; (8003564 <HAL_ADC_Start_DMA+0x1dc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d11b      	bne.n	8003542 <HAL_ADC_Start_DMA+0x1ba>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d114      	bne.n	8003542 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e00b      	b.n	8003542 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000000 	.word	0x20000000
 8003550:	431bde83 	.word	0x431bde83
 8003554:	40012300 	.word	0x40012300
 8003558:	080039f5 	.word	0x080039f5
 800355c:	08003ab3 	.word	0x08003ab3
 8003560:	08003ad1 	.word	0x08003ad1
 8003564:	40012000 	.word	0x40012000

08003568 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e105      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x228>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d925      	bls.n	8003630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68d9      	ldr	r1, [r3, #12]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	3b1e      	subs	r3, #30
 80035fa:	2207      	movs	r2, #7
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43da      	mvns	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	400a      	ands	r2, r1
 8003608:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68d9      	ldr	r1, [r3, #12]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	4603      	mov	r3, r0
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4403      	add	r3, r0
 8003622:	3b1e      	subs	r3, #30
 8003624:	409a      	lsls	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e022      	b.n	8003676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6919      	ldr	r1, [r3, #16]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	2207      	movs	r2, #7
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43da      	mvns	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	400a      	ands	r2, r1
 8003652:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6919      	ldr	r1, [r3, #16]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	4618      	mov	r0, r3
 8003666:	4603      	mov	r3, r0
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4403      	add	r3, r0
 800366c:	409a      	lsls	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d824      	bhi.n	80036c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	3b05      	subs	r3, #5
 8003690:	221f      	movs	r2, #31
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	400a      	ands	r2, r1
 800369e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	3b05      	subs	r3, #5
 80036ba:	fa00 f203 	lsl.w	r2, r0, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34
 80036c6:	e04c      	b.n	8003762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	d824      	bhi.n	800371a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	3b23      	subs	r3, #35	; 0x23
 80036e2:	221f      	movs	r2, #31
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43da      	mvns	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	400a      	ands	r2, r1
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4618      	mov	r0, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	3b23      	subs	r3, #35	; 0x23
 800370c:	fa00 f203 	lsl.w	r2, r0, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
 8003718:	e023      	b.n	8003762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	3b41      	subs	r3, #65	; 0x41
 800372c:	221f      	movs	r2, #31
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	400a      	ands	r2, r1
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	4618      	mov	r0, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	3b41      	subs	r3, #65	; 0x41
 8003756:	fa00 f203 	lsl.w	r2, r0, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_ADC_ConfigChannel+0x234>)
 8003764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <HAL_ADC_ConfigChannel+0x238>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d109      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1cc>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b12      	cmp	r3, #18
 8003776:	d105      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_ADC_ConfigChannel+0x238>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d123      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x21e>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b10      	cmp	r3, #16
 8003794:	d003      	beq.n	800379e <HAL_ADC_ConfigChannel+0x1e6>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b11      	cmp	r3, #17
 800379c:	d11b      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d111      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_ADC_ConfigChannel+0x23c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <HAL_ADC_ConfigChannel+0x240>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	0c9a      	lsrs	r2, r3, #18
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037c8:	e002      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f9      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012300 	.word	0x40012300
 80037f0:	40012000 	.word	0x40012000
 80037f4:	20000000 	.word	0x20000000
 80037f8:	431bde83 	.word	0x431bde83

080037fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003804:	4b79      	ldr	r3, [pc, #484]	; (80039ec <ADC_Init+0x1f0>)
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6899      	ldr	r1, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <ADC_Init+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d022      	beq.n	80038da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e00f      	b.n	80038fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0202 	bic.w	r2, r2, #2
 8003908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7e1b      	ldrb	r3, [r3, #24]
 8003914:	005a      	lsls	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003936:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	3b01      	subs	r3, #1
 8003954:	035a      	lsls	r2, r3, #13
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e007      	b.n	8003970 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	3b01      	subs	r3, #1
 800398c:	051a      	lsls	r2, r3, #20
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6899      	ldr	r1, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039b2:	025a      	lsls	r2, r3, #9
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	029a      	lsls	r2, r3, #10
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40012300 	.word	0x40012300
 80039f0:	0f000001 	.word	0x0f000001

080039f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d12b      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d127      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d119      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a88:	e00f      	b.n	8003aaa <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	4798      	blx	r3
}
 8003a9e:	e004      	b.n	8003aaa <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2240      	movs	r2, #64	; 0x40
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <__NVIC_SetPriorityGrouping+0x44>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b30:	4013      	ands	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b46:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <__NVIC_SetPriorityGrouping+0x44>)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	60d3      	str	r3, [r2, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <__NVIC_GetPriorityGrouping+0x18>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	f003 0307 	and.w	r3, r3, #7
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	db0b      	blt.n	8003ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	f003 021f 	and.w	r2, r3, #31
 8003b90:	4907      	ldr	r1, [pc, #28]	; (8003bb0 <__NVIC_EnableIRQ+0x38>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2001      	movs	r0, #1
 8003b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000e100 	.word	0xe000e100

08003bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	db0a      	blt.n	8003bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	490c      	ldr	r1, [pc, #48]	; (8003c00 <__NVIC_SetPriority+0x4c>)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	0112      	lsls	r2, r2, #4
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bdc:	e00a      	b.n	8003bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4908      	ldr	r1, [pc, #32]	; (8003c04 <__NVIC_SetPriority+0x50>)
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	3b04      	subs	r3, #4
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	761a      	strb	r2, [r3, #24]
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000e100 	.word	0xe000e100
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f1c3 0307 	rsb	r3, r3, #7
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	bf28      	it	cs
 8003c26:	2304      	movcs	r3, #4
 8003c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d902      	bls.n	8003c38 <NVIC_EncodePriority+0x30>
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3b03      	subs	r3, #3
 8003c36:	e000      	b.n	8003c3a <NVIC_EncodePriority+0x32>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43da      	mvns	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	43d9      	mvns	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c60:	4313      	orrs	r3, r2
         );
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3724      	adds	r7, #36	; 0x24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c80:	d301      	bcc.n	8003c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00f      	b.n	8003ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <SysTick_Config+0x40>)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c8e:	210f      	movs	r1, #15
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	f7ff ff8e 	bl	8003bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <SysTick_Config+0x40>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <SysTick_Config+0x40>)
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000e010 	.word	0xe000e010

08003cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff29 	bl	8003b14 <__NVIC_SetPriorityGrouping>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cdc:	f7ff ff3e 	bl	8003b5c <__NVIC_GetPriorityGrouping>
 8003ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f7ff ff8e 	bl	8003c08 <NVIC_EncodePriority>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff5d 	bl	8003bb4 <__NVIC_SetPriority>
}
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff31 	bl	8003b78 <__NVIC_EnableIRQ>
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ffa2 	bl	8003c70 <SysTick_Config>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff f8c2 	bl	8002ecc <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e099      	b.n	8003e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d74:	e00f      	b.n	8003d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d76:	f7ff f8a9 	bl	8002ecc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d908      	bls.n	8003d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e078      	b.n	8003e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e8      	bne.n	8003d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <HAL_DMA_Init+0x158>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d107      	bne.n	8003e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d117      	bne.n	8003e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa9f 	bl	8004380 <DMA_CheckFifoParam>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e56:	2301      	movs	r3, #1
 8003e58:	e016      	b.n	8003e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa56 	bl	8004314 <DMA_CalcBaseAndBitshift>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	223f      	movs	r2, #63	; 0x3f
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	f010803f 	.word	0xf010803f

08003e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_Start_IT+0x26>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e040      	b.n	8003f3c <HAL_DMA_Start_IT+0xa8>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d12f      	bne.n	8003f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f9e8 	bl	80042b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	223f      	movs	r2, #63	; 0x3f
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0216 	orr.w	r2, r2, #22
 8003f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0208 	orr.w	r2, r2, #8
 8003f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e005      	b.n	8003f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
 8003f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d004      	beq.n	8003f62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e00c      	b.n	8003f7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2205      	movs	r2, #5
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f94:	4b8e      	ldr	r3, [pc, #568]	; (80041d0 <HAL_DMA_IRQHandler+0x248>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a8e      	ldr	r2, [pc, #568]	; (80041d4 <HAL_DMA_IRQHandler+0x24c>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0a9b      	lsrs	r3, r3, #10
 8003fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0204 	bic.w	r2, r2, #4
 8003fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	2201      	movs	r2, #1
 8004018:	409a      	lsls	r2, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	2204      	movs	r2, #4
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d012      	beq.n	8004060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00b      	beq.n	8004060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	2204      	movs	r2, #4
 800404e:	409a      	lsls	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	f043 0204 	orr.w	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	2210      	movs	r2, #16
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d043      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d03c      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2210      	movs	r2, #16
 8004084:	409a      	lsls	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d018      	beq.n	80040ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d024      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	e01f      	b.n	80040f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01b      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	e016      	b.n	80040f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0208 	bic.w	r2, r2, #8
 80040e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2220      	movs	r2, #32
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 808f 	beq.w	8004228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8087 	beq.w	8004228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	2220      	movs	r2, #32
 8004120:	409a      	lsls	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b05      	cmp	r3, #5
 8004130:	d136      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0216 	bic.w	r2, r2, #22
 8004140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <HAL_DMA_IRQHandler+0x1da>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0208 	bic.w	r2, r2, #8
 8004170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004176:	223f      	movs	r2, #63	; 0x3f
 8004178:	409a      	lsls	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d07e      	beq.n	8004294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
        }
        return;
 800419e:	e079      	b.n	8004294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01d      	beq.n	80041ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d031      	beq.n	8004228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
 80041cc:	e02c      	b.n	8004228 <HAL_DMA_IRQHandler+0x2a0>
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000
 80041d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3
 80041e8:	e01e      	b.n	8004228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10f      	bne.n	8004218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0210 	bic.w	r2, r2, #16
 8004206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	2b00      	cmp	r3, #0
 800422e:	d032      	beq.n	8004296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d022      	beq.n	8004282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2205      	movs	r2, #5
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3301      	adds	r3, #1
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	429a      	cmp	r2, r3
 800425e:	d307      	bcc.n	8004270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f2      	bne.n	8004254 <HAL_DMA_IRQHandler+0x2cc>
 800426e:	e000      	b.n	8004272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
 8004292:	e000      	b.n	8004296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004294:	bf00      	nop
    }
  }
}
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042aa:	b2db      	uxtb	r3, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d108      	bne.n	80042f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042f6:	e007      	b.n	8004308 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	3b10      	subs	r3, #16
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <DMA_CalcBaseAndBitshift+0x64>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <DMA_CalcBaseAndBitshift+0x68>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d909      	bls.n	8004356 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	659a      	str	r2, [r3, #88]	; 0x58
 8004354:	e007      	b.n	8004366 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	aaaaaaab 	.word	0xaaaaaaab
 800437c:	0800af38 	.word	0x0800af38

08004380 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11f      	bne.n	80043da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d856      	bhi.n	800444e <DMA_CheckFifoParam+0xce>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <DMA_CheckFifoParam+0x28>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043cb 	.word	0x080043cb
 80043b0:	080043b9 	.word	0x080043b9
 80043b4:	0800444f 	.word	0x0800444f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d046      	beq.n	8004452 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c8:	e043      	b.n	8004452 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043d2:	d140      	bne.n	8004456 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e03d      	b.n	8004456 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	d121      	bne.n	8004428 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d837      	bhi.n	800445a <DMA_CheckFifoParam+0xda>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <DMA_CheckFifoParam+0x70>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004407 	.word	0x08004407
 80043f8:	08004401 	.word	0x08004401
 80043fc:	08004419 	.word	0x08004419
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e030      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d025      	beq.n	800445e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004416:	e022      	b.n	800445e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004420:	d11f      	bne.n	8004462 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004426:	e01c      	b.n	8004462 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d903      	bls.n	8004436 <DMA_CheckFifoParam+0xb6>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d003      	beq.n	800443c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004434:	e018      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
      break;
 800443a:	e015      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      break;
 800444c:	e00b      	b.n	8004466 <DMA_CheckFifoParam+0xe6>
      break;
 800444e:	bf00      	nop
 8004450:	e00a      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      break;
 8004452:	bf00      	nop
 8004454:	e008      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
 8004458:	e006      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      break;
 800445a:	bf00      	nop
 800445c:	e004      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      break;   
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
      break;
 8004466:	bf00      	nop
    }
  } 
  
  return status; 
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e081      	b.n	800458e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fe72 	bl	8002188 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	; 0x24
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044d8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	e006      	b.n	8004500 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d104      	bne.n	8004512 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004524:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004534:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
  }
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	09db      	lsrs	r3, r3, #7
 80045f2:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800460e:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	0a9b      	lsrs	r3, r3, #10
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	09db      	lsrs	r3, r3, #7
 8004620:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	f043 0208 	orr.w	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800463c:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	0a5b      	lsrs	r3, r3, #9
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	09db      	lsrs	r3, r3, #7
 800464e:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f043 0202 	orr.w	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 030b 	and.w	r3, r3, #11
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fb8a 	bl	8004d98 <FMPI2C_ITError>
  }
}
 8004684:	bf00      	nop
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
 80046c0:	4613      	mov	r3, r2
 80046c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <FMPI2C_Slave_ISR_IT+0x24>
 800472c:	2302      	movs	r3, #2
 800472e:	e0ec      	b.n	800490a <FMPI2C_Slave_ISR_IT+0x1fe>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8004750:	6939      	ldr	r1, [r7, #16]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9c0 	bl	8004ad8 <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d04d      	beq.n	8004800 <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 800476c:	2b00      	cmp	r3, #0
 800476e:	d047      	beq.n	8004800 <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d128      	bne.n	80047cc <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b28      	cmp	r3, #40	; 0x28
 8004784:	d108      	bne.n	8004798 <FMPI2C_Slave_ISR_IT+0x8c>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800478c:	d104      	bne.n	8004798 <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 800478e:	6939      	ldr	r1, [r7, #16]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 faab 	bl	8004cec <FMPI2C_ITListenCplt>
 8004796:	e032      	b.n	80047fe <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b29      	cmp	r3, #41	; 0x29
 80047a2:	d10e      	bne.n	80047c2 <FMPI2C_Slave_ISR_IT+0xb6>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047aa:	d00a      	beq.n	80047c2 <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2210      	movs	r2, #16
 80047b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fbe6 	bl	8004f86 <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f92d 	bl	8004a1a <FMPI2C_ITSlaveSeqCplt>
 80047c0:	e01d      	b.n	80047fe <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2210      	movs	r2, #16
 80047c8:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 80047ca:	e096      	b.n	80048fa <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2210      	movs	r2, #16
 80047d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f043 0204 	orr.w	r2, r3, #4
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <FMPI2C_Slave_ISR_IT+0xe4>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ec:	f040 8085 	bne.w	80048fa <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	4619      	mov	r1, r3
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 face 	bl	8004d98 <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 80047fc:	e07d      	b.n	80048fa <FMPI2C_Slave_ISR_IT+0x1ee>
 80047fe:	e07c      	b.n	80048fa <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d030      	beq.n	800486e <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02a      	beq.n	800486e <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d018      	beq.n	8004854 <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d14f      	bne.n	80048fe <FMPI2C_Slave_ISR_IT+0x1f2>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004864:	d04b      	beq.n	80048fe <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f8d7 	bl	8004a1a <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 800486c:	e047      	b.n	80048fe <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 8004886:	6939      	ldr	r1, [r7, #16]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f842 	bl	8004912 <FMPI2C_ITAddrCplt>
 800488e:	e037      	b.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d031      	beq.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02b      	beq.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80048e2:	e00d      	b.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ea:	d002      	beq.n	80048f2 <FMPI2C_Slave_ISR_IT+0x1e6>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f891 	bl	8004a1a <FMPI2C_ITSlaveSeqCplt>
 80048f8:	e002      	b.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 80048fa:	bf00      	nop
 80048fc:	e000      	b.n	8004900 <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 80048fe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004928:	2b28      	cmp	r3, #40	; 0x28
 800492a:	d16a      	bne.n	8004a02 <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	0c1b      	lsrs	r3, r3, #16
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	b29b      	uxth	r3, r3
 8004946:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800494a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004958:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004966:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d138      	bne.n	80049e2 <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004970:	897b      	ldrh	r3, [r7, #10]
 8004972:	09db      	lsrs	r3, r3, #7
 8004974:	b29a      	uxth	r2, r3
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	4053      	eors	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0306 	and.w	r3, r3, #6
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11c      	bne.n	80049be <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004984:	897b      	ldrh	r3, [r7, #10]
 8004986:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004996:	2b02      	cmp	r3, #2
 8004998:	d13b      	bne.n	8004a12 <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2208      	movs	r2, #8
 80049a6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 80049b0:	89ba      	ldrh	r2, [r7, #12]
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fe7c 	bl	80046b4 <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 80049bc:	e029      	b.n	8004a12 <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 80049c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fb1f 	bl	800500a <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 80049d4:	89ba      	ldrh	r2, [r7, #12]
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fe6a 	bl	80046b4 <HAL_FMPI2C_AddrCallback>
}
 80049e0:	e017      	b.n	8004a12 <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 80049e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb0f 	bl	800500a <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 80049f4:	89ba      	ldrh	r2, [r7, #12]
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fe5a 	bl	80046b4 <HAL_FMPI2C_AddrCallback>
}
 8004a00:	e007      	b.n	8004a12 <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2208      	movs	r2, #8
 8004a08:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	0b9b      	lsrs	r3, r3, #14
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e00d      	b.n	8004a6c <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	0bdb      	lsrs	r3, r3, #15
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b29      	cmp	r3, #41	; 0x29
 8004a76:	d112      	bne.n	8004a9e <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2228      	movs	r2, #40	; 0x28
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2221      	movs	r2, #33	; 0x21
 8004a84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 8004a86:	2101      	movs	r1, #1
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fabe 	bl	800500a <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fdf8 	bl	800468c <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a9c:	e017      	b.n	8004ace <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa8:	d111      	bne.n	8004ace <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2228      	movs	r2, #40	; 0x28
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2222      	movs	r2, #34	; 0x22
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 8004ab8:	2102      	movs	r1, #2
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 faa5 	bl	800500a <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff fde9 	bl	80046a0 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2220      	movs	r2, #32
 8004afc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b21      	cmp	r3, #33	; 0x21
 8004b02:	d002      	beq.n	8004b0a <FMPI2C_ITSlaveCplt+0x32>
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b29      	cmp	r3, #41	; 0x29
 8004b08:	d108      	bne.n	8004b1c <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 8004b0a:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa7b 	bl	800500a <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2221      	movs	r2, #33	; 0x21
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
 8004b1a:	e00d      	b.n	8004b38 <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b22      	cmp	r3, #34	; 0x22
 8004b20:	d002      	beq.n	8004b28 <FMPI2C_ITSlaveCplt+0x50>
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b2a      	cmp	r3, #42	; 0x2a
 8004b26:	d107      	bne.n	8004b38 <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 8004b28:	f248 0102 	movw	r1, #32770	; 0x8002
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa6c 	bl	800500a <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2222      	movs	r2, #34	; 0x22
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b46:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b64      	ldr	r3, [pc, #400]	; (8004ce4 <FMPI2C_ITSlaveCplt+0x20c>)
 8004b54:	400b      	ands	r3, r1
 8004b56:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fa14 	bl	8004f86 <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	0b9b      	lsrs	r3, r3, #14
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d013      	beq.n	8004b92 <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b78:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d020      	beq.n	8004bc4 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b90:	e018      	b.n	8004bc4 <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	0bdb      	lsrs	r3, r3, #15
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bac:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	f043 0204 	orr.w	r2, r3, #4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f8a7 	bl	8004d98 <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b28      	cmp	r3, #40	; 0x28
 8004c54:	d141      	bne.n	8004cda <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8004c56:	6979      	ldr	r1, [r7, #20]
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f847 	bl	8004cec <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8004c5e:	e03c      	b.n	8004cda <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c68:	d014      	beq.n	8004c94 <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fed5 	bl	8004a1a <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <FMPI2C_ITSlaveCplt+0x210>)
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fd1f 	bl	80046d0 <HAL_FMPI2C_ListenCpltCallback>
}
 8004c92:	e022      	b.n	8004cda <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b22      	cmp	r3, #34	; 0x22
 8004c9e:	d10e      	bne.n	8004cbe <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fcf2 	bl	80046a0 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8004cbc:	e00d      	b.n	8004cda <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff fcd9 	bl	800468c <HAL_FMPI2C_SlaveTxCpltCallback>
}
 8004cda:	bf00      	nop
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	fe00e800 	.word	0xfe00e800
 8004ce8:	ffff0000 	.word	0xffff0000

08004cec <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <FMPI2C_ITListenCplt+0xa8>)
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d022      	beq.n	8004d6a <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d012      	beq.n	8004d6a <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004d6a:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f94b 	bl	800500a <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fca3 	bl	80046d0 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	ffff0000 	.word	0xffff0000

08004d98 <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a5d      	ldr	r2, [pc, #372]	; (8004f2c <FMPI2C_ITError+0x194>)
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b28      	cmp	r3, #40	; 0x28
 8004dce:	d005      	beq.n	8004ddc <FMPI2C_ITError+0x44>
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b29      	cmp	r3, #41	; 0x29
 8004dd4:	d002      	beq.n	8004ddc <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dda:	d10b      	bne.n	8004df4 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004ddc:	2103      	movs	r1, #3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f913 	bl	800500a <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2228      	movs	r2, #40	; 0x28
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a50      	ldr	r2, [pc, #320]	; (8004f30 <FMPI2C_ITError+0x198>)
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34
 8004df2:	e011      	b.n	8004e18 <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004df4:	f248 0103 	movw	r1, #32771	; 0x8003
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f906 	bl	800500a <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b60      	cmp	r3, #96	; 0x60
 8004e08:	d003      	beq.n	8004e12 <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d039      	beq.n	8004e9a <FMPI2C_ITError+0x102>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b11      	cmp	r3, #17
 8004e2a:	d002      	beq.n	8004e32 <FMPI2C_ITError+0x9a>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b21      	cmp	r3, #33	; 0x21
 8004e30:	d133      	bne.n	8004e9a <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e40:	d107      	bne.n	8004e52 <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e50:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fa20 	bl	800429c <HAL_DMA_GetState>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d017      	beq.n	8004e92 <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <FMPI2C_ITError+0x19c>)
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f864 	bl	8003f44 <HAL_DMA_Abort_IT>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d04d      	beq.n	8004f1e <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e90:	e045      	b.n	8004f1e <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f850 	bl	8004f38 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e98:	e041      	b.n	8004f1e <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d039      	beq.n	8004f16 <FMPI2C_ITError+0x17e>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b12      	cmp	r3, #18
 8004ea6:	d002      	beq.n	8004eae <FMPI2C_ITError+0x116>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b22      	cmp	r3, #34	; 0x22
 8004eac:	d133      	bne.n	8004f16 <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ebc:	d107      	bne.n	8004ece <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f9e2 	bl	800429c <HAL_DMA_GetState>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d017      	beq.n	8004f0e <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <FMPI2C_ITError+0x19c>)
 8004ee4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff f826 	bl	8003f44 <HAL_DMA_Abort_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f0c:	e009      	b.n	8004f22 <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f812 	bl	8004f38 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f14:	e005      	b.n	8004f22 <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f80e 	bl	8004f38 <FMPI2C_TreatErrorCallback>
  }
}
 8004f1c:	e002      	b.n	8004f24 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f22:	bf00      	nop
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	ffff0000 	.word	0xffff0000
 8004f30:	0800470d 	.word	0x0800470d
 8004f34:	08004fcf 	.word	0x08004fcf

08004f38 <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d10e      	bne.n	8004f6a <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fbc8 	bl	80046f8 <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8004f68:	e009      	b.n	8004f7e <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff fbb3 	bl	80046e4 <HAL_FMPI2C_ErrorCallback>
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d103      	bne.n	8004fa4 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d007      	beq.n	8004fc2 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	619a      	str	r2, [r3, #24]
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	2200      	movs	r2, #0
 8004fea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff9b 	bl	8004f38 <FMPI2C_TreatErrorCallback>
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800502a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005038:	2b28      	cmp	r3, #40	; 0x28
 800503a:	d003      	beq.n	8005044 <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005042:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00f      	beq.n	800506e <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005054:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005062:	2b28      	cmp	r3, #40	; 0x28
 8005064:	d003      	beq.n	800506e <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800506c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 800506e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da03      	bge.n	800507e <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800507c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	2b10      	cmp	r3, #16
 8005082:	d103      	bne.n	800508c <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800508a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	2b20      	cmp	r3, #32
 8005090:	d103      	bne.n	800509a <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f043 0320 	orr.w	r3, r3, #32
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 800509a:	887b      	ldrh	r3, [r7, #2]
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d103      	bne.n	80050a8 <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	43da      	mvns	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	400a      	ands	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d138      	bne.n	800514e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e032      	b.n	8005150 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2224      	movs	r2, #36	; 0x24
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005118:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 800516e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005172:	6453      	str	r3, [r2, #68]	; 0x44
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8005182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005184:	4905      	ldr	r1, [pc, #20]	; (800519c <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4313      	orrs	r3, r2
 800518a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40023800 	.word	0x40023800
 800519c:	40013800 	.word	0x40013800

080051a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e159      	b.n	8005470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051bc:	2201      	movs	r2, #1
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	f040 8148 	bne.w	800546a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d005      	beq.n	80051f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d130      	bne.n	8005254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	2203      	movs	r2, #3
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005228:	2201      	movs	r2, #1
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 0201 	and.w	r2, r3, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b03      	cmp	r3, #3
 800525e:	d017      	beq.n	8005290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	2203      	movs	r2, #3
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d123      	bne.n	80052e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	08da      	lsrs	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3208      	adds	r2, #8
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	220f      	movs	r2, #15
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	08da      	lsrs	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3208      	adds	r2, #8
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	2203      	movs	r2, #3
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 0203 	and.w	r2, r3, #3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a2 	beq.w	800546a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4b57      	ldr	r3, [pc, #348]	; (8005488 <HAL_GPIO_Init+0x2e8>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	4a56      	ldr	r2, [pc, #344]	; (8005488 <HAL_GPIO_Init+0x2e8>)
 8005330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005334:	6453      	str	r3, [r2, #68]	; 0x44
 8005336:	4b54      	ldr	r3, [pc, #336]	; (8005488 <HAL_GPIO_Init+0x2e8>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005342:	4a52      	ldr	r2, [pc, #328]	; (800548c <HAL_GPIO_Init+0x2ec>)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	089b      	lsrs	r3, r3, #2
 8005348:	3302      	adds	r3, #2
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	220f      	movs	r2, #15
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a49      	ldr	r2, [pc, #292]	; (8005490 <HAL_GPIO_Init+0x2f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d019      	beq.n	80053a2 <HAL_GPIO_Init+0x202>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a48      	ldr	r2, [pc, #288]	; (8005494 <HAL_GPIO_Init+0x2f4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_GPIO_Init+0x1fe>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a47      	ldr	r2, [pc, #284]	; (8005498 <HAL_GPIO_Init+0x2f8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00d      	beq.n	800539a <HAL_GPIO_Init+0x1fa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a46      	ldr	r2, [pc, #280]	; (800549c <HAL_GPIO_Init+0x2fc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <HAL_GPIO_Init+0x1f6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a45      	ldr	r2, [pc, #276]	; (80054a0 <HAL_GPIO_Init+0x300>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_GPIO_Init+0x1f2>
 800538e:	2304      	movs	r3, #4
 8005390:	e008      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 8005392:	2307      	movs	r3, #7
 8005394:	e006      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 8005396:	2303      	movs	r3, #3
 8005398:	e004      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 800539a:	2302      	movs	r3, #2
 800539c:	e002      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 80053a2:	2300      	movs	r3, #0
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	f002 0203 	and.w	r2, r2, #3
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	4093      	lsls	r3, r2
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b4:	4935      	ldr	r1, [pc, #212]	; (800548c <HAL_GPIO_Init+0x2ec>)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	3302      	adds	r3, #2
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <HAL_GPIO_Init+0x304>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <HAL_GPIO_Init+0x304>)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053ec:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <HAL_GPIO_Init+0x304>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005410:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005416:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800543a:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_GPIO_Init+0x304>)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005440:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005464:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	f67f aea2 	bls.w	80051bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3724      	adds	r7, #36	; 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800
 800548c:	40013800 	.word	0x40013800
 8005490:	40020000 	.word	0x40020000
 8005494:	40020400 	.word	0x40020400
 8005498:	40020800 	.word	0x40020800
 800549c:	40020c00 	.word	0x40020c00
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40013c00 	.word	0x40013c00

080054a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
 80054b4:	4613      	mov	r3, r2
 80054b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054b8:	787b      	ldrb	r3, [r7, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054c4:	e003      	b.n	80054ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054c6:	887b      	ldrh	r3, [r7, #2]
 80054c8:	041a      	lsls	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4013      	ands	r3, r2
 80054f2:	041a      	lsls	r2, r3, #16
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	887b      	ldrh	r3, [r7, #2]
 80054fa:	400b      	ands	r3, r1
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	619a      	str	r2, [r3, #24]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d006      	beq.n	8005534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fb fd9d 	bl	800106e <HAL_GPIO_EXTI_Callback>
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40013c00 	.word	0x40013c00

08005540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e12b      	b.n	80057aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc fece 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055a4:	f000 ffc8 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4a81      	ldr	r2, [pc, #516]	; (80057b4 <HAL_I2C_Init+0x274>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d807      	bhi.n	80055c4 <HAL_I2C_Init+0x84>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a80      	ldr	r2, [pc, #512]	; (80057b8 <HAL_I2C_Init+0x278>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e006      	b.n	80055d2 <HAL_I2C_Init+0x92>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a7d      	ldr	r2, [pc, #500]	; (80057bc <HAL_I2C_Init+0x27c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf94      	ite	ls
 80055cc:	2301      	movls	r3, #1
 80055ce:	2300      	movhi	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0e7      	b.n	80057aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a78      	ldr	r2, [pc, #480]	; (80057c0 <HAL_I2C_Init+0x280>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0c9b      	lsrs	r3, r3, #18
 80055e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a6a      	ldr	r2, [pc, #424]	; (80057b4 <HAL_I2C_Init+0x274>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <HAL_I2C_Init+0xd4>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	e009      	b.n	8005628 <HAL_I2C_Init+0xe8>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	4a69      	ldr	r2, [pc, #420]	; (80057c4 <HAL_I2C_Init+0x284>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	3301      	adds	r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	430b      	orrs	r3, r1
 800562e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800563a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	495c      	ldr	r1, [pc, #368]	; (80057b4 <HAL_I2C_Init+0x274>)
 8005644:	428b      	cmp	r3, r1
 8005646:	d819      	bhi.n	800567c <HAL_I2C_Init+0x13c>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e59      	subs	r1, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fbb1 f3f3 	udiv	r3, r1, r3
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800565c:	400b      	ands	r3, r1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_I2C_Init+0x138>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e59      	subs	r1, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	e051      	b.n	800571c <HAL_I2C_Init+0x1dc>
 8005678:	2304      	movs	r3, #4
 800567a:	e04f      	b.n	800571c <HAL_I2C_Init+0x1dc>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <HAL_I2C_Init+0x168>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	440b      	add	r3, r1
 8005692:	fbb0 f3f3 	udiv	r3, r0, r3
 8005696:	3301      	adds	r3, #1
 8005698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e012      	b.n	80056ce <HAL_I2C_Init+0x18e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1e58      	subs	r0, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	0099      	lsls	r1, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80056be:	3301      	adds	r3, #1
 80056c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Init+0x196>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e022      	b.n	800571c <HAL_I2C_Init+0x1dc>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10e      	bne.n	80056fc <HAL_I2C_Init+0x1bc>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1e58      	subs	r0, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	440b      	add	r3, r1
 80056ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f0:	3301      	adds	r3, #1
 80056f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	e00f      	b.n	800571c <HAL_I2C_Init+0x1dc>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1e58      	subs	r0, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	0099      	lsls	r1, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005712:	3301      	adds	r3, #1
 8005714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	6809      	ldr	r1, [r1, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800574a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6911      	ldr	r1, [r2, #16]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68d2      	ldr	r2, [r2, #12]
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	430b      	orrs	r3, r1
 800575e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	000186a0 	.word	0x000186a0
 80057b8:	001e847f 	.word	0x001e847f
 80057bc:	003d08ff 	.word	0x003d08ff
 80057c0:	431bde83 	.word	0x431bde83
 80057c4:	10624dd3 	.word	0x10624dd3

080057c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e154      	b.n	8005a84 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a98      	ldr	r2, [pc, #608]	; (8005a54 <HAL_I2S_Init+0x28c>)
 80057f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fc fdcf 	bl	8002398 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005810:	f023 030f 	bic.w	r3, r3, #15
 8005814:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2202      	movs	r2, #2
 800581c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d06f      	beq.n	8005906 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800582e:	2310      	movs	r3, #16
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e001      	b.n	8005838 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005834:	2320      	movs	r3, #32
 8005836:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b20      	cmp	r3, #32
 800583e:	d802      	bhi.n	8005846 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_I2S_Init+0x290>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_I2S_Init+0x92>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a81      	ldr	r2, [pc, #516]	; (8005a5c <HAL_I2S_Init+0x294>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d104      	bne.n	8005864 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800585a:	2001      	movs	r0, #1
 800585c:	f001 f862 	bl	8006924 <HAL_RCCEx_GetPeriphCLKFreq>
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	e003      	b.n	800586c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005864:	2002      	movs	r0, #2
 8005866:	f001 f85d 	bl	8006924 <HAL_RCCEx_GetPeriphCLKFreq>
 800586a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d125      	bne.n	80058c2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	fbb2 f2f3 	udiv	r2, r2, r3
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	461a      	mov	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	3305      	adds	r3, #5
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	e01f      	b.n	80058e0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058bc:	3305      	adds	r3, #5
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	e00e      	b.n	80058e0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	3305      	adds	r3, #5
 80058de:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4a5f      	ldr	r2, [pc, #380]	; (8005a60 <HAL_I2S_Init+0x298>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	08db      	lsrs	r3, r3, #3
 80058ea:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e003      	b.n	800590e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005906:	2302      	movs	r3, #2
 8005908:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d902      	bls.n	800591a <HAL_I2S_Init+0x152>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2bff      	cmp	r3, #255	; 0xff
 8005918:	d907      	bls.n	800592a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f043 0210 	orr.w	r2, r3, #16
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e0ac      	b.n	8005a84 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	ea42 0103 	orr.w	r1, r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	430a      	orrs	r2, r1
 800593c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005948:	f023 030f 	bic.w	r3, r3, #15
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6851      	ldr	r1, [r2, #4]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6892      	ldr	r2, [r2, #8]
 8005954:	4311      	orrs	r1, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	68d2      	ldr	r2, [r2, #12]
 800595a:	4311      	orrs	r1, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6992      	ldr	r2, [r2, #24]
 8005960:	430a      	orrs	r2, r1
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b30      	cmp	r3, #48	; 0x30
 8005974:	d003      	beq.n	800597e <HAL_I2S_Init+0x1b6>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2bb0      	cmp	r3, #176	; 0xb0
 800597c:	d107      	bne.n	800598e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800598c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d16e      	bne.n	8005a74 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a32      	ldr	r2, [pc, #200]	; (8005a64 <HAL_I2S_Init+0x29c>)
 800599a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	; (8005a58 <HAL_I2S_Init+0x290>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_I2S_Init+0x1e2>
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_I2S_Init+0x2a0>)
 80059a8:	e001      	b.n	80059ae <HAL_I2S_Init+0x1e6>
 80059aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	4928      	ldr	r1, [pc, #160]	; (8005a58 <HAL_I2S_Init+0x290>)
 80059b6:	428a      	cmp	r2, r1
 80059b8:	d101      	bne.n	80059be <HAL_I2S_Init+0x1f6>
 80059ba:	4a2b      	ldr	r2, [pc, #172]	; (8005a68 <HAL_I2S_Init+0x2a0>)
 80059bc:	e001      	b.n	80059c2 <HAL_I2S_Init+0x1fa>
 80059be:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059c6:	f023 030f 	bic.w	r3, r3, #15
 80059ca:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <HAL_I2S_Init+0x290>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <HAL_I2S_Init+0x212>
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_I2S_Init+0x2a0>)
 80059d8:	e001      	b.n	80059de <HAL_I2S_Init+0x216>
 80059da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059de:	2202      	movs	r2, #2
 80059e0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_I2S_Init+0x290>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <HAL_I2S_Init+0x228>
 80059ec:	4b1e      	ldr	r3, [pc, #120]	; (8005a68 <HAL_I2S_Init+0x2a0>)
 80059ee:	e001      	b.n	80059f4 <HAL_I2S_Init+0x22c>
 80059f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a00:	d003      	beq.n	8005a0a <HAL_I2S_Init+0x242>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e001      	b.n	8005a16 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a34:	4313      	orrs	r3, r2
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	897b      	ldrh	r3, [r7, #10]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a42:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a03      	ldr	r2, [pc, #12]	; (8005a58 <HAL_I2S_Init+0x290>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10e      	bne.n	8005a6c <HAL_I2S_Init+0x2a4>
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_I2S_Init+0x2a0>)
 8005a50:	e00e      	b.n	8005a70 <HAL_I2S_Init+0x2a8>
 8005a52:	bf00      	nop
 8005a54:	08005b83 	.word	0x08005b83
 8005a58:	40003800 	.word	0x40003800
 8005a5c:	40003c00 	.word	0x40003c00
 8005a60:	cccccccd 	.word	0xcccccccd
 8005a64:	08005c99 	.word	0x08005c99
 8005a68:	40003400 	.word	0x40003400
 8005a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a70:	897a      	ldrh	r2, [r7, #10]
 8005a72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	1c9a      	adds	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10e      	bne.n	8005b1c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b0c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff ffb8 	bl	8005a8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	b292      	uxth	r2, r2
 8005b38:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10e      	bne.n	8005b7a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff93 	bl	8005aa0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d13a      	bne.n	8005c14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d109      	bne.n	8005bbc <I2S_IRQHandler+0x3a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d102      	bne.n	8005bbc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff ffb4 	bl	8005b24 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d126      	bne.n	8005c14 <I2S_IRQHandler+0x92>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d11f      	bne.n	8005c14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005be2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f043 0202 	orr.w	r2, r3, #2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff ff50 	bl	8005ab4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d136      	bne.n	8005c8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d109      	bne.n	8005c3e <I2S_IRQHandler+0xbc>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c34:	2b80      	cmp	r3, #128	; 0x80
 8005c36:	d102      	bne.n	8005c3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff45 	bl	8005ac8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d122      	bne.n	8005c8e <I2S_IRQHandler+0x10c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d11b      	bne.n	8005c8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	f043 0204 	orr.w	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ff13 	bl	8005ab4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a92      	ldr	r2, [pc, #584]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005cb2:	4b92      	ldr	r3, [pc, #584]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cb4:	e001      	b.n	8005cba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a8b      	ldr	r2, [pc, #556]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d101      	bne.n	8005cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005cd0:	4b8a      	ldr	r3, [pc, #552]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cd2:	e001      	b.n	8005cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d004      	beq.n	8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 8099 	bne.w	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d107      	bne.n	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f925 	bl	8005f54 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d107      	bne.n	8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9c8 	bl	80060b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d13a      	bne.n	8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d035      	beq.n	8005da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a6e      	ldr	r2, [pc, #440]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d101      	bne.n	8005d46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d42:	4b6e      	ldr	r3, [pc, #440]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d44:	e001      	b.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4969      	ldr	r1, [pc, #420]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d52:	428b      	cmp	r3, r1
 8005d54:	d101      	bne.n	8005d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d56:	4b69      	ldr	r3, [pc, #420]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d58:	e001      	b.n	8005d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	f043 0202 	orr.w	r2, r3, #2
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fe88 	bl	8005ab4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	f040 80c3 	bne.w	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80bd 	beq.w	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a49      	ldr	r2, [pc, #292]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005dd6:	4b49      	ldr	r3, [pc, #292]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd8:	e001      	b.n	8005dde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4944      	ldr	r1, [pc, #272]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de6:	428b      	cmp	r3, r1
 8005de8:	d101      	bne.n	8005dee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005dea:	4b44      	ldr	r3, [pc, #272]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dec:	e001      	b.n	8005df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005df6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe4a 	bl	8005ab4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e20:	e089      	b.n	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d107      	bne.n	8005e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8be 	bl	8005fb8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8fd 	bl	8006050 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d12f      	bne.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02a      	beq.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d101      	bne.n	8005e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e86:	e001      	b.n	8005e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4919      	ldr	r1, [pc, #100]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e94:	428b      	cmp	r3, r1
 8005e96:	d101      	bne.n	8005e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005e98:	4b18      	ldr	r3, [pc, #96]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e9a:	e001      	b.n	8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ea4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f043 0202 	orr.w	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fdfa 	bl	8005ab4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d136      	bne.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d031      	beq.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ee0:	e001      	b.n	8005ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4902      	ldr	r1, [pc, #8]	; (8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eee:	428b      	cmp	r3, r1
 8005ef0:	d106      	bne.n	8005f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005ef2:	4b02      	ldr	r3, [pc, #8]	; (8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef4:	e006      	b.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005ef6:	bf00      	nop
 8005ef8:	40003800 	.word	0x40003800
 8005efc:	40003400 	.word	0x40003400
 8005f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f08:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	f043 0204 	orr.w	r2, r3, #4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fdc0 	bl	8005ab4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f34:	e000      	b.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f36:	bf00      	nop
}
 8005f38:	bf00      	nop
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	1c99      	adds	r1, r3, #2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6251      	str	r1, [r2, #36]	; 0x24
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d113      	bne.n	8005fae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d106      	bne.n	8005fae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ffc9 	bl	8005f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	1c99      	adds	r1, r3, #2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6251      	str	r1, [r2, #36]	; 0x24
 8005fca:	8819      	ldrh	r1, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <I2SEx_TxISR_I2SExt+0x90>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <I2SEx_TxISR_I2SExt+0x22>
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <I2SEx_TxISR_I2SExt+0x94>)
 8005fd8:	e001      	b.n	8005fde <I2SEx_TxISR_I2SExt+0x26>
 8005fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fde:	460a      	mov	r2, r1
 8005fe0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d121      	bne.n	800603e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a12      	ldr	r2, [pc, #72]	; (8006048 <I2SEx_TxISR_I2SExt+0x90>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <I2SEx_TxISR_I2SExt+0x50>
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <I2SEx_TxISR_I2SExt+0x94>)
 8006006:	e001      	b.n	800600c <I2SEx_TxISR_I2SExt+0x54>
 8006008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	490d      	ldr	r1, [pc, #52]	; (8006048 <I2SEx_TxISR_I2SExt+0x90>)
 8006014:	428b      	cmp	r3, r1
 8006016:	d101      	bne.n	800601c <I2SEx_TxISR_I2SExt+0x64>
 8006018:	4b0c      	ldr	r3, [pc, #48]	; (800604c <I2SEx_TxISR_I2SExt+0x94>)
 800601a:	e001      	b.n	8006020 <I2SEx_TxISR_I2SExt+0x68>
 800601c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006020:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006024:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ff81 	bl	8005f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40003800 	.word	0x40003800
 800604c:	40003400 	.word	0x40003400

08006050 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68d8      	ldr	r0, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	1c99      	adds	r1, r3, #2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006068:	b282      	uxth	r2, r0
 800606a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d113      	bne.n	80060ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006092:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ff4a 	bl	8005f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a20      	ldr	r2, [pc, #128]	; (8006144 <I2SEx_RxISR_I2SExt+0x90>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <I2SEx_RxISR_I2SExt+0x16>
 80060c6:	4b20      	ldr	r3, [pc, #128]	; (8006148 <I2SEx_RxISR_I2SExt+0x94>)
 80060c8:	e001      	b.n	80060ce <I2SEx_RxISR_I2SExt+0x1a>
 80060ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ce:	68d8      	ldr	r0, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	1c99      	adds	r1, r3, #2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060da:	b282      	uxth	r2, r0
 80060dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d121      	bne.n	800613a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <I2SEx_RxISR_I2SExt+0x90>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d101      	bne.n	8006104 <I2SEx_RxISR_I2SExt+0x50>
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <I2SEx_RxISR_I2SExt+0x94>)
 8006102:	e001      	b.n	8006108 <I2SEx_RxISR_I2SExt+0x54>
 8006104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	490d      	ldr	r1, [pc, #52]	; (8006144 <I2SEx_RxISR_I2SExt+0x90>)
 8006110:	428b      	cmp	r3, r1
 8006112:	d101      	bne.n	8006118 <I2SEx_RxISR_I2SExt+0x64>
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <I2SEx_RxISR_I2SExt+0x94>)
 8006116:	e001      	b.n	800611c <I2SEx_RxISR_I2SExt+0x68>
 8006118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800611c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006120:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff03 	bl	8005f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40003800 	.word	0x40003800
 8006148:	40003400 	.word	0x40003400

0800614c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0cc      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006160:	4b68      	ldr	r3, [pc, #416]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d90c      	bls.n	8006188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b65      	ldr	r3, [pc, #404]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006176:	4b63      	ldr	r3, [pc, #396]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d001      	beq.n	8006188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0b8      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d020      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a0:	4b59      	ldr	r3, [pc, #356]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4a58      	ldr	r2, [pc, #352]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061b8:	4b53      	ldr	r3, [pc, #332]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4a52      	ldr	r2, [pc, #328]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c4:	4b50      	ldr	r3, [pc, #320]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	494d      	ldr	r1, [pc, #308]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d044      	beq.n	800626c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d107      	bne.n	80061fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ea:	4b47      	ldr	r3, [pc, #284]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d119      	bne.n	800622a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e07f      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d003      	beq.n	800620a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006206:	2b03      	cmp	r3, #3
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620a:	4b3f      	ldr	r3, [pc, #252]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e06f      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621a:	4b3b      	ldr	r3, [pc, #236]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e067      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800622a:	4b37      	ldr	r3, [pc, #220]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f023 0203 	bic.w	r2, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4934      	ldr	r1, [pc, #208]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800623c:	f7fc fe46 	bl	8002ecc <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006242:	e00a      	b.n	800625a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006244:	f7fc fe42 	bl	8002ecc <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e04f      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 020c 	and.w	r2, r3, #12
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	429a      	cmp	r2, r3
 800626a:	d1eb      	bne.n	8006244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800626c:	4b25      	ldr	r3, [pc, #148]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d20c      	bcs.n	8006294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b22      	ldr	r3, [pc, #136]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b20      	ldr	r3, [pc, #128]	; (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e032      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a0:	4b19      	ldr	r3, [pc, #100]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4916      	ldr	r1, [pc, #88]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062be:	4b12      	ldr	r3, [pc, #72]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	490e      	ldr	r1, [pc, #56]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062d2:	f000 f821 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 80062d6:	4602      	mov	r2, r0
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	490a      	ldr	r1, [pc, #40]	; (800630c <HAL_RCC_ClockConfig+0x1c0>)
 80062e4:	5ccb      	ldrb	r3, [r1, r3]
 80062e6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <HAL_RCC_ClockConfig+0x1c4>)
 80062ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_RCC_ClockConfig+0x1c8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fc fda6 	bl	8002e44 <HAL_InitTick>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40023c00 	.word	0x40023c00
 8006308:	40023800 	.word	0x40023800
 800630c:	0800af20 	.word	0x0800af20
 8006310:	20000000 	.word	0x20000000
 8006314:	20000004 	.word	0x20000004

08006318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800631c:	b094      	sub	sp, #80	; 0x50
 800631e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	647b      	str	r3, [r7, #68]	; 0x44
 8006324:	2300      	movs	r3, #0
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	2300      	movs	r3, #0
 800632a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006330:	4b79      	ldr	r3, [pc, #484]	; (8006518 <HAL_RCC_GetSysClockFreq+0x200>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 030c 	and.w	r3, r3, #12
 8006338:	2b08      	cmp	r3, #8
 800633a:	d00d      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x40>
 800633c:	2b08      	cmp	r3, #8
 800633e:	f200 80e1 	bhi.w	8006504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x34>
 8006346:	2b04      	cmp	r3, #4
 8006348:	d003      	beq.n	8006352 <HAL_RCC_GetSysClockFreq+0x3a>
 800634a:	e0db      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800634c:	4b73      	ldr	r3, [pc, #460]	; (800651c <HAL_RCC_GetSysClockFreq+0x204>)
 800634e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006350:	e0db      	b.n	800650a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006352:	4b72      	ldr	r3, [pc, #456]	; (800651c <HAL_RCC_GetSysClockFreq+0x204>)
 8006354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006356:	e0d8      	b.n	800650a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006358:	4b6f      	ldr	r3, [pc, #444]	; (8006518 <HAL_RCC_GetSysClockFreq+0x200>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006360:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006362:	4b6d      	ldr	r3, [pc, #436]	; (8006518 <HAL_RCC_GetSysClockFreq+0x200>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d063      	beq.n	8006436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800636e:	4b6a      	ldr	r3, [pc, #424]	; (8006518 <HAL_RCC_GetSysClockFreq+0x200>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	099b      	lsrs	r3, r3, #6
 8006374:	2200      	movs	r2, #0
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38
 8006378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006380:	633b      	str	r3, [r7, #48]	; 0x30
 8006382:	2300      	movs	r3, #0
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	f04f 0000 	mov.w	r0, #0
 8006392:	f04f 0100 	mov.w	r1, #0
 8006396:	0159      	lsls	r1, r3, #5
 8006398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800639c:	0150      	lsls	r0, r2, #5
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4621      	mov	r1, r4
 80063a4:	1a51      	subs	r1, r2, r1
 80063a6:	6139      	str	r1, [r7, #16]
 80063a8:	4629      	mov	r1, r5
 80063aa:	eb63 0301 	sbc.w	r3, r3, r1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063bc:	4659      	mov	r1, fp
 80063be:	018b      	lsls	r3, r1, #6
 80063c0:	4651      	mov	r1, sl
 80063c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063c6:	4651      	mov	r1, sl
 80063c8:	018a      	lsls	r2, r1, #6
 80063ca:	4651      	mov	r1, sl
 80063cc:	ebb2 0801 	subs.w	r8, r2, r1
 80063d0:	4659      	mov	r1, fp
 80063d2:	eb63 0901 	sbc.w	r9, r3, r1
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ea:	4690      	mov	r8, r2
 80063ec:	4699      	mov	r9, r3
 80063ee:	4623      	mov	r3, r4
 80063f0:	eb18 0303 	adds.w	r3, r8, r3
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	462b      	mov	r3, r5
 80063f8:	eb49 0303 	adc.w	r3, r9, r3
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800640a:	4629      	mov	r1, r5
 800640c:	028b      	lsls	r3, r1, #10
 800640e:	4621      	mov	r1, r4
 8006410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006414:	4621      	mov	r1, r4
 8006416:	028a      	lsls	r2, r1, #10
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641e:	2200      	movs	r2, #0
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
 8006422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006428:	f7f9 feec 	bl	8000204 <__aeabi_uldivmod>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4613      	mov	r3, r2
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	e058      	b.n	80064e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006436:	4b38      	ldr	r3, [pc, #224]	; (8006518 <HAL_RCC_GetSysClockFreq+0x200>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	099b      	lsrs	r3, r3, #6
 800643c:	2200      	movs	r2, #0
 800643e:	4618      	mov	r0, r3
 8006440:	4611      	mov	r1, r2
 8006442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006446:	623b      	str	r3, [r7, #32]
 8006448:	2300      	movs	r3, #0
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
 800644c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	f04f 0000 	mov.w	r0, #0
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	0159      	lsls	r1, r3, #5
 800645e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006462:	0150      	lsls	r0, r2, #5
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4641      	mov	r1, r8
 800646a:	ebb2 0a01 	subs.w	sl, r2, r1
 800646e:	4649      	mov	r1, r9
 8006470:	eb63 0b01 	sbc.w	fp, r3, r1
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006488:	ebb2 040a 	subs.w	r4, r2, sl
 800648c:	eb63 050b 	sbc.w	r5, r3, fp
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	00eb      	lsls	r3, r5, #3
 800649a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800649e:	00e2      	lsls	r2, r4, #3
 80064a0:	4614      	mov	r4, r2
 80064a2:	461d      	mov	r5, r3
 80064a4:	4643      	mov	r3, r8
 80064a6:	18e3      	adds	r3, r4, r3
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	464b      	mov	r3, r9
 80064ac:	eb45 0303 	adc.w	r3, r5, r3
 80064b0:	607b      	str	r3, [r7, #4]
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064be:	4629      	mov	r1, r5
 80064c0:	028b      	lsls	r3, r1, #10
 80064c2:	4621      	mov	r1, r4
 80064c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064c8:	4621      	mov	r1, r4
 80064ca:	028a      	lsls	r2, r1, #10
 80064cc:	4610      	mov	r0, r2
 80064ce:	4619      	mov	r1, r3
 80064d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d2:	2200      	movs	r2, #0
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064dc:	f7f9 fe92 	bl	8000204 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4613      	mov	r3, r2
 80064e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064e8:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	0c1b      	lsrs	r3, r3, #16
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	3301      	adds	r3, #1
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80064f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006502:	e002      	b.n	800650a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_RCC_GetSysClockFreq+0x204>)
 8006506:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800650a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800650c:	4618      	mov	r0, r3
 800650e:	3750      	adds	r7, #80	; 0x50
 8006510:	46bd      	mov	sp, r7
 8006512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800
 800651c:	00f42400 	.word	0x00f42400

08006520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <HAL_RCC_GetHCLKFreq+0x14>)
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000000 	.word	0x20000000

08006538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800653c:	f7ff fff0 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006540:	4602      	mov	r2, r0
 8006542:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	0a9b      	lsrs	r3, r3, #10
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	4903      	ldr	r1, [pc, #12]	; (800655c <HAL_RCC_GetPCLK1Freq+0x24>)
 800654e:	5ccb      	ldrb	r3, [r1, r3]
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40023800 	.word	0x40023800
 800655c:	0800af30 	.word	0x0800af30

08006560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006564:	f7ff ffdc 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	0b5b      	lsrs	r3, r3, #13
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4903      	ldr	r1, [pc, #12]	; (8006584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40023800 	.word	0x40023800
 8006584:	0800af30 	.word	0x0800af30

08006588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d010      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80065a8:	4b87      	ldr	r3, [pc, #540]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	4984      	ldr	r1, [pc, #528]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80065c6:	2301      	movs	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80065d6:	4b7c      	ldr	r3, [pc, #496]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	4978      	ldr	r1, [pc, #480]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8083 	beq.w	800670c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	4b6f      	ldr	r3, [pc, #444]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	4a6e      	ldr	r2, [pc, #440]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006614:	6413      	str	r3, [r2, #64]	; 0x40
 8006616:	4b6c      	ldr	r3, [pc, #432]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006622:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a69      	ldr	r2, [pc, #420]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800662c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800662e:	f7fc fc4d 	bl	8002ecc <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006634:	e008      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006636:	f7fc fc49 	bl	8002ecc <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e162      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006648:	4b60      	ldr	r3, [pc, #384]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0f0      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006654:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d02f      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	429a      	cmp	r2, r3
 8006670:	d028      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006672:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800667c:	4b54      	ldr	r3, [pc, #336]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006682:	4b53      	ldr	r3, [pc, #332]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006688:	4a4f      	ldr	r2, [pc, #316]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800668e:	4b4e      	ldr	r3, [pc, #312]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d114      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800669a:	f7fc fc17 	bl	8002ecc <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a0:	e00a      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a2:	f7fc fc13 	bl	8002ecc <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e12a      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0ee      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d0:	d10d      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 80066d2:	4b3d      	ldr	r3, [pc, #244]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e6:	4938      	ldr	r1, [pc, #224]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	608b      	str	r3, [r1, #8]
 80066ec:	e005      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x172>
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4a35      	ldr	r2, [pc, #212]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066f8:	6093      	str	r3, [r2, #8]
 80066fa:	4b33      	ldr	r3, [pc, #204]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006706:	4930      	ldr	r1, [pc, #192]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006708:	4313      	orrs	r3, r2
 800670a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800671e:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006720:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800672e:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	4922      	ldr	r1, [pc, #136]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d011      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006750:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006756:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	491a      	ldr	r1, [pc, #104]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800676e:	d101      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006786:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	490e      	ldr	r1, [pc, #56]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d004      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	f040 8091 	bne.w	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ac:	f7fc fb8e 	bl	8002ecc <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067b2:	e013      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067b4:	f7fc fb8a 	bl	8002ecc <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d90c      	bls.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e0a3      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x386>
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470e40 	.word	0x42470e40
 80067d4:	424711e0 	.word	0x424711e0
 80067d8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067dc:	4b4e      	ldr	r3, [pc, #312]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e5      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80067e8:	4a4c      	ldr	r2, [pc, #304]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d023      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d019      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800682c:	d00e      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006836:	2b00      	cmp	r3, #0
 8006838:	d019      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d115      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800684a:	d110      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	019b      	lsls	r3, r3, #6
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	492c      	ldr	r1, [pc, #176]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	019b      	lsls	r3, r3, #6
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	061b      	lsls	r3, r3, #24
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	071b      	lsls	r3, r3, #28
 8006894:	4920      	ldr	r1, [pc, #128]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068a2:	f7fc fb13 	bl	8002ecc <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068a8:	e008      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068aa:	f7fc fb0f 	bl	8002ecc <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e028      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068bc:	4b16      	ldr	r3, [pc, #88]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	490d      	ldr	r1, [pc, #52]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	4904      	ldr	r1, [pc, #16]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40023800 	.word	0x40023800
 800691c:	424710d8 	.word	0x424710d8
 8006920:	42470068 	.word	0x42470068

08006924 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b02      	cmp	r3, #2
 8006946:	f000 80a1 	beq.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800694a:	e13f      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800694c:	4ba3      	ldr	r3, [pc, #652]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800694e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006952:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800695e:	f000 8084 	beq.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006968:	f200 808c 	bhi.w	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006972:	d04f      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800697a:	f200 8083 	bhi.w	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800698a:	d17b      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800698c:	4b94      	ldr	r3, [pc, #592]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800698e:	617b      	str	r3, [r7, #20]
          break;
 8006990:	e07b      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8006992:	4b92      	ldr	r3, [pc, #584]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069a0:	d109      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80069a2:	4b8e      	ldr	r3, [pc, #568]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ac:	4a8c      	ldr	r2, [pc, #560]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80069ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	e019      	b.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069b6:	4b89      	ldr	r3, [pc, #548]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c2:	d109      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80069c4:	4b85      	ldr	r3, [pc, #532]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ce:	4a85      	ldr	r2, [pc, #532]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	e008      	b.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80069d8:	4b80      	ldr	r3, [pc, #512]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e2:	4a80      	ldr	r2, [pc, #512]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80069ea:	4b7c      	ldr	r3, [pc, #496]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80069ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f0:	099b      	lsrs	r3, r3, #6
 80069f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	fb02 f303 	mul.w	r3, r2, r3
 80069fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80069fe:	4b77      	ldr	r3, [pc, #476]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a04:	0f1b      	lsrs	r3, r3, #28
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]
          break;
 8006a12:	e03a      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a14:	4b71      	ldr	r3, [pc, #452]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a20:	d108      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a22:	4b6e      	ldr	r3, [pc, #440]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a2a:	4a6e      	ldr	r2, [pc, #440]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	e007      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a34:	4b69      	ldr	r3, [pc, #420]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a3c:	4a69      	ldr	r2, [pc, #420]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006a44:	4b65      	ldr	r3, [pc, #404]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	099b      	lsrs	r3, r3, #6
 8006a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006a56:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	0f1b      	lsrs	r3, r3, #28
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	617b      	str	r3, [r7, #20]
          break;
 8006a68:	e00f      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a6a:	4b5c      	ldr	r3, [pc, #368]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a76:	d102      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8006a78:	4b5a      	ldr	r3, [pc, #360]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a7a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006a7c:	e005      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8006a7e:	4b59      	ldr	r3, [pc, #356]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a80:	617b      	str	r3, [r7, #20]
          break;
 8006a82:	e002      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
          break;
 8006a88:	bf00      	nop
        }
      }
      break;
 8006a8a:	e09f      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8006a8c:	4b53      	ldr	r3, [pc, #332]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a92:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006a9e:	f000 8084 	beq.w	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006aa8:	f200 808c 	bhi.w	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab2:	d04f      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aba:	f200 8083 	bhi.w	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aca:	d17b      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006acc:	4b44      	ldr	r3, [pc, #272]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006ace:	617b      	str	r3, [r7, #20]
          break;
 8006ad0:	e07b      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8006ad2:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006ae2:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aec:	4a3c      	ldr	r2, [pc, #240]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	e019      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006af6:	4b39      	ldr	r3, [pc, #228]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b02:	d109      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006b04:	4b35      	ldr	r3, [pc, #212]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0e:	4a35      	ldr	r2, [pc, #212]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	e008      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006b18:	4b30      	ldr	r3, [pc, #192]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b22:	4a30      	ldr	r2, [pc, #192]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b28:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b2a:	4b2c      	ldr	r3, [pc, #176]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b30:	099b      	lsrs	r3, r3, #6
 8006b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	fb02 f303 	mul.w	r3, r2, r3
 8006b3c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b3e:	4b27      	ldr	r3, [pc, #156]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b44:	0f1b      	lsrs	r3, r3, #28
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
          break;
 8006b52:	e03a      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b54:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b60:	d108      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b62:	4b1e      	ldr	r3, [pc, #120]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	e007      	b.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b74:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006b84:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	099b      	lsrs	r3, r3, #6
 8006b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0f1b      	lsrs	r3, r3, #28
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba6:	617b      	str	r3, [r7, #20]
          break;
 8006ba8:	e00f      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb6:	d102      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bba:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006bbc:	e005      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bc0:	617b      	str	r3, [r7, #20]
          break;
 8006bc2:	e002      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
          break;
 8006bc8:	bf00      	nop
        }
      }
      break;
 8006bca:	bf00      	nop
    }
  }
  return frequency;
 8006bcc:	697b      	ldr	r3, [r7, #20]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	00bb8000 	.word	0x00bb8000
 8006be4:	00f42400 	.word	0x00f42400

08006be8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e273      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d075      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c06:	4b88      	ldr	r3, [pc, #544]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d00c      	beq.n	8006c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c12:	4b85      	ldr	r3, [pc, #532]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d112      	bne.n	8006c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c1e:	4b82      	ldr	r3, [pc, #520]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c2a:	d10b      	bne.n	8006c44 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c2c:	4b7e      	ldr	r3, [pc, #504]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d05b      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x108>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d157      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e24e      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCC_OscConfig+0x74>
 8006c4e:	4b76      	ldr	r3, [pc, #472]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a75      	ldr	r2, [pc, #468]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	e01d      	b.n	8006c98 <HAL_RCC_OscConfig+0xb0>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c64:	d10c      	bne.n	8006c80 <HAL_RCC_OscConfig+0x98>
 8006c66:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a6f      	ldr	r2, [pc, #444]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4b6d      	ldr	r3, [pc, #436]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6c      	ldr	r2, [pc, #432]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCC_OscConfig+0xb0>
 8006c80:	4b69      	ldr	r3, [pc, #420]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a68      	ldr	r2, [pc, #416]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a65      	ldr	r2, [pc, #404]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d013      	beq.n	8006cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fc f914 	bl	8002ecc <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ca8:	f7fc f910 	bl	8002ecc <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b64      	cmp	r3, #100	; 0x64
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e213      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cba:	4b5b      	ldr	r3, [pc, #364]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0xc0>
 8006cc6:	e014      	b.n	8006cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fc f900 	bl	8002ecc <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cd0:	f7fc f8fc 	bl	8002ecc <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b64      	cmp	r3, #100	; 0x64
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e1ff      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ce2:	4b51      	ldr	r3, [pc, #324]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0xe8>
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d063      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cfe:	4b4a      	ldr	r3, [pc, #296]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 030c 	and.w	r3, r3, #12
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d0a:	4b47      	ldr	r3, [pc, #284]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d11c      	bne.n	8006d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d16:	4b44      	ldr	r3, [pc, #272]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d116      	bne.n	8006d50 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d22:	4b41      	ldr	r3, [pc, #260]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <HAL_RCC_OscConfig+0x152>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d001      	beq.n	8006d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e1d3      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3a:	4b3b      	ldr	r3, [pc, #236]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4937      	ldr	r1, [pc, #220]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d4e:	e03a      	b.n	8006dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d020      	beq.n	8006d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d58:	4b34      	ldr	r3, [pc, #208]	; (8006e2c <HAL_RCC_OscConfig+0x244>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5e:	f7fc f8b5 	bl	8002ecc <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d66:	f7fc f8b1 	bl	8002ecc <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e1b4      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	4925      	ldr	r1, [pc, #148]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	600b      	str	r3, [r1, #0]
 8006d98:	e015      	b.n	8006dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <HAL_RCC_OscConfig+0x244>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da0:	f7fc f894 	bl	8002ecc <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006da8:	f7fc f890 	bl	8002ecc <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e193      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dba:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d036      	beq.n	8006e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <HAL_RCC_OscConfig+0x248>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de0:	f7fc f874 	bl	8002ecc <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006de8:	f7fc f870 	bl	8002ecc <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e173      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0x200>
 8006e06:	e01b      	b.n	8006e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <HAL_RCC_OscConfig+0x248>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0e:	f7fc f85d 	bl	8002ecc <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e14:	e00e      	b.n	8006e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e16:	f7fc f859 	bl	8002ecc <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d907      	bls.n	8006e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e15c      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	42470000 	.word	0x42470000
 8006e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e34:	4b8a      	ldr	r3, [pc, #552]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ea      	bne.n	8006e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8097 	beq.w	8006f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e52:	4b83      	ldr	r3, [pc, #524]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10f      	bne.n	8006e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	4b7f      	ldr	r3, [pc, #508]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	4a7e      	ldr	r2, [pc, #504]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e6e:	4b7c      	ldr	r3, [pc, #496]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e76:	60bb      	str	r3, [r7, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e7e:	4b79      	ldr	r3, [pc, #484]	; (8007064 <HAL_RCC_OscConfig+0x47c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d118      	bne.n	8006ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e8a:	4b76      	ldr	r3, [pc, #472]	; (8007064 <HAL_RCC_OscConfig+0x47c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a75      	ldr	r2, [pc, #468]	; (8007064 <HAL_RCC_OscConfig+0x47c>)
 8006e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e96:	f7fc f819 	bl	8002ecc <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e9e:	f7fc f815 	bl	8002ecc <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e118      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb0:	4b6c      	ldr	r3, [pc, #432]	; (8007064 <HAL_RCC_OscConfig+0x47c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d106      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x2ea>
 8006ec4:	4b66      	ldr	r3, [pc, #408]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec8:	4a65      	ldr	r2, [pc, #404]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed0:	e01c      	b.n	8006f0c <HAL_RCC_OscConfig+0x324>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b05      	cmp	r3, #5
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x30c>
 8006eda:	4b61      	ldr	r3, [pc, #388]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	4a60      	ldr	r2, [pc, #384]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006ee0:	f043 0304 	orr.w	r3, r3, #4
 8006ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee6:	4b5e      	ldr	r3, [pc, #376]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	4a5d      	ldr	r2, [pc, #372]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006eec:	f043 0301 	orr.w	r3, r3, #1
 8006ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef2:	e00b      	b.n	8006f0c <HAL_RCC_OscConfig+0x324>
 8006ef4:	4b5a      	ldr	r3, [pc, #360]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef8:	4a59      	ldr	r2, [pc, #356]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	6713      	str	r3, [r2, #112]	; 0x70
 8006f00:	4b57      	ldr	r3, [pc, #348]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f04:	4a56      	ldr	r2, [pc, #344]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f06:	f023 0304 	bic.w	r3, r3, #4
 8006f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d015      	beq.n	8006f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f14:	f7fb ffda 	bl	8002ecc <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f1c:	f7fb ffd6 	bl	8002ecc <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e0d7      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f32:	4b4b      	ldr	r3, [pc, #300]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0ee      	beq.n	8006f1c <HAL_RCC_OscConfig+0x334>
 8006f3e:	e014      	b.n	8006f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f40:	f7fb ffc4 	bl	8002ecc <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f46:	e00a      	b.n	8006f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f48:	f7fb ffc0 	bl	8002ecc <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e0c1      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f5e:	4b40      	ldr	r3, [pc, #256]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1ee      	bne.n	8006f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f70:	4b3b      	ldr	r3, [pc, #236]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	4a3a      	ldr	r2, [pc, #232]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 80ad 	beq.w	80070e0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f86:	4b36      	ldr	r3, [pc, #216]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d060      	beq.n	8007054 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d145      	bne.n	8007026 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f9a:	4b33      	ldr	r3, [pc, #204]	; (8007068 <HAL_RCC_OscConfig+0x480>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fb ff94 	bl	8002ecc <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa8:	f7fb ff90 	bl	8002ecc <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e093      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fba:	4b29      	ldr	r3, [pc, #164]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f0      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	085b      	lsrs	r3, r3, #1
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	061b      	lsls	r3, r3, #24
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	071b      	lsls	r3, r3, #28
 8006ff2:	491b      	ldr	r1, [pc, #108]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <HAL_RCC_OscConfig+0x480>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffe:	f7fb ff65 	bl	8002ecc <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007006:	f7fb ff61 	bl	8002ecc <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e064      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007018:	4b11      	ldr	r3, [pc, #68]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x41e>
 8007024:	e05c      	b.n	80070e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007026:	4b10      	ldr	r3, [pc, #64]	; (8007068 <HAL_RCC_OscConfig+0x480>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fb ff4e 	bl	8002ecc <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007034:	f7fb ff4a 	bl	8002ecc <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e04d      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <HAL_RCC_OscConfig+0x478>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0x44c>
 8007052:	e045      	b.n	80070e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d107      	bne.n	800706c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e040      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
 8007060:	40023800 	.word	0x40023800
 8007064:	40007000 	.word	0x40007000
 8007068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800706c:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <HAL_RCC_OscConfig+0x504>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d030      	beq.n	80070dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d129      	bne.n	80070dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007092:	429a      	cmp	r2, r3
 8007094:	d122      	bne.n	80070dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800709c:	4013      	ands	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d119      	bne.n	80070dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	3b01      	subs	r3, #1
 80070b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d10f      	bne.n	80070dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d107      	bne.n	80070dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800

080070f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e066      	b.n	80071d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7f5b      	ldrb	r3, [r3, #29]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d105      	bne.n	800711c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fb fa1c 	bl	8002554 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	22ca      	movs	r2, #202	; 0xca
 8007128:	625a      	str	r2, [r3, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2253      	movs	r2, #83	; 0x53
 8007130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb2a 	bl	800778c <RTC_EnterInitMode>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d12c      	bne.n	800719c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007154:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68d2      	ldr	r2, [r2, #12]
 800717c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6919      	ldr	r1, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	041a      	lsls	r2, r3, #16
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fb31 	bl	80077fa <RTC_ExitInitMode>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d113      	bne.n	80071ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	22ff      	movs	r2, #255	; 0xff
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	7f1b      	ldrb	r3, [r3, #28]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_RTC_SetTime+0x1c>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e087      	b.n	8007308 <HAL_RTC_SetTime+0x12c>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2202      	movs	r2, #2
 8007202:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d126      	bne.n	8007258 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fb0e 	bl	8007844 <RTC_ByteToBcd2>
 8007228:	4603      	mov	r3, r0
 800722a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fb07 	bl	8007844 <RTC_ByteToBcd2>
 8007236:	4603      	mov	r3, r0
 8007238:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800723a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	789b      	ldrb	r3, [r3, #2]
 8007240:	4618      	mov	r0, r3
 8007242:	f000 faff 	bl	8007844 <RTC_ByteToBcd2>
 8007246:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007248:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	78db      	ldrb	r3, [r3, #3]
 8007250:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	e018      	b.n	800728a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007278:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800727e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	78db      	ldrb	r3, [r3, #3]
 8007284:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	22ca      	movs	r2, #202	; 0xca
 8007290:	625a      	str	r2, [r3, #36]	; 0x24
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2253      	movs	r2, #83	; 0x53
 8007298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fa76 	bl	800778c <RTC_EnterInitMode>
 80072a0:	4603      	mov	r3, r0
 80072a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80072a4:	7cfb      	ldrb	r3, [r7, #19]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d120      	bne.n	80072ec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6899      	ldr	r1, [r3, #8]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fa89 	bl	80077fa <RTC_ExitInitMode>
 80072e8:	4603      	mov	r3, r0
 80072ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80072ec:	7cfb      	ldrb	r3, [r7, #19]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	22ff      	movs	r2, #255	; 0xff
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	771a      	strb	r2, [r3, #28]

  return status;
 8007306:	7cfb      	ldrb	r3, [r7, #19]
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd90      	pop	{r4, r7, pc}

08007310 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	7f1b      	ldrb	r3, [r3, #28]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_RTC_SetDate+0x1c>
 8007328:	2302      	movs	r3, #2
 800732a:	e071      	b.n	8007410 <HAL_RTC_SetDate+0x100>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2202      	movs	r2, #2
 8007336:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10e      	bne.n	800735c <HAL_RTC_SetDate+0x4c>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	2b00      	cmp	r3, #0
 8007348:	d008      	beq.n	800735c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	b2db      	uxtb	r3, r3
 8007354:	330a      	adds	r3, #10
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d11c      	bne.n	800739c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	78db      	ldrb	r3, [r3, #3]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fa6c 	bl	8007844 <RTC_ByteToBcd2>
 800736c:	4603      	mov	r3, r0
 800736e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fa65 	bl	8007844 <RTC_ByteToBcd2>
 800737a:	4603      	mov	r3, r0
 800737c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800737e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	789b      	ldrb	r3, [r3, #2]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fa5d 	bl	8007844 <RTC_ByteToBcd2>
 800738a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800738c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e00e      	b.n	80073ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	78db      	ldrb	r3, [r3, #3]
 80073a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80073a8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80073ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	22ca      	movs	r2, #202	; 0xca
 80073c0:	625a      	str	r2, [r3, #36]	; 0x24
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2253      	movs	r2, #83	; 0x53
 80073c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f9de 	bl	800778c <RTC_EnterInitMode>
 80073d0:	4603      	mov	r3, r0
 80073d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80073d4:	7cfb      	ldrb	r3, [r7, #19]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10c      	bne.n	80073f4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa05 	bl	80077fa <RTC_ExitInitMode>
 80073f0:	4603      	mov	r3, r0
 80073f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	771a      	strb	r2, [r3, #28]

  return status;
 800740e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	bd90      	pop	{r4, r7, pc}

08007418 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b089      	sub	sp, #36	; 0x24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007424:	4b9a      	ldr	r3, [pc, #616]	; (8007690 <HAL_RTC_SetAlarm_IT+0x278>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a9a      	ldr	r2, [pc, #616]	; (8007694 <HAL_RTC_SetAlarm_IT+0x27c>)
 800742a:	fba2 2303 	umull	r2, r3, r2, r3
 800742e:	0adb      	lsrs	r3, r3, #11
 8007430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007434:	fb02 f303 	mul.w	r3, r2, r3
 8007438:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	7f1b      	ldrb	r3, [r3, #28]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <HAL_RTC_SetAlarm_IT+0x36>
 800744a:	2302      	movs	r3, #2
 800744c:	e11c      	b.n	8007688 <HAL_RTC_SetAlarm_IT+0x270>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2202      	movs	r2, #2
 8007458:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d137      	bne.n	80074d0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f9e3 	bl	8007844 <RTC_ByteToBcd2>
 800747e:	4603      	mov	r3, r0
 8007480:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f9dc 	bl	8007844 <RTC_ByteToBcd2>
 800748c:	4603      	mov	r3, r0
 800748e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007490:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	789b      	ldrb	r3, [r3, #2]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f9d4 	bl	8007844 <RTC_ByteToBcd2>
 800749c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800749e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	78db      	ldrb	r3, [r3, #3]
 80074a6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80074a8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f9c6 	bl	8007844 <RTC_ByteToBcd2>
 80074b8:	4603      	mov	r3, r0
 80074ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80074bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80074c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80074ca:	4313      	orrs	r3, r2
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	e023      	b.n	8007518 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80074f0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80074f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	78db      	ldrb	r3, [r3, #3]
 80074fc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80074fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007506:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007508:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800750e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007514:	4313      	orrs	r3, r2
 8007516:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007520:	4313      	orrs	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	22ca      	movs	r2, #202	; 0xca
 800752a:	625a      	str	r2, [r3, #36]	; 0x24
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2253      	movs	r2, #83	; 0x53
 8007532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753c:	d141      	bne.n	80075c2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800754c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800755e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1e5a      	subs	r2, r3, #1
 8007564:	617a      	str	r2, [r7, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	22ff      	movs	r2, #255	; 0xff
 8007570:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2203      	movs	r2, #3
 8007576:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e082      	b.n	8007688 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0e7      	beq.n	8007560 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ae:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	e04b      	b.n	800765a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075d0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80075e2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80075e4:	4b2a      	ldr	r3, [pc, #168]	; (8007690 <HAL_RTC_SetAlarm_IT+0x278>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <HAL_RTC_SetAlarm_IT+0x27c>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	0adb      	lsrs	r3, r3, #11
 80075f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075f4:	fb02 f303 	mul.w	r3, r2, r3
 80075f8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	617a      	str	r2, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	22ff      	movs	r2, #255	; 0xff
 800760a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2203      	movs	r2, #3
 8007610:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e035      	b.n	8007688 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0e7      	beq.n	80075fa <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007648:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007658:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800765a:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <HAL_RTC_SetAlarm_IT+0x280>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a0e      	ldr	r2, [pc, #56]	; (8007698 <HAL_RTC_SetAlarm_IT+0x280>)
 8007660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007664:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <HAL_RTC_SetAlarm_IT+0x280>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	4a0b      	ldr	r2, [pc, #44]	; (8007698 <HAL_RTC_SetAlarm_IT+0x280>)
 800766c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007670:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	22ff      	movs	r2, #255	; 0xff
 8007678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3724      	adds	r7, #36	; 0x24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd90      	pop	{r4, r7, pc}
 8007690:	20000000 	.word	0x20000000
 8007694:	10624dd3 	.word	0x10624dd3
 8007698:	40013c00 	.word	0x40013c00

0800769c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d012      	beq.n	80076d8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f831 	bl	8007728 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80076d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d012      	beq.n	800770c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f8c2 	bl	800787e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f462 7220 	orn	r2, r2, #640	; 0x280
 800770a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RTC_AlarmIRQHandler+0x88>)
 800770e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007712:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	775a      	strb	r2, [r3, #29]
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40013c00 	.word	0x40013c00

08007728 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007756:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007758:	f7fb fbb8 	bl	8002ecc <HAL_GetTick>
 800775c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800775e:	e009      	b.n	8007774 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007760:	f7fb fbb4 	bl	8002ecc <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800776e:	d901      	bls.n	8007774 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e007      	b.n	8007784 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0ee      	beq.n	8007760 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d122      	bne.n	80077f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077ba:	f7fb fb87 	bl	8002ecc <HAL_GetTick>
 80077be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077c0:	e00c      	b.n	80077dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077c2:	f7fb fb83 	bl	8002ecc <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d0:	d904      	bls.n	80077dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2204      	movs	r2, #4
 80077d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <RTC_EnterInitMode+0x64>
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d1e8      	bne.n	80077c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007814:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff89 	bl	800773c <HAL_RTC_WaitForSynchro>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2204      	movs	r2, #4
 8007834:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007852:	e005      	b.n	8007860 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	3301      	adds	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	3b0a      	subs	r3, #10
 800785e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	2b09      	cmp	r3, #9
 8007864:	d8f6      	bhi.n	8007854 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	b2da      	uxtb	r2, r3
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	4313      	orrs	r3, r2
 8007870:	b2db      	uxtb	r3, r3
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e022      	b.n	80078ea <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d105      	bne.n	80078bc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fa fe7e 	bl	80025b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2203      	movs	r2, #3
 80078c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f815 	bl	80078f4 <HAL_SD_InitCard>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e00a      	b.n	80078ea <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b08e      	sub	sp, #56	; 0x38
 80078f8:	af04      	add	r7, sp, #16
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007910:	2376      	movs	r3, #118	; 0x76
 8007912:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681d      	ldr	r5, [r3, #0]
 8007918:	466c      	mov	r4, sp
 800791a:	f107 0314 	add.w	r3, r7, #20
 800791e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007926:	f107 0308 	add.w	r3, r7, #8
 800792a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800792c:	4628      	mov	r0, r5
 800792e:	f002 fc97 	bl	800a260 <SDIO_Init>
 8007932:	4603      	mov	r3, r0
 8007934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e04f      	b.n	80079e4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007944:	4b29      	ldr	r3, [pc, #164]	; (80079ec <HAL_SD_InitCard+0xf8>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f002 fccf 	bl	800a2f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007954:	4b25      	ldr	r3, [pc, #148]	; (80079ec <HAL_SD_InitCard+0xf8>)
 8007956:	2201      	movs	r2, #1
 8007958:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800795a:	2002      	movs	r0, #2
 800795c:	f7fb fac2 	bl	8002ee4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fce5 	bl	8008330 <SD_PowerON>
 8007966:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e02e      	b.n	80079e4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fc04 	bl	8008194 <SD_InitCard>
 800798c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e01b      	b.n	80079e4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079b4:	4618      	mov	r0, r3
 80079b6:	f002 fd02 	bl	800a3be <SDMMC_CmdBlockLength>
 80079ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00f      	beq.n	80079e2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <HAL_SD_InitCard+0xfc>)
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3728      	adds	r7, #40	; 0x28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bdb0      	pop	{r4, r5, r7, pc}
 80079ec:	422580a0 	.word	0x422580a0
 80079f0:	004005ff 	.word	0x004005ff

080079f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_SD_IRQHandler+0x2e>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fd3e 	bl	800849c <SD_Read_IT>
 8007a20:	e155      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 808f 	beq.w	8007b50 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007a4a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007a4e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d039      	beq.n	8007ade <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <HAL_SD_IRQHandler+0x8a>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d011      	beq.n	8007aa2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f002 fcbe 	bl	800a404 <SDMMC_CmdStopTransfer>
 8007a88:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f933 	bl	8007d08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f240 523a 	movw	r2, #1338	; 0x53a
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <HAL_SD_IRQHandler+0xda>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f910 	bl	8007cf4 <HAL_SD_RxCpltCallback>
 8007ad4:	e0fb      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f902 	bl	8007ce0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007adc:	e0f7      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80f2 	beq.w	8007cce <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d011      	beq.n	8007b18 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f002 fc83 	bl	800a404 <SDMMC_CmdStopTransfer>
 8007afe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8f8 	bl	8007d08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f040 80d5 	bne.w	8007cce <HAL_SD_IRQHandler+0x2da>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 80cf 	bne.w	8007cce <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0208 	bic.w	r2, r2, #8
 8007b3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f8c9 	bl	8007ce0 <HAL_SD_TxCpltCallback>
}
 8007b4e:	e0be      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <HAL_SD_IRQHandler+0x17c>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fce8 	bl	800853e <SD_Write_IT>
 8007b6e:	e0ae      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b76:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80a7 	beq.w	8007cce <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	f043 0202 	orr.w	r2, r3, #2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	f043 0208 	orr.w	r2, r3, #8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	f043 0210 	orr.w	r2, r3, #16
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f002 fbfc 	bl	800a404 <SDMMC_CmdStopTransfer>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f869 	bl	8007d08 <HAL_SD_ErrorCallback>
}
 8007c36:	e04a      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d045      	beq.n	8007cce <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <HAL_SD_IRQHandler+0x262>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d011      	beq.n	8007c7a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	4a1f      	ldr	r2, [pc, #124]	; (8007cd8 <HAL_SD_IRQHandler+0x2e4>)
 8007c5c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc f96e 	bl	8003f44 <HAL_DMA_Abort_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d02f      	beq.n	8007cce <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fa20 	bl	80080b8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007c78:	e029      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <HAL_SD_IRQHandler+0x29a>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d011      	beq.n	8007cb2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	4a12      	ldr	r2, [pc, #72]	; (8007cdc <HAL_SD_IRQHandler+0x2e8>)
 8007c94:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fc f952 	bl	8003f44 <HAL_DMA_Abort_IT>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fa3b 	bl	8008126 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007cb0:	e00d      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f828 	bl	8007d1c <HAL_SD_AbortCallback>
}
 8007ccc:	e7ff      	b.n	8007cce <HAL_SD_IRQHandler+0x2da>
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	080080b9 	.word	0x080080b9
 8007cdc:	08008127 	.word	0x08008127

08007ce0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3e:	0f9b      	lsrs	r3, r3, #30
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4a:	0e9b      	lsrs	r3, r3, #26
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6e:	0c1b      	lsrs	r3, r3, #16
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d90:	0d1b      	lsrs	r3, r3, #20
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dae:	0bdb      	lsrs	r3, r3, #15
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc0:	0b9b      	lsrs	r3, r3, #14
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd2:	0b5b      	lsrs	r3, r3, #13
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de4:	0b1b      	lsrs	r3, r3, #12
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2200      	movs	r2, #0
 8007df6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d163      	bne.n	8007ec8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e04:	009a      	lsls	r2, r3, #2
 8007e06:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e10:	0f92      	lsrs	r2, r2, #30
 8007e12:	431a      	orrs	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	0edb      	lsrs	r3, r3, #27
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2e:	0e1b      	lsrs	r3, r3, #24
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e40:	0d5b      	lsrs	r3, r3, #21
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	0c9b      	lsrs	r3, r3, #18
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	0bdb      	lsrs	r3, r3, #15
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	7e1b      	ldrb	r3, [r3, #24]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	3302      	adds	r3, #2
 8007e88:	2201      	movs	r2, #1
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e92:	fb03 f202 	mul.w	r2, r3, r2
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	7a1b      	ldrb	r3, [r3, #8]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007eb4:	0a52      	lsrs	r2, r2, #9
 8007eb6:	fb03 f202 	mul.w	r2, r3, r2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec4:	661a      	str	r2, [r3, #96]	; 0x60
 8007ec6:	e031      	b.n	8007f2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d11d      	bne.n	8007f0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	3301      	adds	r3, #1
 8007eec:	029a      	lsls	r2, r3, #10
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f00:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	661a      	str	r2, [r3, #96]	; 0x60
 8007f0a:	e00f      	b.n	8007f2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a58      	ldr	r2, [pc, #352]	; (8008074 <HAL_SD_GetCardCSD+0x344>)
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e09d      	b.n	8008068 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f30:	0b9b      	lsrs	r3, r3, #14
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f42:	09db      	lsrs	r3, r3, #7
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	0fdb      	lsrs	r3, r3, #31
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	0f5b      	lsrs	r3, r3, #29
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	0e9b      	lsrs	r3, r3, #26
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	0d9b      	lsrs	r3, r3, #22
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	0d5b      	lsrs	r3, r3, #21
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	0bdb      	lsrs	r3, r3, #15
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	0b9b      	lsrs	r3, r3, #14
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	0b5b      	lsrs	r3, r3, #13
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	0b1b      	lsrs	r3, r3, #12
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008026:	0a9b      	lsrs	r3, r3, #10
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	004005ff 	.word	0x004005ff

08008078 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f9de 	bl	800844c <SD_SendStatus>
 8008090:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	0a5b      	lsrs	r3, r3, #9
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80080ae:	693b      	ldr	r3, [r7, #16]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80080ce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7ff ffd1 	bl	8008078 <HAL_SD_GetCardState>
 80080d6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b06      	cmp	r3, #6
 80080ea:	d002      	beq.n	80080f2 <SD_DMATxAbort+0x3a>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b05      	cmp	r3, #5
 80080f0:	d10a      	bne.n	8008108 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f002 f984 	bl	800a404 <SDMMC_CmdStopTransfer>
 80080fc:	4602      	mov	r2, r0
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008102:	431a      	orrs	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff fe03 	bl	8007d1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008116:	e002      	b.n	800811e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fdf5 	bl	8007d08 <HAL_SD_ErrorCallback>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f240 523a 	movw	r2, #1338	; 0x53a
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff ff9a 	bl	8008078 <HAL_SD_GetCardState>
 8008144:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b06      	cmp	r3, #6
 8008158:	d002      	beq.n	8008160 <SD_DMARxAbort+0x3a>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d10a      	bne.n	8008176 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f002 f94d 	bl	800a404 <SDMMC_CmdStopTransfer>
 800816a:	4602      	mov	r2, r0
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	431a      	orrs	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fdcc 	bl	8007d1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008184:	e002      	b.n	800818c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fdbe 	bl	8007d08 <HAL_SD_ErrorCallback>
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008194:	b5b0      	push	{r4, r5, r7, lr}
 8008196:	b094      	sub	sp, #80	; 0x50
 8008198:	af04      	add	r7, sp, #16
 800819a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800819c:	2301      	movs	r3, #1
 800819e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f002 f8b2 	bl	800a30e <SDIO_GetPowerState>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80081b4:	e0b8      	b.n	8008328 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d02f      	beq.n	800821e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f002 f9e5 	bl	800a592 <SDMMC_CmdSendCID>
 80081c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80081d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d2:	e0a9      	b.n	8008328 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f002 f8dc 	bl	800a398 <SDIO_GetResponse>
 80081e0:	4602      	mov	r2, r0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2104      	movs	r1, #4
 80081ec:	4618      	mov	r0, r3
 80081ee:	f002 f8d3 	bl	800a398 <SDIO_GetResponse>
 80081f2:	4602      	mov	r2, r0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2108      	movs	r1, #8
 80081fe:	4618      	mov	r0, r3
 8008200:	f002 f8ca 	bl	800a398 <SDIO_GetResponse>
 8008204:	4602      	mov	r2, r0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	210c      	movs	r1, #12
 8008210:	4618      	mov	r0, r3
 8008212:	f002 f8c1 	bl	800a398 <SDIO_GetResponse>
 8008216:	4602      	mov	r2, r0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	2b03      	cmp	r3, #3
 8008224:	d00d      	beq.n	8008242 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f107 020e 	add.w	r2, r7, #14
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f002 f9eb 	bl	800a60c <SDMMC_CmdSetRelAdd>
 8008236:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <SD_InitCard+0xae>
    {
      return errorstate;
 800823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008240:	e072      	b.n	8008328 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008246:	2b03      	cmp	r3, #3
 8008248:	d036      	beq.n	80082b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800824a:	89fb      	ldrh	r3, [r7, #14]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f002 f9b5 	bl	800a5ce <SDMMC_CmdSendCSD>
 8008264:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <SD_InitCard+0xdc>
    {
      return errorstate;
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	e05b      	b.n	8008328 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f002 f88e 	bl	800a398 <SDIO_GetResponse>
 800827c:	4602      	mov	r2, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2104      	movs	r1, #4
 8008288:	4618      	mov	r0, r3
 800828a:	f002 f885 	bl	800a398 <SDIO_GetResponse>
 800828e:	4602      	mov	r2, r0
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2108      	movs	r1, #8
 800829a:	4618      	mov	r0, r3
 800829c:	f002 f87c 	bl	800a398 <SDIO_GetResponse>
 80082a0:	4602      	mov	r2, r0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	210c      	movs	r1, #12
 80082ac:	4618      	mov	r0, r3
 80082ae:	f002 f873 	bl	800a398 <SDIO_GetResponse>
 80082b2:	4602      	mov	r2, r0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2104      	movs	r1, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 f86a 	bl	800a398 <SDIO_GetResponse>
 80082c4:	4603      	mov	r3, r0
 80082c6:	0d1a      	lsrs	r2, r3, #20
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80082cc:	f107 0310 	add.w	r3, r7, #16
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fd2c 	bl	8007d30 <HAL_SD_GetCardCSD>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082e2:	e021      	b.n	8008328 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6819      	ldr	r1, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	2200      	movs	r2, #0
 80082f0:	461c      	mov	r4, r3
 80082f2:	4615      	mov	r5, r2
 80082f4:	4622      	mov	r2, r4
 80082f6:	462b      	mov	r3, r5
 80082f8:	4608      	mov	r0, r1
 80082fa:	f002 f8a5 	bl	800a448 <SDMMC_CmdSelDesel>
 80082fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <SD_InitCard+0x176>
  {
    return errorstate;
 8008306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008308:	e00e      	b.n	8008328 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681d      	ldr	r5, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	466c      	mov	r4, sp
 8008312:	f103 0210 	add.w	r2, r3, #16
 8008316:	ca07      	ldmia	r2, {r0, r1, r2}
 8008318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800831c:	3304      	adds	r3, #4
 800831e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008320:	4628      	mov	r0, r5
 8008322:	f001 ff9d 	bl	800a260 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3740      	adds	r7, #64	; 0x40
 800832c:	46bd      	mov	sp, r7
 800832e:	bdb0      	pop	{r4, r5, r7, pc}

08008330 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	2300      	movs	r3, #0
 8008342:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f002 f8a0 	bl	800a48e <SDMMC_CmdGoIdleState>
 800834e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	e072      	b.n	8008440 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f002 f8b3 	bl	800a4ca <SDMMC_CmdOperCond>
 8008364:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00d      	beq.n	8008388 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f002 f889 	bl	800a48e <SDMMC_CmdGoIdleState>
 800837c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	e05b      	b.n	8008440 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008392:	2b01      	cmp	r3, #1
 8008394:	d137      	bne.n	8008406 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f002 f8b3 	bl	800a508 <SDMMC_CmdAppCommand>
 80083a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d02d      	beq.n	8008406 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083ae:	e047      	b.n	8008440 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f002 f8a6 	bl	800a508 <SDMMC_CmdAppCommand>
 80083bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	e03b      	b.n	8008440 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	491e      	ldr	r1, [pc, #120]	; (8008448 <SD_PowerON+0x118>)
 80083ce:	4618      	mov	r0, r3
 80083d0:	f002 f8bc 	bl	800a54c <SDMMC_CmdAppOperCommand>
 80083d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083e0:	e02e      	b.n	8008440 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 ffd5 	bl	800a398 <SDIO_GetResponse>
 80083ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	0fdb      	lsrs	r3, r3, #31
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <SD_PowerON+0xcc>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e000      	b.n	80083fe <SD_PowerON+0xce>
 80083fc:	2300      	movs	r3, #0
 80083fe:	613b      	str	r3, [r7, #16]

    count++;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3301      	adds	r3, #1
 8008404:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800840c:	4293      	cmp	r3, r2
 800840e:	d802      	bhi.n	8008416 <SD_PowerON+0xe6>
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0cc      	beq.n	80083b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800841c:	4293      	cmp	r3, r2
 800841e:	d902      	bls.n	8008426 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008424:	e00c      	b.n	8008440 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
 8008436:	e002      	b.n	800843e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	c1100000 	.word	0xc1100000

0800844c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800845c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008460:	e018      	b.n	8008494 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f002 f8ed 	bl	800a64e <SDMMC_CmdSendStatus>
 8008474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <SD_SendStatus+0x34>
  {
    return errorstate;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	e009      	b.n	8008494 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2100      	movs	r1, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f001 ff86 	bl	800a398 <SDIO_GetResponse>
 800848c:	4602      	mov	r2, r0
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d03f      	beq.n	8008536 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	e033      	b.n	8008524 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fef8 	bl	800a2b6 <SDIO_ReadFIFO>
 80084c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3b01      	subs	r3, #1
 80084da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	0a1b      	lsrs	r3, r3, #8
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	0c1b      	lsrs	r3, r3, #16
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	3b01      	subs	r3, #1
 8008506:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	0e1b      	lsrs	r3, r3, #24
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	3b01      	subs	r3, #1
 800851c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	3301      	adds	r3, #1
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b07      	cmp	r3, #7
 8008528:	d9c8      	bls.n	80084bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008536:	bf00      	nop
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d043      	beq.n	80085e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	e037      	b.n	80085ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3b01      	subs	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	021a      	lsls	r2, r3, #8
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4313      	orrs	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3b01      	subs	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	041a      	lsls	r2, r3, #16
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4313      	orrs	r3, r2
 8008592:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3301      	adds	r3, #1
 8008598:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3b01      	subs	r3, #1
 800859e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	061a      	lsls	r2, r3, #24
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f107 0208 	add.w	r2, r7, #8
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fe84 	bl	800a2d0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	3301      	adds	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b07      	cmp	r3, #7
 80085d2:	d9c4      	bls.n	800855e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80085e0:	bf00      	nop
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e07b      	b.n	80086f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d108      	bne.n	8008614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800860a:	d009      	beq.n	8008620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
 8008612:	e005      	b.n	8008620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fa f864 	bl	8002708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008668:	431a      	orrs	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	431a      	orrs	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a4:	ea42 0103 	orr.w	r1, r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	f003 0104 	and.w	r1, r3, #4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	f003 0210 	and.w	r2, r3, #16
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b088      	sub	sp, #32
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_SPI_Transmit+0x22>
 8008718:	2302      	movs	r3, #2
 800871a:	e126      	b.n	800896a <HAL_SPI_Transmit+0x270>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008724:	f7fa fbd2 	bl	8002ecc <HAL_GetTick>
 8008728:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b01      	cmp	r3, #1
 8008738:	d002      	beq.n	8008740 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800873a:	2302      	movs	r3, #2
 800873c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800873e:	e10b      	b.n	8008958 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_SPI_Transmit+0x52>
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008750:	e102      	b.n	8008958 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2203      	movs	r2, #3
 8008756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	88fa      	ldrh	r2, [r7, #6]
 800876a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008798:	d10f      	bne.n	80087ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b40      	cmp	r3, #64	; 0x40
 80087c6:	d007      	beq.n	80087d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e0:	d14b      	bne.n	800887a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <HAL_SPI_Transmit+0xf6>
 80087ea:	8afb      	ldrh	r3, [r7, #22]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d13e      	bne.n	800886e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	881a      	ldrh	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008800:	1c9a      	adds	r2, r3, #2
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008814:	e02b      	b.n	800886e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b02      	cmp	r3, #2
 8008822:	d112      	bne.n	800884a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	881a      	ldrh	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008834:	1c9a      	adds	r2, r3, #2
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	86da      	strh	r2, [r3, #54]	; 0x36
 8008848:	e011      	b.n	800886e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800884a:	f7fa fb3f 	bl	8002ecc <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d803      	bhi.n	8008862 <HAL_SPI_Transmit+0x168>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d102      	bne.n	8008868 <HAL_SPI_Transmit+0x16e>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800886c:	e074      	b.n	8008958 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1ce      	bne.n	8008816 <HAL_SPI_Transmit+0x11c>
 8008878:	e04c      	b.n	8008914 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <HAL_SPI_Transmit+0x18e>
 8008882:	8afb      	ldrh	r3, [r7, #22]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d140      	bne.n	800890a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	330c      	adds	r3, #12
 8008892:	7812      	ldrb	r2, [r2, #0]
 8008894:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80088ae:	e02c      	b.n	800890a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d113      	bne.n	80088e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	7812      	ldrb	r2, [r2, #0]
 80088ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80088e4:	e011      	b.n	800890a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e6:	f7fa faf1 	bl	8002ecc <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d803      	bhi.n	80088fe <HAL_SPI_Transmit+0x204>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fc:	d102      	bne.n	8008904 <HAL_SPI_Transmit+0x20a>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008908:	e026      	b.n	8008958 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1cd      	bne.n	80088b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f8b3 	bl	8008a84 <SPI_EndRxTxTransaction>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	77fb      	strb	r3, [r7, #31]
 8008954:	e000      	b.n	8008958 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008956:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008968:	7ffb      	ldrb	r3, [r7, #31]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4613      	mov	r3, r2
 8008982:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008984:	f7fa faa2 	bl	8002ecc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	4413      	add	r3, r2
 8008992:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008994:	f7fa fa9a 	bl	8002ecc <HAL_GetTick>
 8008998:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800899a:	4b39      	ldr	r3, [pc, #228]	; (8008a80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	015b      	lsls	r3, r3, #5
 80089a0:	0d1b      	lsrs	r3, r3, #20
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	fb02 f303 	mul.w	r3, r2, r3
 80089a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089aa:	e054      	b.n	8008a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d050      	beq.n	8008a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089b4:	f7fa fa8a 	bl	8002ecc <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d902      	bls.n	80089ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d13d      	bne.n	8008a46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089e2:	d111      	bne.n	8008a08 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ec:	d004      	beq.n	80089f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f6:	d107      	bne.n	8008a08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a10:	d10f      	bne.n	8008a32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e017      	b.n	8008a76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	bf0c      	ite	eq
 8008a66:	2301      	moveq	r3, #1
 8008a68:	2300      	movne	r3, #0
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d19b      	bne.n	80089ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000000 	.word	0x20000000

08008a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a90:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <SPI_EndRxTxTransaction+0x7c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <SPI_EndRxTxTransaction+0x80>)
 8008a96:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9a:	0d5b      	lsrs	r3, r3, #21
 8008a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008aa0:	fb02 f303 	mul.w	r3, r2, r3
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aae:	d112      	bne.n	8008ad6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2180      	movs	r1, #128	; 0x80
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff ff5a 	bl	8008974 <SPI_WaitFlagStateUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d016      	beq.n	8008af4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e00f      	b.n	8008af6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	d0f2      	beq.n	8008ad6 <SPI_EndRxTxTransaction+0x52>
 8008af0:	e000      	b.n	8008af4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008af2:	bf00      	nop
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000000 	.word	0x20000000
 8008b04:	165e9f81 	.word	0x165e9f81

08008b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e041      	b.n	8008b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7f9 fe32 	bl	8002798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4619      	mov	r1, r3
 8008b46:	4610      	mov	r0, r2
 8008b48:	f000 fcd6 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d001      	beq.n	8008bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e046      	b.n	8008c4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a23      	ldr	r2, [pc, #140]	; (8008c5c <HAL_TIM_Base_Start+0xb4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d022      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bda:	d01d      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <HAL_TIM_Base_Start+0xb8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d018      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a1e      	ldr	r2, [pc, #120]	; (8008c64 <HAL_TIM_Base_Start+0xbc>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d013      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a1c      	ldr	r2, [pc, #112]	; (8008c68 <HAL_TIM_Base_Start+0xc0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00e      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <HAL_TIM_Base_Start+0xc4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d009      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a19      	ldr	r2, [pc, #100]	; (8008c70 <HAL_TIM_Base_Start+0xc8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d004      	beq.n	8008c18 <HAL_TIM_Base_Start+0x70>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a18      	ldr	r2, [pc, #96]	; (8008c74 <HAL_TIM_Base_Start+0xcc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d111      	bne.n	8008c3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b06      	cmp	r3, #6
 8008c28:	d010      	beq.n	8008c4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f042 0201 	orr.w	r2, r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	e007      	b.n	8008c4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	40010000 	.word	0x40010000
 8008c60:	40000400 	.word	0x40000400
 8008c64:	40000800 	.word	0x40000800
 8008c68:	40000c00 	.word	0x40000c00
 8008c6c:	40010400 	.word	0x40010400
 8008c70:	40014000 	.word	0x40014000
 8008c74:	40001800 	.word	0x40001800

08008c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e041      	b.n	8008d0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f839 	bl	8008d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f000 fc1e 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <HAL_TIM_PWM_Start+0x24>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	bf14      	ite	ne
 8008d48:	2301      	movne	r3, #1
 8008d4a:	2300      	moveq	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	e022      	b.n	8008d96 <HAL_TIM_PWM_Start+0x6a>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d109      	bne.n	8008d6a <HAL_TIM_PWM_Start+0x3e>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	bf14      	ite	ne
 8008d62:	2301      	movne	r3, #1
 8008d64:	2300      	moveq	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	e015      	b.n	8008d96 <HAL_TIM_PWM_Start+0x6a>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d109      	bne.n	8008d84 <HAL_TIM_PWM_Start+0x58>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	bf14      	ite	ne
 8008d7c:	2301      	movne	r3, #1
 8008d7e:	2300      	moveq	r3, #0
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	e008      	b.n	8008d96 <HAL_TIM_PWM_Start+0x6a>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	bf14      	ite	ne
 8008d90:	2301      	movne	r3, #1
 8008d92:	2300      	moveq	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e07c      	b.n	8008e98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_PWM_Start+0x82>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dac:	e013      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xaa>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_PWM_Start+0x92>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dbc:	e00b      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xaa>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_PWM_Start+0xa2>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dcc:	e003      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xaa>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fe74 	bl	8009acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a2d      	ldr	r2, [pc, #180]	; (8008ea0 <HAL_TIM_PWM_Start+0x174>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d004      	beq.n	8008df8 <HAL_TIM_PWM_Start+0xcc>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a2c      	ldr	r2, [pc, #176]	; (8008ea4 <HAL_TIM_PWM_Start+0x178>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d101      	bne.n	8008dfc <HAL_TIM_PWM_Start+0xd0>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e000      	b.n	8008dfe <HAL_TIM_PWM_Start+0xd2>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d007      	beq.n	8008e12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a22      	ldr	r2, [pc, #136]	; (8008ea0 <HAL_TIM_PWM_Start+0x174>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d022      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e24:	d01d      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a1f      	ldr	r2, [pc, #124]	; (8008ea8 <HAL_TIM_PWM_Start+0x17c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d018      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a1d      	ldr	r2, [pc, #116]	; (8008eac <HAL_TIM_PWM_Start+0x180>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <HAL_TIM_PWM_Start+0x184>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00e      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a16      	ldr	r2, [pc, #88]	; (8008ea4 <HAL_TIM_PWM_Start+0x178>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d009      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a18      	ldr	r2, [pc, #96]	; (8008eb4 <HAL_TIM_PWM_Start+0x188>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d004      	beq.n	8008e62 <HAL_TIM_PWM_Start+0x136>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a16      	ldr	r2, [pc, #88]	; (8008eb8 <HAL_TIM_PWM_Start+0x18c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d111      	bne.n	8008e86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b06      	cmp	r3, #6
 8008e72:	d010      	beq.n	8008e96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e84:	e007      	b.n	8008e96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40010400 	.word	0x40010400
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000800 	.word	0x40000800
 8008eb0:	40000c00 	.word	0x40000c00
 8008eb4:	40014000 	.word	0x40014000
 8008eb8:	40001800 	.word	0x40001800

08008ebc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e041      	b.n	8008f54 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f839 	bl	8008f5c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2202      	movs	r2, #2
 8008eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f000 fafb 	bl	80094f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0208 	bic.w	r2, r2, #8
 8008f10:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6819      	ldr	r1, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d122      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d11b      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0202 	mvn.w	r2, #2
 8008f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa81 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 8008fb8:	e005      	b.n	8008fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa73 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fa84 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d122      	bne.n	8009020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d11b      	bne.n	8009020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0204 	mvn.w	r2, #4
 8008ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa57 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 800900c:	e005      	b.n	800901a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa49 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa5a 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b08      	cmp	r3, #8
 800902c:	d122      	bne.n	8009074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b08      	cmp	r3, #8
 800903a:	d11b      	bne.n	8009074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0208 	mvn.w	r2, #8
 8009044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2204      	movs	r2, #4
 800904a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa2d 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 8009060:	e005      	b.n	800906e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa1f 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa30 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b10      	cmp	r3, #16
 8009080:	d122      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b10      	cmp	r3, #16
 800908e:	d11b      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0210 	mvn.w	r2, #16
 8009098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2208      	movs	r2, #8
 800909e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa03 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 80090b4:	e005      	b.n	80090c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f9f5 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa06 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d107      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0201 	mvn.w	r2, #1
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9cf 	bl	8009492 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fe:	2b80      	cmp	r3, #128	; 0x80
 8009100:	d10e      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910c:	2b80      	cmp	r3, #128	; 0x80
 800910e:	d107      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fdd4 	bl	8009cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d10e      	bne.n	800914c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b40      	cmp	r3, #64	; 0x40
 800913a:	d107      	bne.n	800914c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9cb 	bl	80094e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b20      	cmp	r3, #32
 8009158:	d10e      	bne.n	8009178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b20      	cmp	r3, #32
 8009166:	d107      	bne.n	8009178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f06f 0220 	mvn.w	r2, #32
 8009170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fd9e 	bl	8009cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800919a:	2302      	movs	r3, #2
 800919c:	e0ae      	b.n	80092fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b0c      	cmp	r3, #12
 80091aa:	f200 809f 	bhi.w	80092ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091e9 	.word	0x080091e9
 80091b8:	080092ed 	.word	0x080092ed
 80091bc:	080092ed 	.word	0x080092ed
 80091c0:	080092ed 	.word	0x080092ed
 80091c4:	08009229 	.word	0x08009229
 80091c8:	080092ed 	.word	0x080092ed
 80091cc:	080092ed 	.word	0x080092ed
 80091d0:	080092ed 	.word	0x080092ed
 80091d4:	0800926b 	.word	0x0800926b
 80091d8:	080092ed 	.word	0x080092ed
 80091dc:	080092ed 	.word	0x080092ed
 80091e0:	080092ed 	.word	0x080092ed
 80091e4:	080092ab 	.word	0x080092ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fa22 	bl	8009638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699a      	ldr	r2, [r3, #24]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0208 	orr.w	r2, r2, #8
 8009202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 0204 	bic.w	r2, r2, #4
 8009212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6999      	ldr	r1, [r3, #24]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	619a      	str	r2, [r3, #24]
      break;
 8009226:	e064      	b.n	80092f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fa72 	bl	8009718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6999      	ldr	r1, [r3, #24]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	021a      	lsls	r2, r3, #8
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	619a      	str	r2, [r3, #24]
      break;
 8009268:	e043      	b.n	80092f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fac7 	bl	8009804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f042 0208 	orr.w	r2, r2, #8
 8009284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69da      	ldr	r2, [r3, #28]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0204 	bic.w	r2, r2, #4
 8009294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69d9      	ldr	r1, [r3, #28]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	61da      	str	r2, [r3, #28]
      break;
 80092a8:	e023      	b.n	80092f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fb1b 	bl	80098ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69da      	ldr	r2, [r3, #28]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69da      	ldr	r2, [r3, #28]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69d9      	ldr	r1, [r3, #28]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	021a      	lsls	r2, r3, #8
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	61da      	str	r2, [r3, #28]
      break;
 80092ea:	e002      	b.n	80092f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	75fb      	strb	r3, [r7, #23]
      break;
 80092f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIM_ConfigClockSource+0x1c>
 800931c:	2302      	movs	r3, #2
 800931e:	e0b4      	b.n	800948a <HAL_TIM_ConfigClockSource+0x186>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800933e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009358:	d03e      	beq.n	80093d8 <HAL_TIM_ConfigClockSource+0xd4>
 800935a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935e:	f200 8087 	bhi.w	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009366:	f000 8086 	beq.w	8009476 <HAL_TIM_ConfigClockSource+0x172>
 800936a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936e:	d87f      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009370:	2b70      	cmp	r3, #112	; 0x70
 8009372:	d01a      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0xa6>
 8009374:	2b70      	cmp	r3, #112	; 0x70
 8009376:	d87b      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009378:	2b60      	cmp	r3, #96	; 0x60
 800937a:	d050      	beq.n	800941e <HAL_TIM_ConfigClockSource+0x11a>
 800937c:	2b60      	cmp	r3, #96	; 0x60
 800937e:	d877      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009380:	2b50      	cmp	r3, #80	; 0x50
 8009382:	d03c      	beq.n	80093fe <HAL_TIM_ConfigClockSource+0xfa>
 8009384:	2b50      	cmp	r3, #80	; 0x50
 8009386:	d873      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009388:	2b40      	cmp	r3, #64	; 0x40
 800938a:	d058      	beq.n	800943e <HAL_TIM_ConfigClockSource+0x13a>
 800938c:	2b40      	cmp	r3, #64	; 0x40
 800938e:	d86f      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009390:	2b30      	cmp	r3, #48	; 0x30
 8009392:	d064      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x15a>
 8009394:	2b30      	cmp	r3, #48	; 0x30
 8009396:	d86b      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 8009398:	2b20      	cmp	r3, #32
 800939a:	d060      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x15a>
 800939c:	2b20      	cmp	r3, #32
 800939e:	d867      	bhi.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d05c      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x15a>
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d05a      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x15a>
 80093a8:	e062      	b.n	8009470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6899      	ldr	r1, [r3, #8]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f000 fb67 	bl	8009a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	609a      	str	r2, [r3, #8]
      break;
 80093d6:	e04f      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	6899      	ldr	r1, [r3, #8]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f000 fb50 	bl	8009a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093fa:	609a      	str	r2, [r3, #8]
      break;
 80093fc:	e03c      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	6859      	ldr	r1, [r3, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	461a      	mov	r2, r3
 800940c:	f000 fac4 	bl	8009998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2150      	movs	r1, #80	; 0x50
 8009416:	4618      	mov	r0, r3
 8009418:	f000 fb1d 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800941c:	e02c      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6859      	ldr	r1, [r3, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	461a      	mov	r2, r3
 800942c:	f000 fae3 	bl	80099f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2160      	movs	r1, #96	; 0x60
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fb0d 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800943c:	e01c      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6859      	ldr	r1, [r3, #4]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	461a      	mov	r2, r3
 800944c:	f000 faa4 	bl	8009998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2140      	movs	r1, #64	; 0x40
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fafd 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800945c:	e00c      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4619      	mov	r1, r3
 8009468:	4610      	mov	r0, r2
 800946a:	f000 faf4 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800946e:	e003      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
      break;
 8009474:	e000      	b.n	8009478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a40      	ldr	r2, [pc, #256]	; (800960c <TIM_Base_SetConfig+0x114>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d013      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009516:	d00f      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a3d      	ldr	r2, [pc, #244]	; (8009610 <TIM_Base_SetConfig+0x118>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00b      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a3c      	ldr	r2, [pc, #240]	; (8009614 <TIM_Base_SetConfig+0x11c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d007      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a3b      	ldr	r2, [pc, #236]	; (8009618 <TIM_Base_SetConfig+0x120>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a3a      	ldr	r2, [pc, #232]	; (800961c <TIM_Base_SetConfig+0x124>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d108      	bne.n	800954a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2f      	ldr	r2, [pc, #188]	; (800960c <TIM_Base_SetConfig+0x114>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d02b      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009558:	d027      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a2c      	ldr	r2, [pc, #176]	; (8009610 <TIM_Base_SetConfig+0x118>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d023      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a2b      	ldr	r2, [pc, #172]	; (8009614 <TIM_Base_SetConfig+0x11c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d01f      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a2a      	ldr	r2, [pc, #168]	; (8009618 <TIM_Base_SetConfig+0x120>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d01b      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a29      	ldr	r2, [pc, #164]	; (800961c <TIM_Base_SetConfig+0x124>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d017      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a28      	ldr	r2, [pc, #160]	; (8009620 <TIM_Base_SetConfig+0x128>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d013      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a27      	ldr	r2, [pc, #156]	; (8009624 <TIM_Base_SetConfig+0x12c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d00f      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a26      	ldr	r2, [pc, #152]	; (8009628 <TIM_Base_SetConfig+0x130>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00b      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a25      	ldr	r2, [pc, #148]	; (800962c <TIM_Base_SetConfig+0x134>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d007      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a24      	ldr	r2, [pc, #144]	; (8009630 <TIM_Base_SetConfig+0x138>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d003      	beq.n	80095aa <TIM_Base_SetConfig+0xb2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a23      	ldr	r2, [pc, #140]	; (8009634 <TIM_Base_SetConfig+0x13c>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d108      	bne.n	80095bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a0a      	ldr	r2, [pc, #40]	; (800960c <TIM_Base_SetConfig+0x114>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_Base_SetConfig+0xf8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a0c      	ldr	r2, [pc, #48]	; (800961c <TIM_Base_SetConfig+0x124>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d103      	bne.n	80095f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	615a      	str	r2, [r3, #20]
}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	40010000 	.word	0x40010000
 8009610:	40000400 	.word	0x40000400
 8009614:	40000800 	.word	0x40000800
 8009618:	40000c00 	.word	0x40000c00
 800961c:	40010400 	.word	0x40010400
 8009620:	40014000 	.word	0x40014000
 8009624:	40014400 	.word	0x40014400
 8009628:	40014800 	.word	0x40014800
 800962c:	40001800 	.word	0x40001800
 8009630:	40001c00 	.word	0x40001c00
 8009634:	40002000 	.word	0x40002000

08009638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	f023 0201 	bic.w	r2, r3, #1
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 0303 	bic.w	r3, r3, #3
 800966e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f023 0302 	bic.w	r3, r3, #2
 8009680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	4313      	orrs	r3, r2
 800968a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a20      	ldr	r2, [pc, #128]	; (8009710 <TIM_OC1_SetConfig+0xd8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_OC1_SetConfig+0x64>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1f      	ldr	r2, [pc, #124]	; (8009714 <TIM_OC1_SetConfig+0xdc>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d10c      	bne.n	80096b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0308 	bic.w	r3, r3, #8
 80096a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f023 0304 	bic.w	r3, r3, #4
 80096b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a15      	ldr	r2, [pc, #84]	; (8009710 <TIM_OC1_SetConfig+0xd8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d003      	beq.n	80096c6 <TIM_OC1_SetConfig+0x8e>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a14      	ldr	r2, [pc, #80]	; (8009714 <TIM_OC1_SetConfig+0xdc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d111      	bne.n	80096ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	4313      	orrs	r3, r2
 80096de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	621a      	str	r2, [r3, #32]
}
 8009704:	bf00      	nop
 8009706:	371c      	adds	r7, #28
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	40010000 	.word	0x40010000
 8009714:	40010400 	.word	0x40010400

08009718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f023 0210 	bic.w	r2, r3, #16
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f023 0320 	bic.w	r3, r3, #32
 8009762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a22      	ldr	r2, [pc, #136]	; (80097fc <TIM_OC2_SetConfig+0xe4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d003      	beq.n	8009780 <TIM_OC2_SetConfig+0x68>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a21      	ldr	r2, [pc, #132]	; (8009800 <TIM_OC2_SetConfig+0xe8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10d      	bne.n	800979c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	4313      	orrs	r3, r2
 8009792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800979a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a17      	ldr	r2, [pc, #92]	; (80097fc <TIM_OC2_SetConfig+0xe4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d003      	beq.n	80097ac <TIM_OC2_SetConfig+0x94>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a16      	ldr	r2, [pc, #88]	; (8009800 <TIM_OC2_SetConfig+0xe8>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d113      	bne.n	80097d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40010000 	.word	0x40010000
 8009800:	40010400 	.word	0x40010400

08009804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0303 	bic.w	r3, r3, #3
 800983a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800984c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	021b      	lsls	r3, r3, #8
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	4313      	orrs	r3, r2
 8009858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a21      	ldr	r2, [pc, #132]	; (80098e4 <TIM_OC3_SetConfig+0xe0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d003      	beq.n	800986a <TIM_OC3_SetConfig+0x66>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a20      	ldr	r2, [pc, #128]	; (80098e8 <TIM_OC3_SetConfig+0xe4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d10d      	bne.n	8009886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	021b      	lsls	r3, r3, #8
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	4313      	orrs	r3, r2
 800987c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a16      	ldr	r2, [pc, #88]	; (80098e4 <TIM_OC3_SetConfig+0xe0>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d003      	beq.n	8009896 <TIM_OC3_SetConfig+0x92>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a15      	ldr	r2, [pc, #84]	; (80098e8 <TIM_OC3_SetConfig+0xe4>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d113      	bne.n	80098be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800989c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	011b      	lsls	r3, r3, #4
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	621a      	str	r2, [r3, #32]
}
 80098d8:	bf00      	nop
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4313      	orrs	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	031b      	lsls	r3, r3, #12
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4313      	orrs	r3, r2
 8009942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a12      	ldr	r2, [pc, #72]	; (8009990 <TIM_OC4_SetConfig+0xa4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d003      	beq.n	8009954 <TIM_OC4_SetConfig+0x68>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a11      	ldr	r2, [pc, #68]	; (8009994 <TIM_OC4_SetConfig+0xa8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d109      	bne.n	8009968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800995a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	019b      	lsls	r3, r3, #6
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	621a      	str	r2, [r3, #32]
}
 8009982:	bf00      	nop
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40010000 	.word	0x40010000
 8009994:	40010400 	.word	0x40010400

08009998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0201 	bic.w	r2, r3, #1
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 030a 	bic.w	r3, r3, #10
 80099d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	621a      	str	r2, [r3, #32]
}
 80099ea:	bf00      	nop
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b087      	sub	sp, #28
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0210 	bic.w	r2, r3, #16
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	031b      	lsls	r3, r3, #12
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	f043 0307 	orr.w	r3, r3, #7
 8009a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	609a      	str	r2, [r3, #8]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	021a      	lsls	r2, r3, #8
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	609a      	str	r2, [r3, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	2201      	movs	r2, #1
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1a      	ldr	r2, [r3, #32]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f003 031f 	and.w	r3, r3, #31
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	fa01 f303 	lsl.w	r3, r1, r3
 8009b04:	431a      	orrs	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
	...

08009b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e05a      	b.n	8009be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a21      	ldr	r2, [pc, #132]	; (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d022      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7c:	d01d      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1d      	ldr	r2, [pc, #116]	; (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d018      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d013      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a1a      	ldr	r2, [pc, #104]	; (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d00e      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a18      	ldr	r2, [pc, #96]	; (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d009      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d004      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d10c      	bne.n	8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40010000 	.word	0x40010000
 8009bf8:	40000400 	.word	0x40000400
 8009bfc:	40000800 	.word	0x40000800
 8009c00:	40000c00 	.word	0x40000c00
 8009c04:	40010400 	.word	0x40010400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40001800 	.word	0x40001800

08009c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e03d      	b.n	8009ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e03f      	b.n	8009d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7f8 fe4e 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2224      	movs	r2, #36	; 0x24
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f829 	bl	8009d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d7c:	b0c0      	sub	sp, #256	; 0x100
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d94:	68d9      	ldr	r1, [r3, #12]
 8009d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	ea40 0301 	orr.w	r3, r0, r1
 8009da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	431a      	orrs	r2, r3
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009dd0:	f021 010c 	bic.w	r1, r1, #12
 8009dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dde:	430b      	orrs	r3, r1
 8009de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df2:	6999      	ldr	r1, [r3, #24]
 8009df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	ea40 0301 	orr.w	r3, r0, r1
 8009dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4b8f      	ldr	r3, [pc, #572]	; (800a044 <UART_SetConfig+0x2cc>)
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d005      	beq.n	8009e18 <UART_SetConfig+0xa0>
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b8d      	ldr	r3, [pc, #564]	; (800a048 <UART_SetConfig+0x2d0>)
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d104      	bne.n	8009e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e18:	f7fc fba2 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
 8009e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e20:	e003      	b.n	8009e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e22:	f7fc fb89 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 8009e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e34:	f040 810c 	bne.w	800a050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	1891      	adds	r1, r2, r2
 8009e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e52:	415b      	adcs	r3, r3
 8009e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	eb12 0801 	adds.w	r8, r2, r1
 8009e60:	4629      	mov	r1, r5
 8009e62:	eb43 0901 	adc.w	r9, r3, r1
 8009e66:	f04f 0200 	mov.w	r2, #0
 8009e6a:	f04f 0300 	mov.w	r3, #0
 8009e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e7a:	4690      	mov	r8, r2
 8009e7c:	4699      	mov	r9, r3
 8009e7e:	4623      	mov	r3, r4
 8009e80:	eb18 0303 	adds.w	r3, r8, r3
 8009e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e88:	462b      	mov	r3, r5
 8009e8a:	eb49 0303 	adc.w	r3, r9, r3
 8009e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	18db      	adds	r3, r3, r3
 8009eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8009eac:	4613      	mov	r3, r2
 8009eae:	eb42 0303 	adc.w	r3, r2, r3
 8009eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8009eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ebc:	f7f6 f9a2 	bl	8000204 <__aeabi_uldivmod>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4b61      	ldr	r3, [pc, #388]	; (800a04c <UART_SetConfig+0x2d4>)
 8009ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8009eca:	095b      	lsrs	r3, r3, #5
 8009ecc:	011c      	lsls	r4, r3, #4
 8009ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	464b      	mov	r3, r9
 8009ee4:	1891      	adds	r1, r2, r2
 8009ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ee8:	415b      	adcs	r3, r3
 8009eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ef0:	4641      	mov	r1, r8
 8009ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8009efc:	f04f 0200 	mov.w	r2, #0
 8009f00:	f04f 0300 	mov.w	r3, #0
 8009f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f10:	4692      	mov	sl, r2
 8009f12:	469b      	mov	fp, r3
 8009f14:	4643      	mov	r3, r8
 8009f16:	eb1a 0303 	adds.w	r3, sl, r3
 8009f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f1e:	464b      	mov	r3, r9
 8009f20:	eb4b 0303 	adc.w	r3, fp, r3
 8009f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	18db      	adds	r3, r3, r3
 8009f40:	643b      	str	r3, [r7, #64]	; 0x40
 8009f42:	4613      	mov	r3, r2
 8009f44:	eb42 0303 	adc.w	r3, r2, r3
 8009f48:	647b      	str	r3, [r7, #68]	; 0x44
 8009f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f52:	f7f6 f957 	bl	8000204 <__aeabi_uldivmod>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4b3b      	ldr	r3, [pc, #236]	; (800a04c <UART_SetConfig+0x2d4>)
 8009f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f62:	095b      	lsrs	r3, r3, #5
 8009f64:	2264      	movs	r2, #100	; 0x64
 8009f66:	fb02 f303 	mul.w	r3, r2, r3
 8009f6a:	1acb      	subs	r3, r1, r3
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f72:	4b36      	ldr	r3, [pc, #216]	; (800a04c <UART_SetConfig+0x2d4>)
 8009f74:	fba3 2302 	umull	r2, r3, r3, r2
 8009f78:	095b      	lsrs	r3, r3, #5
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f80:	441c      	add	r4, r3
 8009f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f94:	4642      	mov	r2, r8
 8009f96:	464b      	mov	r3, r9
 8009f98:	1891      	adds	r1, r2, r2
 8009f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f9c:	415b      	adcs	r3, r3
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009fa4:	4641      	mov	r1, r8
 8009fa6:	1851      	adds	r1, r2, r1
 8009fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8009faa:	4649      	mov	r1, r9
 8009fac:	414b      	adcs	r3, r1
 8009fae:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb0:	f04f 0200 	mov.w	r2, #0
 8009fb4:	f04f 0300 	mov.w	r3, #0
 8009fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	00cb      	lsls	r3, r1, #3
 8009fc0:	4651      	mov	r1, sl
 8009fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fc6:	4651      	mov	r1, sl
 8009fc8:	00ca      	lsls	r2, r1, #3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	189b      	adds	r3, r3, r2
 8009fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fd8:	464b      	mov	r3, r9
 8009fda:	460a      	mov	r2, r1
 8009fdc:	eb42 0303 	adc.w	r3, r2, r3
 8009fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	18db      	adds	r3, r3, r3
 8009ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ffe:	4613      	mov	r3, r2
 800a000:	eb42 0303 	adc.w	r3, r2, r3
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a00a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a00e:	f7f6 f8f9 	bl	8000204 <__aeabi_uldivmod>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <UART_SetConfig+0x2d4>)
 800a018:	fba3 1302 	umull	r1, r3, r3, r2
 800a01c:	095b      	lsrs	r3, r3, #5
 800a01e:	2164      	movs	r1, #100	; 0x64
 800a020:	fb01 f303 	mul.w	r3, r1, r3
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	3332      	adds	r3, #50	; 0x32
 800a02a:	4a08      	ldr	r2, [pc, #32]	; (800a04c <UART_SetConfig+0x2d4>)
 800a02c:	fba2 2303 	umull	r2, r3, r2, r3
 800a030:	095b      	lsrs	r3, r3, #5
 800a032:	f003 0207 	and.w	r2, r3, #7
 800a036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4422      	add	r2, r4
 800a03e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a040:	e105      	b.n	800a24e <UART_SetConfig+0x4d6>
 800a042:	bf00      	nop
 800a044:	40011000 	.word	0x40011000
 800a048:	40011400 	.word	0x40011400
 800a04c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a054:	2200      	movs	r2, #0
 800a056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a05a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a05e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a062:	4642      	mov	r2, r8
 800a064:	464b      	mov	r3, r9
 800a066:	1891      	adds	r1, r2, r2
 800a068:	6239      	str	r1, [r7, #32]
 800a06a:	415b      	adcs	r3, r3
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
 800a06e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a072:	4641      	mov	r1, r8
 800a074:	1854      	adds	r4, r2, r1
 800a076:	4649      	mov	r1, r9
 800a078:	eb43 0501 	adc.w	r5, r3, r1
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	f04f 0300 	mov.w	r3, #0
 800a084:	00eb      	lsls	r3, r5, #3
 800a086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a08a:	00e2      	lsls	r2, r4, #3
 800a08c:	4614      	mov	r4, r2
 800a08e:	461d      	mov	r5, r3
 800a090:	4643      	mov	r3, r8
 800a092:	18e3      	adds	r3, r4, r3
 800a094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a098:	464b      	mov	r3, r9
 800a09a:	eb45 0303 	adc.w	r3, r5, r3
 800a09e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	f04f 0300 	mov.w	r3, #0
 800a0ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0be:	4629      	mov	r1, r5
 800a0c0:	008b      	lsls	r3, r1, #2
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	008a      	lsls	r2, r1, #2
 800a0cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0d0:	f7f6 f898 	bl	8000204 <__aeabi_uldivmod>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4b60      	ldr	r3, [pc, #384]	; (800a25c <UART_SetConfig+0x4e4>)
 800a0da:	fba3 2302 	umull	r2, r3, r3, r2
 800a0de:	095b      	lsrs	r3, r3, #5
 800a0e0:	011c      	lsls	r4, r3, #4
 800a0e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0f4:	4642      	mov	r2, r8
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	1891      	adds	r1, r2, r2
 800a0fa:	61b9      	str	r1, [r7, #24]
 800a0fc:	415b      	adcs	r3, r3
 800a0fe:	61fb      	str	r3, [r7, #28]
 800a100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a104:	4641      	mov	r1, r8
 800a106:	1851      	adds	r1, r2, r1
 800a108:	6139      	str	r1, [r7, #16]
 800a10a:	4649      	mov	r1, r9
 800a10c:	414b      	adcs	r3, r1
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	f04f 0200 	mov.w	r2, #0
 800a114:	f04f 0300 	mov.w	r3, #0
 800a118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a11c:	4659      	mov	r1, fp
 800a11e:	00cb      	lsls	r3, r1, #3
 800a120:	4651      	mov	r1, sl
 800a122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a126:	4651      	mov	r1, sl
 800a128:	00ca      	lsls	r2, r1, #3
 800a12a:	4610      	mov	r0, r2
 800a12c:	4619      	mov	r1, r3
 800a12e:	4603      	mov	r3, r0
 800a130:	4642      	mov	r2, r8
 800a132:	189b      	adds	r3, r3, r2
 800a134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a138:	464b      	mov	r3, r9
 800a13a:	460a      	mov	r2, r1
 800a13c:	eb42 0303 	adc.w	r3, r2, r3
 800a140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a14e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a150:	f04f 0200 	mov.w	r2, #0
 800a154:	f04f 0300 	mov.w	r3, #0
 800a158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a15c:	4649      	mov	r1, r9
 800a15e:	008b      	lsls	r3, r1, #2
 800a160:	4641      	mov	r1, r8
 800a162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a166:	4641      	mov	r1, r8
 800a168:	008a      	lsls	r2, r1, #2
 800a16a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a16e:	f7f6 f849 	bl	8000204 <__aeabi_uldivmod>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4b39      	ldr	r3, [pc, #228]	; (800a25c <UART_SetConfig+0x4e4>)
 800a178:	fba3 1302 	umull	r1, r3, r3, r2
 800a17c:	095b      	lsrs	r3, r3, #5
 800a17e:	2164      	movs	r1, #100	; 0x64
 800a180:	fb01 f303 	mul.w	r3, r1, r3
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	3332      	adds	r3, #50	; 0x32
 800a18a:	4a34      	ldr	r2, [pc, #208]	; (800a25c <UART_SetConfig+0x4e4>)
 800a18c:	fba2 2303 	umull	r2, r3, r2, r3
 800a190:	095b      	lsrs	r3, r3, #5
 800a192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a196:	441c      	add	r4, r3
 800a198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a19c:	2200      	movs	r2, #0
 800a19e:	673b      	str	r3, [r7, #112]	; 0x70
 800a1a0:	677a      	str	r2, [r7, #116]	; 0x74
 800a1a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	1891      	adds	r1, r2, r2
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	415b      	adcs	r3, r3
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	1851      	adds	r1, r2, r1
 800a1ba:	6039      	str	r1, [r7, #0]
 800a1bc:	4649      	mov	r1, r9
 800a1be:	414b      	adcs	r3, r1
 800a1c0:	607b      	str	r3, [r7, #4]
 800a1c2:	f04f 0200 	mov.w	r2, #0
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	00cb      	lsls	r3, r1, #3
 800a1d2:	4651      	mov	r1, sl
 800a1d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1d8:	4651      	mov	r1, sl
 800a1da:	00ca      	lsls	r2, r1, #3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	189b      	adds	r3, r3, r2
 800a1e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	460a      	mov	r2, r1
 800a1ec:	eb42 0303 	adc.w	r3, r2, r3
 800a1f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	663b      	str	r3, [r7, #96]	; 0x60
 800a1fc:	667a      	str	r2, [r7, #100]	; 0x64
 800a1fe:	f04f 0200 	mov.w	r2, #0
 800a202:	f04f 0300 	mov.w	r3, #0
 800a206:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a20a:	4649      	mov	r1, r9
 800a20c:	008b      	lsls	r3, r1, #2
 800a20e:	4641      	mov	r1, r8
 800a210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a214:	4641      	mov	r1, r8
 800a216:	008a      	lsls	r2, r1, #2
 800a218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a21c:	f7f5 fff2 	bl	8000204 <__aeabi_uldivmod>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <UART_SetConfig+0x4e4>)
 800a226:	fba3 1302 	umull	r1, r3, r3, r2
 800a22a:	095b      	lsrs	r3, r3, #5
 800a22c:	2164      	movs	r1, #100	; 0x64
 800a22e:	fb01 f303 	mul.w	r3, r1, r3
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	3332      	adds	r3, #50	; 0x32
 800a238:	4a08      	ldr	r2, [pc, #32]	; (800a25c <UART_SetConfig+0x4e4>)
 800a23a:	fba2 2303 	umull	r2, r3, r2, r3
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	f003 020f 	and.w	r2, r3, #15
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4422      	add	r2, r4
 800a24c:	609a      	str	r2, [r3, #8]
}
 800a24e:	bf00      	nop
 800a250:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a254:	46bd      	mov	sp, r7
 800a256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a25a:	bf00      	nop
 800a25c:	51eb851f 	.word	0x51eb851f

0800a260 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a260:	b084      	sub	sp, #16
 800a262:	b480      	push	{r7}
 800a264:	b085      	sub	sp, #20
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	f107 001c 	add.w	r0, r7, #28
 800a26e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a276:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a278:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a27a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a27e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a282:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a286:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a28a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a29a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	b004      	add	sp, #16
 800a2b4:	4770      	bx	lr

0800a2b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0303 	and.w	r3, r3, #3
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a348:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a34e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a354:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a364:	f023 030f 	bic.w	r3, r3, #15
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	b2db      	uxtb	r3, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
}  
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b088      	sub	sp, #32
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3d0:	2340      	movs	r3, #64	; 0x40
 800a3d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ffa0 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a3ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ee:	2110      	movs	r1, #16
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f94f 	bl	800a694 <SDMMC_GetCmdResp1>
 800a3f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3f8:	69fb      	ldr	r3, [r7, #28]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a410:	230c      	movs	r3, #12
 800a412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a420:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a422:	f107 0308 	add.w	r3, r7, #8
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff ff7e 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a42e:	4a05      	ldr	r2, [pc, #20]	; (800a444 <SDMMC_CmdStopTransfer+0x40>)
 800a430:	210c      	movs	r1, #12
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f92e 	bl	800a694 <SDMMC_GetCmdResp1>
 800a438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a43a:	69fb      	ldr	r3, [r7, #28]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	05f5e100 	.word	0x05f5e100

0800a448 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08a      	sub	sp, #40	; 0x28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a458:	2307      	movs	r3, #7
 800a45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a45c:	2340      	movs	r3, #64	; 0x40
 800a45e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a468:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a46a:	f107 0310 	add.w	r3, r7, #16
 800a46e:	4619      	mov	r1, r3
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff ff5a 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a476:	f241 3288 	movw	r2, #5000	; 0x1388
 800a47a:	2107      	movs	r1, #7
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 f909 	bl	800a694 <SDMMC_GetCmdResp1>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a486:	4618      	mov	r0, r3
 800a488:	3728      	adds	r7, #40	; 0x28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ac:	f107 0308 	add.w	r3, r7, #8
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff ff39 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fb23 	bl	800ab04 <SDMMC_GetCmdError>
 800a4be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b088      	sub	sp, #32
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a4d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a4d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a4d8:	2308      	movs	r3, #8
 800a4da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4dc:	2340      	movs	r3, #64	; 0x40
 800a4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ea:	f107 0308 	add.w	r3, r7, #8
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff ff1a 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fab6 	bl	800aa68 <SDMMC_GetCmdResp7>
 800a4fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a516:	2337      	movs	r3, #55	; 0x37
 800a518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a526:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fefb 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a534:	f241 3288 	movw	r2, #5000	; 0x1388
 800a538:	2137      	movs	r1, #55	; 0x37
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f8aa 	bl	800a694 <SDMMC_GetCmdResp1>
 800a540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a55c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a562:	2329      	movs	r3, #41	; 0x29
 800a564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a566:	2340      	movs	r3, #64	; 0x40
 800a568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a56a:	2300      	movs	r3, #0
 800a56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a574:	f107 0308 	add.w	r3, r7, #8
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fed5 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f9bd 	bl	800a900 <SDMMC_GetCmdResp3>
 800a586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a588:	69fb      	ldr	r3, [r7, #28]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3720      	adds	r7, #32
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b088      	sub	sp, #32
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a5a2:	23c0      	movs	r3, #192	; 0xc0
 800a5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5b0:	f107 0308 	add.w	r3, r7, #8
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff feb7 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f957 	bl	800a870 <SDMMC_GetCmdResp2>
 800a5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b088      	sub	sp, #32
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a5dc:	2309      	movs	r3, #9
 800a5de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a5e0:	23c0      	movs	r3, #192	; 0xc0
 800a5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5ee:	f107 0308 	add.w	r3, r7, #8
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff fe98 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f938 	bl	800a870 <SDMMC_GetCmdResp2>
 800a600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a602:	69fb      	ldr	r3, [r7, #28]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a61a:	2303      	movs	r3, #3
 800a61c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a61e:	2340      	movs	r3, #64	; 0x40
 800a620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a622:	2300      	movs	r3, #0
 800a624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a62c:	f107 0308 	add.w	r3, r7, #8
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fe79 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	2103      	movs	r1, #3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f99d 	bl	800a97c <SDMMC_GetCmdResp6>
 800a642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a644:	69fb      	ldr	r3, [r7, #28]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3720      	adds	r7, #32
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b088      	sub	sp, #32
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a65c:	230d      	movs	r3, #13
 800a65e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a660:	2340      	movs	r3, #64	; 0x40
 800a662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a66c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff fe58 	bl	800a32a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	210d      	movs	r1, #13
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f807 	bl	800a694 <SDMMC_GetCmdResp1>
 800a686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a688:	69fb      	ldr	r3, [r7, #28]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	460b      	mov	r3, r1
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a6a2:	4b70      	ldr	r3, [pc, #448]	; (800a864 <SDMMC_GetCmdResp1+0x1d0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a70      	ldr	r2, [pc, #448]	; (800a868 <SDMMC_GetCmdResp1+0x1d4>)
 800a6a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ac:	0a5a      	lsrs	r2, r3, #9
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	fb02 f303 	mul.w	r3, r2, r3
 800a6b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	1e5a      	subs	r2, r3, #1
 800a6ba:	61fa      	str	r2, [r7, #28]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6c4:	e0c9      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0ef      	beq.n	800a6b6 <SDMMC_GetCmdResp1+0x22>
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1ea      	bne.n	800a6b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2204      	movs	r2, #4
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6f2:	2304      	movs	r3, #4
 800a6f4:	e0b1      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a708:	2301      	movs	r3, #1
 800a70a:	e0a6      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	22c5      	movs	r2, #197	; 0xc5
 800a710:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff fe33 	bl	800a37e <SDIO_GetCommandResponse>
 800a718:	4603      	mov	r3, r0
 800a71a:	461a      	mov	r2, r3
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	4293      	cmp	r3, r2
 800a720:	d001      	beq.n	800a726 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a722:	2301      	movs	r3, #1
 800a724:	e099      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a726:	2100      	movs	r1, #0
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff fe35 	bl	800a398 <SDIO_GetResponse>
 800a72e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4b4e      	ldr	r3, [pc, #312]	; (800a86c <SDMMC_GetCmdResp1+0x1d8>)
 800a734:	4013      	ands	r3, r2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e08d      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	da02      	bge.n	800a74a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a748:	e087      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a754:	2340      	movs	r3, #64	; 0x40
 800a756:	e080      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a762:	2380      	movs	r3, #128	; 0x80
 800a764:	e079      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	e071      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a780:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a784:	e069      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a794:	e061      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a7a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7a4:	e059      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a7b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7b4:	e051      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a7c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7c4:	e049      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a7d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7d4:	e041      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a7e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7e4:	e039      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a7f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7f4:	e031      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a800:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a804:	e029      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a810:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a814:	e021      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a820:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a824:	e019      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a834:	e011      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a844:	e009      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f003 0308 	and.w	r3, r3, #8
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a850:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a854:	e001      	b.n	800a85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000000 	.word	0x20000000
 800a868:	10624dd3 	.word	0x10624dd3
 800a86c:	fdffe008 	.word	0xfdffe008

0800a870 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a878:	4b1f      	ldr	r3, [pc, #124]	; (800a8f8 <SDMMC_GetCmdResp2+0x88>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a1f      	ldr	r2, [pc, #124]	; (800a8fc <SDMMC_GetCmdResp2+0x8c>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	0a5b      	lsrs	r3, r3, #9
 800a884:	f241 3288 	movw	r2, #5000	; 0x1388
 800a888:	fb02 f303 	mul.w	r3, r2, r3
 800a88c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1e5a      	subs	r2, r3, #1
 800a892:	60fa      	str	r2, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a89c:	e026      	b.n	800a8ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0ef      	beq.n	800a88e <SDMMC_GetCmdResp2+0x1e>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1ea      	bne.n	800a88e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2204      	movs	r2, #4
 800a8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ca:	2304      	movs	r3, #4
 800a8cc:	e00e      	b.n	800a8ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d004      	beq.n	800a8e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e003      	b.n	800a8ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	22c5      	movs	r2, #197	; 0xc5
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	20000000 	.word	0x20000000
 800a8fc:	10624dd3 	.word	0x10624dd3

0800a900 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a908:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <SDMMC_GetCmdResp3+0x74>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1a      	ldr	r2, [pc, #104]	; (800a978 <SDMMC_GetCmdResp3+0x78>)
 800a90e:	fba2 2303 	umull	r2, r3, r2, r3
 800a912:	0a5b      	lsrs	r3, r3, #9
 800a914:	f241 3288 	movw	r2, #5000	; 0x1388
 800a918:	fb02 f303 	mul.w	r3, r2, r3
 800a91c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	1e5a      	subs	r2, r3, #1
 800a922:	60fa      	str	r2, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a92c:	e01b      	b.n	800a966 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0ef      	beq.n	800a91e <SDMMC_GetCmdResp3+0x1e>
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1ea      	bne.n	800a91e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2204      	movs	r2, #4
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a95a:	2304      	movs	r3, #4
 800a95c:	e003      	b.n	800a966 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	22c5      	movs	r2, #197	; 0xc5
 800a962:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20000000 	.word	0x20000000
 800a978:	10624dd3 	.word	0x10624dd3

0800a97c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	460b      	mov	r3, r1
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a98a:	4b35      	ldr	r3, [pc, #212]	; (800aa60 <SDMMC_GetCmdResp6+0xe4>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a35      	ldr	r2, [pc, #212]	; (800aa64 <SDMMC_GetCmdResp6+0xe8>)
 800a990:	fba2 2303 	umull	r2, r3, r2, r3
 800a994:	0a5b      	lsrs	r3, r3, #9
 800a996:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	1e5a      	subs	r2, r3, #1
 800a9a4:	61fa      	str	r2, [r7, #28]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9ae:	e052      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0ef      	beq.n	800a9a0 <SDMMC_GetCmdResp6+0x24>
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1ea      	bne.n	800a9a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2204      	movs	r2, #4
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9dc:	2304      	movs	r3, #4
 800a9de:	e03a      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d004      	beq.n	800a9f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e02f      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fcc1 	bl	800a37e <SDIO_GetCommandResponse>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	7afb      	ldrb	r3, [r7, #11]
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d001      	beq.n	800aa0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e025      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	22c5      	movs	r2, #197	; 0xc5
 800aa0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa10:	2100      	movs	r1, #0
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff fcc0 	bl	800a398 <SDIO_GetResponse>
 800aa18:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d106      	bne.n	800aa32 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	0c1b      	lsrs	r3, r3, #16
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e011      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa40:	e009      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa50:	e001      	b.n	800aa56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000000 	.word	0x20000000
 800aa64:	10624dd3 	.word	0x10624dd3

0800aa68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa70:	4b22      	ldr	r3, [pc, #136]	; (800aafc <SDMMC_GetCmdResp7+0x94>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a22      	ldr	r2, [pc, #136]	; (800ab00 <SDMMC_GetCmdResp7+0x98>)
 800aa76:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7a:	0a5b      	lsrs	r3, r3, #9
 800aa7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa80:	fb02 f303 	mul.w	r3, r2, r3
 800aa84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	1e5a      	subs	r2, r3, #1
 800aa8a:	60fa      	str	r2, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa94:	e02c      	b.n	800aaf0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0ef      	beq.n	800aa86 <SDMMC_GetCmdResp7+0x1e>
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1ea      	bne.n	800aa86 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2204      	movs	r2, #4
 800aac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aac2:	2304      	movs	r3, #4
 800aac4:	e014      	b.n	800aaf0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d004      	beq.n	800aadc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aad8:	2301      	movs	r3, #1
 800aada:	e009      	b.n	800aaf0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2240      	movs	r2, #64	; 0x40
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aaee:	2300      	movs	r3, #0
  
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000000 	.word	0x20000000
 800ab00:	10624dd3 	.word	0x10624dd3

0800ab04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab0c:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <SDMMC_GetCmdError+0x50>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a11      	ldr	r2, [pc, #68]	; (800ab58 <SDMMC_GetCmdError+0x54>)
 800ab12:	fba2 2303 	umull	r2, r3, r2, r3
 800ab16:	0a5b      	lsrs	r3, r3, #9
 800ab18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab1c:	fb02 f303 	mul.w	r3, r2, r3
 800ab20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1e5a      	subs	r2, r3, #1
 800ab26:	60fa      	str	r2, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab30:	e009      	b.n	800ab46 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0f1      	beq.n	800ab22 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	22c5      	movs	r2, #197	; 0xc5
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000000 	.word	0x20000000
 800ab58:	10624dd3 	.word	0x10624dd3

0800ab5c <_ZdlPvj>:
 800ab5c:	f000 b804 	b.w	800ab68 <_ZdlPv>

0800ab60 <_ZdaPv>:
 800ab60:	f000 b802 	b.w	800ab68 <_ZdlPv>

0800ab64 <_Znaj>:
 800ab64:	f000 b802 	b.w	800ab6c <_Znwj>

0800ab68 <_ZdlPv>:
 800ab68:	f000 b854 	b.w	800ac14 <free>

0800ab6c <_Znwj>:
 800ab6c:	2801      	cmp	r0, #1
 800ab6e:	bf38      	it	cc
 800ab70:	2001      	movcc	r0, #1
 800ab72:	b510      	push	{r4, lr}
 800ab74:	4604      	mov	r4, r0
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 f844 	bl	800ac04 <malloc>
 800ab7c:	b930      	cbnz	r0, 800ab8c <_Znwj+0x20>
 800ab7e:	f000 f807 	bl	800ab90 <_ZSt15get_new_handlerv>
 800ab82:	b908      	cbnz	r0, 800ab88 <_Znwj+0x1c>
 800ab84:	f000 f80c 	bl	800aba0 <abort>
 800ab88:	4780      	blx	r0
 800ab8a:	e7f4      	b.n	800ab76 <_Znwj+0xa>
 800ab8c:	bd10      	pop	{r4, pc}
	...

0800ab90 <_ZSt15get_new_handlerv>:
 800ab90:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <_ZSt15get_new_handlerv+0xc>)
 800ab92:	6818      	ldr	r0, [r3, #0]
 800ab94:	f3bf 8f5b 	dmb	ish
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	20000710 	.word	0x20000710

0800aba0 <abort>:
 800aba0:	b508      	push	{r3, lr}
 800aba2:	2006      	movs	r0, #6
 800aba4:	f000 f95e 	bl	800ae64 <raise>
 800aba8:	2001      	movs	r0, #1
 800abaa:	f7f8 f8ad 	bl	8002d08 <_exit>
	...

0800abb0 <__errno>:
 800abb0:	4b01      	ldr	r3, [pc, #4]	; (800abb8 <__errno+0x8>)
 800abb2:	6818      	ldr	r0, [r3, #0]
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	2000000c 	.word	0x2000000c

0800abbc <__libc_init_array>:
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	4d0d      	ldr	r5, [pc, #52]	; (800abf4 <__libc_init_array+0x38>)
 800abc0:	4c0d      	ldr	r4, [pc, #52]	; (800abf8 <__libc_init_array+0x3c>)
 800abc2:	1b64      	subs	r4, r4, r5
 800abc4:	10a4      	asrs	r4, r4, #2
 800abc6:	2600      	movs	r6, #0
 800abc8:	42a6      	cmp	r6, r4
 800abca:	d109      	bne.n	800abe0 <__libc_init_array+0x24>
 800abcc:	4d0b      	ldr	r5, [pc, #44]	; (800abfc <__libc_init_array+0x40>)
 800abce:	4c0c      	ldr	r4, [pc, #48]	; (800ac00 <__libc_init_array+0x44>)
 800abd0:	f000 f972 	bl	800aeb8 <_init>
 800abd4:	1b64      	subs	r4, r4, r5
 800abd6:	10a4      	asrs	r4, r4, #2
 800abd8:	2600      	movs	r6, #0
 800abda:	42a6      	cmp	r6, r4
 800abdc:	d105      	bne.n	800abea <__libc_init_array+0x2e>
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe4:	4798      	blx	r3
 800abe6:	3601      	adds	r6, #1
 800abe8:	e7ee      	b.n	800abc8 <__libc_init_array+0xc>
 800abea:	f855 3b04 	ldr.w	r3, [r5], #4
 800abee:	4798      	blx	r3
 800abf0:	3601      	adds	r6, #1
 800abf2:	e7f2      	b.n	800abda <__libc_init_array+0x1e>
 800abf4:	0800af48 	.word	0x0800af48
 800abf8:	0800af48 	.word	0x0800af48
 800abfc:	0800af48 	.word	0x0800af48
 800ac00:	0800af50 	.word	0x0800af50

0800ac04 <malloc>:
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <malloc+0xc>)
 800ac06:	4601      	mov	r1, r0
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	f000 b87f 	b.w	800ad0c <_malloc_r>
 800ac0e:	bf00      	nop
 800ac10:	2000000c 	.word	0x2000000c

0800ac14 <free>:
 800ac14:	4b02      	ldr	r3, [pc, #8]	; (800ac20 <free+0xc>)
 800ac16:	4601      	mov	r1, r0
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	f000 b80b 	b.w	800ac34 <_free_r>
 800ac1e:	bf00      	nop
 800ac20:	2000000c 	.word	0x2000000c

0800ac24 <memset>:
 800ac24:	4402      	add	r2, r0
 800ac26:	4603      	mov	r3, r0
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d100      	bne.n	800ac2e <memset+0xa>
 800ac2c:	4770      	bx	lr
 800ac2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac32:	e7f9      	b.n	800ac28 <memset+0x4>

0800ac34 <_free_r>:
 800ac34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d044      	beq.n	800acc4 <_free_r+0x90>
 800ac3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3e:	9001      	str	r0, [sp, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f1a1 0404 	sub.w	r4, r1, #4
 800ac46:	bfb8      	it	lt
 800ac48:	18e4      	addlt	r4, r4, r3
 800ac4a:	f000 f927 	bl	800ae9c <__malloc_lock>
 800ac4e:	4a1e      	ldr	r2, [pc, #120]	; (800acc8 <_free_r+0x94>)
 800ac50:	9801      	ldr	r0, [sp, #4]
 800ac52:	6813      	ldr	r3, [r2, #0]
 800ac54:	b933      	cbnz	r3, 800ac64 <_free_r+0x30>
 800ac56:	6063      	str	r3, [r4, #4]
 800ac58:	6014      	str	r4, [r2, #0]
 800ac5a:	b003      	add	sp, #12
 800ac5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac60:	f000 b922 	b.w	800aea8 <__malloc_unlock>
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	d908      	bls.n	800ac7a <_free_r+0x46>
 800ac68:	6825      	ldr	r5, [r4, #0]
 800ac6a:	1961      	adds	r1, r4, r5
 800ac6c:	428b      	cmp	r3, r1
 800ac6e:	bf01      	itttt	eq
 800ac70:	6819      	ldreq	r1, [r3, #0]
 800ac72:	685b      	ldreq	r3, [r3, #4]
 800ac74:	1949      	addeq	r1, r1, r5
 800ac76:	6021      	streq	r1, [r4, #0]
 800ac78:	e7ed      	b.n	800ac56 <_free_r+0x22>
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	b10b      	cbz	r3, 800ac84 <_free_r+0x50>
 800ac80:	42a3      	cmp	r3, r4
 800ac82:	d9fa      	bls.n	800ac7a <_free_r+0x46>
 800ac84:	6811      	ldr	r1, [r2, #0]
 800ac86:	1855      	adds	r5, r2, r1
 800ac88:	42a5      	cmp	r5, r4
 800ac8a:	d10b      	bne.n	800aca4 <_free_r+0x70>
 800ac8c:	6824      	ldr	r4, [r4, #0]
 800ac8e:	4421      	add	r1, r4
 800ac90:	1854      	adds	r4, r2, r1
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	6011      	str	r1, [r2, #0]
 800ac96:	d1e0      	bne.n	800ac5a <_free_r+0x26>
 800ac98:	681c      	ldr	r4, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	6053      	str	r3, [r2, #4]
 800ac9e:	4421      	add	r1, r4
 800aca0:	6011      	str	r1, [r2, #0]
 800aca2:	e7da      	b.n	800ac5a <_free_r+0x26>
 800aca4:	d902      	bls.n	800acac <_free_r+0x78>
 800aca6:	230c      	movs	r3, #12
 800aca8:	6003      	str	r3, [r0, #0]
 800acaa:	e7d6      	b.n	800ac5a <_free_r+0x26>
 800acac:	6825      	ldr	r5, [r4, #0]
 800acae:	1961      	adds	r1, r4, r5
 800acb0:	428b      	cmp	r3, r1
 800acb2:	bf04      	itt	eq
 800acb4:	6819      	ldreq	r1, [r3, #0]
 800acb6:	685b      	ldreq	r3, [r3, #4]
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	bf04      	itt	eq
 800acbc:	1949      	addeq	r1, r1, r5
 800acbe:	6021      	streq	r1, [r4, #0]
 800acc0:	6054      	str	r4, [r2, #4]
 800acc2:	e7ca      	b.n	800ac5a <_free_r+0x26>
 800acc4:	b003      	add	sp, #12
 800acc6:	bd30      	pop	{r4, r5, pc}
 800acc8:	20000714 	.word	0x20000714

0800accc <sbrk_aligned>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	4e0e      	ldr	r6, [pc, #56]	; (800ad08 <sbrk_aligned+0x3c>)
 800acd0:	460c      	mov	r4, r1
 800acd2:	6831      	ldr	r1, [r6, #0]
 800acd4:	4605      	mov	r5, r0
 800acd6:	b911      	cbnz	r1, 800acde <sbrk_aligned+0x12>
 800acd8:	f000 f88c 	bl	800adf4 <_sbrk_r>
 800acdc:	6030      	str	r0, [r6, #0]
 800acde:	4621      	mov	r1, r4
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 f887 	bl	800adf4 <_sbrk_r>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	d00a      	beq.n	800ad00 <sbrk_aligned+0x34>
 800acea:	1cc4      	adds	r4, r0, #3
 800acec:	f024 0403 	bic.w	r4, r4, #3
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d007      	beq.n	800ad04 <sbrk_aligned+0x38>
 800acf4:	1a21      	subs	r1, r4, r0
 800acf6:	4628      	mov	r0, r5
 800acf8:	f000 f87c 	bl	800adf4 <_sbrk_r>
 800acfc:	3001      	adds	r0, #1
 800acfe:	d101      	bne.n	800ad04 <sbrk_aligned+0x38>
 800ad00:	f04f 34ff 	mov.w	r4, #4294967295
 800ad04:	4620      	mov	r0, r4
 800ad06:	bd70      	pop	{r4, r5, r6, pc}
 800ad08:	20000718 	.word	0x20000718

0800ad0c <_malloc_r>:
 800ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad10:	1ccd      	adds	r5, r1, #3
 800ad12:	f025 0503 	bic.w	r5, r5, #3
 800ad16:	3508      	adds	r5, #8
 800ad18:	2d0c      	cmp	r5, #12
 800ad1a:	bf38      	it	cc
 800ad1c:	250c      	movcc	r5, #12
 800ad1e:	2d00      	cmp	r5, #0
 800ad20:	4607      	mov	r7, r0
 800ad22:	db01      	blt.n	800ad28 <_malloc_r+0x1c>
 800ad24:	42a9      	cmp	r1, r5
 800ad26:	d905      	bls.n	800ad34 <_malloc_r+0x28>
 800ad28:	230c      	movs	r3, #12
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	4630      	mov	r0, r6
 800ad30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad34:	4e2e      	ldr	r6, [pc, #184]	; (800adf0 <_malloc_r+0xe4>)
 800ad36:	f000 f8b1 	bl	800ae9c <__malloc_lock>
 800ad3a:	6833      	ldr	r3, [r6, #0]
 800ad3c:	461c      	mov	r4, r3
 800ad3e:	bb34      	cbnz	r4, 800ad8e <_malloc_r+0x82>
 800ad40:	4629      	mov	r1, r5
 800ad42:	4638      	mov	r0, r7
 800ad44:	f7ff ffc2 	bl	800accc <sbrk_aligned>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	d14d      	bne.n	800adea <_malloc_r+0xde>
 800ad4e:	6834      	ldr	r4, [r6, #0]
 800ad50:	4626      	mov	r6, r4
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	d140      	bne.n	800add8 <_malloc_r+0xcc>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	eb04 0803 	add.w	r8, r4, r3
 800ad60:	f000 f848 	bl	800adf4 <_sbrk_r>
 800ad64:	4580      	cmp	r8, r0
 800ad66:	d13a      	bne.n	800adde <_malloc_r+0xd2>
 800ad68:	6821      	ldr	r1, [r4, #0]
 800ad6a:	3503      	adds	r5, #3
 800ad6c:	1a6d      	subs	r5, r5, r1
 800ad6e:	f025 0503 	bic.w	r5, r5, #3
 800ad72:	3508      	adds	r5, #8
 800ad74:	2d0c      	cmp	r5, #12
 800ad76:	bf38      	it	cc
 800ad78:	250c      	movcc	r5, #12
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f7ff ffa5 	bl	800accc <sbrk_aligned>
 800ad82:	3001      	adds	r0, #1
 800ad84:	d02b      	beq.n	800adde <_malloc_r+0xd2>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	442b      	add	r3, r5
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	e00e      	b.n	800adac <_malloc_r+0xa0>
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	1b52      	subs	r2, r2, r5
 800ad92:	d41e      	bmi.n	800add2 <_malloc_r+0xc6>
 800ad94:	2a0b      	cmp	r2, #11
 800ad96:	d916      	bls.n	800adc6 <_malloc_r+0xba>
 800ad98:	1961      	adds	r1, r4, r5
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	6025      	str	r5, [r4, #0]
 800ad9e:	bf18      	it	ne
 800ada0:	6059      	strne	r1, [r3, #4]
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	bf08      	it	eq
 800ada6:	6031      	streq	r1, [r6, #0]
 800ada8:	5162      	str	r2, [r4, r5]
 800adaa:	604b      	str	r3, [r1, #4]
 800adac:	4638      	mov	r0, r7
 800adae:	f104 060b 	add.w	r6, r4, #11
 800adb2:	f000 f879 	bl	800aea8 <__malloc_unlock>
 800adb6:	f026 0607 	bic.w	r6, r6, #7
 800adba:	1d23      	adds	r3, r4, #4
 800adbc:	1af2      	subs	r2, r6, r3
 800adbe:	d0b6      	beq.n	800ad2e <_malloc_r+0x22>
 800adc0:	1b9b      	subs	r3, r3, r6
 800adc2:	50a3      	str	r3, [r4, r2]
 800adc4:	e7b3      	b.n	800ad2e <_malloc_r+0x22>
 800adc6:	6862      	ldr	r2, [r4, #4]
 800adc8:	42a3      	cmp	r3, r4
 800adca:	bf0c      	ite	eq
 800adcc:	6032      	streq	r2, [r6, #0]
 800adce:	605a      	strne	r2, [r3, #4]
 800add0:	e7ec      	b.n	800adac <_malloc_r+0xa0>
 800add2:	4623      	mov	r3, r4
 800add4:	6864      	ldr	r4, [r4, #4]
 800add6:	e7b2      	b.n	800ad3e <_malloc_r+0x32>
 800add8:	4634      	mov	r4, r6
 800adda:	6876      	ldr	r6, [r6, #4]
 800addc:	e7b9      	b.n	800ad52 <_malloc_r+0x46>
 800adde:	230c      	movs	r3, #12
 800ade0:	603b      	str	r3, [r7, #0]
 800ade2:	4638      	mov	r0, r7
 800ade4:	f000 f860 	bl	800aea8 <__malloc_unlock>
 800ade8:	e7a1      	b.n	800ad2e <_malloc_r+0x22>
 800adea:	6025      	str	r5, [r4, #0]
 800adec:	e7de      	b.n	800adac <_malloc_r+0xa0>
 800adee:	bf00      	nop
 800adf0:	20000714 	.word	0x20000714

0800adf4 <_sbrk_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d06      	ldr	r5, [pc, #24]	; (800ae10 <_sbrk_r+0x1c>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	f7f7 ff8c 	bl	8002d1c <_sbrk>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_sbrk_r+0x1a>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_sbrk_r+0x1a>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	2000071c 	.word	0x2000071c

0800ae14 <_raise_r>:
 800ae14:	291f      	cmp	r1, #31
 800ae16:	b538      	push	{r3, r4, r5, lr}
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	d904      	bls.n	800ae28 <_raise_r+0x14>
 800ae1e:	2316      	movs	r3, #22
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	f04f 30ff 	mov.w	r0, #4294967295
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae2a:	b112      	cbz	r2, 800ae32 <_raise_r+0x1e>
 800ae2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae30:	b94b      	cbnz	r3, 800ae46 <_raise_r+0x32>
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 f830 	bl	800ae98 <_getpid_r>
 800ae38:	462a      	mov	r2, r5
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae42:	f000 b817 	b.w	800ae74 <_kill_r>
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d00a      	beq.n	800ae60 <_raise_r+0x4c>
 800ae4a:	1c59      	adds	r1, r3, #1
 800ae4c:	d103      	bne.n	800ae56 <_raise_r+0x42>
 800ae4e:	2316      	movs	r3, #22
 800ae50:	6003      	str	r3, [r0, #0]
 800ae52:	2001      	movs	r0, #1
 800ae54:	e7e7      	b.n	800ae26 <_raise_r+0x12>
 800ae56:	2400      	movs	r4, #0
 800ae58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	4798      	blx	r3
 800ae60:	2000      	movs	r0, #0
 800ae62:	e7e0      	b.n	800ae26 <_raise_r+0x12>

0800ae64 <raise>:
 800ae64:	4b02      	ldr	r3, [pc, #8]	; (800ae70 <raise+0xc>)
 800ae66:	4601      	mov	r1, r0
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	f7ff bfd3 	b.w	800ae14 <_raise_r>
 800ae6e:	bf00      	nop
 800ae70:	2000000c 	.word	0x2000000c

0800ae74 <_kill_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d07      	ldr	r5, [pc, #28]	; (800ae94 <_kill_r+0x20>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	4611      	mov	r1, r2
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	f7f7 ff31 	bl	8002ce8 <_kill>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	d102      	bne.n	800ae90 <_kill_r+0x1c>
 800ae8a:	682b      	ldr	r3, [r5, #0]
 800ae8c:	b103      	cbz	r3, 800ae90 <_kill_r+0x1c>
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	bf00      	nop
 800ae94:	2000071c 	.word	0x2000071c

0800ae98 <_getpid_r>:
 800ae98:	f7f7 bf1e 	b.w	8002cd8 <_getpid>

0800ae9c <__malloc_lock>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	; (800aea4 <__malloc_lock+0x8>)
 800ae9e:	f000 b809 	b.w	800aeb4 <__retarget_lock_acquire_recursive>
 800aea2:	bf00      	nop
 800aea4:	20000720 	.word	0x20000720

0800aea8 <__malloc_unlock>:
 800aea8:	4801      	ldr	r0, [pc, #4]	; (800aeb0 <__malloc_unlock+0x8>)
 800aeaa:	f000 b804 	b.w	800aeb6 <__retarget_lock_release_recursive>
 800aeae:	bf00      	nop
 800aeb0:	20000720 	.word	0x20000720

0800aeb4 <__retarget_lock_acquire_recursive>:
 800aeb4:	4770      	bx	lr

0800aeb6 <__retarget_lock_release_recursive>:
 800aeb6:	4770      	bx	lr

0800aeb8 <_init>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	bf00      	nop
 800aebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aebe:	bc08      	pop	{r3}
 800aec0:	469e      	mov	lr, r3
 800aec2:	4770      	bx	lr

0800aec4 <_fini>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	bf00      	nop
 800aec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeca:	bc08      	pop	{r3}
 800aecc:	469e      	mov	lr, r3
 800aece:	4770      	bx	lr
