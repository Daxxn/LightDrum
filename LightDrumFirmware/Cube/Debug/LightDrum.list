
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c12c  0800c12c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c12c  0800c12c  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c134  0800c134  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000070  0800c1b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800c1b4  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f97e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d27  00000000  00000000  0004fa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  00055748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020b0  00000000  00000000  00057a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c74a  00000000  00000000  00059ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e0d2  00000000  00000000  00086222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec994  00000000  00000000  000b42f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098c4  00000000  00000000  001a0cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800c0ac 	.word	0x0800c0ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	0800c0ac 	.word	0x0800c0ac

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_uldivmod>:
 80009a0:	b953      	cbnz	r3, 80009b8 <__aeabi_uldivmod+0x18>
 80009a2:	b94a      	cbnz	r2, 80009b8 <__aeabi_uldivmod+0x18>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	bf08      	it	eq
 80009a8:	2800      	cmpeq	r0, #0
 80009aa:	bf1c      	itt	ne
 80009ac:	f04f 31ff 	movne.w	r1, #4294967295
 80009b0:	f04f 30ff 	movne.w	r0, #4294967295
 80009b4:	f000 b974 	b.w	8000ca0 <__aeabi_idiv0>
 80009b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c0:	f000 f806 	bl	80009d0 <__udivmoddi4>
 80009c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009cc:	b004      	add	sp, #16
 80009ce:	4770      	bx	lr

080009d0 <__udivmoddi4>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	9d08      	ldr	r5, [sp, #32]
 80009d6:	4604      	mov	r4, r0
 80009d8:	468e      	mov	lr, r1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d14d      	bne.n	8000a7a <__udivmoddi4+0xaa>
 80009de:	428a      	cmp	r2, r1
 80009e0:	4694      	mov	ip, r2
 80009e2:	d969      	bls.n	8000ab8 <__udivmoddi4+0xe8>
 80009e4:	fab2 f282 	clz	r2, r2
 80009e8:	b152      	cbz	r2, 8000a00 <__udivmoddi4+0x30>
 80009ea:	fa01 f302 	lsl.w	r3, r1, r2
 80009ee:	f1c2 0120 	rsb	r1, r2, #32
 80009f2:	fa20 f101 	lsr.w	r1, r0, r1
 80009f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fa:	ea41 0e03 	orr.w	lr, r1, r3
 80009fe:	4094      	lsls	r4, r2
 8000a00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a04:	0c21      	lsrs	r1, r4, #16
 8000a06:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0a:	fa1f f78c 	uxth.w	r7, ip
 8000a0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a16:	fb06 f107 	mul.w	r1, r6, r7
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	d90a      	bls.n	8000a34 <__udivmoddi4+0x64>
 8000a1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 811f 	bcs.w	8000c68 <__udivmoddi4+0x298>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 811c 	bls.w	8000c68 <__udivmoddi4+0x298>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	4463      	add	r3, ip
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 f707 	mul.w	r7, r0, r7
 8000a48:	42a7      	cmp	r7, r4
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x92>
 8000a4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a54:	f080 810a 	bcs.w	8000c6c <__udivmoddi4+0x29c>
 8000a58:	42a7      	cmp	r7, r4
 8000a5a:	f240 8107 	bls.w	8000c6c <__udivmoddi4+0x29c>
 8000a5e:	4464      	add	r4, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a66:	1be4      	subs	r4, r4, r7
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa4>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xc2>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	f000 80ef 	beq.w	8000c62 <__udivmoddi4+0x292>
 8000a84:	2600      	movs	r6, #0
 8000a86:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f683 	clz	r6, r3
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d14a      	bne.n	8000b30 <__udivmoddi4+0x160>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd4>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80f9 	bhi.w	8000c96 <__udivmoddi4+0x2c6>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	469e      	mov	lr, r3
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa4>
 8000ab2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa4>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xec>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 8092 	bne.w	8000bea <__udivmoddi4+0x21a>
 8000ac6:	eba1 010c 	sub.w	r1, r1, ip
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f fe8c 	uxth.w	lr, ip
 8000ad2:	2601      	movs	r6, #1
 8000ad4:	0c20      	lsrs	r0, r4, #16
 8000ad6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ada:	fb07 1113 	mls	r1, r7, r3, r1
 8000ade:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae2:	fb0e f003 	mul.w	r0, lr, r3
 8000ae6:	4288      	cmp	r0, r1
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x12c>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af2:	d202      	bcs.n	8000afa <__udivmoddi4+0x12a>
 8000af4:	4288      	cmp	r0, r1
 8000af6:	f200 80cb 	bhi.w	8000c90 <__udivmoddi4+0x2c0>
 8000afa:	4643      	mov	r3, r8
 8000afc:	1a09      	subs	r1, r1, r0
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b04:	fb07 1110 	mls	r1, r7, r0, r1
 8000b08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x156>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d202      	bcs.n	8000b24 <__udivmoddi4+0x154>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f200 80bb 	bhi.w	8000c9a <__udivmoddi4+0x2ca>
 8000b24:	4608      	mov	r0, r1
 8000b26:	eba4 040e 	sub.w	r4, r4, lr
 8000b2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b2e:	e79c      	b.n	8000a6a <__udivmoddi4+0x9a>
 8000b30:	f1c6 0720 	rsb	r7, r6, #32
 8000b34:	40b3      	lsls	r3, r6
 8000b36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b42:	fa01 f306 	lsl.w	r3, r1, r6
 8000b46:	431c      	orrs	r4, r3
 8000b48:	40f9      	lsrs	r1, r7
 8000b4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b56:	0c20      	lsrs	r0, r4, #16
 8000b58:	fa1f fe8c 	uxth.w	lr, ip
 8000b5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000b60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b64:	fb08 f00e 	mul.w	r0, r8, lr
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000b6e:	d90b      	bls.n	8000b88 <__udivmoddi4+0x1b8>
 8000b70:	eb1c 0101 	adds.w	r1, ip, r1
 8000b74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b78:	f080 8088 	bcs.w	8000c8c <__udivmoddi4+0x2bc>
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	f240 8085 	bls.w	8000c8c <__udivmoddi4+0x2bc>
 8000b82:	f1a8 0802 	sub.w	r8, r8, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	1a09      	subs	r1, r1, r0
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b90:	fb09 1110 	mls	r1, r9, r0, r1
 8000b94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b9c:	458e      	cmp	lr, r1
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x1e2>
 8000ba0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ba8:	d26c      	bcs.n	8000c84 <__udivmoddi4+0x2b4>
 8000baa:	458e      	cmp	lr, r1
 8000bac:	d96a      	bls.n	8000c84 <__udivmoddi4+0x2b4>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	4461      	add	r1, ip
 8000bb2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bba:	eba1 010e 	sub.w	r1, r1, lr
 8000bbe:	42a1      	cmp	r1, r4
 8000bc0:	46c8      	mov	r8, r9
 8000bc2:	46a6      	mov	lr, r4
 8000bc4:	d356      	bcc.n	8000c74 <__udivmoddi4+0x2a4>
 8000bc6:	d053      	beq.n	8000c70 <__udivmoddi4+0x2a0>
 8000bc8:	b15d      	cbz	r5, 8000be2 <__udivmoddi4+0x212>
 8000bca:	ebb3 0208 	subs.w	r2, r3, r8
 8000bce:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000bd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000bda:	40f1      	lsrs	r1, r6
 8000bdc:	431f      	orrs	r7, r3
 8000bde:	e9c5 7100 	strd	r7, r1, [r5]
 8000be2:	2600      	movs	r6, #0
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	40d8      	lsrs	r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	4301      	orrs	r1, r0
 8000bfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c00:	fa1f fe8c 	uxth.w	lr, ip
 8000c04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c08:	fb07 3610 	mls	r6, r7, r0, r3
 8000c0c:	0c0b      	lsrs	r3, r1, #16
 8000c0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c12:	fb00 f60e 	mul.w	r6, r0, lr
 8000c16:	429e      	cmp	r6, r3
 8000c18:	fa04 f402 	lsl.w	r4, r4, r2
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x260>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c26:	d22f      	bcs.n	8000c88 <__udivmoddi4+0x2b8>
 8000c28:	429e      	cmp	r6, r3
 8000c2a:	d92d      	bls.n	8000c88 <__udivmoddi4+0x2b8>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	b289      	uxth	r1, r1
 8000c34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c38:	fb07 3316 	mls	r3, r7, r6, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb06 f30e 	mul.w	r3, r6, lr
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x28a>
 8000c48:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c50:	d216      	bcs.n	8000c80 <__udivmoddi4+0x2b0>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d914      	bls.n	8000c80 <__udivmoddi4+0x2b0>
 8000c56:	3e02      	subs	r6, #2
 8000c58:	4461      	add	r1, ip
 8000c5a:	1ac9      	subs	r1, r1, r3
 8000c5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c60:	e738      	b.n	8000ad4 <__udivmoddi4+0x104>
 8000c62:	462e      	mov	r6, r5
 8000c64:	4628      	mov	r0, r5
 8000c66:	e705      	b.n	8000a74 <__udivmoddi4+0xa4>
 8000c68:	4606      	mov	r6, r0
 8000c6a:	e6e3      	b.n	8000a34 <__udivmoddi4+0x64>
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	e6f8      	b.n	8000a62 <__udivmoddi4+0x92>
 8000c70:	454b      	cmp	r3, r9
 8000c72:	d2a9      	bcs.n	8000bc8 <__udivmoddi4+0x1f8>
 8000c74:	ebb9 0802 	subs.w	r8, r9, r2
 8000c78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	e7a3      	b.n	8000bc8 <__udivmoddi4+0x1f8>
 8000c80:	4646      	mov	r6, r8
 8000c82:	e7ea      	b.n	8000c5a <__udivmoddi4+0x28a>
 8000c84:	4620      	mov	r0, r4
 8000c86:	e794      	b.n	8000bb2 <__udivmoddi4+0x1e2>
 8000c88:	4640      	mov	r0, r8
 8000c8a:	e7d1      	b.n	8000c30 <__udivmoddi4+0x260>
 8000c8c:	46d0      	mov	r8, sl
 8000c8e:	e77b      	b.n	8000b88 <__udivmoddi4+0x1b8>
 8000c90:	3b02      	subs	r3, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	e732      	b.n	8000afc <__udivmoddi4+0x12c>
 8000c96:	4630      	mov	r0, r6
 8000c98:	e709      	b.n	8000aae <__udivmoddi4+0xde>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e742      	b.n	8000b26 <__udivmoddi4+0x156>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_ZN6ButtonC1Ev>:
 */

#include "Button.h"


Button::Button()
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <_ZN6ButtonC1Ev+0x1c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
{
}
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	0800c0d0 	.word	0x0800c0d0

08000cc4 <_ZN6ButtonD1Ev>:

Button::~Button()
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <_ZN6ButtonD1Ev+0x1c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	601a      	str	r2, [r3, #0]
{
}
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	0800c0d0 	.word	0x0800c0d0

08000ce4 <_ZN6ButtonD0Ev>:
Button::~Button()
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
}
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ffe9 	bl	8000cc4 <_ZN6ButtonD1Ev>
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f00b f82c 	bl	800bd52 <_ZdlPvj>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	4613      	mov	r3, r2
 8000d26:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	88fa      	ldrh	r2, [r7, #6]
 8000d32:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2200      	movs	r2, #0
 8000d38:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	68b8      	ldr	r0, [r7, #8]
 8000d42:	f005 fb41 	bl	80063c8 <HAL_GPIO_WritePin>
	};
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef *port, uint16_t pin, GPIO_Default_State defaultState)
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	460b      	mov	r3, r1
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	717b      	strb	r3, [r7, #5]
	{
		this->port = port;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	88fa      	ldrh	r2, [r7, #6]
 8000d70:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	797a      	ldrb	r2, [r7, #5]
 8000d76:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, (GPIO_PinState)defaultState);
 8000d78:	797a      	ldrb	r2, [r7, #5]
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	68b8      	ldr	r0, [r7, #8]
 8000d80:	f005 fb22 	bl	80063c8 <HAL_GPIO_WritePin>
	}
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_ZN12StripCurrentC1Ev>:
 *
 */
class StripCurrent
{
public:
	StripCurrent() {};
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <_ZN9ShiftRegsC1Ev+0x2c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3308      	adds	r3, #8
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffa4 	bl	8000d04 <_ZN3PinC1Ev>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3310      	adds	r3, #16
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff9f 	bl	8000d04 <_ZN3PinC1Ev>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	0800c0f0 	.word	0x0800c0f0

08000dd4 <_ZN15PCA9634SettingsC1Ev>:
	uint8_t green = 0;
	uint8_t blue = 0;
	bool en = 1;
};

struct PCA9634Settings
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	719a      	strb	r2, [r3, #6]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	71da      	strb	r2, [r3, #7]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	721a      	strb	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	725a      	strb	r2, [r3, #9]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_ZN7PCA9634C1Ev>:
 *
 */
class PCA9634
{
public:
	PCA9634() {};
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	227f      	movs	r2, #127	; 0x7f
 8000e0e:	741a      	strb	r2, [r3, #16]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3311      	adds	r3, #17
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffdd 	bl	8000dd4 <_ZN15PCA9634SettingsC1Ev>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	331c      	adds	r3, #28
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff70 	bl	8000d04 <_ZN3PinC1Ev>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <_Z11ReadCurrentv>:
		HAL_Delay(20);
	}
}

void ReadCurrent()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_ADC_Start(currentADCHandle);
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <_Z11ReadCurrentv+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fd31 	bl	80038a0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(currentADCHandle, 500) == HAL_OK)
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <_Z11ReadCurrentv+0x40>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fdde 	bl	8003a08 <HAL_ADC_PollForConversion>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <_Z11ReadCurrentv+0x3c>
	{
		adcReading = HAL_ADC_GetValue(currentADCHandle);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <_Z11ReadCurrentv+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 f861 	bl	8003f28 <HAL_ADC_GetValue>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_Z11ReadCurrentv+0x44>)
 8000e6a:	6013      	str	r3, [r2, #0]
//		uint8_t perc = (uint8_t)((adcReading / UINT8_MAX) * 100);
//		screen.SetProgressBar(0, perc);
	}

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000008c 	.word	0x2000008c
 8000e74:	20000270 	.word	0x20000270

08000e78 <_Z18AudioLevelsAveragev>:

void AudioLevelsAverage()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
	double sum = 0;
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double average = 0;
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	e9c7 2300 	strd	r2, r3, [r7]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; ++i) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9e:	dc14      	bgt.n	8000eca <_Z18AudioLevelsAveragev+0x52>
		sum += audioBuffer[i];
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <_Z18AudioLevelsAveragev+0x70>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fafd 	bl	80004a8 <__aeabi_i2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000eb6:	f7ff f9ab 	bl	8000210 <__adddf3>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; ++i) {
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e7e7      	b.n	8000e9a <_Z18AudioLevelsAveragev+0x22>
	}
	average = sum / 64;
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_Z18AudioLevelsAveragev+0x74>)
 8000ed0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ed4:	f7ff fc7c 	bl	80007d0 <__aeabi_ddiv>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	e9c7 2300 	strd	r2, r3, [r7]
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000016c 	.word	0x2000016c
 8000eec:	40500000 	.word	0x40500000

08000ef0 <AudioFullCallback>:
		AudioLevelsAverage();
	}
}

void AudioFullCallback()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	AudioLevelsAverage();
 8000ef4:	f7ff ffc0 	bl	8000e78 <_Z18AudioLevelsAveragev>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <CurrentConvFullCallback>:
{

}

void CurrentConvFullCallback()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	stripCurr.Calc();
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <CurrentConvFullCallback+0x10>)
 8000f02:	f000 fd4e 	bl	80019a2 <_ZN12StripCurrent4CalcEv>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000128 	.word	0x20000128

08000f10 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	3308      	adds	r3, #8
 8000f28:	3208      	adds	r2, #8
 8000f2a:	6811      	ldr	r1, [r2, #0]
 8000f2c:	6019      	str	r1, [r3, #0]
 8000f2e:	8891      	ldrh	r1, [r2, #4]
 8000f30:	7992      	ldrb	r2, [r2, #6]
 8000f32:	8099      	strh	r1, [r3, #4]
 8000f34:	719a      	strb	r2, [r3, #6]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	3210      	adds	r2, #16
 8000f3e:	6811      	ldr	r1, [r2, #0]
 8000f40:	6019      	str	r1, [r3, #0]
 8000f42:	8891      	ldrh	r1, [r2, #4]
 8000f44:	7992      	ldrb	r2, [r2, #6]
 8000f46:	8099      	strh	r1, [r3, #4]
 8000f48:	719a      	strb	r2, [r3, #6]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	8b1a      	ldrh	r2, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	831a      	strh	r2, [r3, #24]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	69da      	ldr	r2, [r3, #28]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	61da      	str	r2, [r3, #28]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	621a      	str	r2, [r3, #32]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <Init>:
		UART_HandleTypeDef   *in_huart3,

		RTC_HandleTypeDef    *in_hrtc,
		SD_HandleTypeDef     *in_hsd
	)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b0a6      	sub	sp, #152	; 0x98
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	4978      	ldr	r1, [pc, #480]	; (8001168 <Init+0x1f8>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fec6 	bl	8000d1a <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f96:	4974      	ldr	r1, [pc, #464]	; (8001168 <Init+0x1f8>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff febe 	bl	8000d1a <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin pwmOE = Pin(PWM_OE_GPIO_Port, PWM_OE_Pin, GPIO_Default_State::ACTIVE_LOW);
 8000f9e:	f107 0010 	add.w	r0, r7, #16
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	4971      	ldr	r1, [pc, #452]	; (800116c <Init+0x1fc>)
 8000fa8:	f7ff fed2 	bl	8000d50 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	currentADCHandle = in_hadc1;
 8000fac:	4a70      	ldr	r2, [pc, #448]	; (8001170 <Init+0x200>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6013      	str	r3, [r2, #0]
	currentADC_DMAHandle = in_hdma_adc1;
 8000fb2:	4a70      	ldr	r2, [pc, #448]	; (8001174 <Init+0x204>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	6013      	str	r3, [r2, #0]

	stripI2cHandle = in_hfmpi2c1;
 8000fb8:	4a6f      	ldr	r2, [pc, #444]	; (8001178 <Init+0x208>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 8000fbe:	4a6f      	ldr	r2, [pc, #444]	; (800117c <Init+0x20c>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6013      	str	r3, [r2, #0]

	i2cHandle = in_hi2c1;
 8000fc4:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <Init+0x210>)
 8000fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fca:	6013      	str	r3, [r2, #0]

	audioHandle = in_hi2s5;
 8000fcc:	4a6d      	ldr	r2, [pc, #436]	; (8001184 <Init+0x214>)
 8000fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fd2:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = hdma_spi5_rx;
 8000fd4:	4a6c      	ldr	r2, [pc, #432]	; (8001188 <Init+0x218>)
 8000fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fda:	6013      	str	r3, [r2, #0]

	rtcHandle = in_hrtc;
 8000fdc:	4a6b      	ldr	r2, [pc, #428]	; (800118c <Init+0x21c>)
 8000fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000fe2:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 8000fe4:	4a6a      	ldr	r2, [pc, #424]	; (8001190 <Init+0x220>)
 8000fe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000fea:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 8000fec:	4a69      	ldr	r2, [pc, #420]	; (8001194 <Init+0x224>)
 8000fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ff2:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 8000ff4:	4a68      	ldr	r2, [pc, #416]	; (8001198 <Init+0x228>)
 8000ff6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ffa:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8000ffc:	4a67      	ldr	r2, [pc, #412]	; (800119c <Init+0x22c>)
 8000ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001002:	6013      	str	r3, [r2, #0]
	adcTimHandle = in_htim8;
 8001004:	4a66      	ldr	r2, [pc, #408]	; (80011a0 <Init+0x230>)
 8001006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800100a:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 800100c:	4a65      	ldr	r2, [pc, #404]	; (80011a4 <Init+0x234>)
 800100e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001012:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 8001014:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <Init+0x238>)
 8001016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800101a:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 800101c:	4a63      	ldr	r2, [pc, #396]	; (80011ac <Init+0x23c>)
 800101e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001022:	6013      	str	r3, [r2, #0]

//	screen.Startup(screenHandle);
	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 8001024:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <Init+0x224>)
 8001026:	681d      	ldr	r5, [r3, #0]
 8001028:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800102c:	466a      	mov	r2, sp
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001036:	e882 0003 	stmia.w	r2, {r0, r1}
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	cb0c      	ldmia	r3, {r2, r3}
 8001040:	4629      	mov	r1, r5
 8001042:	4620      	mov	r0, r4
 8001044:	f000 fb8c 	bl	8001760 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 8001048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104c:	4619      	mov	r1, r3
 800104e:	4858      	ldr	r0, [pc, #352]	; (80011b0 <Init+0x240>)
 8001050:	f7ff ff5e 	bl	8000f10 <_ZN9ShiftRegsaSERKS_>
 8001054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fbc3 	bl	80017e4 <_ZN9ShiftRegsD1Ev>
	stripCurr = StripCurrent(currentADCHandle, adcTimHandle);
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <Init+0x200>)
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <Init+0x230>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fc4e 	bl	800190c <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>
 8001070:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <Init+0x244>)
 8001072:	461d      	mov	r5, r3
 8001074:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	602b      	str	r3, [r5, #0]
 8001080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fc59 	bl	800193c <_ZN12StripCurrentD1Ev>
	ledA = PCA9634(0x2A, stripI2cHandle, pwmOE);
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <Init+0x208>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	212a      	movs	r1, #42	; 0x2a
 800109a:	f000 fa39 	bl	8001510 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <Init+0x248>)
 80010a0:	461d      	mov	r5, r3
 80010a2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80010a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	602b      	str	r3, [r5, #0]
 80010b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fa68 	bl	800158c <_ZN7PCA9634D1Ev>

	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_1);
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <Init+0x228>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f008 fc8e 	bl	80099e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_3);
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <Init+0x228>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2108      	movs	r1, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fc88 	bl	80099e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_1);
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <Init+0x22c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fc82 	bl	80099e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_4);
 80010e0:	4b2e      	ldr	r3, [pc, #184]	; (800119c <Init+0x22c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210c      	movs	r1, #12
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 fc7c 	bl	80099e4 <HAL_TIM_PWM_Start>

//	HAL_TIM_Base_Start(adcTimHandle);

	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f2:	481d      	ldr	r0, [pc, #116]	; (8001168 <Init+0x1f8>)
 80010f4:	f005 f968 	bl	80063c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <Init+0x1f8>)
 8001100:	f005 f962 	bl	80063c8 <HAL_GPIO_WritePin>

	settings = PCA9634Settings();
 8001104:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	811a      	strh	r2, [r3, #8]
 8001110:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe5d 	bl	8000dd4 <_ZN15PCA9634SettingsC1Ev>
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <Init+0x24c>)
 800111c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001120:	ca07      	ldmia	r2, {r0, r1, r2}
 8001122:	c303      	stmia	r3!, {r0, r1}
 8001124:	801a      	strh	r2, [r3, #0]
	settings.Driver = PCA9634_OUTPUT_DRIVER::TOTEM_POLE;
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <Init+0x24c>)
 8001128:	2201      	movs	r2, #1
 800112a:	711a      	strb	r2, [r3, #4]
	settings.Invert = PCA9634_OUTPUT_LOGIC::INVERTED;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <Init+0x24c>)
 800112e:	2201      	movs	r2, #1
 8001130:	709a      	strb	r2, [r3, #2]
	ledA.ChangeSettings(settings);
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <Init+0x24c>)
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	4820      	ldr	r0, [pc, #128]	; (80011b8 <Init+0x248>)
 8001138:	f000 fa3a 	bl	80015b0 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>

	shiftReg.Init();
 800113c:	481c      	ldr	r0, [pc, #112]	; (80011b0 <Init+0x240>)
 800113e:	f000 fb79 	bl	8001834 <_ZN9ShiftRegs4InitEv>

	if (stripCurr.Init() != HAL_OK)
 8001142:	481c      	ldr	r0, [pc, #112]	; (80011b4 <Init+0x244>)
 8001144:	f000 fc0c 	bl	8001960 <_ZN12StripCurrent4InitEv>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <Init+0x1ec>
	{
		return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <Init+0x1ee>
//	if (HAL_I2S_Receive_DMA(audioHandle, audioBuffer, AUDIO_BUFFER_SIZE) != HAL_OK)
//	{
//		return HAL_ERROR;
//	}

	return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3790      	adds	r7, #144	; 0x90
 8001162:	46bd      	mov	sp, r7
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	bf00      	nop
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40020800 	.word	0x40020800
 8001170:	2000008c 	.word	0x2000008c
 8001174:	20000090 	.word	0x20000090
 8001178:	20000094 	.word	0x20000094
 800117c:	20000098 	.word	0x20000098
 8001180:	2000009c 	.word	0x2000009c
 8001184:	200000a0 	.word	0x200000a0
 8001188:	200000a4 	.word	0x200000a4
 800118c:	200000c4 	.word	0x200000c4
 8001190:	200000c8 	.word	0x200000c8
 8001194:	200000a8 	.word	0x200000a8
 8001198:	200000ac 	.word	0x200000ac
 800119c:	200000b0 	.word	0x200000b0
 80011a0:	200000b4 	.word	0x200000b4
 80011a4:	200000b8 	.word	0x200000b8
 80011a8:	200000bc 	.word	0x200000bc
 80011ac:	200000c0 	.word	0x200000c0
 80011b0:	200000cc 	.word	0x200000cc
 80011b4:	20000128 	.word	0x20000128
 80011b8:	2000013c 	.word	0x2000013c
 80011bc:	20000160 	.word	0x20000160

080011c0 <InitTest>:

void InitTest()
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
//	shiftReg.IndicatorTest();
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	indicator = !indicator;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <Main+0x4c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <Main+0x4c>)
 80011e0:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_1, indicator ? UINT16_MAX : 0);
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <Main+0x4c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <Main+0x20>
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	e000      	b.n	80011f2 <Main+0x22>
 80011f0:	2200      	movs	r2, #0
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <Main+0x50>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_3, !indicator ? UINT16_MAX : 0);
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <Main+0x4c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <Main+0x36>
 8001202:	2200      	movs	r2, #0
 8001204:	e001      	b.n	800120a <Main+0x3a>
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <Main+0x50>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
	ReadCurrent();
 8001212:	f7ff fe0d 	bl	8000e30 <_Z11ReadCurrentv>
//		Screen Nav Testing

//
//	ReadCurrent();
//	shiftReg.Update();
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000026c 	.word	0x2000026c
 8001220:	200000ac 	.word	0x200000ac

08001224 <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_UP_IND);
 8001228:	2103      	movs	r1, #3
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <MenuUpInterruptCallback+0x10>)
 800122c:	f000 fb41 	bl	80018b2 <_ZN9ShiftRegs11ToggleValueEj>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000cc 	.word	0x200000cc

08001238 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_DOWN_IND);
 800123c:	2102      	movs	r1, #2
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <MenuDownInterruptCallback+0x10>)
 8001240:	f000 fb37 	bl	80018b2 <_ZN9ShiftRegs11ToggleValueEj>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000cc 	.word	0x200000cc

0800124c <MenuRightInterruptCallback>:
//void MenuLeftInterruptCallback()
//{
//
//}
void MenuRightInterruptCallback()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_RIGHT_IND);
 8001250:	2105      	movs	r1, #5
 8001252:	4802      	ldr	r0, [pc, #8]	; (800125c <MenuRightInterruptCallback+0x10>)
 8001254:	f000 fb2d 	bl	80018b2 <_ZN9ShiftRegs11ToggleValueEj>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000cc 	.word	0x200000cc

08001260 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 8001264:	2108      	movs	r1, #8
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <MenuActInterruptCallback+0x10>)
 8001268:	f000 fb23 	bl	80018b2 <_ZN9ShiftRegs11ToggleValueEj>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200000cc 	.word	0x200000cc

08001274 <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	relayState = relayState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MenuBackInterruptCallback+0x38>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MenuBackInterruptCallback+0x38>)
 800128a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin, relayState);
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MenuBackInterruptCallback+0x38>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	2101      	movs	r1, #1
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MenuBackInterruptCallback+0x3c>)
 8001296:	f005 f897 	bl	80063c8 <HAL_GPIO_WritePin>
	shiftReg.SetValue((uint8_t)relayState, MENU_BACK_IND);
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <MenuBackInterruptCallback+0x38>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MenuBackInterruptCallback+0x40>)
 80012a4:	f000 fad8 	bl	8001858 <_ZN9ShiftRegs8SetValueEhj>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000026d 	.word	0x2000026d
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	200000cc 	.word	0x200000cc

080012b8 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_Z41__static_initialization_and_destruction_0ii>:
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d119      	bne.n	8001318 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d114      	bne.n	8001318 <_Z41__static_initialization_and_destruction_0ii+0x44>
ShiftRegs shiftReg;
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80012f0:	f7ff fd58 	bl	8000da4 <_ZN9ShiftRegsC1Ev>
Nextion screen = Nextion();
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80012f6:	f000 f84b 	bl	8001390 <_ZN7NextionC1Ev>
Button menuUp = Button();
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80012fc:	f7ff fcd2 	bl	8000ca4 <_ZN6ButtonC1Ev>
Button menuDown = Button();
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001302:	f7ff fccf 	bl	8000ca4 <_ZN6ButtonC1Ev>
StripCurrent stripCurr;
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001308:	f7ff fd41 	bl	8000d8e <_ZN12StripCurrentC1Ev>
PCA9634 ledA;
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800130e:	f7ff fd78 	bl	8000e02 <_ZN7PCA9634C1Ev>
PCA9634Settings settings;
 8001312:	4816      	ldr	r0, [pc, #88]	; (800136c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001314:	f7ff fd5e 	bl	8000dd4 <_ZN15PCA9634SettingsC1Ev>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <_Z41__static_initialization_and_destruction_0ii+0x78>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001324:	4293      	cmp	r3, r2
 8001326:	d111      	bne.n	800134c <_Z41__static_initialization_and_destruction_0ii+0x78>
PCA9634 ledA;
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800132a:	f000 f92f 	bl	800158c <_ZN7PCA9634D1Ev>
StripCurrent stripCurr;
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001330:	f000 fb04 	bl	800193c <_ZN12StripCurrentD1Ev>
Button menuDown = Button();
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001336:	f7ff fcc5 	bl	8000cc4 <_ZN6ButtonD1Ev>
Button menuUp = Button();
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800133c:	f7ff fcc2 	bl	8000cc4 <_ZN6ButtonD1Ev>
Nextion screen = Nextion();
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001342:	f000 f84b 	bl	80013dc <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001348:	f000 fa4c 	bl	80017e4 <_ZN9ShiftRegsD1Ev>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000cc 	.word	0x200000cc
 8001358:	200000f0 	.word	0x200000f0
 800135c:	20000108 	.word	0x20000108
 8001360:	20000118 	.word	0x20000118
 8001364:	20000128 	.word	0x20000128
 8001368:	2000013c 	.word	0x2000013c
 800136c:	20000160 	.word	0x20000160

08001370 <_GLOBAL__sub_I_currentADCHandle>:
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
 8001374:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff ffab 	bl	80012d4 <_Z41__static_initialization_and_destruction_0ii>
 800137e:	bd80      	pop	{r7, pc}

08001380 <_GLOBAL__sub_D_currentADCHandle>:
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
 8001384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ffa3 	bl	80012d4 <_Z41__static_initialization_and_destruction_0ii>
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <_ZN7NextionC1Ev+0x48>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 800139e:	2010      	movs	r0, #16
 80013a0:	f00a fcdb 	bl	800bd5a <_Znaj>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 80013ac:	2008      	movs	r0, #8
 80013ae:	f00a fcd4 	bl	800bd5a <_Znaj>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 80013ba:	2010      	movs	r0, #16
 80013bc:	f00a fccd 	bl	800bd5a <_Znaj>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
	this->index = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	719a      	strb	r2, [r3, #6]
}
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0800c0e0 	.word	0x0800c0e0

080013dc <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <_ZN7NextionD1Ev+0x50>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
{
	delete[] cmdBuffer;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <_ZN7NextionD1Ev+0x20>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00a fcad 	bl	800bd56 <_ZdaPv>
	delete[] recBuffer;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <_ZN7NextionD1Ev+0x32>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4618      	mov	r0, r3
 800140a:	f00a fca4 	bl	800bd56 <_ZdaPv>
	delete[] buffer;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <_ZN7NextionD1Ev+0x44>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fc9b 	bl	800bd56 <_ZdaPv>
}
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800c0e0 	.word	0x0800c0e0

08001430 <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
}
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffcf 	bl	80013dc <_ZN7NextionD1Ev>
 800143e:	2118      	movs	r1, #24
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f00a fc86 	bl	800bd52 <_ZdlPvj>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZN15PCA9634Settings7ToBytesEPhj>:
 * @brief Convert settings into two bytes and add them to the buffer.
 * @param buffer The buffer to store the settings in.
 * @param offset sets an offset from the start of the buffer to save the settings. Default = 0.
 */
void PCA9634Settings::ToBytes(uint8_t *buffer, size_t offset = 0)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	uint8_t upper = (uint8_t)this->Enable;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	795b      	ldrb	r3, [r3, #5]
 8001460:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Driver << 2;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	b25a      	sxtb	r2, r3
 800146a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800146e:	4313      	orrs	r3, r2
 8001470:	b25b      	sxtb	r3, r3
 8001472:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Change << 3;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	78db      	ldrb	r3, [r3, #3]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	b25a      	sxtb	r2, r3
 800147c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001480:	4313      	orrs	r3, r2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Invert << 4;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	789b      	ldrb	r3, [r3, #2]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	b25a      	sxtb	r2, r3
 800148e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001492:	4313      	orrs	r3, r2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->GroupCtrl << 5;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	015b      	lsls	r3, r3, #5
 800149e:	b25a      	sxtb	r2, r3
 80014a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	75fb      	strb	r3, [r7, #23]

	uint8_t lower = (uint8_t)this->AllCallEnable;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	799b      	ldrb	r3, [r3, #6]
 80014ae:	75bb      	strb	r3, [r7, #22]
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	79db      	ldrb	r3, [r3, #7]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	7a1b      	ldrb	r3, [r3, #8]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	b2db      	uxtb	r3, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 80014c0:	4413      	add	r3, r2
 80014c2:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn3 << 3);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	7a5b      	ldrb	r3, [r3, #9]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	b2db      	uxtb	r3, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 80014cc:	4413      	add	r3, r2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	b25a      	sxtb	r2, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 80014d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	75bb      	strb	r3, [r7, #22]
	lower |= (uint8_t)this->Sleep << 4;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	75bb      	strb	r3, [r7, #22]

	buffer[0 + offset] = lower;
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	7dba      	ldrb	r2, [r7, #22]
 80014f6:	701a      	strb	r2, [r3, #0]
	buffer[1 + offset] = upper;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	4413      	add	r3, r2
 8001500:	7dfa      	ldrb	r2, [r7, #23]
 8001502:	701a      	strb	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>:
	return result;
}

/* PCA9634 Class Methods -----------------------------------------------------*/

PCA9634::PCA9634(uint8_t address, FMPI2C_HandleTypeDef *i2cBus, Pin oePin)
 8001510:	b082      	sub	sp, #8
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	460b      	mov	r3, r1
 8001520:	72fb      	strb	r3, [r7, #11]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	227f      	movs	r2, #127	; 0x7f
 8001526:	741a      	strb	r2, [r3, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3311      	adds	r3, #17
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fc51 	bl	8000dd4 <_ZN15PCA9634SettingsC1Ev>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	331c      	adds	r3, #28
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fbe4 	bl	8000d04 <_ZN3PinC1Ev>
{
	this->address = address << 1;
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	701a      	strb	r2, [r3, #0]
	this->i2cBus = i2cBus;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	605a      	str	r2, [r3, #4]
	this->channels = new uint8_t[RGB_CHANNELS];
 800154c:	2008      	movs	r0, #8
 800154e:	f00a fc04 	bl	800bd5a <_Znaj>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	609a      	str	r2, [r3, #8]
	this->channelState = new PCA9634_LEDOUT[RGB_CHANNELS];
 800155a:	2008      	movs	r0, #8
 800155c:	f00a fbfd 	bl	800bd5a <_Znaj>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	60da      	str	r2, [r3, #12]
	this->oePin = oePin;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	331c      	adds	r3, #28
 800156c:	f107 021c 	add.w	r2, r7, #28
 8001570:	6810      	ldr	r0, [r2, #0]
 8001572:	6018      	str	r0, [r3, #0]
 8001574:	8891      	ldrh	r1, [r2, #4]
 8001576:	7992      	ldrb	r2, [r2, #6]
 8001578:	8099      	strh	r1, [r3, #4]
 800157a:	719a      	strb	r2, [r3, #6]
}
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001588:	b002      	add	sp, #8
 800158a:	4770      	bx	lr

0800158c <_ZN7PCA9634D1Ev>:

PCA9634::~PCA9634()
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
{
	delete[] channels;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <_ZN7PCA9634D1Ev+0x1a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00a fbd8 	bl	800bd56 <_ZdaPv>
}
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>:
 * @brief Update the current settings and send it to the PCA9634.
 * @param settings The new esttings to apply.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::ChangeSettings(PCA9634Settings settings)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	4638      	mov	r0, r7
 80015ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (SendSettings(settings) == HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f818 	bl	80015f8 <_ZN7PCA963412SendSettingsE15PCA9634Settings>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf0c      	ite	eq
 80015ce:	2301      	moveq	r3, #1
 80015d0:	2300      	movne	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00a      	beq.n	80015ee <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x3e>
	{
		this->settings = settings;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f103 0211 	add.w	r2, r3, #17
 80015de:	463b      	mov	r3, r7
 80015e0:	cb03      	ldmia	r3!, {r0, r1}
 80015e2:	6010      	str	r0, [r2, #0]
 80015e4:	6051      	str	r1, [r2, #4]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	8113      	strh	r3, [r2, #8]
		return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x40>
	}
	return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZN7PCA963412SendSettingsE15PCA9634Settings>:
 * @brief PRIVATE - Sends the provided settings to the PCA9634.
 * @param settings The new esttings to send.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::SendSettings(PCA9634Settings settings)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	4638      	mov	r0, r7
 8001602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buffer[3] = {0,0,0};
 8001606:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <_ZN7PCA963412SendSettingsE15PCA9634Settings+0x4c>)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4611      	mov	r1, r2
 8001610:	8019      	strh	r1, [r3, #0]
 8001612:	3302      	adds	r3, #2
 8001614:	0c12      	lsrs	r2, r2, #16
 8001616:	701a      	strb	r2, [r3, #0]
	settings.ToBytes(buffer, 1);
 8001618:	f107 0114 	add.w	r1, r7, #20
 800161c:	463b      	mov	r3, r7
 800161e:	2201      	movs	r2, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff15 	bl	8001450 <_ZN15PCA9634Settings7ToBytesEPhj>
	return WriteBytes(PCA9634_AUTO_INC::ALL_REGS, PCA9634_CTRL_REGISTER::MODE1, buffer, 3);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2203      	movs	r2, #3
 800162c:	9200      	str	r2, [sp, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	2104      	movs	r1, #4
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f808 	bl	8001648 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800c0c4 	.word	0x0800c0c4

08001648 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>:
 * @param inc Auto-Increment register option.
 * @param reg The starting register to send to.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::WriteBytes(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg, uint8_t *bytes, size_t len)
{
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800164c:	b08a      	sub	sp, #40	; 0x28
 800164e:	af02      	add	r7, sp, #8
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	72fb      	strb	r3, [r7, #11]
 8001658:	4613      	mov	r3, r2
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
		temp[j] = bytes[i];
	}
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 800165c:	466b      	mov	r3, sp
 800165e:	469a      	mov	sl, r3
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
 8001660:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8001662:	617e      	str	r6, [r7, #20]
 8001664:	4633      	mov	r3, r6
 8001666:	3301      	adds	r3, #1
 8001668:	2200      	movs	r2, #0
 800166a:	4698      	mov	r8, r3
 800166c:	4691      	mov	r9, r2
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800167a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001682:	4633      	mov	r3, r6
 8001684:	3301      	adds	r3, #1
 8001686:	2200      	movs	r2, #0
 8001688:	461c      	mov	r4, r3
 800168a:	4615      	mov	r5, r2
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	00eb      	lsls	r3, r5, #3
 8001696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800169a:	00e2      	lsls	r2, r4, #3
 800169c:	4633      	mov	r3, r6
 800169e:	3301      	adds	r3, #1
 80016a0:	3307      	adds	r3, #7
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	ebad 0d03 	sub.w	sp, sp, r3
 80016aa:	ab02      	add	r3, sp, #8
 80016ac:	3300      	adds	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693c      	ldr	r4, [r7, #16]
 80016b2:	7aba      	ldrb	r2, [r7, #10]
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	4619      	mov	r1, r3
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f83a 	bl	8001732 <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>
 80016be:	4603      	mov	r3, r0
 80016c0:	7023      	strb	r3, [r4, #0]
 80016c2:	1c62      	adds	r2, r4, #1
 80016c4:	1e73      	subs	r3, r6, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db04      	blt.n	80016d4 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x8c>
 80016ca:	2100      	movs	r1, #0
 80016cc:	7011      	strb	r1, [r2, #0]
 80016ce:	3201      	adds	r2, #1
 80016d0:	3b01      	subs	r3, #1
 80016d2:	e7f8      	b.n	80016c6 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x7e>
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016de:	3301      	adds	r3, #1
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d20f      	bcs.n	8001706 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0xbe>
		temp[j] = bytes[i];
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4413      	add	r3, r2
 80016ec:	7819      	ldrb	r1, [r3, #0]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	460a      	mov	r2, r1
 80016f6:	701a      	strb	r2, [r3, #0]
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	e7ea      	b.n	80016dc <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x94>
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6858      	ldr	r0, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b299      	uxth	r1, r3
 8001710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	22c8      	movs	r2, #200	; 0xc8
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	f003 fc1f 	bl	8004f60 <HAL_FMPI2C_Master_Transmit>
 8001722:	4603      	mov	r3, r0
 8001724:	bf00      	nop
 8001726:	46d5      	mov	sp, sl
}
 8001728:	4618      	mov	r0, r3
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001732 <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>:
 * @param inc Auto-Increment register option.
 * @param reg Desired register.
 * @retval HAL status
 */
uint8_t PCA9634::CombineCommand(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
 800173e:	4613      	mov	r3, r2
 8001740:	70bb      	strb	r3, [r7, #2]
	return (uint8_t)reg | ((uint8_t)inc << 5);
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	b25a      	sxtb	r2, r3
 8001748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800174c:	4313      	orrs	r3, r2
 800174e:	b25b      	sxtb	r3, r3
 8001750:	b2db      	uxtb	r3, r3
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4639      	mov	r1, r7
 800176c:	e881 000c 	stmia.w	r1, {r2, r3}
 8001770:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3308      	adds	r3, #8
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fac2 	bl	8000d04 <_ZN3PinC1Ev>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3310      	adds	r3, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fabd 	bl	8000d04 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	463a      	mov	r2, r7
 8001796:	6810      	ldr	r0, [r2, #0]
 8001798:	6018      	str	r0, [r3, #0]
 800179a:	8891      	ldrh	r1, [r2, #4]
 800179c:	7992      	ldrb	r2, [r2, #6]
 800179e:	8099      	strh	r1, [r3, #4]
 80017a0:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3310      	adds	r3, #16
 80017a6:	f107 0218 	add.w	r2, r7, #24
 80017aa:	6810      	ldr	r0, [r2, #0]
 80017ac:	6018      	str	r0, [r3, #0]
 80017ae:	8891      	ldrh	r1, [r2, #4]
 80017b0:	7992      	ldrb	r2, [r2, #6]
 80017b2:	8099      	strh	r1, [r3, #4]
 80017b4:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 80017b6:	2002      	movs	r0, #2
 80017b8:	f00a facf 	bl	800bd5a <_Znaj>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4613      	mov	r3, r2
 80017c2:	2100      	movs	r1, #0
 80017c4:	7019      	strb	r1, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	2100      	movs	r1, #0
 80017ca:	7019      	strb	r1, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	831a      	strh	r2, [r3, #24]
}
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800c0f0 	.word	0x0800c0f0

080017e4 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <_ZN9ShiftRegsD1Ev+0x2c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <_ZN9ShiftRegsD1Ev+0x20>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4618      	mov	r0, r3
 8001800:	f00a faa9 	bl	800bd56 <_ZdaPv>
}
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	0800c0f0 	.word	0x0800c0f0

08001814 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
}
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe1 	bl	80017e4 <_ZN9ShiftRegsD1Ev>
 8001822:	2124      	movs	r1, #36	; 0x24
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f00a fa94 	bl	800bd52 <_ZdlPvj>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3308      	adds	r3, #8
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f8d6 	bl	80019f2 <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3310      	adds	r3, #16
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f8d1 	bl	80019f2 <_ZN3Pin5ClearEv>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	460b      	mov	r3, r1
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10d      	bne.n	8001888 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8b1b      	ldrh	r3, [r3, #24]
 8001870:	b21a      	sxth	r2, r3
 8001872:	2101      	movs	r1, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b21b      	sxth	r3, r3
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8001886:	e00e      	b.n	80018a6 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8b1b      	ldrh	r3, [r3, #24]
 800188c:	b21a      	sxth	r2, r3
 800188e:	2101      	movs	r1, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	b21b      	sxth	r3, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	b21b      	sxth	r3, r3
 800189c:	4013      	ands	r3, r2
 800189e:	b21b      	sxth	r3, r3
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	831a      	strh	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f80f 	bl	80018e2 <_ZN9ShiftRegs8GetValueEj>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf0c      	ite	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	2300      	movne	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffbf 	bl	8001858 <_ZN9ShiftRegs8SetValueEhj>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8b1b      	ldrh	r3, [r3, #24]
 80018f0:	461a      	mov	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	fa42 f303 	asr.w	r3, r2, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>:
 */

#include "main.h"
#include <StripCurrent.h>

StripCurrent::StripCurrent(ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *timer)
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
{
	this->buffer = new uint8_t[STRIP_CURR_BUFFER_LEN];
 8001918:	206e      	movs	r0, #110	; 0x6e
 800191a:	f00a fa1e 	bl	800bd5a <_Znaj>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	609a      	str	r2, [r3, #8]
	this->adc = adcHandle;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	601a      	str	r2, [r3, #0]
	this->timer = timer;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]
//	HAL_ADC_RegisterCallback(adc, HAL_ADC_CONVERSION_COMPLETE_CB_ID, callback);
}
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
{
	delete[] this->buffer;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <_ZN12StripCurrentD1Ev+0x1a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4618      	mov	r0, r3
 8001952:	f00a fa00 	bl	800bd56 <_ZdaPv>
}
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZN12StripCurrent4InitEv>:

HAL_StatusTypeDef StripCurrent::Init()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(this->adc, (uint32_t *)this->buffer, STRIP_CURR_BUFFER_LEN) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	226e      	movs	r2, #110	; 0x6e
 8001972:	4619      	mov	r1, r3
 8001974:	f002 f9e8 	bl	8003d48 <HAL_ADC_Start_DMA>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf14      	ite	ne
 800197e:	2301      	movne	r3, #1
 8001980:	2300      	moveq	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <_ZN12StripCurrent4InitEv+0x2c>
	{
		return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e006      	b.n	800199a <_ZN12StripCurrent4InitEv+0x3a>
	}
	return HAL_TIM_Base_Start(this->timer);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	f007 ff65 	bl	8009860 <HAL_TIM_Base_Start>
 8001996:	4603      	mov	r3, r0
 8001998:	bf00      	nop
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZN12StripCurrent4CalcEv>:
{
	return buffer[ch];
}

void StripCurrent::Calc()
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	// Get each channels value from the DMA buffer
	// and calc the average.
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b0a      	cmp	r3, #10
 80019b2:	dc18      	bgt.n	80019e6 <_ZN12StripCurrent4CalcEv+0x44>
//		averages[i] += *buffer + (i * 8);
		averages[i] += buffer[i * SAMPLE_SIZE];
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6898      	ldr	r0, [r3, #8]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4403      	add	r3, r0
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6918      	ldr	r0, [r3, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4403      	add	r3, r0
 80019d8:	440a      	add	r2, r1
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e7e3      	b.n	80019ae <_ZN12StripCurrent4CalcEv+0xc>
	}
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	8899      	ldrh	r1, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	799b      	ldrb	r3, [r3, #6]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f004 fcde 	bl	80063c8 <HAL_GPIO_WritePin>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a24:	d020      	beq.n	8001a68 <HAL_GPIO_EXTI_Callback+0x54>
 8001a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a2a:	dc31      	bgt.n	8001a90 <HAL_GPIO_EXTI_Callback+0x7c>
 8001a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a30:	d01d      	beq.n	8001a6e <HAL_GPIO_EXTI_Callback+0x5a>
 8001a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a36:	dc2b      	bgt.n	8001a90 <HAL_GPIO_EXTI_Callback+0x7c>
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3c:	d01a      	beq.n	8001a74 <HAL_GPIO_EXTI_Callback+0x60>
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a42:	dc25      	bgt.n	8001a90 <HAL_GPIO_EXTI_Callback+0x7c>
 8001a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a48:	d020      	beq.n	8001a8c <HAL_GPIO_EXTI_Callback+0x78>
 8001a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a4e:	dc1f      	bgt.n	8001a90 <HAL_GPIO_EXTI_Callback+0x7c>
 8001a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a54:	d017      	beq.n	8001a86 <HAL_GPIO_EXTI_Callback+0x72>
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	dc19      	bgt.n	8001a90 <HAL_GPIO_EXTI_Callback+0x7c>
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d00c      	beq.n	8001a7a <HAL_GPIO_EXTI_Callback+0x66>
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d00c      	beq.n	8001a80 <HAL_GPIO_EXTI_Callback+0x6c>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 8001a66:	e013      	b.n	8001a90 <HAL_GPIO_EXTI_Callback+0x7c>
			Enc1TurnInterruptCallback();
 8001a68:	f7ff fc26 	bl	80012b8 <Enc1TurnInterruptCallback>
			break;
 8001a6c:	e011      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x7e>
			Enc2TurnInterruptCallback();
 8001a6e:	f7ff fc2a 	bl	80012c6 <Enc2TurnInterruptCallback>
			break;
 8001a72:	e00e      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuUpInterruptCallback();
 8001a74:	f7ff fbd6 	bl	8001224 <MenuUpInterruptCallback>
			break;
 8001a78:	e00b      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuDownInterruptCallback();
 8001a7a:	f7ff fbdd 	bl	8001238 <MenuDownInterruptCallback>
			break;
 8001a7e:	e008      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuRightInterruptCallback();
 8001a80:	f7ff fbe4 	bl	800124c <MenuRightInterruptCallback>
			break;
 8001a84:	e005      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
 8001a86:	f7ff fbeb 	bl	8001260 <MenuActInterruptCallback>
			break;
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuBackInterruptCallback();
 8001a8c:	f7ff fbf2 	bl	8001274 <MenuBackInterruptCallback>
			break;
 8001a90:	bf00      	nop
	}
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	AudioFullCallback();
 8001aa2:	f7ff fa25 	bl	8000ef0 <AudioFullCallback>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_ADC_ConvCpltCallback>:
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
	AudioHalfFullCallback();
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	CurrentConvFullCallback();
 8001ab6:	f7ff fa21 	bl	8000efc <CurrentConvFullCallback>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aca:	f001 fded 	bl	80036a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ace:	f000 f86b 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad2:	f000 fdff 	bl	80026d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad6:	f000 fdbf 	bl	8002658 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ada:	f000 f8d1 	bl	8001c80 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ade:	f000 f9eb 	bl	8001eb8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001ae2:	f000 fbdd 	bl	80022a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001ae6:	f000 fd39 	bl	800255c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001aea:	f000 fd61 	bl	80025b0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001aee:	f000 fc59 	bl	80023a4 <MX_TIM6_Init>
  MX_RTC_Init();
 8001af2:	f000 fa3d 	bl	8001f70 <MX_RTC_Init>
  MX_SPI4_Init();
 8001af6:	f000 faed 	bl	80020d4 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8001afa:	f000 f9a1 	bl	8001e40 <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8001afe:	f000 fd81 	bl	8002604 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001b02:	f000 fb1d 	bl	8002140 <MX_TIM1_Init>
  MX_I2S5_Init();
 8001b06:	f000 fa05 	bl	8001f14 <MX_I2S5_Init>
  MX_SDIO_SD_Init();
 8001b0a:	f000 fac3 	bl	8002094 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001b0e:	f009 ff35 	bl	800b97c <MX_FATFS_Init>
  MX_TIM8_Init();
 8001b12:	f000 fc85 	bl	8002420 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, pData, Length);
  if (Init(
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <main+0xa4>)
 8001b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <main+0xa8>)
 8001b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <main+0xac>)
 8001b20:	9309      	str	r3, [sp, #36]	; 0x24
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <main+0xb0>)
 8001b24:	9308      	str	r3, [sp, #32]
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <main+0xb4>)
 8001b28:	9307      	str	r3, [sp, #28]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <main+0xb8>)
 8001b2c:	9306      	str	r3, [sp, #24]
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <main+0xbc>)
 8001b30:	9305      	str	r3, [sp, #20]
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <main+0xc0>)
 8001b34:	9304      	str	r3, [sp, #16]
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <main+0xc4>)
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <main+0xc8>)
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <main+0xcc>)
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <main+0xd0>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <main+0xd4>)
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <main+0xd8>)
 8001b4a:	4915      	ldr	r1, [pc, #84]	; (8001ba0 <main+0xdc>)
 8001b4c:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <main+0xe0>)
 8001b4e:	f7ff fa0f 	bl	8000f70 <Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <main+0x98>

		  &hrtc,
		  &hsd
  ) != HAL_OK)
  {
	  Error_Handler();
 8001b58:	f000 ff04 	bl	8002964 <Error_Handler>
  }

  // For Init tests
  InitTest();
 8001b5c:	f7ff fb30 	bl	80011c0 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8001b60:	f7ff fb36 	bl	80011d0 <Main>
 8001b64:	e7fc      	b.n	8001b60 <main+0x9c>
 8001b66:	bf00      	nop
 8001b68:	20000500 	.word	0x20000500
 8001b6c:	200004e0 	.word	0x200004e0
 8001b70:	20000784 	.word	0x20000784
 8001b74:	20000740 	.word	0x20000740
 8001b78:	200006fc 	.word	0x200006fc
 8001b7c:	200006b4 	.word	0x200006b4
 8001b80:	20000624 	.word	0x20000624
 8001b84:	200005dc 	.word	0x200005dc
 8001b88:	20000584 	.word	0x20000584
 8001b8c:	20000480 	.word	0x20000480
 8001b90:	20000438 	.word	0x20000438
 8001b94:	200003e4 	.word	0x200003e4
 8001b98:	20000384 	.word	0x20000384
 8001b9c:	20000338 	.word	0x20000338
 8001ba0:	200002d8 	.word	0x200002d8
 8001ba4:	20000274 	.word	0x20000274

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2234      	movs	r2, #52	; 0x34
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00a f92e 	bl	800be18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001c04:	2305      	movs	r3, #5
 8001c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c12:	2302      	movs	r3, #2
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001c20:	2332      	movs	r3, #50	; 0x32
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4618      	mov	r0, r3
 8001c36:	f005 ff5d 	bl	8007af4 <HAL_RCC_OscConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c40:	f000 fe90 	bl	8002964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c44:	230f      	movs	r3, #15
 8001c46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f005 f9fa 	bl	8007058 <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c6a:	f000 fe7b 	bl	8002964 <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3750      	adds	r7, #80	; 0x50
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000

08001c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c92:	4b69      	ldr	r3, [pc, #420]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001c94:	4a69      	ldr	r2, [pc, #420]	; (8001e3c <MX_ADC1_Init+0x1bc>)
 8001c96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001c9e:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cac:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cb2:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001cc4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cca:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001cd2:	220b      	movs	r2, #11
 8001cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001cde:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce4:	4854      	ldr	r0, [pc, #336]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001ce6:	f001 fd75 	bl	80037d4 <HAL_ADC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001cf0:	f000 fe38 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	4619      	mov	r1, r3
 8001d04:	484c      	ldr	r0, [pc, #304]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001d06:	f002 f93b 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001d10:	f000 fe28 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d14:	2305      	movs	r3, #5
 8001d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4845      	ldr	r0, [pc, #276]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001d22:	f002 f92d 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001d2c:	f000 fe1a 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d30:	2306      	movs	r3, #6
 8001d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d34:	2303      	movs	r3, #3
 8001d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	483e      	ldr	r0, [pc, #248]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001d3e:	f002 f91f 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001d48:	f000 fe0c 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d50:	2304      	movs	r3, #4
 8001d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	4619      	mov	r1, r3
 8001d58:	4837      	ldr	r0, [pc, #220]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001d5a:	f002 f911 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001d64:	f000 fdfe 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	4619      	mov	r1, r3
 8001d74:	4830      	ldr	r0, [pc, #192]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001d76:	f002 f903 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001d80:	f000 fdf0 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d84:	2309      	movs	r3, #9
 8001d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001d88:	2306      	movs	r3, #6
 8001d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4829      	ldr	r0, [pc, #164]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001d92:	f002 f8f5 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001d9c:	f000 fde2 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001da0:	230e      	movs	r3, #14
 8001da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001da4:	2307      	movs	r3, #7
 8001da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	4822      	ldr	r0, [pc, #136]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001dae:	f002 f8e7 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001db8:	f000 fdd4 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481b      	ldr	r0, [pc, #108]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001dca:	f002 f8d9 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001dd4:	f000 fdc6 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001ddc:	2309      	movs	r3, #9
 8001dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4814      	ldr	r0, [pc, #80]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001de6:	f002 f8cb 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8001df0:	f000 fdb8 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001df4:	2310      	movs	r3, #16
 8001df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001df8:	230a      	movs	r3, #10
 8001dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001e02:	f002 f8bd 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8001e0c:	f000 fdaa 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001e10:	2311      	movs	r3, #17
 8001e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001e14:	230b      	movs	r3, #11
 8001e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_ADC1_Init+0x1b8>)
 8001e22:	f002 f8ad 	bl	8003f80 <HAL_ADC_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8001e2c:	f000 fd9a 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000274 	.word	0x20000274
 8001e3c:	40012000 	.word	0x40012000

08001e40 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <MX_FMPI2C1_Init+0x70>)
 8001e48:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x0020081F;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <MX_FMPI2C1_Init+0x74>)
 8001e4e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e7c:	f002 ffe0 	bl	8004e40 <HAL_FMPI2C_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001e86:	f000 fd6d 	bl	8002964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <MX_FMPI2C1_Init+0x6c>)
 8001e8e:	f004 f891 	bl	8005fb4 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001e98:	f000 fd64 	bl	8002964 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f004 f8d5 	bl	800604c <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f004 f8d2 	bl	800604c <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000338 	.word	0x20000338
 8001eb0:	40006000 	.word	0x40006000
 8001eb4:	0020081f 	.word	0x0020081f

08001eb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <MX_I2C1_Init+0x54>)
 8001ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <MX_I2C1_Init+0x58>)
 8001ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_I2C1_Init+0x50>)
 8001ef6:	f004 fab3 	bl	8006460 <HAL_I2C_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f00:	f000 fd30 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200003e4 	.word	0x200003e4
 8001f0c:	40005400 	.word	0x40005400
 8001f10:	000186a0 	.word	0x000186a0

08001f14 <MX_I2S5_Init>:
  * @brief I2S5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S5_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S5_Init 0 */

  /* USER CODE BEGIN I2S5_Init 1 */

  /* USER CODE END I2S5_Init 1 */
  hi2s5.Instance = SPI5;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <MX_I2S5_Init+0x58>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hi2s5.Init.Mode = I2S_MODE_MASTER_RX;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f24:	605a      	str	r2, [r3, #4]
  hi2s5.Init.Standard = I2S_STANDARD_PHILIPS;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hi2s5.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  hi2s5.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  hi2s5.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f3a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001f3e:	615a      	str	r2, [r3, #20]
  hi2s5.Init.CPOL = I2S_CPOL_LOW;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  hi2s5.Init.ClockSource = I2S_CLOCK_PLL;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  hi2s5.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s5) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_I2S5_Init+0x54>)
 8001f54:	f004 fbc8 	bl	80066e8 <HAL_I2S_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2S5_Init+0x4e>
  {
    Error_Handler();
 8001f5e:	f000 fd01 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN I2S5_Init 2 */

  /* USER CODE END I2S5_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000438 	.word	0x20000438
 8001f6c:	40015000 	.word	0x40015000

08001f70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b090      	sub	sp, #64	; 0x40
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f86:	2300      	movs	r3, #0
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2228      	movs	r2, #40	; 0x28
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f009 ff41 	bl	800be18 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <MX_RTC_Init+0x11c>)
 8001f98:	4a3d      	ldr	r2, [pc, #244]	; (8002090 <MX_RTC_Init+0x120>)
 8001f9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <MX_RTC_Init+0x11c>)
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <MX_RTC_Init+0x11c>)
 8001fa4:	227f      	movs	r2, #127	; 0x7f
 8001fa6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fa8:	4b38      	ldr	r3, [pc, #224]	; (800208c <MX_RTC_Init+0x11c>)
 8001faa:	22ff      	movs	r2, #255	; 0xff
 8001fac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <MX_RTC_Init+0x11c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <MX_RTC_Init+0x11c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <MX_RTC_Init+0x11c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fc0:	4832      	ldr	r0, [pc, #200]	; (800208c <MX_RTC_Init+0x11c>)
 8001fc2:	f006 f81b 	bl	8007ffc <HAL_RTC_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001fcc:	f000 fcca 	bl	8002964 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4824      	ldr	r0, [pc, #144]	; (800208c <MX_RTC_Init+0x11c>)
 8001ffa:	f006 f875 	bl	80080e8 <HAL_RTC_SetTime>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002004:	f000 fcae 	bl	8002964 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002024:	2201      	movs	r2, #1
 8002026:	4619      	mov	r1, r3
 8002028:	4818      	ldr	r0, [pc, #96]	; (800208c <MX_RTC_Init+0x11c>)
 800202a:	f006 f8f7 	bl	800821c <HAL_RTC_SetDate>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002034:	f000 fc96 	bl	8002964 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8002038:	2301      	movs	r3, #1
 800203a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800203c:	2301      	movs	r3, #1
 800203e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002040:	2300      	movs	r3, #0
 8002042:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002048:	2300      	movs	r3, #0
 800204a:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_RTC_Init+0x11c>)
 8002074:	f006 f956 	bl	8008324 <HAL_RTC_SetAlarm_IT>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 800207e:	f000 fc71 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	3740      	adds	r7, #64	; 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200004e0 	.word	0x200004e0
 8002090:	40002800 	.word	0x40002800

08002094 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <MX_SDIO_SD_Init+0x3c>)
 800209c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <MX_SDIO_SD_Init+0x38>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20000500 	.word	0x20000500
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <MX_SPI4_Init+0x64>)
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <MX_SPI4_Init+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <MX_SPI4_Init+0x64>)
 80020e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_SPI4_Init+0x64>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <MX_SPI4_Init+0x64>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_SPI4_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_SPI4_Init+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_SPI4_Init+0x64>)
 8002100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002104:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_SPI4_Init+0x64>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MX_SPI4_Init+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_SPI4_Init+0x64>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <MX_SPI4_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_SPI4_Init+0x64>)
 8002120:	220a      	movs	r2, #10
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <MX_SPI4_Init+0x64>)
 8002126:	f007 fac3 	bl	80096b0 <HAL_SPI_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002130:	f000 fc18 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000584 	.word	0x20000584
 800213c:	40013400 	.word	0x40013400

08002140 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b096      	sub	sp, #88	; 0x58
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	615a      	str	r2, [r3, #20]
 8002170:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2220      	movs	r2, #32
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f009 fe4d 	bl	800be18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <MX_TIM1_Init+0x158>)
 8002180:	4a46      	ldr	r2, [pc, #280]	; (800229c <MX_TIM1_Init+0x15c>)
 8002182:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <MX_TIM1_Init+0x158>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <MX_TIM1_Init+0x158>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <MX_TIM1_Init+0x158>)
 8002192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002196:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <MX_TIM1_Init+0x158>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <MX_TIM1_Init+0x158>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <MX_TIM1_Init+0x158>)
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021aa:	483b      	ldr	r0, [pc, #236]	; (8002298 <MX_TIM1_Init+0x158>)
 80021ac:	f007 fb09 	bl	80097c2 <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80021b6:	f000 fbd5 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021c4:	4619      	mov	r1, r3
 80021c6:	4834      	ldr	r0, [pc, #208]	; (8002298 <MX_TIM1_Init+0x158>)
 80021c8:	f007 fef8 	bl	8009fbc <HAL_TIM_ConfigClockSource>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021d2:	f000 fbc7 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021d6:	4830      	ldr	r0, [pc, #192]	; (8002298 <MX_TIM1_Init+0x158>)
 80021d8:	f007 fbaa 	bl	8009930 <HAL_TIM_PWM_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021e2:	f000 fbbf 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021f2:	4619      	mov	r1, r3
 80021f4:	4828      	ldr	r0, [pc, #160]	; (8002298 <MX_TIM1_Init+0x158>)
 80021f6:	f008 faeb 	bl	800a7d0 <HAL_TIMEx_MasterConfigSynchronization>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002200:	f000 fbb0 	bl	8002964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002204:	2360      	movs	r3, #96	; 0x60
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	2200      	movs	r2, #0
 8002226:	4619      	mov	r1, r3
 8002228:	481b      	ldr	r0, [pc, #108]	; (8002298 <MX_TIM1_Init+0x158>)
 800222a:	f007 fe05 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002234:	f000 fb96 	bl	8002964 <Error_Handler>
  }
  sConfigOC.Pulse = 32000;
 8002238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	2208      	movs	r2, #8
 8002244:	4619      	mov	r1, r3
 8002246:	4814      	ldr	r0, [pc, #80]	; (8002298 <MX_TIM1_Init+0x158>)
 8002248:	f007 fdf6 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002252:	f000 fb87 	bl	8002964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800226a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM1_Init+0x158>)
 800227a:	f008 fb25 	bl	800a8c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002284:	f000 fb6e 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM1_Init+0x158>)
 800228a:	f000 ff8d 	bl	80031a8 <HAL_TIM_MspPostInit>

}
 800228e:	bf00      	nop
 8002290:	3758      	adds	r7, #88	; 0x58
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200005dc 	.word	0x200005dc
 800229c:	40010000 	.word	0x40010000

080022a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	f107 0320 	add.w	r3, r7, #32
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <MX_TIM3_Init+0xfc>)
 80022d2:	4a33      	ldr	r2, [pc, #204]	; (80023a0 <MX_TIM3_Init+0x100>)
 80022d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <MX_TIM3_Init+0xfc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022dc:	4b2f      	ldr	r3, [pc, #188]	; (800239c <MX_TIM3_Init+0xfc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <MX_TIM3_Init+0xfc>)
 80022e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <MX_TIM3_Init+0xfc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <MX_TIM3_Init+0xfc>)
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022f6:	4829      	ldr	r0, [pc, #164]	; (800239c <MX_TIM3_Init+0xfc>)
 80022f8:	f007 fa63 	bl	80097c2 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002302:	f000 fb2f 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800230c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002310:	4619      	mov	r1, r3
 8002312:	4822      	ldr	r0, [pc, #136]	; (800239c <MX_TIM3_Init+0xfc>)
 8002314:	f007 fe52 	bl	8009fbc <HAL_TIM_ConfigClockSource>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800231e:	f000 fb21 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002322:	481e      	ldr	r0, [pc, #120]	; (800239c <MX_TIM3_Init+0xfc>)
 8002324:	f007 fb04 	bl	8009930 <HAL_TIM_PWM_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800232e:	f000 fb19 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800233a:	f107 0320 	add.w	r3, r7, #32
 800233e:	4619      	mov	r1, r3
 8002340:	4816      	ldr	r0, [pc, #88]	; (800239c <MX_TIM3_Init+0xfc>)
 8002342:	f008 fa45 	bl	800a7d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800234c:	f000 fb0a 	bl	8002964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	480d      	ldr	r0, [pc, #52]	; (800239c <MX_TIM3_Init+0xfc>)
 8002368:	f007 fd66 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002372:	f000 faf7 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	220c      	movs	r2, #12
 800237a:	4619      	mov	r1, r3
 800237c:	4807      	ldr	r0, [pc, #28]	; (800239c <MX_TIM3_Init+0xfc>)
 800237e:	f007 fd5b 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002388:	f000 faec 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <MX_TIM3_Init+0xfc>)
 800238e:	f000 ff0b 	bl	80031a8 <HAL_TIM_MspPostInit>

}
 8002392:	bf00      	nop
 8002394:	3738      	adds	r7, #56	; 0x38
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000624 	.word	0x20000624
 80023a0:	40000400 	.word	0x40000400

080023a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023aa:	463b      	mov	r3, r7
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <MX_TIM6_Init+0x74>)
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <MX_TIM6_Init+0x78>)
 80023b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <MX_TIM6_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <MX_TIM6_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_TIM6_Init+0x74>)
 80023c6:	22ff      	movs	r2, #255	; 0xff
 80023c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <MX_TIM6_Init+0x74>)
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023d0:	4811      	ldr	r0, [pc, #68]	; (8002418 <MX_TIM6_Init+0x74>)
 80023d2:	f007 f9f6 	bl	80097c2 <HAL_TIM_Base_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80023dc:	f000 fac2 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80023e0:	2108      	movs	r1, #8
 80023e2:	480d      	ldr	r0, [pc, #52]	; (8002418 <MX_TIM6_Init+0x74>)
 80023e4:	f007 fbc6 	bl	8009b74 <HAL_TIM_OnePulse_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80023ee:	f000 fab9 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023f2:	2320      	movs	r3, #32
 80023f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023fa:	463b      	mov	r3, r7
 80023fc:	4619      	mov	r1, r3
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <MX_TIM6_Init+0x74>)
 8002400:	f008 f9e6 	bl	800a7d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 800240a:	f000 faab 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000066c 	.word	0x2000066c
 800241c:	40001000 	.word	0x40001000

08002420 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b096      	sub	sp, #88	; 0x58
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	615a      	str	r2, [r3, #20]
 8002450:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2220      	movs	r2, #32
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f009 fcdd 	bl	800be18 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <MX_TIM8_Init+0x134>)
 8002460:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <MX_TIM8_Init+0x138>)
 8002462:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5000-1;
 8002464:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <MX_TIM8_Init+0x134>)
 8002466:	f241 3287 	movw	r2, #4999	; 0x1387
 800246a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <MX_TIM8_Init+0x134>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <MX_TIM8_Init+0x134>)
 8002474:	22f9      	movs	r2, #249	; 0xf9
 8002476:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <MX_TIM8_Init+0x134>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <MX_TIM8_Init+0x134>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <MX_TIM8_Init+0x134>)
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800248a:	4832      	ldr	r0, [pc, #200]	; (8002554 <MX_TIM8_Init+0x134>)
 800248c:	f007 f999 	bl	80097c2 <HAL_TIM_Base_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002496:	f000 fa65 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024a4:	4619      	mov	r1, r3
 80024a6:	482b      	ldr	r0, [pc, #172]	; (8002554 <MX_TIM8_Init+0x134>)
 80024a8:	f007 fd88 	bl	8009fbc <HAL_TIM_ConfigClockSource>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80024b2:	f000 fa57 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024b6:	4827      	ldr	r0, [pc, #156]	; (8002554 <MX_TIM8_Init+0x134>)
 80024b8:	f007 fa3a 	bl	8009930 <HAL_TIM_PWM_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80024c2:	f000 fa4f 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024c6:	2320      	movs	r3, #32
 80024c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024d2:	4619      	mov	r1, r3
 80024d4:	481f      	ldr	r0, [pc, #124]	; (8002554 <MX_TIM8_Init+0x134>)
 80024d6:	f008 f97b 	bl	800a7d0 <HAL_TIMEx_MasterConfigSynchronization>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80024e0:	f000 fa40 	bl	8002964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e4:	2360      	movs	r3, #96	; 0x60
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024f0:	2300      	movs	r3, #0
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	4812      	ldr	r0, [pc, #72]	; (8002554 <MX_TIM8_Init+0x134>)
 800250a:	f007 fc95 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002514:	f000 fa26 	bl	8002964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800252c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <MX_TIM8_Init+0x134>)
 800253c:	f008 f9c4 	bl	800a8c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8002546:	f000 fa0d 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	3758      	adds	r7, #88	; 0x58
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200006b4 	.word	0x200006b4
 8002558:	40010400 	.word	0x40010400

0800255c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_USART1_UART_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART1_UART_Init+0x4c>)
 8002594:	f008 f9fe 	bl	800a994 <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800259e:	f000 f9e1 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200006fc 	.word	0x200006fc
 80025ac:	40011000 	.word	0x40011000

080025b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_USART2_UART_Init+0x50>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_USART2_UART_Init+0x4c>)
 80025e8:	f008 f9d4 	bl	800a994 <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025f2:	f000 f9b7 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000740 	.word	0x20000740
 8002600:	40004400 	.word	0x40004400

08002604 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <MX_USART3_UART_Init+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART3_UART_Init+0x4c>)
 800263c:	f008 f9aa 	bl	800a994 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002646:	f000 f98d 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000784 	.word	0x20000784
 8002654:	40004800 	.word	0x40004800

08002658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_DMA_Init+0x78>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <MX_DMA_Init+0x78>)
 8002668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_DMA_Init+0x78>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_DMA_Init+0x78>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <MX_DMA_Init+0x78>)
 8002684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_DMA_Init+0x78>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	200c      	movs	r0, #12
 800269c:	f001 fff9 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026a0:	200c      	movs	r0, #12
 80026a2:	f002 f812 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	2038      	movs	r0, #56	; 0x38
 80026ac:	f001 fff1 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026b0:	2038      	movs	r0, #56	; 0x38
 80026b2:	f002 f80a 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	203b      	movs	r0, #59	; 0x3b
 80026bc:	f001 ffe9 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80026c0:	203b      	movs	r0, #59	; 0x3b
 80026c2:	f002 f802 	bl	80046ca <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	; 0x30
 80026d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	4b98      	ldr	r3, [pc, #608]	; (8002950 <MX_GPIO_Init+0x27c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a97      	ldr	r2, [pc, #604]	; (8002950 <MX_GPIO_Init+0x27c>)
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b95      	ldr	r3, [pc, #596]	; (8002950 <MX_GPIO_Init+0x27c>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	4b91      	ldr	r3, [pc, #580]	; (8002950 <MX_GPIO_Init+0x27c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a90      	ldr	r2, [pc, #576]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b8e      	ldr	r3, [pc, #568]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b8a      	ldr	r3, [pc, #552]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a89      	ldr	r2, [pc, #548]	; (8002950 <MX_GPIO_Init+0x27c>)
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b83      	ldr	r3, [pc, #524]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a82      	ldr	r2, [pc, #520]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b80      	ldr	r3, [pc, #512]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	4b7c      	ldr	r3, [pc, #496]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a7b      	ldr	r2, [pc, #492]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b79      	ldr	r3, [pc, #484]	; (8002950 <MX_GPIO_Init+0x27c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <MX_GPIO_Init+0x27c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a74      	ldr	r2, [pc, #464]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <MX_GPIO_Init+0x27c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STRIP_ESHDN_Pin|DMX_EN_Pin, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	f240 4101 	movw	r1, #1025	; 0x401
 8002798:	486e      	ldr	r0, [pc, #440]	; (8002954 <MX_GPIO_Init+0x280>)
 800279a:	f003 fe15 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	f24e 0101 	movw	r1, #57345	; 0xe001
 80027a4:	486c      	ldr	r0, [pc, #432]	; (8002958 <MX_GPIO_Init+0x284>)
 80027a6:	f003 fe0f 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 80027aa:	2201      	movs	r2, #1
 80027ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b0:	4868      	ldr	r0, [pc, #416]	; (8002954 <MX_GPIO_Init+0x280>)
 80027b2:	f003 fe09 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LGT_EN3_GPIO_Port, LGT_EN3_Pin, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027bc:	4867      	ldr	r0, [pc, #412]	; (800295c <MX_GPIO_Init+0x288>)
 80027be:	f003 fe03 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LGT_EN2_Pin|LGT_EN1_Pin, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2103      	movs	r1, #3
 80027c6:	4866      	ldr	r0, [pc, #408]	; (8002960 <MX_GPIO_Init+0x28c>)
 80027c8:	f003 fdfe 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JACK_SW_Pin */
  GPIO_InitStruct.Pin = JACK_SW_Pin;
 80027cc:	2308      	movs	r3, #8
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JACK_SW_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	4860      	ldr	r0, [pc, #384]	; (8002960 <MX_GPIO_Init+0x28c>)
 80027e0:	f003 fc56 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin DMX_EN_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin|DMX_EN_Pin;
 80027e4:	f240 5301 	movw	r3, #1281	; 0x501
 80027e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	4855      	ldr	r0, [pc, #340]	; (8002954 <MX_GPIO_Init+0x280>)
 80027fe:	f003 fc47 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VDDA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VDDA_PG_Pin|STRIP_PG_Pin;
 8002802:	230e      	movs	r3, #14
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	484f      	ldr	r0, [pc, #316]	; (8002954 <MX_GPIO_Init+0x280>)
 8002816:	f003 fc3b 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 800281a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002820:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002826:	2301      	movs	r3, #1
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	484b      	ldr	r0, [pc, #300]	; (8002960 <MX_GPIO_Init+0x28c>)
 8002832:	f003 fc2d 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8002836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4844      	ldr	r0, [pc, #272]	; (800295c <MX_GPIO_Init+0x288>)
 800284c:	f003 fc20 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8002850:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800285a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	483d      	ldr	r0, [pc, #244]	; (800295c <MX_GPIO_Init+0x288>)
 8002868:	f003 fc12 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 800286c:	f641 7328 	movw	r3, #7976	; 0x1f28
 8002870:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002872:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002878:	2301      	movs	r3, #1
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	4835      	ldr	r0, [pc, #212]	; (8002958 <MX_GPIO_Init+0x284>)
 8002884:	f003 fc04 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 8002888:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800288c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288e:	2301      	movs	r3, #1
 8002890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002896:	2302      	movs	r3, #2
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	482d      	ldr	r0, [pc, #180]	; (8002958 <MX_GPIO_Init+0x284>)
 80028a2:	f003 fbf5 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 80028a6:	f244 0301 	movw	r3, #16385	; 0x4001
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4826      	ldr	r0, [pc, #152]	; (8002958 <MX_GPIO_Init+0x284>)
 80028c0:	f003 fbe6 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	4820      	ldr	r0, [pc, #128]	; (8002958 <MX_GPIO_Init+0x284>)
 80028d8:	f003 fbda 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LGT_EN3_Pin */
  GPIO_InitStruct.Pin = LGT_EN3_Pin;
 80028dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LGT_EN3_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	4819      	ldr	r0, [pc, #100]	; (800295c <MX_GPIO_Init+0x288>)
 80028f6:	f003 fbcb 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LGT_EN2_Pin LGT_EN1_Pin */
  GPIO_InitStruct.Pin = LGT_EN2_Pin|LGT_EN1_Pin;
 80028fa:	2303      	movs	r3, #3
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fe:	2301      	movs	r3, #1
 8002900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	4619      	mov	r1, r3
 8002910:	4813      	ldr	r0, [pc, #76]	; (8002960 <MX_GPIO_Init+0x28c>)
 8002912:	f003 fbbd 	bl	8006090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2009      	movs	r0, #9
 800291c:	f001 feb9 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002920:	2009      	movs	r0, #9
 8002922:	f001 fed2 	bl	80046ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2017      	movs	r0, #23
 800292c:	f001 feb1 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002930:	2017      	movs	r0, #23
 8002932:	f001 feca 	bl	80046ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2028      	movs	r0, #40	; 0x28
 800293c:	f001 fea9 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002940:	2028      	movs	r0, #40	; 0x28
 8002942:	f001 fec2 	bl	80046ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002946:	bf00      	nop
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40020800 	.word	0x40020800
 8002958:	40020c00 	.word	0x40020c00
 800295c:	40020400 	.word	0x40020400
 8002960:	40021000 	.word	0x40021000

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 800296c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002970:	4803      	ldr	r0, [pc, #12]	; (8002980 <Error_Handler+0x1c>)
 8002972:	f003 fd42 	bl	80063fa <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8002976:	20c8      	movs	r0, #200	; 0xc8
 8002978:	f000 ff08 	bl	800378c <HAL_Delay>
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 800297c:	e7f6      	b.n	800296c <Error_Handler+0x8>
 800297e:	bf00      	nop
 8002980:	40020800 	.word	0x40020800

08002984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_MspInit+0x58>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_MspInit+0x58>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x58>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_MspInit+0x58>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HAL_MspInit+0x58>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_MspInit+0x58>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2005      	movs	r0, #5
 80029c8:	f001 fe63 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80029cc:	2005      	movs	r0, #5
 80029ce:	f001 fe7c 	bl	80046ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a4d      	ldr	r2, [pc, #308]	; (8002b34 <HAL_ADC_MspInit+0x154>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	f040 8093 	bne.w	8002b2a <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6453      	str	r3, [r2, #68]	; 0x44
 8002a14:	4b48      	ldr	r3, [pc, #288]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a35      	ldr	r2, [pc, #212]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_ADC_MspInit+0x158>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOLID_LGTS_MON_Pin|STRIP_MON2_Pin|STRIP_MON1_Pin|STRIP_MON6_Pin
 8002a74:	23f1      	movs	r3, #241	; 0xf1
 8002a76:	61fb      	str	r3, [r7, #28]
                          |STRIP_MON5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	482d      	ldr	r0, [pc, #180]	; (8002b3c <HAL_ADC_MspInit+0x15c>)
 8002a88:	f003 fb02 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON4_Pin|STRIP_MON3_Pin;
 8002a8c:	2330      	movs	r3, #48	; 0x30
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a90:	2303      	movs	r3, #3
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4828      	ldr	r0, [pc, #160]	; (8002b40 <HAL_ADC_MspInit+0x160>)
 8002aa0:	f003 faf6 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON8_Pin|STRIP_MON7_Pin;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4823      	ldr	r0, [pc, #140]	; (8002b44 <HAL_ADC_MspInit+0x164>)
 8002ab8:	f003 faea 	bl	8006090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002abe:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_ADC_MspInit+0x16c>)
 8002ac0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002af2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002af6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002afe:	4812      	ldr	r0, [pc, #72]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002b00:	f001 fdfe 	bl	8004700 <HAL_DMA_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8002b0a:	f7ff ff2b 	bl	8002964 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <HAL_ADC_MspInit+0x168>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2012      	movs	r0, #18
 8002b20:	f001 fdb7 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b24:	2012      	movs	r0, #18
 8002b26:	f001 fdd0 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40012000 	.word	0x40012000
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40020400 	.word	0x40020400
 8002b48:	200002d8 	.word	0x200002d8
 8002b4c:	40026410 	.word	0x40026410

08002b50 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09a      	sub	sp, #104	; 0x68
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	223c      	movs	r2, #60	; 0x3c
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f009 f951 	bl	800be18 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_FMPI2C_MspInit+0x16c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	f040 8098 	bne.w	8002cb2 <HAL_FMPI2C_MspInit+0x162>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8002b82:	2310      	movs	r3, #16
 8002b84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8002b86:	2300      	movs	r3, #0
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8a:	f107 0318 	add.w	r3, r7, #24
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fc80 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8002b9a:	f7ff fee3 	bl	8002964 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a46      	ldr	r2, [pc, #280]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a3f      	ldr	r2, [pc, #252]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bda:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bdc:	2312      	movs	r3, #18
 8002bde:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002be8:	2304      	movs	r3, #4
 8002bea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4834      	ldr	r0, [pc, #208]	; (8002cc4 <HAL_FMPI2C_MspInit+0x174>)
 8002bf4:	f003 fa4c 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c10:	4619      	mov	r1, r3
 8002c12:	482d      	ldr	r0, [pc, #180]	; (8002cc8 <HAL_FMPI2C_MspInit+0x178>)
 8002c14:	f003 fa3c 	bl	8006090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_FMPI2C_MspInit+0x170>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 8002c34:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <HAL_FMPI2C_MspInit+0x180>)
 8002c38:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c40:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c54:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c6e:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 8002c76:	4815      	ldr	r0, [pc, #84]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c78:	f001 fd42 	bl	8004700 <HAL_DMA_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_FMPI2C_MspInit+0x136>
    {
      Error_Handler();
 8002c82:	f7ff fe6f 	bl	8002964 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_FMPI2C_MspInit+0x17c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	205f      	movs	r0, #95	; 0x5f
 8002c98:	f001 fcfb 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 8002c9c:	205f      	movs	r0, #95	; 0x5f
 8002c9e:	f001 fd14 	bl	80046ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2060      	movs	r0, #96	; 0x60
 8002ca8:	f001 fcf3 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 8002cac:	2060      	movs	r0, #96	; 0x60
 8002cae:	f001 fd0c 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3768      	adds	r7, #104	; 0x68
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40006000 	.word	0x40006000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	20000384 	.word	0x20000384
 8002cd0:	40026028 	.word	0x40026028

08002cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_I2C_MspInit+0x84>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12b      	bne.n	8002d4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d16:	2312      	movs	r3, #18
 8002d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d22:	2304      	movs	r3, #4
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <HAL_I2C_MspInit+0x8c>)
 8002d2e:	f003 f9af 	bl	8006090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_I2C_MspInit+0x88>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40005400 	.word	0x40005400
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020400 	.word	0x40020400

08002d64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b098      	sub	sp, #96	; 0x60
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	223c      	movs	r2, #60	; 0x3c
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f009 f847 	bl	800be18 <memset>
  if(hi2s->Instance==SPI5)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <HAL_I2S_MspInit+0x128>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d176      	bne.n	8002e82 <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB2;
 8002d94:	2382      	movs	r3, #130	; 0x82
 8002d96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 86;
 8002d98:	2356      	movs	r3, #86	; 0x56
 8002d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8002da0:	2304      	movs	r3, #4
 8002da2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002da4:	2302      	movs	r3, #2
 8002da6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8002dac:	2300      	movs	r3, #0
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fb6d 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 8002dc0:	f7ff fdd0 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_I2S_MspInit+0x12c>)
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_I2S_MspInit+0x12c>)
 8002dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_I2S_MspInit+0x12c>)
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_I2S_MspInit+0x12c>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <HAL_I2S_MspInit+0x12c>)
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_I2S_MspInit+0x12c>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
    /**I2S5 GPIO Configuration
    PE11     ------> I2S5_WS
    PE12     ------> I2S5_CK
    PE14     ------> I2S5_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8002dfc:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8002e00:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002e0e:	2306      	movs	r3, #6
 8002e10:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e16:	4619      	mov	r1, r3
 8002e18:	481e      	ldr	r0, [pc, #120]	; (8002e94 <HAL_I2S_MspInit+0x130>)
 8002e1a:	f003 f939 	bl	8006090 <HAL_GPIO_Init>

    /* I2S5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e20:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <HAL_I2S_MspInit+0x138>)
 8002e22:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8002e24:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3e:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e46:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e4e:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e56:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e5e:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8002e66:	480c      	ldr	r0, [pc, #48]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e68:	f001 fc4a 	bl	8004700 <HAL_DMA_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 8002e72:	f7ff fd77 	bl	8002964 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi5_rx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <HAL_I2S_MspInit+0x134>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002e82:	bf00      	nop
 8002e84:	3760      	adds	r7, #96	; 0x60
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40015000 	.word	0x40015000
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40021000 	.word	0x40021000
 8002e98:	20000480 	.word	0x20000480
 8002e9c:	40026458 	.word	0x40026458

08002ea0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b092      	sub	sp, #72	; 0x48
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	223c      	movs	r2, #60	; 0x3c
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f008 ffb1 	bl	800be18 <memset>
  if(hrtc->Instance==RTC)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_RTC_MspInit+0x5c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d119      	bne.n	8002ef4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fae0 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002eda:	f7ff fd43 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_RTC_MspInit+0x60>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2029      	movs	r0, #41	; 0x29
 8002eea:	f001 fbd2 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002eee:	2029      	movs	r0, #41	; 0x29
 8002ef0:	f001 fbeb 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ef4:	bf00      	nop
 8002ef6:	3748      	adds	r7, #72	; 0x48
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40002800 	.word	0x40002800
 8002f00:	42470e3c 	.word	0x42470e3c

08002f04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b09a      	sub	sp, #104	; 0x68
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f1c:	f107 0318 	add.w	r3, r7, #24
 8002f20:	223c      	movs	r2, #60	; 0x3c
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f008 ff77 	bl	800be18 <memset>
  if(hsd->Instance==SDIO)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a40      	ldr	r2, [pc, #256]	; (8003030 <HAL_SD_MspInit+0x12c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d178      	bne.n	8003026 <HAL_SD_MspInit+0x122>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8002f34:	2360      	movs	r3, #96	; 0x60
 8002f36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f40:	f107 0318 	add.w	r3, r7, #24
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 faa5 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8002f50:	f7ff fd08 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	4a35      	ldr	r2, [pc, #212]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f62:	6453      	str	r3, [r2, #68]	; 0x44
 8002f64:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f80:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f96:	f043 0308 	orr.w	r3, r3, #8
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	4a20      	ldr	r2, [pc, #128]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_SD_MspInit+0x130>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <HAL_SD_MspInit+0x134>)
 8002fe2:	f003 f855 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ff6:	230c      	movs	r3, #12
 8002ff8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ffe:	4619      	mov	r1, r3
 8003000:	480e      	ldr	r0, [pc, #56]	; (800303c <HAL_SD_MspInit+0x138>)
 8003002:	f003 f845 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003006:	2310      	movs	r3, #16
 8003008:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003016:	230c      	movs	r3, #12
 8003018:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800301e:	4619      	mov	r1, r3
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <HAL_SD_MspInit+0x13c>)
 8003022:	f003 f835 	bl	8006090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003026:	bf00      	nop
 8003028:	3768      	adds	r7, #104	; 0x68
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40023800 	.word	0x40023800
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40020400 	.word	0x40020400

08003044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_SPI_MspInit+0x84>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d12b      	bne.n	80030be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_SPI_MspInit+0x88>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_SPI_MspInit+0x88>)
 8003070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_SPI_MspInit+0x88>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_SPI_MspInit+0x88>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_SPI_MspInit+0x88>)
 800308c:	f043 0310 	orr.w	r3, r3, #16
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_SPI_MspInit+0x88>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GRAPH_CLK_Pin|GRAPH_SDI_Pin;
 800309e:	2344      	movs	r3, #68	; 0x44
 80030a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030aa:	2303      	movs	r3, #3
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80030ae:	2305      	movs	r3, #5
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <HAL_SPI_MspInit+0x8c>)
 80030ba:	f002 ffe9 	bl	8006090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <HAL_TIM_Base_MspInit+0xc0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003102:	e042      	b.n	800318a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a24      	ldr	r2, [pc, #144]	; (800319c <HAL_TIM_Base_MspInit+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d10e      	bne.n	800312c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a20      	ldr	r2, [pc, #128]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
}
 800312a:	e02e      	b.n	800318a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_TIM_Base_MspInit+0xcc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d116      	bne.n	8003164 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003140:	f043 0310 	orr.w	r3, r3, #16
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	2036      	movs	r0, #54	; 0x36
 8003158:	f001 fa9b 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800315c:	2036      	movs	r0, #54	; 0x36
 800315e:	f001 fab4 	bl	80046ca <HAL_NVIC_EnableIRQ>
}
 8003162:	e012      	b.n	800318a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_TIM_Base_MspInit+0xd0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10d      	bne.n	800318a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_TIM_Base_MspInit+0xc4>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40010000 	.word	0x40010000
 8003198:	40023800 	.word	0x40023800
 800319c:	40000400 	.word	0x40000400
 80031a0:	40001000 	.word	0x40001000
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <HAL_TIM_MspPostInit+0xb4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d11f      	bne.n	800320a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_TIM_MspPostInit+0xb8>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a23      	ldr	r2, [pc, #140]	; (8003260 <HAL_TIM_MspPostInit+0xb8>)
 80031d4:	f043 0310 	orr.w	r3, r3, #16
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_TIM_MspPostInit+0xb8>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = XLR_SEL_IND_Pin|HP_SEL_IND_Pin;
 80031e6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80031ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	4818      	ldr	r0, [pc, #96]	; (8003264 <HAL_TIM_MspPostInit+0xbc>)
 8003204:	f002 ff44 	bl	8006090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003208:	e023      	b.n	8003252 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a16      	ldr	r2, [pc, #88]	; (8003268 <HAL_TIM_MspPostInit+0xc0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d11e      	bne.n	8003252 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_TIM_MspPostInit+0xb8>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_TIM_MspPostInit+0xb8>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_TIM_MspPostInit+0xb8>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 8003230:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003242:	2302      	movs	r3, #2
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4619      	mov	r1, r3
 800324c:	4807      	ldr	r0, [pc, #28]	; (800326c <HAL_TIM_MspPostInit+0xc4>)
 800324e:	f002 ff1f 	bl	8006090 <HAL_GPIO_Init>
}
 8003252:	bf00      	nop
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000
 8003260:	40023800 	.word	0x40023800
 8003264:	40021000 	.word	0x40021000
 8003268:	40000400 	.word	0x40000400
 800326c:	40020800 	.word	0x40020800

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_UART_MspInit+0x18c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d12d      	bne.n	80032ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_UART_MspInit+0x190>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a59      	ldr	r2, [pc, #356]	; (8003400 <HAL_UART_MspInit+0x190>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_UART_MspInit+0x190>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_UART_MspInit+0x190>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_UART_MspInit+0x190>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_UART_MspInit+0x190>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 80032ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032dc:	2307      	movs	r3, #7
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e4:	4619      	mov	r1, r3
 80032e6:	4847      	ldr	r0, [pc, #284]	; (8003404 <HAL_UART_MspInit+0x194>)
 80032e8:	f002 fed2 	bl	8006090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032ec:	e082      	b.n	80033f4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a45      	ldr	r2, [pc, #276]	; (8003408 <HAL_UART_MspInit+0x198>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d12c      	bne.n	8003352 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	4b40      	ldr	r3, [pc, #256]	; (8003400 <HAL_UART_MspInit+0x190>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a3f      	ldr	r2, [pc, #252]	; (8003400 <HAL_UART_MspInit+0x190>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <HAL_UART_MspInit+0x190>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <HAL_UART_MspInit+0x190>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	4a38      	ldr	r2, [pc, #224]	; (8003400 <HAL_UART_MspInit+0x190>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6313      	str	r3, [r2, #48]	; 0x30
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_UART_MspInit+0x190>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 8003330:	230c      	movs	r3, #12
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003340:	2307      	movs	r3, #7
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003348:	4619      	mov	r1, r3
 800334a:	482e      	ldr	r0, [pc, #184]	; (8003404 <HAL_UART_MspInit+0x194>)
 800334c:	f002 fea0 	bl	8006090 <HAL_GPIO_Init>
}
 8003350:	e050      	b.n	80033f4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2d      	ldr	r2, [pc, #180]	; (800340c <HAL_UART_MspInit+0x19c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d14b      	bne.n	80033f4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <HAL_UART_MspInit+0x190>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a26      	ldr	r2, [pc, #152]	; (8003400 <HAL_UART_MspInit+0x190>)
 8003366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_UART_MspInit+0x190>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_UART_MspInit+0x190>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_UART_MspInit+0x190>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	6313      	str	r3, [r2, #48]	; 0x30
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_UART_MspInit+0x190>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_UART_MspInit+0x190>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_UART_MspInit+0x190>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6313      	str	r3, [r2, #48]	; 0x30
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_UART_MspInit+0x190>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 80033b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033be:	2303      	movs	r3, #3
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033c2:	2307      	movs	r3, #7
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	4810      	ldr	r0, [pc, #64]	; (8003410 <HAL_UART_MspInit+0x1a0>)
 80033ce:	f002 fe5f 	bl	8006090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 80033d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e0:	2303      	movs	r3, #3
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033e4:	2307      	movs	r3, #7
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 80033e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ec:	4619      	mov	r1, r3
 80033ee:	4809      	ldr	r0, [pc, #36]	; (8003414 <HAL_UART_MspInit+0x1a4>)
 80033f0:	f002 fe4e 	bl	8006090 <HAL_GPIO_Init>
}
 80033f4:	bf00      	nop
 80033f6:	3738      	adds	r7, #56	; 0x38
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40011000 	.word	0x40011000
 8003400:	40023800 	.word	0x40023800
 8003404:	40020000 	.word	0x40020000
 8003408:	40004400 	.word	0x40004400
 800340c:	40004800 	.word	0x40004800
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800

08003418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800341c:	e7fe      	b.n	800341c <NMI_Handler+0x4>

0800341e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <HardFault_Handler+0x4>

08003424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <MemManage_Handler+0x4>

0800342a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800342e:	e7fe      	b.n	800342e <BusFault_Handler+0x4>

08003430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003434:	e7fe      	b.n	8003434 <UsageFault_Handler+0x4>

08003436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003464:	f000 f972 	bl	800374c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}

0800346c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 800347e:	2008      	movs	r0, #8
 8003480:	f002 ffd6 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}

08003488 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA1_Stream1_IRQHandler+0x10>)
 800348e:	f001 fa5f 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000384 	.word	0x20000384

0800349c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <ADC_IRQHandler+0x10>)
 80034a2:	f000 fb3c 	bl	8003b1e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000274 	.word	0x20000274

080034b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 80034b4:	2020      	movs	r0, #32
 80034b6:	f002 ffbb 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 80034ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034be:	f002 ffb7 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 80034c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034c6:	f002 ffb3 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}

080034ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 80034d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034d6:	f002 ffab 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 80034da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034de:	f002 ffa7 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 80034e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80034e6:	f002 ffa3 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80034ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034ee:	f002 ff9f 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 80034f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034f6:	f002 ff9b 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 80034fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80034fe:	f002 ff97 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <RTC_Alarm_IRQHandler+0x10>)
 800350e:	f005 f84b 	bl	80085a8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200004e0 	.word	0x200004e0

0800351c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <TIM6_IRQHandler+0x10>)
 8003522:	f006 fb81 	bl	8009c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	2000066c 	.word	0x2000066c

08003530 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <DMA2_Stream0_IRQHandler+0x10>)
 8003536:	f001 fa0b 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200002d8 	.word	0x200002d8

08003544 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <DMA2_Stream3_IRQHandler+0x10>)
 800354a:	f001 fa01 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000480 	.word	0x20000480

08003558 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <FMPI2C1_EV_IRQHandler+0x10>)
 800355e:	f001 fdf3 	bl	8005148 <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000338 	.word	0x20000338

0800356c <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <FMPI2C1_ER_IRQHandler+0x10>)
 8003572:	f001 fe03 	bl	800517c <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000338 	.word	0x20000338

08003580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return 1;
 8003584:	2301      	movs	r3, #1
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <_kill>:

int _kill(int pid, int sig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800359a:	f008 fc03 	bl	800bda4 <__errno>
 800359e:	4603      	mov	r3, r0
 80035a0:	2216      	movs	r2, #22
 80035a2:	601a      	str	r2, [r3, #0]
  return -1;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_exit>:

void _exit (int status)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ffe7 	bl	8003590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035c2:	e7fe      	b.n	80035c2 <_exit+0x12>

080035c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <_sbrk+0x5c>)
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <_sbrk+0x60>)
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <_sbrk+0x64>)
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <_sbrk+0x68>)
 80035e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <_sbrk+0x64>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d207      	bcs.n	8003604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f4:	f008 fbd6 	bl	800bda4 <__errno>
 80035f8:	4603      	mov	r3, r0
 80035fa:	220c      	movs	r2, #12
 80035fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	e009      	b.n	8003618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <_sbrk+0x64>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <_sbrk+0x64>)
 8003614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20040000 	.word	0x20040000
 8003624:	00000400 	.word	0x00000400
 8003628:	200007c8 	.word	0x200007c8
 800362c:	200007f8 	.word	0x200007f8

08003630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <SystemInit+0x20>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <SystemInit+0x20>)
 800363c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800368c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003658:	480d      	ldr	r0, [pc, #52]	; (8003690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800365a:	490e      	ldr	r1, [pc, #56]	; (8003694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003660:	e002      	b.n	8003668 <LoopCopyDataInit>

08003662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003666:	3304      	adds	r3, #4

08003668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800366c:	d3f9      	bcc.n	8003662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003670:	4c0b      	ldr	r4, [pc, #44]	; (80036a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003674:	e001      	b.n	800367a <LoopFillZerobss>

08003676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003678:	3204      	adds	r2, #4

0800367a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800367c:	d3fb      	bcc.n	8003676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800367e:	f7ff ffd7 	bl	8003630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003682:	f008 fb95 	bl	800bdb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003686:	f7fe fa1d 	bl	8001ac4 <main>
  bx  lr    
 800368a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800368c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003694:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003698:	0800c144 	.word	0x0800c144
  ldr r2, =_sbss
 800369c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80036a0:	200007f8 	.word	0x200007f8

080036a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a4:	e7fe      	b.n	80036a4 <CAN1_RX0_IRQHandler>
	...

080036a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_Init+0x40>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_Init+0x40>)
 80036b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_Init+0x40>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_Init+0x40>)
 80036be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_Init+0x40>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d0:	2003      	movs	r0, #3
 80036d2:	f000 ffd3 	bl	800467c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036d6:	200f      	movs	r0, #15
 80036d8:	f000 f808 	bl	80036ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036dc:	f7ff f952 	bl	8002984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00

080036ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_InitTick+0x54>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_InitTick+0x58>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003702:	fbb3 f3f1 	udiv	r3, r3, r1
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	4618      	mov	r0, r3
 800370c:	f000 ffeb 	bl	80046e6 <HAL_SYSTICK_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e00e      	b.n	8003738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b0f      	cmp	r3, #15
 800371e:	d80a      	bhi.n	8003736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003720:	2200      	movs	r2, #0
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	f000 ffb3 	bl	8004692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800372c:	4a06      	ldr	r2, [pc, #24]	; (8003748 <HAL_InitTick+0x5c>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000000 	.word	0x20000000
 8003744:	20000008 	.word	0x20000008
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_IncTick+0x20>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x24>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4413      	add	r3, r2
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_IncTick+0x24>)
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000008 	.word	0x20000008
 8003770:	200007cc 	.word	0x200007cc

08003774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return uwTick;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_GetTick+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	200007cc 	.word	0x200007cc

0800378c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003794:	f7ff ffee 	bl	8003774 <HAL_GetTick>
 8003798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d005      	beq.n	80037b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_Delay+0x44>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037b2:	bf00      	nop
 80037b4:	f7ff ffde 	bl	8003774 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d8f7      	bhi.n	80037b4 <HAL_Delay+0x28>
  {
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000008 	.word	0x20000008

080037d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e04a      	b.n	8003880 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d120      	bne.n	8003834 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_ADC_Init+0xb4>)
 80037f6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <HAL_ADC_Init+0xb8>)
 80037fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <HAL_ADC_Init+0xbc>)
 8003802:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <HAL_ADC_Init+0xc0>)
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_ADC_Init+0xc4>)
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a20      	ldr	r2, [pc, #128]	; (800389c <HAL_ADC_Init+0xc8>)
 800381c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d118      	bne.n	8003872 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003848:	f023 0302 	bic.w	r3, r3, #2
 800384c:	f043 0202 	orr.w	r2, r3, #2
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fcb5 	bl	80041c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f023 0303 	bic.w	r3, r3, #3
 8003868:	f043 0201 	orr.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
 8003870:	e001      	b.n	8003876 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	08001aaf 	.word	0x08001aaf
 800388c:	08003f43 	.word	0x08003f43
 8003890:	08003f57 	.word	0x08003f57
 8003894:	08003f6b 	.word	0x08003f6b
 8003898:	080044c9 	.word	0x080044c9
 800389c:	080029e1 	.word	0x080029e1

080038a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_Start+0x1a>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e097      	b.n	80039ea <HAL_ADC_Start+0x14a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d018      	beq.n	8003902 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038e0:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <HAL_ADC_Start+0x158>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a45      	ldr	r2, [pc, #276]	; (80039fc <HAL_ADC_Start+0x15c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9a      	lsrs	r2, r3, #18
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038f4:	e002      	b.n	80038fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f9      	bne.n	80038f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d15f      	bne.n	80039d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800393a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394e:	d106      	bne.n	800395e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f023 0206 	bic.w	r2, r3, #6
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
 800395c:	e002      	b.n	8003964 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_ADC_Start+0x160>)
 800396e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003978:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d129      	bne.n	80039e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	e020      	b.n	80039e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <HAL_ADC_Start+0x164>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d11b      	bne.n	80039e8 <HAL_ADC_Start+0x148>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d114      	bne.n	80039e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	e00b      	b.n	80039e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000
 80039fc:	431bde83 	.word	0x431bde83
 8003a00:	40012300 	.word	0x40012300
 8003a04:	40012000 	.word	0x40012000

08003a08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d113      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a34:	d10b      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e063      	b.n	8003b16 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a4e:	f7ff fe91 	bl	8003774 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a54:	e021      	b.n	8003a9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d01d      	beq.n	8003a9a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_ADC_PollForConversion+0x6c>
 8003a64:	f7ff fe86 	bl	8003774 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d212      	bcs.n	8003a9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d00b      	beq.n	8003a9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e03d      	b.n	8003b16 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d1d6      	bne.n	8003a56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0212 	mvn.w	r2, #18
 8003ab0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d123      	bne.n	8003b14 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11f      	bne.n	8003b14 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d04a      	beq.n	8003bea <HAL_ADC_IRQHandler+0xcc>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d047      	beq.n	8003bea <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d12b      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d127      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d119      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0220 	bic.w	r2, r2, #32
 8003bb2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0212 	mvn.w	r2, #18
 8003be8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d058      	beq.n	8003cb2 <HAL_ADC_IRQHandler+0x194>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d055      	beq.n	8003cb2 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d139      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d12b      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d124      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11d      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d119      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 020c 	mvn.w	r2, #12
 8003cb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d018      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x1dc>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d015      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d10e      	bne.n	8003cfa <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0201 	mvn.w	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d08:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d016      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x220>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f06f 0220 	mvn.w	r2, #32
 8003d2a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0220 	mvn.w	r2, #32
 8003d3c:	601a      	str	r2, [r3, #0]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_Start_DMA+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0ce      	b.n	8003f04 <HAL_ADC_Start_DMA+0x1bc>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d018      	beq.n	8003dae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d8c:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_ADC_Start_DMA+0x1c4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5f      	ldr	r2, [pc, #380]	; (8003f10 <HAL_ADC_Start_DMA+0x1c8>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0c9a      	lsrs	r2, r3, #18
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003da0:	e002      	b.n	8003da8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f9      	bne.n	8003da2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbc:	d107      	bne.n	8003dce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 8086 	bne.w	8003eea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d106      	bne.n	8003e2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f023 0206 	bic.w	r2, r3, #6
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
 8003e2a:	e002      	b.n	8003e32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <HAL_ADC_Start_DMA+0x1cc>)
 8003e3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	4a35      	ldr	r2, [pc, #212]	; (8003f18 <HAL_ADC_Start_DMA+0x1d0>)
 8003e44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	4a34      	ldr	r2, [pc, #208]	; (8003f1c <HAL_ADC_Start_DMA+0x1d4>)
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	4a33      	ldr	r2, [pc, #204]	; (8003f20 <HAL_ADC_Start_DMA+0x1d8>)
 8003e54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	334c      	adds	r3, #76	; 0x4c
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f000 fce4 	bl	800485c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d129      	bne.n	8003f02 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	e020      	b.n	8003f02 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_ADC_Start_DMA+0x1dc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d11b      	bne.n	8003f02 <HAL_ADC_Start_DMA+0x1ba>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d114      	bne.n	8003f02 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	e00b      	b.n	8003f02 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0210 	orr.w	r2, r3, #16
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	431bde83 	.word	0x431bde83
 8003f14:	40012300 	.word	0x40012300
 8003f18:	080043bd 	.word	0x080043bd
 8003f1c:	0800447b 	.word	0x0800447b
 8003f20:	08004499 	.word	0x08004499
 8003f24:	40012000 	.word	0x40012000

08003f28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e105      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x228>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d925      	bls.n	8003ff8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3b1e      	subs	r3, #30
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	400a      	ands	r2, r1
 8003fd0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68d9      	ldr	r1, [r3, #12]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4403      	add	r3, r0
 8003fea:	3b1e      	subs	r3, #30
 8003fec:	409a      	lsls	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	e022      	b.n	800403e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6919      	ldr	r1, [r3, #16]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	2207      	movs	r2, #7
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	400a      	ands	r2, r1
 800401a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6919      	ldr	r1, [r3, #16]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	4618      	mov	r0, r3
 800402e:	4603      	mov	r3, r0
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4403      	add	r3, r0
 8004034:	409a      	lsls	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b06      	cmp	r3, #6
 8004044:	d824      	bhi.n	8004090 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	3b05      	subs	r3, #5
 8004058:	221f      	movs	r2, #31
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	400a      	ands	r2, r1
 8004066:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	4618      	mov	r0, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	3b05      	subs	r3, #5
 8004082:	fa00 f203 	lsl.w	r2, r0, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	635a      	str	r2, [r3, #52]	; 0x34
 800408e:	e04c      	b.n	800412a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d824      	bhi.n	80040e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	3b23      	subs	r3, #35	; 0x23
 80040aa:	221f      	movs	r2, #31
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43da      	mvns	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	400a      	ands	r2, r1
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	3b23      	subs	r3, #35	; 0x23
 80040d4:	fa00 f203 	lsl.w	r2, r0, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
 80040e0:	e023      	b.n	800412a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	3b41      	subs	r3, #65	; 0x41
 80040f4:	221f      	movs	r2, #31
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	400a      	ands	r2, r1
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	4618      	mov	r0, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	3b41      	subs	r3, #65	; 0x41
 800411e:	fa00 f203 	lsl.w	r2, r0, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_ADC_ConfigChannel+0x234>)
 800412c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <HAL_ADC_ConfigChannel+0x238>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d109      	bne.n	800414c <HAL_ADC_ConfigChannel+0x1cc>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b12      	cmp	r3, #18
 800413e:	d105      	bne.n	800414c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <HAL_ADC_ConfigChannel+0x238>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d123      	bne.n	800419e <HAL_ADC_ConfigChannel+0x21e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b10      	cmp	r3, #16
 800415c:	d003      	beq.n	8004166 <HAL_ADC_ConfigChannel+0x1e6>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b11      	cmp	r3, #17
 8004164:	d11b      	bne.n	800419e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b10      	cmp	r3, #16
 8004178:	d111      	bne.n	800419e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_ADC_ConfigChannel+0x23c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a10      	ldr	r2, [pc, #64]	; (80041c0 <HAL_ADC_ConfigChannel+0x240>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	0c9a      	lsrs	r2, r3, #18
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004190:	e002      	b.n	8004198 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3b01      	subs	r3, #1
 8004196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f9      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40012300 	.word	0x40012300
 80041b8:	40012000 	.word	0x40012000
 80041bc:	20000000 	.word	0x20000000
 80041c0:	431bde83 	.word	0x431bde83

080041c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041cc:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <ADC_Init+0x1f0>)
 80041ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	021a      	lsls	r2, r3, #8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800421c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <ADC_Init+0x1f4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d022      	beq.n	80042a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800426a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6899      	ldr	r1, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800428c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6899      	ldr	r1, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	e00f      	b.n	80042c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0202 	bic.w	r2, r2, #2
 80042d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6899      	ldr	r1, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7e1b      	ldrb	r3, [r3, #24]
 80042dc:	005a      	lsls	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800430e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	3b01      	subs	r3, #1
 800431c:	035a      	lsls	r2, r3, #13
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	e007      	b.n	8004338 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004336:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	3b01      	subs	r3, #1
 8004354:	051a      	lsls	r2, r3, #20
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800436c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6899      	ldr	r1, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800437a:	025a      	lsls	r2, r3, #9
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6899      	ldr	r1, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	029a      	lsls	r2, r3, #10
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40012300 	.word	0x40012300
 80043b8:	0f000001 	.word	0x0f000001

080043bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d13d      	bne.n	8004452 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d12b      	bne.n	8004448 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d127      	bne.n	8004448 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004410:	2b00      	cmp	r3, #0
 8004412:	d119      	bne.n	8004448 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0220 	bic.w	r2, r2, #32
 8004422:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004450:	e00f      	b.n	8004472 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	4798      	blx	r3
}
 8004466:	e004      	b.n	8004472 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2240      	movs	r2, #64	; 0x40
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <__NVIC_SetPriorityGrouping+0x44>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f8:	4013      	ands	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <__NVIC_SetPriorityGrouping+0x44>)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	60d3      	str	r3, [r2, #12]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <__NVIC_GetPriorityGrouping+0x18>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	f003 0307 	and.w	r3, r3, #7
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	2b00      	cmp	r3, #0
 8004550:	db0b      	blt.n	800456a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	4907      	ldr	r1, [pc, #28]	; (8004578 <__NVIC_EnableIRQ+0x38>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2001      	movs	r0, #1
 8004562:	fa00 f202 	lsl.w	r2, r0, r2
 8004566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000e100 	.word	0xe000e100

0800457c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458c:	2b00      	cmp	r3, #0
 800458e:	db0a      	blt.n	80045a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	490c      	ldr	r1, [pc, #48]	; (80045c8 <__NVIC_SetPriority+0x4c>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	440b      	add	r3, r1
 80045a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a4:	e00a      	b.n	80045bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4908      	ldr	r1, [pc, #32]	; (80045cc <__NVIC_SetPriority+0x50>)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	3b04      	subs	r3, #4
 80045b4:	0112      	lsls	r2, r2, #4
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	440b      	add	r3, r1
 80045ba:	761a      	strb	r2, [r3, #24]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000e100 	.word	0xe000e100
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f1c3 0307 	rsb	r3, r3, #7
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	bf28      	it	cs
 80045ee:	2304      	movcs	r3, #4
 80045f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d902      	bls.n	8004600 <NVIC_EncodePriority+0x30>
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3b03      	subs	r3, #3
 80045fe:	e000      	b.n	8004602 <NVIC_EncodePriority+0x32>
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	f04f 32ff 	mov.w	r2, #4294967295
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43da      	mvns	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	401a      	ands	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004618:	f04f 31ff 	mov.w	r1, #4294967295
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	43d9      	mvns	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	4313      	orrs	r3, r2
         );
}
 800462a:	4618      	mov	r0, r3
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004648:	d301      	bcc.n	800464e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800464a:	2301      	movs	r3, #1
 800464c:	e00f      	b.n	800466e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <SysTick_Config+0x40>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3b01      	subs	r3, #1
 8004654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004656:	210f      	movs	r1, #15
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	f7ff ff8e 	bl	800457c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <SysTick_Config+0x40>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <SysTick_Config+0x40>)
 8004668:	2207      	movs	r2, #7
 800466a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000e010 	.word	0xe000e010

0800467c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff29 	bl	80044dc <__NVIC_SetPriorityGrouping>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a4:	f7ff ff3e 	bl	8004524 <__NVIC_GetPriorityGrouping>
 80046a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7ff ff8e 	bl	80045d0 <NVIC_EncodePriority>
 80046b4:	4602      	mov	r2, r0
 80046b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff5d 	bl	800457c <__NVIC_SetPriority>
}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff31 	bl	8004540 <__NVIC_EnableIRQ>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ffa2 	bl	8004638 <SysTick_Config>
 80046f4:	4603      	mov	r3, r0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800470c:	f7ff f832 	bl	8003774 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e099      	b.n	8004850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473c:	e00f      	b.n	800475e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800473e:	f7ff f819 	bl	8003774 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b05      	cmp	r3, #5
 800474a:	d908      	bls.n	800475e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2203      	movs	r2, #3
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e078      	b.n	8004850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e8      	bne.n	800473e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_DMA_Init+0x158>)
 8004778:	4013      	ands	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4313      	orrs	r3, r2
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d117      	bne.n	8004822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa9f 	bl	8004d48 <DMA_CheckFifoParam>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800481e:	2301      	movs	r3, #1
 8004820:	e016      	b.n	8004850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa56 	bl	8004cdc <DMA_CalcBaseAndBitshift>
 8004830:	4603      	mov	r3, r0
 8004832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	223f      	movs	r2, #63	; 0x3f
 800483a:	409a      	lsls	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	f010803f 	.word	0xf010803f

0800485c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_DMA_Start_IT+0x26>
 800487e:	2302      	movs	r3, #2
 8004880:	e040      	b.n	8004904 <HAL_DMA_Start_IT+0xa8>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d12f      	bne.n	80048f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9e8 	bl	8004c80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	223f      	movs	r2, #63	; 0x3f
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0216 	orr.w	r2, r2, #22
 80048ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e005      	b.n	8004902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
 8004900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d004      	beq.n	800492a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2280      	movs	r2, #128	; 0x80
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e00c      	b.n	8004944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2205      	movs	r2, #5
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800495c:	4b8e      	ldr	r3, [pc, #568]	; (8004b98 <HAL_DMA_IRQHandler+0x248>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a8e      	ldr	r2, [pc, #568]	; (8004b9c <HAL_DMA_IRQHandler+0x24c>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	2208      	movs	r2, #8
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	2208      	movs	r2, #8
 80049aa:	409a      	lsls	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f043 0202 	orr.w	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	2204      	movs	r2, #4
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	2204      	movs	r2, #4
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d043      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d03c      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d024      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e01f      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	e016      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0208 	bic.w	r2, r2, #8
 8004aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 808f 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8087 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d136      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0216 	bic.w	r2, r2, #22
 8004b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x1da>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	223f      	movs	r2, #63	; 0x3f
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d07e      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
        }
        return;
 8004b66:	e079      	b.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01d      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10d      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d031      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
 8004b94:	e02c      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
 8004b96:	bf00      	nop
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d023      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e01e      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0210 	bic.w	r2, r2, #16
 8004bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d032      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d022      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2205      	movs	r2, #5
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d307      	bcc.n	8004c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f2      	bne.n	8004c1c <HAL_DMA_IRQHandler+0x2cc>
 8004c36:	e000      	b.n	8004c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e000      	b.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c5c:	bf00      	nop
    }
  }
}
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c72:	b2db      	uxtb	r3, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d108      	bne.n	8004cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cbe:	e007      	b.n	8004cd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	3b10      	subs	r3, #16
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <DMA_CalcBaseAndBitshift+0x64>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <DMA_CalcBaseAndBitshift+0x68>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d909      	bls.n	8004d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d1c:	e007      	b.n	8004d2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	aaaaaaab 	.word	0xaaaaaaab
 8004d44:	0800c110 	.word	0x0800c110

08004d48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11f      	bne.n	8004da2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d856      	bhi.n	8004e16 <DMA_CheckFifoParam+0xce>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <DMA_CheckFifoParam+0x28>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d81 	.word	0x08004d81
 8004d74:	08004d93 	.word	0x08004d93
 8004d78:	08004d81 	.word	0x08004d81
 8004d7c:	08004e17 	.word	0x08004e17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d046      	beq.n	8004e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d90:	e043      	b.n	8004e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d9a:	d140      	bne.n	8004e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da0:	e03d      	b.n	8004e1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	d121      	bne.n	8004df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d837      	bhi.n	8004e22 <DMA_CheckFifoParam+0xda>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <DMA_CheckFifoParam+0x70>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004dcf 	.word	0x08004dcf
 8004dc0:	08004dc9 	.word	0x08004dc9
 8004dc4:	08004de1 	.word	0x08004de1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      break;
 8004dcc:	e030      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d025      	beq.n	8004e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dde:	e022      	b.n	8004e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004de8:	d11f      	bne.n	8004e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dee:	e01c      	b.n	8004e2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d903      	bls.n	8004dfe <DMA_CheckFifoParam+0xb6>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d003      	beq.n	8004e04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dfc:	e018      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
      break;
 8004e02:	e015      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00e      	beq.n	8004e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      break;
 8004e14:	e00b      	b.n	8004e2e <DMA_CheckFifoParam+0xe6>
      break;
 8004e16:	bf00      	nop
 8004e18:	e00a      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e008      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e006      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      break;
 8004e22:	bf00      	nop
 8004e24:	e004      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e002      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2e:	bf00      	nop
    }
  } 
  
  return status; 
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop

08004e40 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e081      	b.n	8004f56 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fd fe72 	bl	8002b50 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ea0:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d107      	bne.n	8004eba <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	e006      	b.n	8004ec8 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d104      	bne.n	8004eda <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efc:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_FMPI2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Master_Transmit(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	817b      	strh	r3, [r7, #10]
 8004f70:	4613      	mov	r3, r2
 8004f72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	f040 80da 	bne.w	8005136 <HAL_FMPI2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_FMPI2C_Master_Transmit+0x30>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0d3      	b.n	8005138 <HAL_FMPI2C_Master_Transmit+0x1d8>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f98:	f7fe fbec 	bl	8003774 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2319      	movs	r3, #25
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fe05 	bl	8005bba <FMPI2C_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_FMPI2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0be      	b.n	8005138 <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2221      	movs	r2, #33	; 0x21
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MASTER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	893a      	ldrh	r2, [r7, #8]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2bff      	cmp	r3, #255	; 0xff
 8004fea:	d90e      	bls.n	800500a <HAL_FMPI2C_Master_Transmit+0xaa>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	22ff      	movs	r2, #255	; 0xff
 8004ff0:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	8979      	ldrh	r1, [r7, #10]
 8004ffa:	4b51      	ldr	r3, [pc, #324]	; (8005140 <HAL_FMPI2C_Master_Transmit+0x1e0>)
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 ff46 	bl	8005e94 <FMPI2C_TransferConfig>
 8005008:	e06c      	b.n	80050e4 <HAL_FMPI2C_Master_Transmit+0x184>
                         FMPI2C_GENERATE_START_WRITE);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	b2da      	uxtb	r2, r3
 800501a:	8979      	ldrh	r1, [r7, #10]
 800501c:	4b48      	ldr	r3, [pc, #288]	; (8005140 <HAL_FMPI2C_Master_Transmit+0x1e0>)
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 ff35 	bl	8005e94 <FMPI2C_TransferConfig>
                         FMPI2C_GENERATE_START_WRITE);
    }

    while (hfmpi2c->XferCount > 0U)
 800502a:	e05b      	b.n	80050e4 <HAL_FMPI2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	6a39      	ldr	r1, [r7, #32]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fe02 	bl	8005c3a <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_FMPI2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e07b      	b.n	8005138 <HAL_FMPI2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d034      	beq.n	80050e4 <HAL_FMPI2C_Master_Transmit+0x184>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507e:	2b00      	cmp	r3, #0
 8005080:	d130      	bne.n	80050e4 <HAL_FMPI2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fd94 	bl	8005bba <FMPI2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_FMPI2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e04d      	b.n	8005138 <HAL_FMPI2C_Master_Transmit+0x1d8>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2bff      	cmp	r3, #255	; 0xff
 80050a4:	d90e      	bls.n	80050c4 <HAL_FMPI2C_Master_Transmit+0x164>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	22ff      	movs	r2, #255	; 0xff
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	8979      	ldrh	r1, [r7, #10]
 80050b4:	2300      	movs	r3, #0
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fee9 	bl	8005e94 <FMPI2C_TransferConfig>
 80050c2:	e00f      	b.n	80050e4 <HAL_FMPI2C_Master_Transmit+0x184>
                             FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	8979      	ldrh	r1, [r7, #10]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fed8 	bl	8005e94 <FMPI2C_TransferConfig>
    while (hfmpi2c->XferCount > 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d19e      	bne.n	800502c <HAL_FMPI2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fde1 	bl	8005cba <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_FMPI2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e01a      	b.n	8005138 <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2220      	movs	r2, #32
 8005108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_FMPI2C_Master_Transmit+0x1e4>)
 8005116:	400b      	ands	r3, r1
 8005118:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	e000      	b.n	8005138 <HAL_FMPI2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	80002000 	.word	0x80002000
 8005144:	fe00e800 	.word	0xfe00e800

08005148 <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
  }
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d010      	beq.n	80051c2 <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	09db      	lsrs	r3, r3, #7
 80051a4:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	f043 0201 	orr.w	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051c0:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	0a9b      	lsrs	r3, r3, #10
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	09db      	lsrs	r3, r3, #7
 80051d2:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f043 0208 	orr.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ee:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	0a5b      	lsrs	r3, r3, #9
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	f043 0202 	orr.w	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 030b 	and.w	r3, r3, #11
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fb89 	bl	8005948 <FMPI2C_ITError>
  }
}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
 8005272:	4613      	mov	r3, r2
 8005274:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <FMPI2C_Slave_ISR_IT+0x24>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0ec      	b.n	80054bc <FMPI2C_Slave_ISR_IT+0x1fe>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8005302:	6939      	ldr	r1, [r7, #16]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f9bf 	bl	8005688 <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04d      	beq.n	80053b2 <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 800531e:	2b00      	cmp	r3, #0
 8005320:	d047      	beq.n	80053b2 <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d128      	bne.n	800537e <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b28      	cmp	r3, #40	; 0x28
 8005336:	d108      	bne.n	800534a <FMPI2C_Slave_ISR_IT+0x8c>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800533e:	d104      	bne.n	800534a <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8005340:	6939      	ldr	r1, [r7, #16]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 faaa 	bl	800589c <FMPI2C_ITListenCplt>
 8005348:	e032      	b.n	80053b0 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b29      	cmp	r3, #41	; 0x29
 8005354:	d10e      	bne.n	8005374 <FMPI2C_Slave_ISR_IT+0xb6>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800535c:	d00a      	beq.n	8005374 <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2210      	movs	r2, #16
 8005364:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fbe5 	bl	8005b36 <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f92d 	bl	80055cc <FMPI2C_ITSlaveSeqCplt>
 8005372:	e01d      	b.n	80053b0 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2210      	movs	r2, #16
 800537a:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 800537c:	e096      	b.n	80054ac <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2210      	movs	r2, #16
 8005384:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <FMPI2C_Slave_ISR_IT+0xe4>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800539e:	f040 8085 	bne.w	80054ac <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	4619      	mov	r1, r3
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 facd 	bl	8005948 <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 80053ae:	e07d      	b.n	80054ac <FMPI2C_Slave_ISR_IT+0x1ee>
 80053b0:	e07c      	b.n	80054ac <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	089b      	lsrs	r3, r3, #2
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d030      	beq.n	8005420 <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d02a      	beq.n	8005420 <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d018      	beq.n	8005406 <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d14f      	bne.n	80054b0 <FMPI2C_Slave_ISR_IT+0x1f2>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005416:	d04b      	beq.n	80054b0 <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f8d7 	bl	80055cc <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 800541e:	e047      	b.n	80054b0 <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	08db      	lsrs	r3, r3, #3
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	08db      	lsrs	r3, r3, #3
 8005430:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 8005438:	6939      	ldr	r1, [r7, #16]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f842 	bl	80054c4 <FMPI2C_ITAddrCplt>
 8005440:	e037      	b.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d031      	beq.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02b      	beq.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d018      	beq.n	8005496 <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	781a      	ldrb	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	851a      	strh	r2, [r3, #40]	; 0x28
 8005494:	e00d      	b.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800549c:	d002      	beq.n	80054a4 <FMPI2C_Slave_ISR_IT+0x1e6>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f891 	bl	80055cc <FMPI2C_ITSlaveSeqCplt>
 80054aa:	e002      	b.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 80054b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054da:	2b28      	cmp	r3, #40	; 0x28
 80054dc:	d16a      	bne.n	80055b4 <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80054fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800550a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005518:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d138      	bne.n	8005594 <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005522:	897b      	ldrh	r3, [r7, #10]
 8005524:	09db      	lsrs	r3, r3, #7
 8005526:	b29a      	uxth	r2, r3
 8005528:	89bb      	ldrh	r3, [r7, #12]
 800552a:	4053      	eors	r3, r2
 800552c:	b29b      	uxth	r3, r3
 800552e:	f003 0306 	and.w	r3, r3, #6
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11c      	bne.n	8005570 <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005536:	897b      	ldrh	r3, [r7, #10]
 8005538:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005548:	2b02      	cmp	r3, #2
 800554a:	d13b      	bne.n	80055c4 <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2208      	movs	r2, #8
 8005558:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8005562:	89ba      	ldrh	r2, [r7, #12]
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fe7c 	bl	8005266 <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 800556e:	e029      	b.n	80055c4 <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8005574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fcbd 	bl	8005ef8 <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8005586:	89ba      	ldrh	r2, [r7, #12]
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fe6a 	bl	8005266 <HAL_FMPI2C_AddrCallback>
}
 8005592:	e017      	b.n	80055c4 <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8005594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fcad 	bl	8005ef8 <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 80055a6:	89ba      	ldrh	r2, [r7, #12]
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fe5a 	bl	8005266 <HAL_FMPI2C_AddrCallback>
}
 80055b2:	e007      	b.n	80055c4 <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2208      	movs	r2, #8
 80055ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	0b9b      	lsrs	r3, r3, #14
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	e00d      	b.n	800561e <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	0bdb      	lsrs	r3, r3, #15
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800561c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b29      	cmp	r3, #41	; 0x29
 8005628:	d112      	bne.n	8005650 <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2228      	movs	r2, #40	; 0x28
 800562e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2221      	movs	r2, #33	; 0x21
 8005636:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 8005638:	2101      	movs	r1, #1
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fc5c 	bl	8005ef8 <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fdf8 	bl	800523e <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800564e:	e017      	b.n	8005680 <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b2a      	cmp	r3, #42	; 0x2a
 800565a:	d111      	bne.n	8005680 <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2228      	movs	r2, #40	; 0x28
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2222      	movs	r2, #34	; 0x22
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 800566a:	2102      	movs	r1, #2
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fc43 	bl	8005ef8 <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fde9 	bl	8005252 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2220      	movs	r2, #32
 80056ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b21      	cmp	r3, #33	; 0x21
 80056b2:	d002      	beq.n	80056ba <FMPI2C_ITSlaveCplt+0x32>
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b29      	cmp	r3, #41	; 0x29
 80056b8:	d108      	bne.n	80056cc <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 80056ba:	f248 0101 	movw	r1, #32769	; 0x8001
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fc1a 	bl	8005ef8 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2221      	movs	r2, #33	; 0x21
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
 80056ca:	e00d      	b.n	80056e8 <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b22      	cmp	r3, #34	; 0x22
 80056d0:	d002      	beq.n	80056d8 <FMPI2C_ITSlaveCplt+0x50>
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b2a      	cmp	r3, #42	; 0x2a
 80056d6:	d107      	bne.n	80056e8 <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 80056d8:	f248 0102 	movw	r1, #32770	; 0x8002
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fc0b 	bl	8005ef8 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2222      	movs	r2, #34	; 0x22
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056f6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b64      	ldr	r3, [pc, #400]	; (8005894 <FMPI2C_ITSlaveCplt+0x20c>)
 8005704:	400b      	ands	r3, r1
 8005706:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fa14 	bl	8005b36 <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	0b9b      	lsrs	r3, r3, #14
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d013      	beq.n	8005742 <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005728:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	2b00      	cmp	r3, #0
 8005730:	d020      	beq.n	8005774 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005740:	e018      	b.n	8005774 <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	0bdb      	lsrs	r3, r3, #15
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d012      	beq.n	8005774 <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575c:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	b29a      	uxth	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d020      	beq.n	80057c2 <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0304 	bic.w	r3, r3, #4
 8005786:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8a7 	bl	8005948 <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b28      	cmp	r3, #40	; 0x28
 8005804:	d141      	bne.n	800588a <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f847 	bl	800589c <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 800580e:	e03c      	b.n	800588a <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005818:	d014      	beq.n	8005844 <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fed6 	bl	80055cc <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1d      	ldr	r2, [pc, #116]	; (8005898 <FMPI2C_ITSlaveCplt+0x210>)
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fd20 	bl	8005282 <HAL_FMPI2C_ListenCpltCallback>
}
 8005842:	e022      	b.n	800588a <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b22      	cmp	r3, #34	; 0x22
 800584e:	d10e      	bne.n	800586e <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fcf3 	bl	8005252 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 800586c:	e00d      	b.n	800588a <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fcda 	bl	800523e <HAL_FMPI2C_SlaveTxCpltCallback>
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	fe00e800 	.word	0xfe00e800
 8005898:	ffff0000 	.word	0xffff0000

0800589c <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a26      	ldr	r2, [pc, #152]	; (8005944 <FMPI2C_ITListenCplt+0xa8>)
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d022      	beq.n	800591a <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d012      	beq.n	800591a <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 800591a:	f248 0103 	movw	r1, #32771	; 0x8003
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 faea 	bl	8005ef8 <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2210      	movs	r2, #16
 800592a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fca4 	bl	8005282 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	ffff0000 	.word	0xffff0000

08005948 <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a5d      	ldr	r2, [pc, #372]	; (8005adc <FMPI2C_ITError+0x194>)
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b28      	cmp	r3, #40	; 0x28
 800597e:	d005      	beq.n	800598c <FMPI2C_ITError+0x44>
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	2b29      	cmp	r3, #41	; 0x29
 8005984:	d002      	beq.n	800598c <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b2a      	cmp	r3, #42	; 0x2a
 800598a:	d10b      	bne.n	80059a4 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 800598c:	2103      	movs	r1, #3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fab2 	bl	8005ef8 <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2228      	movs	r2, #40	; 0x28
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a50      	ldr	r2, [pc, #320]	; (8005ae0 <FMPI2C_ITError+0x198>)
 80059a0:	635a      	str	r2, [r3, #52]	; 0x34
 80059a2:	e011      	b.n	80059c8 <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 80059a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 faa5 	bl	8005ef8 <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b60      	cmp	r3, #96	; 0x60
 80059b8:	d003      	beq.n	80059c2 <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d039      	beq.n	8005a4a <FMPI2C_ITError+0x102>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b11      	cmp	r3, #17
 80059da:	d002      	beq.n	80059e2 <FMPI2C_ITError+0x9a>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b21      	cmp	r3, #33	; 0x21
 80059e0:	d133      	bne.n	8005a4a <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f0:	d107      	bne.n	8005a02 <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff f92c 	bl	8004c64 <HAL_DMA_GetState>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d017      	beq.n	8005a42 <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <FMPI2C_ITError+0x19c>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe ff70 	bl	800490c <HAL_DMA_Abort_IT>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d04d      	beq.n	8005ace <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a40:	e045      	b.n	8005ace <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f850 	bl	8005ae8 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a48:	e041      	b.n	8005ace <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d039      	beq.n	8005ac6 <FMPI2C_ITError+0x17e>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b12      	cmp	r3, #18
 8005a56:	d002      	beq.n	8005a5e <FMPI2C_ITError+0x116>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b22      	cmp	r3, #34	; 0x22
 8005a5c:	d133      	bne.n	8005ac6 <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d107      	bne.n	8005a7e <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a7c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff f8ee 	bl	8004c64 <HAL_DMA_GetState>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d017      	beq.n	8005abe <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <FMPI2C_ITError+0x19c>)
 8005a94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe ff32 	bl	800490c <HAL_DMA_Abort_IT>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d011      	beq.n	8005ad2 <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005abc:	e009      	b.n	8005ad2 <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f812 	bl	8005ae8 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ac4:	e005      	b.n	8005ad2 <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f80e 	bl	8005ae8 <FMPI2C_TreatErrorCallback>
  }
}
 8005acc:	e002      	b.n	8005ad4 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ad2:	bf00      	nop
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	ffff0000 	.word	0xffff0000
 8005ae0:	080052bf 	.word	0x080052bf
 8005ae4:	08005b7f 	.word	0x08005b7f

08005ae8 <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b60      	cmp	r3, #96	; 0x60
 8005afa:	d10e      	bne.n	8005b1a <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fbc9 	bl	80052aa <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8005b18:	e009      	b.n	8005b2e <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fbb4 	bl	8005296 <HAL_FMPI2C_ErrorCallback>
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d103      	bne.n	8005b54 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2200      	movs	r2, #0
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d007      	beq.n	8005b72 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	619a      	str	r2, [r3, #24]
  }
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	2200      	movs	r2, #0
 8005b9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	2200      	movs	r2, #0
 8005baa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff ff9b 	bl	8005ae8 <FMPI2C_TreatErrorCallback>
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8005bca:	e022      	b.n	8005c12 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d01e      	beq.n	8005c12 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd4:	f7fd fdce 	bl	8003774 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d113      	bne.n	8005c12 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e00f      	b.n	8005c32 <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	bf0c      	ite	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	2300      	movne	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d0cd      	beq.n	8005bcc <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8005c46:	e02c      	b.n	8005ca2 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f871 	bl	8005d34 <FMPI2C_IsErrorOccurred>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e02a      	b.n	8005cb2 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d01e      	beq.n	8005ca2 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c64:	f7fd fd86 	bl	8003774 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d302      	bcc.n	8005c7a <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d113      	bne.n	8005ca2 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e007      	b.n	8005cb2 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d1cb      	bne.n	8005c48 <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8005cc6:	e028      	b.n	8005d1a <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f831 	bl	8005d34 <FMPI2C_IsErrorOccurred>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e026      	b.n	8005d2a <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cdc:	f7fd fd4a 	bl	8003774 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d302      	bcc.n	8005cf2 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d113      	bne.n	8005d1a <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e007      	b.n	8005d2a <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d1cf      	bne.n	8005cc8 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <FMPI2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsErrorOccurred(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hfmpi2c->Instance->ISR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_AF))
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d040      	beq.n	8005ddc <FMPI2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d68:	d01d      	beq.n	8005da6 <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d78:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d7a:	e014      	b.n	8005da6 <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d010      	beq.n	8005da6 <FMPI2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d84:	f7fd fcf6 	bl	8003774 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d302      	bcc.n	8005d9a <FMPI2C_IsErrorOccurred+0x66>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d105      	bne.n	8005da6 <FMPI2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_FMPI2C_ERROR_TIMEOUT;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f043 0320 	orr.w	r3, r3, #32
 8005da0:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d002      	beq.n	8005dba <FMPI2C_IsErrorOccurred+0x86>
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0e0      	beq.n	8005d7c <FMPI2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <FMPI2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	61da      	str	r2, [r3, #28]

    error_code |= HAL_FMPI2C_ERROR_AF;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hfmpi2c->Instance->ISR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_BERR))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <FMPI2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_FMPI2C_ERROR_BERR;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_OVR))
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <FMPI2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_FMPI2C_ERROR_OVR;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f043 0308 	orr.w	r3, r3, #8
 8005e14:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_ARLO))
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <FMPI2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_FMPI2C_ERROR_ARLO;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8005e44:	7ffb      	ldrb	r3, [r7, #31]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01c      	beq.n	8005e84 <FMPI2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fe73 	bl	8005b36 <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <FMPI2C_IsErrorOccurred+0x15c>)
 8005e5c:	400b      	ands	r3, r1
 8005e5e:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= error_code;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	fe00e800 	.word	0xfe00e800

08005e94 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	817b      	strh	r3, [r7, #10]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8005ea6:	897b      	ldrh	r3, [r7, #10]
 8005ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 8005eac:	7a7b      	ldrb	r3, [r7, #9]
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8005eb4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2, \
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	0d5b      	lsrs	r3, r3, #21
 8005ece:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ed2:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <FMPI2C_TransferConfig+0x60>)
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	ea02 0103 	and.w	r1, r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
             ((FMPI2C_CR2_SADD | FMPI2C_CR2_NBYTES | FMPI2C_CR2_RELOAD | FMPI2C_CR2_AUTOEND | \
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                FMPI2C_CR2_START | FMPI2C_CR2_STOP)), tmp);
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	03ff63ff 	.word	0x03ff63ff

08005ef8 <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00f      	beq.n	8005f32 <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005f18:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f26:	2b28      	cmp	r3, #40	; 0x28
 8005f28:	d003      	beq.n	8005f32 <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005f30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 8005f32:	887b      	ldrh	r3, [r7, #2]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00f      	beq.n	8005f5c <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005f42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f50:	2b28      	cmp	r3, #40	; 0x28
 8005f52:	d003      	beq.n	8005f5c <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005f5a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 8005f5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da03      	bge.n	8005f6c <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005f6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 8005f6c:	887b      	ldrh	r3, [r7, #2]
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d103      	bne.n	8005f7a <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005f78:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 8005f7a:	887b      	ldrh	r3, [r7, #2]
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d103      	bne.n	8005f88 <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f043 0320 	orr.w	r3, r3, #32
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 8005f88:	887b      	ldrh	r3, [r7, #2]
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d103      	bne.n	8005f96 <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f94:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6819      	ldr	r1, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	43da      	mvns	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	400a      	ands	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d138      	bne.n	800603c <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e032      	b.n	800603e <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 800605e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006062:	6453      	str	r3, [r2, #68]	; 0x44
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8006072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006074:	4905      	ldr	r1, [pc, #20]	; (800608c <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4313      	orrs	r3, r2
 800607a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800607c:	bf00      	nop
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40023800 	.word	0x40023800
 800608c:	40013800 	.word	0x40013800

08006090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006090:	b480      	push	{r7}
 8006092:	b089      	sub	sp, #36	; 0x24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	e159      	b.n	8006360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060ac:	2201      	movs	r2, #1
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4013      	ands	r3, r2
 80060be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	f040 8148 	bne.w	800635a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d005      	beq.n	80060e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d130      	bne.n	8006144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	2203      	movs	r2, #3
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006118:	2201      	movs	r2, #1
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 0201 	and.w	r2, r3, #1
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	2b03      	cmp	r3, #3
 800614e:	d017      	beq.n	8006180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	2203      	movs	r2, #3
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4013      	ands	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d123      	bne.n	80061d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	08da      	lsrs	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3208      	adds	r2, #8
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	220f      	movs	r2, #15
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	08da      	lsrs	r2, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3208      	adds	r2, #8
 80061ce:	69b9      	ldr	r1, [r7, #24]
 80061d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	2203      	movs	r2, #3
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0203 	and.w	r2, r3, #3
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4313      	orrs	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80a2 	beq.w	800635a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	4b57      	ldr	r3, [pc, #348]	; (8006378 <HAL_GPIO_Init+0x2e8>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	4a56      	ldr	r2, [pc, #344]	; (8006378 <HAL_GPIO_Init+0x2e8>)
 8006220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006224:	6453      	str	r3, [r2, #68]	; 0x44
 8006226:	4b54      	ldr	r3, [pc, #336]	; (8006378 <HAL_GPIO_Init+0x2e8>)
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006232:	4a52      	ldr	r2, [pc, #328]	; (800637c <HAL_GPIO_Init+0x2ec>)
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	089b      	lsrs	r3, r3, #2
 8006238:	3302      	adds	r3, #2
 800623a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	220f      	movs	r2, #15
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43db      	mvns	r3, r3
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	4013      	ands	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a49      	ldr	r2, [pc, #292]	; (8006380 <HAL_GPIO_Init+0x2f0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d019      	beq.n	8006292 <HAL_GPIO_Init+0x202>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a48      	ldr	r2, [pc, #288]	; (8006384 <HAL_GPIO_Init+0x2f4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <HAL_GPIO_Init+0x1fe>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a47      	ldr	r2, [pc, #284]	; (8006388 <HAL_GPIO_Init+0x2f8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00d      	beq.n	800628a <HAL_GPIO_Init+0x1fa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a46      	ldr	r2, [pc, #280]	; (800638c <HAL_GPIO_Init+0x2fc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <HAL_GPIO_Init+0x1f6>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a45      	ldr	r2, [pc, #276]	; (8006390 <HAL_GPIO_Init+0x300>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d101      	bne.n	8006282 <HAL_GPIO_Init+0x1f2>
 800627e:	2304      	movs	r3, #4
 8006280:	e008      	b.n	8006294 <HAL_GPIO_Init+0x204>
 8006282:	2307      	movs	r3, #7
 8006284:	e006      	b.n	8006294 <HAL_GPIO_Init+0x204>
 8006286:	2303      	movs	r3, #3
 8006288:	e004      	b.n	8006294 <HAL_GPIO_Init+0x204>
 800628a:	2302      	movs	r3, #2
 800628c:	e002      	b.n	8006294 <HAL_GPIO_Init+0x204>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <HAL_GPIO_Init+0x204>
 8006292:	2300      	movs	r3, #0
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	f002 0203 	and.w	r2, r2, #3
 800629a:	0092      	lsls	r2, r2, #2
 800629c:	4093      	lsls	r3, r2
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062a4:	4935      	ldr	r1, [pc, #212]	; (800637c <HAL_GPIO_Init+0x2ec>)
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	089b      	lsrs	r3, r3, #2
 80062aa:	3302      	adds	r3, #2
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062b2:	4b38      	ldr	r3, [pc, #224]	; (8006394 <HAL_GPIO_Init+0x304>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062d6:	4a2f      	ldr	r2, [pc, #188]	; (8006394 <HAL_GPIO_Init+0x304>)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062dc:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <HAL_GPIO_Init+0x304>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006300:	4a24      	ldr	r2, [pc, #144]	; (8006394 <HAL_GPIO_Init+0x304>)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006306:	4b23      	ldr	r3, [pc, #140]	; (8006394 <HAL_GPIO_Init+0x304>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	43db      	mvns	r3, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4013      	ands	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800632a:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <HAL_GPIO_Init+0x304>)
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006330:	4b18      	ldr	r3, [pc, #96]	; (8006394 <HAL_GPIO_Init+0x304>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	43db      	mvns	r3, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4013      	ands	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006354:	4a0f      	ldr	r2, [pc, #60]	; (8006394 <HAL_GPIO_Init+0x304>)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3301      	adds	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	2b0f      	cmp	r3, #15
 8006364:	f67f aea2 	bls.w	80060ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3724      	adds	r7, #36	; 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40023800 	.word	0x40023800
 800637c:	40013800 	.word	0x40013800
 8006380:	40020000 	.word	0x40020000
 8006384:	40020400 	.word	0x40020400
 8006388:	40020800 	.word	0x40020800
 800638c:	40020c00 	.word	0x40020c00
 8006390:	40021000 	.word	0x40021000
 8006394:	40013c00 	.word	0x40013c00

08006398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e001      	b.n	80063ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
 80063d4:	4613      	mov	r3, r2
 80063d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063d8:	787b      	ldrb	r3, [r7, #1]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063e4:	e003      	b.n	80063ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	041a      	lsls	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	619a      	str	r2, [r3, #24]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800640c:	887a      	ldrh	r2, [r7, #2]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4013      	ands	r3, r2
 8006412:	041a      	lsls	r2, r3, #16
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	43d9      	mvns	r1, r3
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	400b      	ands	r3, r1
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	619a      	str	r2, [r3, #24]
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d006      	beq.n	8006454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006446:	4a05      	ldr	r2, [pc, #20]	; (800645c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fb fae0 	bl	8001a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40013c00 	.word	0x40013c00

08006460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e12b      	b.n	80066ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fc fc24 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	; 0x24
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064c4:	f000 ffbe 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 80064c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4a81      	ldr	r2, [pc, #516]	; (80066d4 <HAL_I2C_Init+0x274>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d807      	bhi.n	80064e4 <HAL_I2C_Init+0x84>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a80      	ldr	r2, [pc, #512]	; (80066d8 <HAL_I2C_Init+0x278>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	bf94      	ite	ls
 80064dc:	2301      	movls	r3, #1
 80064de:	2300      	movhi	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	e006      	b.n	80064f2 <HAL_I2C_Init+0x92>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4a7d      	ldr	r2, [pc, #500]	; (80066dc <HAL_I2C_Init+0x27c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bf94      	ite	ls
 80064ec:	2301      	movls	r3, #1
 80064ee:	2300      	movhi	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e0e7      	b.n	80066ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a78      	ldr	r2, [pc, #480]	; (80066e0 <HAL_I2C_Init+0x280>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	0c9b      	lsrs	r3, r3, #18
 8006504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4a6a      	ldr	r2, [pc, #424]	; (80066d4 <HAL_I2C_Init+0x274>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d802      	bhi.n	8006534 <HAL_I2C_Init+0xd4>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3301      	adds	r3, #1
 8006532:	e009      	b.n	8006548 <HAL_I2C_Init+0xe8>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	4a69      	ldr	r2, [pc, #420]	; (80066e4 <HAL_I2C_Init+0x284>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	3301      	adds	r3, #1
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	430b      	orrs	r3, r1
 800654e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800655a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	495c      	ldr	r1, [pc, #368]	; (80066d4 <HAL_I2C_Init+0x274>)
 8006564:	428b      	cmp	r3, r1
 8006566:	d819      	bhi.n	800659c <HAL_I2C_Init+0x13c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1e59      	subs	r1, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fbb1 f3f3 	udiv	r3, r1, r3
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800657c:	400b      	ands	r3, r1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <HAL_I2C_Init+0x138>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1e59      	subs	r1, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006590:	3301      	adds	r3, #1
 8006592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006596:	e051      	b.n	800663c <HAL_I2C_Init+0x1dc>
 8006598:	2304      	movs	r3, #4
 800659a:	e04f      	b.n	800663c <HAL_I2C_Init+0x1dc>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d111      	bne.n	80065c8 <HAL_I2C_Init+0x168>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1e58      	subs	r0, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	440b      	add	r3, r1
 80065b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b6:	3301      	adds	r3, #1
 80065b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e012      	b.n	80065ee <HAL_I2C_Init+0x18e>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1e58      	subs	r0, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	0099      	lsls	r1, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	fbb0 f3f3 	udiv	r3, r0, r3
 80065de:	3301      	adds	r3, #1
 80065e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Init+0x196>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_I2C_Init+0x1dc>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10e      	bne.n	800661c <HAL_I2C_Init+0x1bc>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e58      	subs	r0, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	440b      	add	r3, r1
 800660c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006610:	3301      	adds	r3, #1
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661a:	e00f      	b.n	800663c <HAL_I2C_Init+0x1dc>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e58      	subs	r0, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	0099      	lsls	r1, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	6809      	ldr	r1, [r1, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800666a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6911      	ldr	r1, [r2, #16]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	000186a0 	.word	0x000186a0
 80066d8:	001e847f 	.word	0x001e847f
 80066dc:	003d08ff 	.word	0x003d08ff
 80066e0:	431bde83 	.word	0x431bde83
 80066e4:	10624dd3 	.word	0x10624dd3

080066e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e154      	b.n	80069a4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a98      	ldr	r2, [pc, #608]	; (8006974 <HAL_I2S_Init+0x28c>)
 8006712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fc fb25 	bl	8002d64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006730:	f023 030f 	bic.w	r3, r3, #15
 8006734:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2202      	movs	r2, #2
 800673c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d06f      	beq.n	8006826 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800674e:	2310      	movs	r3, #16
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e001      	b.n	8006758 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006754:	2320      	movs	r3, #32
 8006756:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b20      	cmp	r3, #32
 800675e:	d802      	bhi.n	8006766 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a83      	ldr	r2, [pc, #524]	; (8006978 <HAL_I2S_Init+0x290>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_I2S_Init+0x92>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a81      	ldr	r2, [pc, #516]	; (800697c <HAL_I2S_Init+0x294>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d104      	bne.n	8006784 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800677a:	2001      	movs	r0, #1
 800677c:	f001 f858 	bl	8007830 <HAL_RCCEx_GetPeriphCLKFreq>
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	e003      	b.n	800678c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006784:	2002      	movs	r0, #2
 8006786:	f001 f853 	bl	8007830 <HAL_RCCEx_GetPeriphCLKFreq>
 800678a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d125      	bne.n	80067e2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ba:	3305      	adds	r3, #5
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	e01f      	b.n	8006800 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	3305      	adds	r3, #5
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	e00e      	b.n	8006800 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	3305      	adds	r3, #5
 80067fe:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4a5f      	ldr	r2, [pc, #380]	; (8006980 <HAL_I2S_Init+0x298>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	08db      	lsrs	r3, r3, #3
 800680a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e003      	b.n	800682e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006826:	2302      	movs	r3, #2
 8006828:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d902      	bls.n	800683a <HAL_I2S_Init+0x152>
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2bff      	cmp	r3, #255	; 0xff
 8006838:	d907      	bls.n	800684a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	f043 0210 	orr.w	r2, r3, #16
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e0ac      	b.n	80069a4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	ea42 0103 	orr.w	r1, r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	430a      	orrs	r2, r1
 800685c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006868:	f023 030f 	bic.w	r3, r3, #15
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6851      	ldr	r1, [r2, #4]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6892      	ldr	r2, [r2, #8]
 8006874:	4311      	orrs	r1, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68d2      	ldr	r2, [r2, #12]
 800687a:	4311      	orrs	r1, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6992      	ldr	r2, [r2, #24]
 8006880:	430a      	orrs	r2, r1
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b30      	cmp	r3, #48	; 0x30
 8006894:	d003      	beq.n	800689e <HAL_I2S_Init+0x1b6>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2bb0      	cmp	r3, #176	; 0xb0
 800689c:	d107      	bne.n	80068ae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ac:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d16e      	bne.n	8006994 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a32      	ldr	r2, [pc, #200]	; (8006984 <HAL_I2S_Init+0x29c>)
 80068ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2d      	ldr	r2, [pc, #180]	; (8006978 <HAL_I2S_Init+0x290>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_I2S_Init+0x1e2>
 80068c6:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_I2S_Init+0x2a0>)
 80068c8:	e001      	b.n	80068ce <HAL_I2S_Init+0x1e6>
 80068ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	4928      	ldr	r1, [pc, #160]	; (8006978 <HAL_I2S_Init+0x290>)
 80068d6:	428a      	cmp	r2, r1
 80068d8:	d101      	bne.n	80068de <HAL_I2S_Init+0x1f6>
 80068da:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <HAL_I2S_Init+0x2a0>)
 80068dc:	e001      	b.n	80068e2 <HAL_I2S_Init+0x1fa>
 80068de:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80068e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80068e6:	f023 030f 	bic.w	r3, r3, #15
 80068ea:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <HAL_I2S_Init+0x290>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d101      	bne.n	80068fa <HAL_I2S_Init+0x212>
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <HAL_I2S_Init+0x2a0>)
 80068f8:	e001      	b.n	80068fe <HAL_I2S_Init+0x216>
 80068fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068fe:	2202      	movs	r2, #2
 8006900:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_I2S_Init+0x290>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <HAL_I2S_Init+0x228>
 800690c:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <HAL_I2S_Init+0x2a0>)
 800690e:	e001      	b.n	8006914 <HAL_I2S_Init+0x22c>
 8006910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006920:	d003      	beq.n	800692a <HAL_I2S_Init+0x242>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800692a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	e001      	b.n	8006936 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006932:	2300      	movs	r3, #0
 8006934:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800694a:	4313      	orrs	r3, r2
 800694c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006954:	4313      	orrs	r3, r2
 8006956:	b29a      	uxth	r2, r3
 8006958:	897b      	ldrh	r3, [r7, #10]
 800695a:	4313      	orrs	r3, r2
 800695c:	b29b      	uxth	r3, r3
 800695e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006962:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a03      	ldr	r2, [pc, #12]	; (8006978 <HAL_I2S_Init+0x290>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10e      	bne.n	800698c <HAL_I2S_Init+0x2a4>
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_I2S_Init+0x2a0>)
 8006970:	e00e      	b.n	8006990 <HAL_I2S_Init+0x2a8>
 8006972:	bf00      	nop
 8006974:	08006aa3 	.word	0x08006aa3
 8006978:	40003800 	.word	0x40003800
 800697c:	40003c00 	.word	0x40003c00
 8006980:	cccccccd 	.word	0xcccccccd
 8006984:	08006bb9 	.word	0x08006bb9
 8006988:	40003400 	.word	0x40003400
 800698c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006990:	897a      	ldrh	r2, [r7, #10]
 8006992:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	1c9a      	adds	r2, r3, #2
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10e      	bne.n	8006a3c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a2c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ffb8 	bl	80069ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	b292      	uxth	r2, r2
 8006a58:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10e      	bne.n	8006a9a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff93 	bl	80069c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d13a      	bne.n	8006b34 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d109      	bne.n	8006adc <I2S_IRQHandler+0x3a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d102      	bne.n	8006adc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff ffb4 	bl	8006a44 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d126      	bne.n	8006b34 <I2S_IRQHandler+0x92>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d11f      	bne.n	8006b34 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b04:	2300      	movs	r3, #0
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	f043 0202 	orr.w	r2, r3, #2
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff50 	bl	80069d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d136      	bne.n	8006bae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d109      	bne.n	8006b5e <I2S_IRQHandler+0xbc>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b54:	2b80      	cmp	r3, #128	; 0x80
 8006b56:	d102      	bne.n	8006b5e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ff45 	bl	80069e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d122      	bne.n	8006bae <I2S_IRQHandler+0x10c>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d11b      	bne.n	8006bae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b84:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	f043 0204 	orr.w	r2, r3, #4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff13 	bl	80069d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a92      	ldr	r2, [pc, #584]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006bd2:	4b92      	ldr	r3, [pc, #584]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bd4:	e001      	b.n	8006bda <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a8b      	ldr	r2, [pc, #556]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d101      	bne.n	8006bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006bf0:	4b8a      	ldr	r3, [pc, #552]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bf2:	e001      	b.n	8006bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c04:	d004      	beq.n	8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 8099 	bne.w	8006d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d107      	bne.n	8006c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f91b 	bl	8006e60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d107      	bne.n	8006c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f9be 	bl	8006fc0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b40      	cmp	r3, #64	; 0x40
 8006c4c:	d13a      	bne.n	8006cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d035      	beq.n	8006cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a6e      	ldr	r2, [pc, #440]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d101      	bne.n	8006c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006c62:	4b6e      	ldr	r3, [pc, #440]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c64:	e001      	b.n	8006c6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4969      	ldr	r1, [pc, #420]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c72:	428b      	cmp	r3, r1
 8006c74:	d101      	bne.n	8006c7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006c76:	4b69      	ldr	r3, [pc, #420]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c78:	e001      	b.n	8006c7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c82:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f043 0202 	orr.w	r2, r3, #2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fe88 	bl	80069d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	f040 80c3 	bne.w	8006e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80bd 	beq.w	8006e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a49      	ldr	r2, [pc, #292]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d101      	bne.n	8006cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006cf6:	4b49      	ldr	r3, [pc, #292]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cf8:	e001      	b.n	8006cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4944      	ldr	r1, [pc, #272]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d06:	428b      	cmp	r3, r1
 8006d08:	d101      	bne.n	8006d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d0a:	4b44      	ldr	r3, [pc, #272]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d0c:	e001      	b.n	8006d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d16:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60bb      	str	r3, [r7, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	f043 0204 	orr.w	r2, r3, #4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fe4a 	bl	80069d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d40:	e089      	b.n	8006e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d107      	bne.n	8006d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f8b4 	bl	8006ec4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f8f3 	bl	8006f5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d12f      	bne.n	8006de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d02a      	beq.n	8006de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d98:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006da4:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006da6:	e001      	b.n	8006dac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4919      	ldr	r1, [pc, #100]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006db4:	428b      	cmp	r3, r1
 8006db6:	d101      	bne.n	8006dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006db8:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dba:	e001      	b.n	8006dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dc4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	f043 0202 	orr.w	r2, r3, #2
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fdfa 	bl	80069d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d136      	bne.n	8006e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d031      	beq.n	8006e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a07      	ldr	r2, [pc, #28]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e00:	e001      	b.n	8006e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4902      	ldr	r1, [pc, #8]	; (8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e0e:	428b      	cmp	r3, r1
 8006e10:	d106      	bne.n	8006e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e12:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e14:	e006      	b.n	8006e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e16:	bf00      	nop
 8006e18:	40003800 	.word	0x40003800
 8006e1c:	40003400 	.word	0x40003400
 8006e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e28:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f043 0204 	orr.w	r2, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fdc0 	bl	80069d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e54:	e000      	b.n	8006e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e56:	bf00      	nop
}
 8006e58:	bf00      	nop
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	1c99      	adds	r1, r3, #2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6251      	str	r1, [r2, #36]	; 0x24
 8006e72:	881a      	ldrh	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d113      	bne.n	8006eba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ea0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d106      	bne.n	8006eba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7fa fdf0 	bl	8001a9a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	1c99      	adds	r1, r3, #2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6251      	str	r1, [r2, #36]	; 0x24
 8006ed6:	8819      	ldrh	r1, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <I2SEx_TxISR_I2SExt+0x90>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d101      	bne.n	8006ee6 <I2SEx_TxISR_I2SExt+0x22>
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <I2SEx_TxISR_I2SExt+0x94>)
 8006ee4:	e001      	b.n	8006eea <I2SEx_TxISR_I2SExt+0x26>
 8006ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eea:	460a      	mov	r2, r1
 8006eec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d121      	bne.n	8006f4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a12      	ldr	r2, [pc, #72]	; (8006f54 <I2SEx_TxISR_I2SExt+0x90>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d101      	bne.n	8006f14 <I2SEx_TxISR_I2SExt+0x50>
 8006f10:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <I2SEx_TxISR_I2SExt+0x94>)
 8006f12:	e001      	b.n	8006f18 <I2SEx_TxISR_I2SExt+0x54>
 8006f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	490d      	ldr	r1, [pc, #52]	; (8006f54 <I2SEx_TxISR_I2SExt+0x90>)
 8006f20:	428b      	cmp	r3, r1
 8006f22:	d101      	bne.n	8006f28 <I2SEx_TxISR_I2SExt+0x64>
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <I2SEx_TxISR_I2SExt+0x94>)
 8006f26:	e001      	b.n	8006f2c <I2SEx_TxISR_I2SExt+0x68>
 8006f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d106      	bne.n	8006f4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7fa fda8 	bl	8001a9a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40003800 	.word	0x40003800
 8006f58:	40003400 	.word	0x40003400

08006f5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68d8      	ldr	r0, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	1c99      	adds	r1, r3, #2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006f74:	b282      	uxth	r2, r0
 8006f76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d113      	bne.n	8006fb8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa fd71 	bl	8001a9a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <I2SEx_RxISR_I2SExt+0x90>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <I2SEx_RxISR_I2SExt+0x16>
 8006fd2:	4b20      	ldr	r3, [pc, #128]	; (8007054 <I2SEx_RxISR_I2SExt+0x94>)
 8006fd4:	e001      	b.n	8006fda <I2SEx_RxISR_I2SExt+0x1a>
 8006fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fda:	68d8      	ldr	r0, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	1c99      	adds	r1, r3, #2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006fe6:	b282      	uxth	r2, r0
 8006fe8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d121      	bne.n	8007046 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a12      	ldr	r2, [pc, #72]	; (8007050 <I2SEx_RxISR_I2SExt+0x90>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d101      	bne.n	8007010 <I2SEx_RxISR_I2SExt+0x50>
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <I2SEx_RxISR_I2SExt+0x94>)
 800700e:	e001      	b.n	8007014 <I2SEx_RxISR_I2SExt+0x54>
 8007010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	490d      	ldr	r1, [pc, #52]	; (8007050 <I2SEx_RxISR_I2SExt+0x90>)
 800701c:	428b      	cmp	r3, r1
 800701e:	d101      	bne.n	8007024 <I2SEx_RxISR_I2SExt+0x64>
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <I2SEx_RxISR_I2SExt+0x94>)
 8007022:	e001      	b.n	8007028 <I2SEx_RxISR_I2SExt+0x68>
 8007024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007028:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800702c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fa fd2a 	bl	8001a9a <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	40003800 	.word	0x40003800
 8007054:	40003400 	.word	0x40003400

08007058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e0cc      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800706c:	4b68      	ldr	r3, [pc, #416]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d90c      	bls.n	8007094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b65      	ldr	r3, [pc, #404]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b63      	ldr	r3, [pc, #396]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0b8      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d020      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070ac:	4b59      	ldr	r3, [pc, #356]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4a58      	ldr	r2, [pc, #352]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070c4:	4b53      	ldr	r3, [pc, #332]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a52      	ldr	r2, [pc, #328]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d0:	4b50      	ldr	r3, [pc, #320]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	494d      	ldr	r1, [pc, #308]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d044      	beq.n	8007178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d107      	bne.n	8007106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070f6:	4b47      	ldr	r3, [pc, #284]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d119      	bne.n	8007136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e07f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d003      	beq.n	8007116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007112:	2b03      	cmp	r3, #3
 8007114:	d107      	bne.n	8007126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007116:	4b3f      	ldr	r3, [pc, #252]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e06f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007126:	4b3b      	ldr	r3, [pc, #236]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e067      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007136:	4b37      	ldr	r3, [pc, #220]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f023 0203 	bic.w	r2, r3, #3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4934      	ldr	r1, [pc, #208]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	4313      	orrs	r3, r2
 8007146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007148:	f7fc fb14 	bl	8003774 <HAL_GetTick>
 800714c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	e00a      	b.n	8007166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007150:	f7fc fb10 	bl	8003774 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	f241 3288 	movw	r2, #5000	; 0x1388
 800715e:	4293      	cmp	r3, r2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e04f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007166:	4b2b      	ldr	r3, [pc, #172]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 020c 	and.w	r2, r3, #12
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	429a      	cmp	r2, r3
 8007176:	d1eb      	bne.n	8007150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d20c      	bcs.n	80071a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007186:	4b22      	ldr	r3, [pc, #136]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800718e:	4b20      	ldr	r3, [pc, #128]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d001      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e032      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	4916      	ldr	r1, [pc, #88]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	490e      	ldr	r1, [pc, #56]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071de:	f000 f821 	bl	8007224 <HAL_RCC_GetSysClockFreq>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	490a      	ldr	r1, [pc, #40]	; (8007218 <HAL_RCC_ClockConfig+0x1c0>)
 80071f0:	5ccb      	ldrb	r3, [r1, r3]
 80071f2:	fa22 f303 	lsr.w	r3, r2, r3
 80071f6:	4a09      	ldr	r2, [pc, #36]	; (800721c <HAL_RCC_ClockConfig+0x1c4>)
 80071f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCC_ClockConfig+0x1c8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fa74 	bl	80036ec <HAL_InitTick>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40023c00 	.word	0x40023c00
 8007214:	40023800 	.word	0x40023800
 8007218:	0800c0f8 	.word	0x0800c0f8
 800721c:	20000000 	.word	0x20000000
 8007220:	20000004 	.word	0x20000004

08007224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007228:	b094      	sub	sp, #80	; 0x50
 800722a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	647b      	str	r3, [r7, #68]	; 0x44
 8007230:	2300      	movs	r3, #0
 8007232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007234:	2300      	movs	r3, #0
 8007236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800723c:	4b79      	ldr	r3, [pc, #484]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 030c 	and.w	r3, r3, #12
 8007244:	2b08      	cmp	r3, #8
 8007246:	d00d      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0x40>
 8007248:	2b08      	cmp	r3, #8
 800724a:	f200 80e1 	bhi.w	8007410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0x34>
 8007252:	2b04      	cmp	r3, #4
 8007254:	d003      	beq.n	800725e <HAL_RCC_GetSysClockFreq+0x3a>
 8007256:	e0db      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007258:	4b73      	ldr	r3, [pc, #460]	; (8007428 <HAL_RCC_GetSysClockFreq+0x204>)
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800725c:	e0db      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800725e:	4b72      	ldr	r3, [pc, #456]	; (8007428 <HAL_RCC_GetSysClockFreq+0x204>)
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007262:	e0d8      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007264:	4b6f      	ldr	r3, [pc, #444]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800726e:	4b6d      	ldr	r3, [pc, #436]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d063      	beq.n	8007342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727a:	4b6a      	ldr	r3, [pc, #424]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	099b      	lsrs	r3, r3, #6
 8007280:	2200      	movs	r2, #0
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
 8007284:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	633b      	str	r3, [r7, #48]	; 0x30
 800728e:	2300      	movs	r3, #0
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
 8007292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	f04f 0000 	mov.w	r0, #0
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	0159      	lsls	r1, r3, #5
 80072a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072a8:	0150      	lsls	r0, r2, #5
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4621      	mov	r1, r4
 80072b0:	1a51      	subs	r1, r2, r1
 80072b2:	6139      	str	r1, [r7, #16]
 80072b4:	4629      	mov	r1, r5
 80072b6:	eb63 0301 	sbc.w	r3, r3, r1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072c8:	4659      	mov	r1, fp
 80072ca:	018b      	lsls	r3, r1, #6
 80072cc:	4651      	mov	r1, sl
 80072ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072d2:	4651      	mov	r1, sl
 80072d4:	018a      	lsls	r2, r1, #6
 80072d6:	4651      	mov	r1, sl
 80072d8:	ebb2 0801 	subs.w	r8, r2, r1
 80072dc:	4659      	mov	r1, fp
 80072de:	eb63 0901 	sbc.w	r9, r3, r1
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072f6:	4690      	mov	r8, r2
 80072f8:	4699      	mov	r9, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	eb18 0303 	adds.w	r3, r8, r3
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	462b      	mov	r3, r5
 8007304:	eb49 0303 	adc.w	r3, r9, r3
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007316:	4629      	mov	r1, r5
 8007318:	028b      	lsls	r3, r1, #10
 800731a:	4621      	mov	r1, r4
 800731c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007320:	4621      	mov	r1, r4
 8007322:	028a      	lsls	r2, r1, #10
 8007324:	4610      	mov	r0, r2
 8007326:	4619      	mov	r1, r3
 8007328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732a:	2200      	movs	r2, #0
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
 800732e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007334:	f7f9 fb34 	bl	80009a0 <__aeabi_uldivmod>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4613      	mov	r3, r2
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007340:	e058      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007342:	4b38      	ldr	r3, [pc, #224]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	099b      	lsrs	r3, r3, #6
 8007348:	2200      	movs	r2, #0
 800734a:	4618      	mov	r0, r3
 800734c:	4611      	mov	r1, r2
 800734e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800735c:	4642      	mov	r2, r8
 800735e:	464b      	mov	r3, r9
 8007360:	f04f 0000 	mov.w	r0, #0
 8007364:	f04f 0100 	mov.w	r1, #0
 8007368:	0159      	lsls	r1, r3, #5
 800736a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800736e:	0150      	lsls	r0, r2, #5
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4641      	mov	r1, r8
 8007376:	ebb2 0a01 	subs.w	sl, r2, r1
 800737a:	4649      	mov	r1, r9
 800737c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800738c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007394:	ebb2 040a 	subs.w	r4, r2, sl
 8007398:	eb63 050b 	sbc.w	r5, r3, fp
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	00eb      	lsls	r3, r5, #3
 80073a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073aa:	00e2      	lsls	r2, r4, #3
 80073ac:	4614      	mov	r4, r2
 80073ae:	461d      	mov	r5, r3
 80073b0:	4643      	mov	r3, r8
 80073b2:	18e3      	adds	r3, r4, r3
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	464b      	mov	r3, r9
 80073b8:	eb45 0303 	adc.w	r3, r5, r3
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073ca:	4629      	mov	r1, r5
 80073cc:	028b      	lsls	r3, r1, #10
 80073ce:	4621      	mov	r1, r4
 80073d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073d4:	4621      	mov	r1, r4
 80073d6:	028a      	lsls	r2, r1, #10
 80073d8:	4610      	mov	r0, r2
 80073da:	4619      	mov	r1, r3
 80073dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073de:	2200      	movs	r2, #0
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	61fa      	str	r2, [r7, #28]
 80073e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073e8:	f7f9 fada 	bl	80009a0 <__aeabi_uldivmod>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4613      	mov	r3, r2
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_RCC_GetSysClockFreq+0x200>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	3301      	adds	r3, #1
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800740e:	e002      	b.n	8007416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <HAL_RCC_GetSysClockFreq+0x204>)
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007418:	4618      	mov	r0, r3
 800741a:	3750      	adds	r7, #80	; 0x50
 800741c:	46bd      	mov	sp, r7
 800741e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007422:	bf00      	nop
 8007424:	40023800 	.word	0x40023800
 8007428:	00f42400 	.word	0x00f42400

0800742c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007430:	4b03      	ldr	r3, [pc, #12]	; (8007440 <HAL_RCC_GetHCLKFreq+0x14>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000000 	.word	0x20000000

08007444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007448:	f7ff fff0 	bl	800742c <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0a9b      	lsrs	r3, r3, #10
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4903      	ldr	r1, [pc, #12]	; (8007468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007460:	4618      	mov	r0, r3
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40023800 	.word	0x40023800
 8007468:	0800c108 	.word	0x0800c108

0800746c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007470:	f7ff ffdc 	bl	800742c <HAL_RCC_GetHCLKFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	0b5b      	lsrs	r3, r3, #13
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	4903      	ldr	r1, [pc, #12]	; (8007490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40023800 	.word	0x40023800
 8007490:	0800c108 	.word	0x0800c108

08007494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d010      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80074b4:	4b87      	ldr	r3, [pc, #540]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80074b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4984      	ldr	r1, [pc, #528]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d010      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80074e2:	4b7c      	ldr	r3, [pc, #496]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	4978      	ldr	r1, [pc, #480]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8083 	beq.w	8007618 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	4b6f      	ldr	r3, [pc, #444]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	4a6e      	ldr	r2, [pc, #440]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6413      	str	r3, [r2, #64]	; 0x40
 8007522:	4b6c      	ldr	r3, [pc, #432]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752a:	60bb      	str	r3, [r7, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800752e:	4b6a      	ldr	r3, [pc, #424]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a69      	ldr	r2, [pc, #420]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007538:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800753a:	f7fc f91b 	bl	8003774 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007540:	e008      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007542:	f7fc f917 	bl	8003774 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d901      	bls.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e162      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007554:	4b60      	ldr	r3, [pc, #384]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f0      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007560:	4b5c      	ldr	r3, [pc, #368]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007568:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02f      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	429a      	cmp	r2, r3
 800757c:	d028      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800757e:	4b55      	ldr	r3, [pc, #340]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007586:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007588:	4b54      	ldr	r3, [pc, #336]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800758e:	4b53      	ldr	r3, [pc, #332]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007594:	4a4f      	ldr	r2, [pc, #316]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800759a:	4b4e      	ldr	r3, [pc, #312]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d114      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075a6:	f7fc f8e5 	bl	8003774 <HAL_GetTick>
 80075aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ac:	e00a      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ae:	f7fc f8e1 	bl	8003774 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e12a      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c4:	4b43      	ldr	r3, [pc, #268]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0ee      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075dc:	d10d      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x166>
 80075de:	4b3d      	ldr	r3, [pc, #244]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f2:	4938      	ldr	r1, [pc, #224]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	608b      	str	r3, [r1, #8]
 80075f8:	e005      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80075fa:	4b36      	ldr	r3, [pc, #216]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	4a35      	ldr	r2, [pc, #212]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007600:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007604:	6093      	str	r3, [r2, #8]
 8007606:	4b33      	ldr	r3, [pc, #204]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007612:	4930      	ldr	r1, [pc, #192]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007614:	4313      	orrs	r3, r2
 8007616:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800762a:	4b2d      	ldr	r3, [pc, #180]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800762c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800763a:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800763c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	4922      	ldr	r1, [pc, #136]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800764a:	4313      	orrs	r3, r2
 800764c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d011      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800765e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007662:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	491a      	ldr	r1, [pc, #104]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800767a:	d101      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 800767c:	2301      	movs	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800768e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007692:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	490e      	ldr	r1, [pc, #56]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d004      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b80      	cmp	r3, #128	; 0x80
 80076ae:	f040 8091 	bne.w	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076b8:	f7fc f85c 	bl	8003774 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076be:	e013      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076c0:	f7fc f858 	bl	8003774 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d90c      	bls.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e0a3      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x386>
 80076d2:	bf00      	nop
 80076d4:	40023800 	.word	0x40023800
 80076d8:	40007000 	.word	0x40007000
 80076dc:	42470e40 	.word	0x42470e40
 80076e0:	424711e0 	.word	0x424711e0
 80076e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076e8:	4b4e      	ldr	r3, [pc, #312]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80076f4:	4a4c      	ldr	r2, [pc, #304]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d023      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d019      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007738:	d00e      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007742:	2b00      	cmp	r3, #0
 8007744:	d019      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d115      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007756:	d110      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	019b      	lsls	r3, r3, #6
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	061b      	lsls	r3, r3, #24
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	071b      	lsls	r3, r3, #28
 8007772:	492c      	ldr	r1, [pc, #176]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b00      	cmp	r3, #0
 8007784:	d010      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	019b      	lsls	r3, r3, #6
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	071b      	lsls	r3, r3, #28
 80077a0:	4920      	ldr	r1, [pc, #128]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077a8:	4b20      	ldr	r3, [pc, #128]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077ae:	f7fb ffe1 	bl	8003774 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077b4:	e008      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077b6:	f7fb ffdd 	bl	8003774 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e028      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077c8:	4b16      	ldr	r3, [pc, #88]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0f0      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077e0:	4b10      	ldr	r3, [pc, #64]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80077e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	490d      	ldr	r1, [pc, #52]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007802:	4b08      	ldr	r3, [pc, #32]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8007804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007808:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	4904      	ldr	r1, [pc, #16]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800
 8007828:	424710d8 	.word	0x424710d8
 800782c:	42470068 	.word	0x42470068

08007830 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d004      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b02      	cmp	r3, #2
 8007852:	f000 80a1 	beq.w	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007856:	e13f      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007858:	4ba3      	ldr	r3, [pc, #652]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800785a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800785e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800786a:	f000 8084 	beq.w	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007874:	f200 808c 	bhi.w	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800787e:	d04f      	beq.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007886:	f200 8083 	bhi.w	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007896:	d17b      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007898:	4b94      	ldr	r3, [pc, #592]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800789a:	617b      	str	r3, [r7, #20]
          break;
 800789c:	e07b      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800789e:	4b92      	ldr	r3, [pc, #584]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ac:	d109      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078ae:	4b8e      	ldr	r3, [pc, #568]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b8:	4a8c      	ldr	r2, [pc, #560]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	e019      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078c2:	4b89      	ldr	r3, [pc, #548]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ce:	d109      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078d0:	4b85      	ldr	r3, [pc, #532]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078da:	4a85      	ldr	r2, [pc, #532]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	e008      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078e4:	4b80      	ldr	r3, [pc, #512]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ee:	4a80      	ldr	r2, [pc, #512]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078f6:	4b7c      	ldr	r3, [pc, #496]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fc:	099b      	lsrs	r3, r3, #6
 80078fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800790a:	4b77      	ldr	r3, [pc, #476]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800790c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007910:	0f1b      	lsrs	r3, r3, #28
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	fbb2 f3f3 	udiv	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]
          break;
 800791e:	e03a      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007920:	4b71      	ldr	r3, [pc, #452]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800792c:	d108      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800792e:	4b6e      	ldr	r3, [pc, #440]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007936:	4a6e      	ldr	r2, [pc, #440]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	e007      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007940:	4b69      	ldr	r3, [pc, #420]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007948:	4a69      	ldr	r2, [pc, #420]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007950:	4b65      	ldr	r3, [pc, #404]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	099b      	lsrs	r3, r3, #6
 8007956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	fb02 f303 	mul.w	r3, r2, r3
 8007960:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007962:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	0f1b      	lsrs	r3, r3, #28
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	617b      	str	r3, [r7, #20]
          break;
 8007974:	e00f      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007976:	4b5c      	ldr	r3, [pc, #368]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800797e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007982:	d102      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8007984:	4b5a      	ldr	r3, [pc, #360]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007986:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007988:	e005      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 800798a:	4b59      	ldr	r3, [pc, #356]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800798c:	617b      	str	r3, [r7, #20]
          break;
 800798e:	e002      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
          break;
 8007994:	bf00      	nop
        }
      }
      break;
 8007996:	e09f      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007998:	4b53      	ldr	r3, [pc, #332]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800799a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80079aa:	f000 8084 	beq.w	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80079b4:	f200 808c 	bhi.w	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079be:	d04f      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c6:	f200 8083 	bhi.w	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d006      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d6:	d17b      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80079d8:	4b44      	ldr	r3, [pc, #272]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079da:	617b      	str	r3, [r7, #20]
          break;
 80079dc:	e07b      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80079de:	4b42      	ldr	r3, [pc, #264]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ec:	d109      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80079ee:	4b3e      	ldr	r3, [pc, #248]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f8:	4a3c      	ldr	r2, [pc, #240]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	e019      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a02:	4b39      	ldr	r3, [pc, #228]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a10:	4b35      	ldr	r3, [pc, #212]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1a:	4a35      	ldr	r2, [pc, #212]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e008      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a24:	4b30      	ldr	r3, [pc, #192]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a2e:	4a30      	ldr	r2, [pc, #192]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007a36:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3c:	099b      	lsrs	r3, r3, #6
 8007a3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	fb02 f303 	mul.w	r3, r2, r3
 8007a48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007a4a:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a50:	0f1b      	lsrs	r3, r3, #28
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]
          break;
 8007a5e:	e03a      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a60:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6c:	d108      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e007      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a80:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a88:	4a19      	ldr	r2, [pc, #100]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007a90:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	099b      	lsrs	r3, r3, #6
 8007a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
 8007aa0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	0f1b      	lsrs	r3, r3, #28
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	617b      	str	r3, [r7, #20]
          break;
 8007ab4:	e00f      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac2:	d102      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ac6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007ac8:	e005      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007acc:	617b      	str	r3, [r7, #20]
          break;
 8007ace:	e002      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
          break;
 8007ad4:	bf00      	nop
        }
      }
      break;
 8007ad6:	bf00      	nop
    }
  }
  return frequency;
 8007ad8:	697b      	ldr	r3, [r7, #20]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	00bb8000 	.word	0x00bb8000
 8007af0:	00f42400 	.word	0x00f42400

08007af4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e273      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d075      	beq.n	8007bfe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b12:	4b88      	ldr	r3, [pc, #544]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 030c 	and.w	r3, r3, #12
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d00c      	beq.n	8007b38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b1e:	4b85      	ldr	r3, [pc, #532]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d112      	bne.n	8007b50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b2a:	4b82      	ldr	r3, [pc, #520]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b36:	d10b      	bne.n	8007b50 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b38:	4b7e      	ldr	r3, [pc, #504]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d05b      	beq.n	8007bfc <HAL_RCC_OscConfig+0x108>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d157      	bne.n	8007bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e24e      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b58:	d106      	bne.n	8007b68 <HAL_RCC_OscConfig+0x74>
 8007b5a:	4b76      	ldr	r3, [pc, #472]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a75      	ldr	r2, [pc, #468]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	e01d      	b.n	8007ba4 <HAL_RCC_OscConfig+0xb0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b70:	d10c      	bne.n	8007b8c <HAL_RCC_OscConfig+0x98>
 8007b72:	4b70      	ldr	r3, [pc, #448]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a6f      	ldr	r2, [pc, #444]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	4b6d      	ldr	r3, [pc, #436]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a6c      	ldr	r2, [pc, #432]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	e00b      	b.n	8007ba4 <HAL_RCC_OscConfig+0xb0>
 8007b8c:	4b69      	ldr	r3, [pc, #420]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a68      	ldr	r2, [pc, #416]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	4b66      	ldr	r3, [pc, #408]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a65      	ldr	r2, [pc, #404]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d013      	beq.n	8007bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fb fde2 	bl	8003774 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bb4:	f7fb fdde 	bl	8003774 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b64      	cmp	r3, #100	; 0x64
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e213      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bc6:	4b5b      	ldr	r3, [pc, #364]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0f0      	beq.n	8007bb4 <HAL_RCC_OscConfig+0xc0>
 8007bd2:	e014      	b.n	8007bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fb fdce 	bl	8003774 <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bdc:	f7fb fdca 	bl	8003774 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b64      	cmp	r3, #100	; 0x64
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e1ff      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bee:	4b51      	ldr	r3, [pc, #324]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f0      	bne.n	8007bdc <HAL_RCC_OscConfig+0xe8>
 8007bfa:	e000      	b.n	8007bfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d063      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c0a:	4b4a      	ldr	r3, [pc, #296]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 030c 	and.w	r3, r3, #12
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00b      	beq.n	8007c2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c16:	4b47      	ldr	r3, [pc, #284]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d11c      	bne.n	8007c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c22:	4b44      	ldr	r3, [pc, #272]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d116      	bne.n	8007c5c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c2e:	4b41      	ldr	r3, [pc, #260]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_RCC_OscConfig+0x152>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d001      	beq.n	8007c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e1d3      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c46:	4b3b      	ldr	r3, [pc, #236]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4937      	ldr	r1, [pc, #220]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c5a:	e03a      	b.n	8007cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d020      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c64:	4b34      	ldr	r3, [pc, #208]	; (8007d38 <HAL_RCC_OscConfig+0x244>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6a:	f7fb fd83 	bl	8003774 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c72:	f7fb fd7f 	bl	8003774 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e1b4      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c84:	4b2b      	ldr	r3, [pc, #172]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0f0      	beq.n	8007c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c90:	4b28      	ldr	r3, [pc, #160]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4925      	ldr	r1, [pc, #148]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	600b      	str	r3, [r1, #0]
 8007ca4:	e015      	b.n	8007cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ca6:	4b24      	ldr	r3, [pc, #144]	; (8007d38 <HAL_RCC_OscConfig+0x244>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cac:	f7fb fd62 	bl	8003774 <HAL_GetTick>
 8007cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb4:	f7fb fd5e 	bl	8003774 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e193      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cc6:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f0      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d036      	beq.n	8007d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d016      	beq.n	8007d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ce6:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <HAL_RCC_OscConfig+0x248>)
 8007ce8:	2201      	movs	r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cec:	f7fb fd42 	bl	8003774 <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cf4:	f7fb fd3e 	bl	8003774 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e173      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d06:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <HAL_RCC_OscConfig+0x240>)
 8007d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f0      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x200>
 8007d12:	e01b      	b.n	8007d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <HAL_RCC_OscConfig+0x248>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1a:	f7fb fd2b 	bl	8003774 <HAL_GetTick>
 8007d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d20:	e00e      	b.n	8007d40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d22:	f7fb fd27 	bl	8003774 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d907      	bls.n	8007d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e15c      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
 8007d34:	40023800 	.word	0x40023800
 8007d38:	42470000 	.word	0x42470000
 8007d3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d40:	4b8a      	ldr	r3, [pc, #552]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1ea      	bne.n	8007d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8097 	beq.w	8007e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d5e:	4b83      	ldr	r3, [pc, #524]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10f      	bne.n	8007d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
 8007d6e:	4b7f      	ldr	r3, [pc, #508]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	4a7e      	ldr	r2, [pc, #504]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d78:	6413      	str	r3, [r2, #64]	; 0x40
 8007d7a:	4b7c      	ldr	r3, [pc, #496]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8a:	4b79      	ldr	r3, [pc, #484]	; (8007f70 <HAL_RCC_OscConfig+0x47c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d118      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d96:	4b76      	ldr	r3, [pc, #472]	; (8007f70 <HAL_RCC_OscConfig+0x47c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a75      	ldr	r2, [pc, #468]	; (8007f70 <HAL_RCC_OscConfig+0x47c>)
 8007d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007da2:	f7fb fce7 	bl	8003774 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007daa:	f7fb fce3 	bl	8003774 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e118      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dbc:	4b6c      	ldr	r3, [pc, #432]	; (8007f70 <HAL_RCC_OscConfig+0x47c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d106      	bne.n	8007dde <HAL_RCC_OscConfig+0x2ea>
 8007dd0:	4b66      	ldr	r3, [pc, #408]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd4:	4a65      	ldr	r2, [pc, #404]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	6713      	str	r3, [r2, #112]	; 0x70
 8007ddc:	e01c      	b.n	8007e18 <HAL_RCC_OscConfig+0x324>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	d10c      	bne.n	8007e00 <HAL_RCC_OscConfig+0x30c>
 8007de6:	4b61      	ldr	r3, [pc, #388]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	4a60      	ldr	r2, [pc, #384]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007dec:	f043 0304 	orr.w	r3, r3, #4
 8007df0:	6713      	str	r3, [r2, #112]	; 0x70
 8007df2:	4b5e      	ldr	r3, [pc, #376]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df6:	4a5d      	ldr	r2, [pc, #372]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007df8:	f043 0301 	orr.w	r3, r3, #1
 8007dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dfe:	e00b      	b.n	8007e18 <HAL_RCC_OscConfig+0x324>
 8007e00:	4b5a      	ldr	r3, [pc, #360]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e04:	4a59      	ldr	r2, [pc, #356]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e0c:	4b57      	ldr	r3, [pc, #348]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e10:	4a56      	ldr	r2, [pc, #344]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e12:	f023 0304 	bic.w	r3, r3, #4
 8007e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d015      	beq.n	8007e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e20:	f7fb fca8 	bl	8003774 <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e26:	e00a      	b.n	8007e3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e28:	f7fb fca4 	bl	8003774 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e0d7      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e3e:	4b4b      	ldr	r3, [pc, #300]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0ee      	beq.n	8007e28 <HAL_RCC_OscConfig+0x334>
 8007e4a:	e014      	b.n	8007e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4c:	f7fb fc92 	bl	8003774 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e52:	e00a      	b.n	8007e6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e54:	f7fb fc8e 	bl	8003774 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e0c1      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e6a:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1ee      	bne.n	8007e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d105      	bne.n	8007e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e7c:	4b3b      	ldr	r3, [pc, #236]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	4a3a      	ldr	r2, [pc, #232]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80ad 	beq.w	8007fec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e92:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 030c 	and.w	r3, r3, #12
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d060      	beq.n	8007f60 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d145      	bne.n	8007f32 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea6:	4b33      	ldr	r3, [pc, #204]	; (8007f74 <HAL_RCC_OscConfig+0x480>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eac:	f7fb fc62 	bl	8003774 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eb4:	f7fb fc5e 	bl	8003774 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e093      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ec6:	4b29      	ldr	r3, [pc, #164]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69da      	ldr	r2, [r3, #28]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	019b      	lsls	r3, r3, #6
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	3b01      	subs	r3, #1
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	061b      	lsls	r3, r3, #24
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	071b      	lsls	r3, r3, #28
 8007efe:	491b      	ldr	r1, [pc, #108]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <HAL_RCC_OscConfig+0x480>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7fb fc33 	bl	8003774 <HAL_GetTick>
 8007f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f10:	e008      	b.n	8007f24 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f12:	f7fb fc2f 	bl	8003774 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e064      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f24:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0f0      	beq.n	8007f12 <HAL_RCC_OscConfig+0x41e>
 8007f30:	e05c      	b.n	8007fec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <HAL_RCC_OscConfig+0x480>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fb fc1c 	bl	8003774 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f40:	f7fb fc18 	bl	8003774 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e04d      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f52:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <HAL_RCC_OscConfig+0x478>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x44c>
 8007f5e:	e045      	b.n	8007fec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d107      	bne.n	8007f78 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e040      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
 8007f6c:	40023800 	.word	0x40023800
 8007f70:	40007000 	.word	0x40007000
 8007f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f78:	4b1f      	ldr	r3, [pc, #124]	; (8007ff8 <HAL_RCC_OscConfig+0x504>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d030      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d129      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d122      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007fa8:	4013      	ands	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d119      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d10f      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d107      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d001      	beq.n	8007fec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40023800 	.word	0x40023800

08007ffc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e066      	b.n	80080e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7f5b      	ldrb	r3, [r3, #29]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fa ff3c 	bl	8002ea0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	22ca      	movs	r2, #202	; 0xca
 8008034:	625a      	str	r2, [r3, #36]	; 0x24
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2253      	movs	r2, #83	; 0x53
 800803c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fb2a 	bl	8008698 <RTC_EnterInitMode>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d12c      	bne.n	80080a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800805c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008060:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68d2      	ldr	r2, [r2, #12]
 8008088:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6919      	ldr	r1, [r3, #16]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	041a      	lsls	r2, r3, #16
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fb31 	bl	8008706 <RTC_ExitInitMode>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d113      	bne.n	80080d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	22ff      	movs	r2, #255	; 0xff
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	7f1b      	ldrb	r3, [r3, #28]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_RTC_SetTime+0x1c>
 8008100:	2302      	movs	r3, #2
 8008102:	e087      	b.n	8008214 <HAL_RTC_SetTime+0x12c>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2202      	movs	r2, #2
 800810e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d126      	bne.n	8008164 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fb0e 	bl	8008750 <RTC_ByteToBcd2>
 8008134:	4603      	mov	r3, r0
 8008136:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fb07 	bl	8008750 <RTC_ByteToBcd2>
 8008142:	4603      	mov	r3, r0
 8008144:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008146:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	789b      	ldrb	r3, [r3, #2]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 faff 	bl	8008750 <RTC_ByteToBcd2>
 8008152:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008154:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	78db      	ldrb	r3, [r3, #3]
 800815c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	e018      	b.n	8008196 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008184:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800818a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	78db      	ldrb	r3, [r3, #3]
 8008190:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	22ca      	movs	r2, #202	; 0xca
 800819c:	625a      	str	r2, [r3, #36]	; 0x24
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2253      	movs	r2, #83	; 0x53
 80081a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fa76 	bl	8008698 <RTC_EnterInitMode>
 80081ac:	4603      	mov	r3, r0
 80081ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80081b0:	7cfb      	ldrb	r3, [r7, #19]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d120      	bne.n	80081f8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80081c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80081c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6899      	ldr	r1, [r3, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fa89 	bl	8008706 <RTC_ExitInitMode>
 80081f4:	4603      	mov	r3, r0
 80081f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80081f8:	7cfb      	ldrb	r3, [r7, #19]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	22ff      	movs	r2, #255	; 0xff
 800820a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	771a      	strb	r2, [r3, #28]

  return status;
 8008212:	7cfb      	ldrb	r3, [r7, #19]
}
 8008214:	4618      	mov	r0, r3
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	bd90      	pop	{r4, r7, pc}

0800821c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	7f1b      	ldrb	r3, [r3, #28]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_RTC_SetDate+0x1c>
 8008234:	2302      	movs	r3, #2
 8008236:	e071      	b.n	800831c <HAL_RTC_SetDate+0x100>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2202      	movs	r2, #2
 8008242:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10e      	bne.n	8008268 <HAL_RTC_SetDate+0x4c>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	d008      	beq.n	8008268 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	f023 0310 	bic.w	r3, r3, #16
 800825e:	b2db      	uxtb	r3, r3
 8008260:	330a      	adds	r3, #10
 8008262:	b2da      	uxtb	r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11c      	bne.n	80082a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	78db      	ldrb	r3, [r3, #3]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fa6c 	bl	8008750 <RTC_ByteToBcd2>
 8008278:	4603      	mov	r3, r0
 800827a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fa65 	bl	8008750 <RTC_ByteToBcd2>
 8008286:	4603      	mov	r3, r0
 8008288:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800828a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	789b      	ldrb	r3, [r3, #2]
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fa5d 	bl	8008750 <RTC_ByteToBcd2>
 8008296:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008298:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	e00e      	b.n	80082c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80082b4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80082ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	22ca      	movs	r2, #202	; 0xca
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2253      	movs	r2, #83	; 0x53
 80082d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f9de 	bl	8008698 <RTC_EnterInitMode>
 80082dc:	4603      	mov	r3, r0
 80082de:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80082e0:	7cfb      	ldrb	r3, [r7, #19]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10c      	bne.n	8008300 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 fa05 	bl	8008706 <RTC_ExitInitMode>
 80082fc:	4603      	mov	r3, r0
 80082fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008300:	7cfb      	ldrb	r3, [r7, #19]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	22ff      	movs	r2, #255	; 0xff
 8008312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	771a      	strb	r2, [r3, #28]

  return status;
 800831a:	7cfb      	ldrb	r3, [r7, #19]
}
 800831c:	4618      	mov	r0, r3
 800831e:	371c      	adds	r7, #28
 8008320:	46bd      	mov	sp, r7
 8008322:	bd90      	pop	{r4, r7, pc}

08008324 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b089      	sub	sp, #36	; 0x24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008330:	4b9a      	ldr	r3, [pc, #616]	; (800859c <HAL_RTC_SetAlarm_IT+0x278>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a9a      	ldr	r2, [pc, #616]	; (80085a0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	0adb      	lsrs	r3, r3, #11
 800833c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008340:	fb02 f303 	mul.w	r3, r2, r3
 8008344:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	7f1b      	ldrb	r3, [r3, #28]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_RTC_SetAlarm_IT+0x36>
 8008356:	2302      	movs	r3, #2
 8008358:	e11c      	b.n	8008594 <HAL_RTC_SetAlarm_IT+0x270>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2202      	movs	r2, #2
 8008364:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d137      	bne.n	80083dc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f9e3 	bl	8008750 <RTC_ByteToBcd2>
 800838a:	4603      	mov	r3, r0
 800838c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f9dc 	bl	8008750 <RTC_ByteToBcd2>
 8008398:	4603      	mov	r3, r0
 800839a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800839c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	789b      	ldrb	r3, [r3, #2]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f9d4 	bl	8008750 <RTC_ByteToBcd2>
 80083a8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80083aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	78db      	ldrb	r3, [r3, #3]
 80083b2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80083b4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 f9c6 	bl	8008750 <RTC_ByteToBcd2>
 80083c4:	4603      	mov	r3, r0
 80083c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80083c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80083d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	e023      	b.n	8008424 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80083fc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008402:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	78db      	ldrb	r3, [r3, #3]
 8008408:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800840a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008412:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008414:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800841a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008420:	4313      	orrs	r3, r2
 8008422:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800842c:	4313      	orrs	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	22ca      	movs	r2, #202	; 0xca
 8008436:	625a      	str	r2, [r3, #36]	; 0x24
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2253      	movs	r2, #83	; 0x53
 800843e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008448:	d141      	bne.n	80084ce <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008458:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800846a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	1e5a      	subs	r2, r3, #1
 8008470:	617a      	str	r2, [r7, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	22ff      	movs	r2, #255	; 0xff
 800847c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2203      	movs	r2, #3
 8008482:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e082      	b.n	8008594 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0e7      	beq.n	800846c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	e04b      	b.n	8008566 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80084dc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 80084ee:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80084f0:	4b2a      	ldr	r3, [pc, #168]	; (800859c <HAL_RTC_SetAlarm_IT+0x278>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a2a      	ldr	r2, [pc, #168]	; (80085a0 <HAL_RTC_SetAlarm_IT+0x27c>)
 80084f6:	fba2 2303 	umull	r2, r3, r2, r3
 80084fa:	0adb      	lsrs	r3, r3, #11
 80084fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008500:	fb02 f303 	mul.w	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1e5a      	subs	r2, r3, #1
 800850a:	617a      	str	r2, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10b      	bne.n	8008528 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	22ff      	movs	r2, #255	; 0xff
 8008516:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2203      	movs	r2, #3
 800851c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e035      	b.n	8008594 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0e7      	beq.n	8008506 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008554:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008564:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <HAL_RTC_SetAlarm_IT+0x280>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a0e      	ldr	r2, [pc, #56]	; (80085a4 <HAL_RTC_SetAlarm_IT+0x280>)
 800856c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008570:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <HAL_RTC_SetAlarm_IT+0x280>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	4a0b      	ldr	r2, [pc, #44]	; (80085a4 <HAL_RTC_SetAlarm_IT+0x280>)
 8008578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	22ff      	movs	r2, #255	; 0xff
 8008584:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3724      	adds	r7, #36	; 0x24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd90      	pop	{r4, r7, pc}
 800859c:	20000000 	.word	0x20000000
 80085a0:	10624dd3 	.word	0x10624dd3
 80085a4:	40013c00 	.word	0x40013c00

080085a8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d012      	beq.n	80085e4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f831 	bl	8008634 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80085e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d012      	beq.n	8008618 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f8c2 	bl	800878a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	b2da      	uxtb	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008616:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008618:	4b05      	ldr	r3, [pc, #20]	; (8008630 <HAL_RTC_AlarmIRQHandler+0x88>)
 800861a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800861e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	775a      	strb	r2, [r3, #29]
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40013c00 	.word	0x40013c00

08008634 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008662:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008664:	f7fb f886 	bl	8003774 <HAL_GetTick>
 8008668:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800866a:	e009      	b.n	8008680 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800866c:	f7fb f882 	bl	8003774 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800867a:	d901      	bls.n	8008680 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e007      	b.n	8008690 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0ee      	beq.n	800866c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d122      	bne.n	80086fc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086c6:	f7fb f855 	bl	8003774 <HAL_GetTick>
 80086ca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80086cc:	e00c      	b.n	80086e8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086ce:	f7fb f851 	bl	8003774 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086dc:	d904      	bls.n	80086e8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2204      	movs	r2, #4
 80086e2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d102      	bne.n	80086fc <RTC_EnterInitMode+0x64>
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d1e8      	bne.n	80086ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008720:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ff89 	bl	8008648 <HAL_RTC_WaitForSynchro>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2204      	movs	r2, #4
 8008740:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800875e:	e005      	b.n	800876c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	3301      	adds	r3, #1
 8008764:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	3b0a      	subs	r3, #10
 800876a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	2b09      	cmp	r3, #9
 8008770:	d8f6      	bhi.n	8008760 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	b2da      	uxtb	r2, r3
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	4313      	orrs	r3, r2
 800877c:	b2db      	uxtb	r3, r3
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e022      	b.n	80087f6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fa fb9e 	bl	8002f04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2203      	movs	r2, #3
 80087cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f815 	bl	8008800 <HAL_SD_InitCard>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e00a      	b.n	80087f6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008800:	b5b0      	push	{r4, r5, r7, lr}
 8008802:	b08e      	sub	sp, #56	; 0x38
 8008804:	af04      	add	r7, sp, #16
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008808:	2300      	movs	r3, #0
 800880a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008818:	2300      	movs	r3, #0
 800881a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800881c:	2376      	movs	r3, #118	; 0x76
 800881e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681d      	ldr	r5, [r3, #0]
 8008824:	466c      	mov	r4, sp
 8008826:	f107 0314 	add.w	r3, r7, #20
 800882a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800882e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008838:	4628      	mov	r0, r5
 800883a:	f002 fb6d 	bl	800af18 <SDIO_Init>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e04f      	b.n	80088f0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008850:	4b29      	ldr	r3, [pc, #164]	; (80088f8 <HAL_SD_InitCard+0xf8>)
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f002 fba5 	bl	800afaa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <HAL_SD_InitCard+0xf8>)
 8008862:	2201      	movs	r2, #1
 8008864:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008866:	2002      	movs	r0, #2
 8008868:	f7fa ff90 	bl	800378c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fe69 	bl	8009544 <SD_PowerON>
 8008872:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e02e      	b.n	80088f0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fd88 	bl	80093a8 <SD_InitCard>
 8008898:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e01b      	b.n	80088f0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088c0:	4618      	mov	r0, r3
 80088c2:	f002 fc04 	bl	800b0ce <SDMMC_CmdBlockLength>
 80088c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00f      	beq.n	80088ee <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <HAL_SD_InitCard+0xfc>)
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e000      	b.n	80088f0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3728      	adds	r7, #40	; 0x28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bdb0      	pop	{r4, r5, r7, pc}
 80088f8:	422580a0 	.word	0x422580a0
 80088fc:	004005ff 	.word	0x004005ff

08008900 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b092      	sub	sp, #72	; 0x48
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800890e:	f7fa ff31 	bl	8003774 <HAL_GetTick>
 8008912:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d107      	bne.n	8008932 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e1bd      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b01      	cmp	r3, #1
 800893c:	f040 81b0 	bne.w	8008ca0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	441a      	add	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	429a      	cmp	r2, r3
 8008952:	d907      	bls.n	8008964 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e1a4      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2203      	movs	r2, #3
 8008968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2200      	movs	r2, #0
 8008972:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008978:	2b01      	cmp	r3, #1
 800897a:	d002      	beq.n	8008982 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	025b      	lsls	r3, r3, #9
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008982:	f04f 33ff 	mov.w	r3, #4294967295
 8008986:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	025b      	lsls	r3, r3, #9
 800898c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800898e:	2390      	movs	r3, #144	; 0x90
 8008990:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008992:	2302      	movs	r3, #2
 8008994:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008996:	2300      	movs	r3, #0
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800899a:	2301      	movs	r3, #1
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f107 0214 	add.w	r2, r7, #20
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fb64 	bl	800b076 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d90a      	bls.n	80089ca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2202      	movs	r2, #2
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 fbc8 	bl	800b156 <SDMMC_CmdReadMultiBlock>
 80089c6:	6478      	str	r0, [r7, #68]	; 0x44
 80089c8:	e009      	b.n	80089de <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089d6:	4618      	mov	r0, r3
 80089d8:	f002 fb9b 	bl	800b112 <SDMMC_CmdReadSingleBlock>
 80089dc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d012      	beq.n	8008a0a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a7a      	ldr	r2, [pc, #488]	; (8008bd4 <HAL_SD_ReadBlocks+0x2d4>)
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f2:	431a      	orrs	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e151      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008a0e:	e061      	b.n	8008ad4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d03c      	beq.n	8008a98 <HAL_SD_ReadBlocks+0x198>
 8008a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d039      	beq.n	8008a98 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008a24:	2300      	movs	r3, #0
 8008a26:	643b      	str	r3, [r7, #64]	; 0x40
 8008a28:	e033      	b.n	8008a92 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 fa9d 	bl	800af6e <SDIO_ReadFIFO>
 8008a34:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	3301      	adds	r3, #1
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a46:	3b01      	subs	r3, #1
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	3301      	adds	r3, #1
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	0c1b      	lsrs	r3, r3, #16
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a72:	3b01      	subs	r3, #1
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	0e1b      	lsrs	r3, r3, #24
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a82:	3301      	adds	r3, #1
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8e:	3301      	adds	r3, #1
 8008a90:	643b      	str	r3, [r7, #64]	; 0x40
 8008a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a94:	2b07      	cmp	r3, #7
 8008a96:	d9c8      	bls.n	8008a2a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a98:	f7fa fe6c 	bl	8003774 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d902      	bls.n	8008aae <HAL_SD_ReadBlocks+0x1ae>
 8008aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d112      	bne.n	8008ad4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a48      	ldr	r2, [pc, #288]	; (8008bd4 <HAL_SD_ReadBlocks+0x2d4>)
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e0ec      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d096      	beq.n	8008a10 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d022      	beq.n	8008b36 <HAL_SD_ReadBlocks+0x236>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d91f      	bls.n	8008b36 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d01b      	beq.n	8008b36 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f002 fb8e 	bl	800b224 <SDMMC_CmdStopTransfer>
 8008b08:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d012      	beq.n	8008b36 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a2f      	ldr	r2, [pc, #188]	; (8008bd4 <HAL_SD_ReadBlocks+0x2d4>)
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e0bb      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d012      	beq.n	8008b6a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a22      	ldr	r2, [pc, #136]	; (8008bd4 <HAL_SD_ReadBlocks+0x2d4>)
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	f043 0208 	orr.w	r2, r3, #8
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0a1      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d012      	beq.n	8008b9e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a15      	ldr	r2, [pc, #84]	; (8008bd4 <HAL_SD_ReadBlocks+0x2d4>)
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	f043 0202 	orr.w	r2, r3, #2
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e087      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d064      	beq.n	8008c76 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <HAL_SD_ReadBlocks+0x2d4>)
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	f043 0220 	orr.w	r2, r3, #32
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e06d      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
 8008bd2:	bf00      	nop
 8008bd4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f002 f9c6 	bl	800af6e <SDIO_ReadFIFO>
 8008be2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	3301      	adds	r3, #1
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c04:	3301      	adds	r3, #1
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	0c1b      	lsrs	r3, r3, #16
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c20:	3b01      	subs	r3, #1
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	0e1b      	lsrs	r3, r3, #24
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c30:	3301      	adds	r3, #1
 8008c32:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c36:	3b01      	subs	r3, #1
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008c3a:	f7fa fd9b 	bl	8003774 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d902      	bls.n	8008c50 <HAL_SD_ReadBlocks+0x350>
 8008c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <HAL_SD_ReadBlocks+0x3b8>)
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e01b      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <HAL_SD_ReadBlocks+0x38a>
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1a6      	bne.n	8008bd8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e006      	b.n	8008cae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
  }
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3748      	adds	r7, #72	; 0x48
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	004005ff 	.word	0x004005ff

08008cbc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b092      	sub	sp, #72	; 0x48
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cca:	f7fa fd53 	bl	8003774 <HAL_GetTick>
 8008cce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d107      	bne.n	8008cee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e165      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	f040 8158 	bne.w	8008fac <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	441a      	add	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d907      	bls.n	8008d20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e14c      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2203      	movs	r2, #3
 8008d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d002      	beq.n	8008d3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	025b      	lsls	r3, r3, #9
 8008d3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	025b      	lsls	r3, r3, #9
 8008d48:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008d4a:	2390      	movs	r3, #144	; 0x90
 8008d4c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008d56:	2301      	movs	r3, #1
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f107 0218 	add.w	r2, r7, #24
 8008d62:	4611      	mov	r1, r2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 f986 	bl	800b076 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d90a      	bls.n	8008d86 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f002 fa2e 	bl	800b1de <SDMMC_CmdWriteMultiBlock>
 8008d82:	6478      	str	r0, [r7, #68]	; 0x44
 8008d84:	e009      	b.n	8008d9a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 fa01 	bl	800b19a <SDMMC_CmdWriteSingleBlock>
 8008d98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d012      	beq.n	8008dc6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a87      	ldr	r2, [pc, #540]	; (8008fc4 <HAL_SD_WriteBlocks+0x308>)
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dae:	431a      	orrs	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e0f9      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008dca:	e065      	b.n	8008e98 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d040      	beq.n	8008e5c <HAL_SD_WriteBlocks+0x1a0>
 8008dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d03d      	beq.n	8008e5c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008de0:	2300      	movs	r3, #0
 8008de2:	643b      	str	r3, [r7, #64]	; 0x40
 8008de4:	e037      	b.n	8008e56 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	3301      	adds	r3, #1
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	3b01      	subs	r3, #1
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	021a      	lsls	r2, r3, #8
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e06:	3301      	adds	r3, #1
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	041a      	lsls	r2, r3, #16
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	3301      	adds	r3, #1
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e24:	3b01      	subs	r3, #1
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	061a      	lsls	r2, r3, #24
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	3301      	adds	r3, #1
 8008e38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f107 0214 	add.w	r2, r7, #20
 8008e48:	4611      	mov	r1, r2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f002 f89c 	bl	800af88 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e52:	3301      	adds	r3, #1
 8008e54:	643b      	str	r3, [r7, #64]	; 0x40
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	2b07      	cmp	r3, #7
 8008e5a:	d9c4      	bls.n	8008de6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e5c:	f7fa fc8a 	bl	8003774 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d902      	bls.n	8008e72 <HAL_SD_WriteBlocks+0x1b6>
 8008e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d112      	bne.n	8008e98 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a53      	ldr	r2, [pc, #332]	; (8008fc4 <HAL_SD_WriteBlocks+0x308>)
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e090      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d092      	beq.n	8008dcc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d022      	beq.n	8008efa <HAL_SD_WriteBlocks+0x23e>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d91f      	bls.n	8008efa <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d01b      	beq.n	8008efa <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 f9ac 	bl	800b224 <SDMMC_CmdStopTransfer>
 8008ecc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d012      	beq.n	8008efa <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a3a      	ldr	r2, [pc, #232]	; (8008fc4 <HAL_SD_WriteBlocks+0x308>)
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e05f      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d012      	beq.n	8008f2e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a2d      	ldr	r2, [pc, #180]	; (8008fc4 <HAL_SD_WriteBlocks+0x308>)
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	f043 0208 	orr.w	r2, r3, #8
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e045      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d012      	beq.n	8008f62 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a20      	ldr	r2, [pc, #128]	; (8008fc4 <HAL_SD_WriteBlocks+0x308>)
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	f043 0202 	orr.w	r2, r3, #2
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e02b      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d012      	beq.n	8008f96 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <HAL_SD_WriteBlocks+0x308>)
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	f043 0210 	orr.w	r2, r3, #16
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e011      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e006      	b.n	8008fba <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
  }
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3748      	adds	r7, #72	; 0x48
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	004005ff 	.word	0x004005ff

08008fc8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd6:	0f9b      	lsrs	r3, r3, #30
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe2:	0e9b      	lsrs	r3, r3, #26
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff4:	0e1b      	lsrs	r3, r3, #24
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	b2da      	uxtb	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009012:	0a1b      	lsrs	r3, r3, #8
 8009014:	b2da      	uxtb	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800901e:	b2da      	uxtb	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009028:	0d1b      	lsrs	r3, r3, #20
 800902a:	b29a      	uxth	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	b2da      	uxtb	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009046:	0bdb      	lsrs	r3, r3, #15
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009058:	0b9b      	lsrs	r3, r3, #14
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906a:	0b5b      	lsrs	r3, r3, #13
 800906c:	b2db      	uxtb	r3, r3
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	b2da      	uxtb	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800907c:	0b1b      	lsrs	r3, r3, #12
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2200      	movs	r2, #0
 800908e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009094:	2b00      	cmp	r3, #0
 8009096:	d163      	bne.n	8009160 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800909c:	009a      	lsls	r2, r3, #2
 800909e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090a2:	4013      	ands	r3, r2
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80090a8:	0f92      	lsrs	r2, r2, #30
 80090aa:	431a      	orrs	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b4:	0edb      	lsrs	r3, r3, #27
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c6:	0e1b      	lsrs	r3, r3, #24
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d8:	0d5b      	lsrs	r3, r3, #21
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ea:	0c9b      	lsrs	r3, r3, #18
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	0bdb      	lsrs	r3, r3, #15
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	b2da      	uxtb	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	7e1b      	ldrb	r3, [r3, #24]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	3302      	adds	r3, #2
 8009120:	2201      	movs	r2, #1
 8009122:	fa02 f303 	lsl.w	r3, r2, r3
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800912a:	fb03 f202 	mul.w	r2, r3, r2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	7a1b      	ldrb	r3, [r3, #8]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	2201      	movs	r2, #1
 800913e:	409a      	lsls	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800914c:	0a52      	lsrs	r2, r2, #9
 800914e:	fb03 f202 	mul.w	r2, r3, r2
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800915c:	661a      	str	r2, [r3, #96]	; 0x60
 800915e:	e031      	b.n	80091c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009164:	2b01      	cmp	r3, #1
 8009166:	d11d      	bne.n	80091a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800916c:	041b      	lsls	r3, r3, #16
 800916e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	431a      	orrs	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	3301      	adds	r3, #1
 8009184:	029a      	lsls	r2, r3, #10
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009198:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	661a      	str	r2, [r3, #96]	; 0x60
 80091a2:	e00f      	b.n	80091c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a58      	ldr	r2, [pc, #352]	; (800930c <HAL_SD_GetCardCSD+0x344>)
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e09d      	b.n	8009300 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c8:	0b9b      	lsrs	r3, r3, #14
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091da:	09db      	lsrs	r3, r3, #7
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fc:	0fdb      	lsrs	r3, r3, #31
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009208:	0f5b      	lsrs	r3, r3, #29
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0303 	and.w	r3, r3, #3
 8009210:	b2da      	uxtb	r2, r3
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	0e9b      	lsrs	r3, r3, #26
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	b2da      	uxtb	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922c:	0d9b      	lsrs	r3, r3, #22
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 030f 	and.w	r3, r3, #15
 8009234:	b2da      	uxtb	r2, r3
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	0d5b      	lsrs	r3, r3, #21
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	b2da      	uxtb	r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	0c1b      	lsrs	r3, r3, #16
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	0bdb      	lsrs	r3, r3, #15
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	b2da      	uxtb	r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	0b9b      	lsrs	r3, r3, #14
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	b2da      	uxtb	r2, r3
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009296:	0b5b      	lsrs	r3, r3, #13
 8009298:	b2db      	uxtb	r3, r3
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092aa:	0b1b      	lsrs	r3, r3, #12
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092be:	0a9b      	lsrs	r3, r3, #10
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e6:	085b      	lsrs	r3, r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	004005ff 	.word	0x004005ff

08009310 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f970 	bl	8009660 <SD_SendStatus>
 8009380:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0a5b      	lsrs	r3, r3, #9
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800939e:	693b      	ldr	r3, [r7, #16]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093a8:	b5b0      	push	{r4, r5, r7, lr}
 80093aa:	b094      	sub	sp, #80	; 0x50
 80093ac:	af04      	add	r7, sp, #16
 80093ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80093b0:	2301      	movs	r3, #1
 80093b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 fe04 	bl	800afc6 <SDIO_GetPowerState>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093c8:	e0b8      	b.n	800953c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d02f      	beq.n	8009432 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f001 ffeb 	bl	800b3b2 <SDMMC_CmdSendCID>
 80093dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80093e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e6:	e0a9      	b.n	800953c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 fe2e 	bl	800b050 <SDIO_GetResponse>
 80093f4:	4602      	mov	r2, r0
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2104      	movs	r1, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fe25 	bl	800b050 <SDIO_GetResponse>
 8009406:	4602      	mov	r2, r0
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2108      	movs	r1, #8
 8009412:	4618      	mov	r0, r3
 8009414:	f001 fe1c 	bl	800b050 <SDIO_GetResponse>
 8009418:	4602      	mov	r2, r0
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	210c      	movs	r1, #12
 8009424:	4618      	mov	r0, r3
 8009426:	f001 fe13 	bl	800b050 <SDIO_GetResponse>
 800942a:	4602      	mov	r2, r0
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009436:	2b03      	cmp	r3, #3
 8009438:	d00d      	beq.n	8009456 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f107 020e 	add.w	r2, r7, #14
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f001 fff1 	bl	800b42c <SDMMC_CmdSetRelAdd>
 800944a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <SD_InitCard+0xae>
    {
      return errorstate;
 8009452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009454:	e072      	b.n	800953c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945a:	2b03      	cmp	r3, #3
 800945c:	d036      	beq.n	80094cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	461a      	mov	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946e:	041b      	lsls	r3, r3, #16
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f001 ffbb 	bl	800b3ee <SDMMC_CmdSendCSD>
 8009478:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009482:	e05b      	b.n	800953c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f001 fde0 	bl	800b050 <SDIO_GetResponse>
 8009490:	4602      	mov	r2, r0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2104      	movs	r1, #4
 800949c:	4618      	mov	r0, r3
 800949e:	f001 fdd7 	bl	800b050 <SDIO_GetResponse>
 80094a2:	4602      	mov	r2, r0
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2108      	movs	r1, #8
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 fdce 	bl	800b050 <SDIO_GetResponse>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	210c      	movs	r1, #12
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fdc5 	bl	800b050 <SDIO_GetResponse>
 80094c6:	4602      	mov	r2, r0
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2104      	movs	r1, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fdbc 	bl	800b050 <SDIO_GetResponse>
 80094d8:	4603      	mov	r3, r0
 80094da:	0d1a      	lsrs	r2, r3, #20
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094e0:	f107 0310 	add.w	r3, r7, #16
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fd6e 	bl	8008fc8 <HAL_SD_GetCardCSD>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094f6:	e021      	b.n	800953c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	2200      	movs	r2, #0
 8009504:	461c      	mov	r4, r3
 8009506:	4615      	mov	r5, r2
 8009508:	4622      	mov	r2, r4
 800950a:	462b      	mov	r3, r5
 800950c:	4608      	mov	r0, r1
 800950e:	f001 feab 	bl	800b268 <SDMMC_CmdSelDesel>
 8009512:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <SD_InitCard+0x176>
  {
    return errorstate;
 800951a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951c:	e00e      	b.n	800953c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681d      	ldr	r5, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	466c      	mov	r4, sp
 8009526:	f103 0210 	add.w	r2, r3, #16
 800952a:	ca07      	ldmia	r2, {r0, r1, r2}
 800952c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009530:	3304      	adds	r3, #4
 8009532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009534:	4628      	mov	r0, r5
 8009536:	f001 fcef 	bl	800af18 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3740      	adds	r7, #64	; 0x40
 8009540:	46bd      	mov	sp, r7
 8009542:	bdb0      	pop	{r4, r5, r7, pc}

08009544 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	2300      	movs	r3, #0
 8009556:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f001 fea6 	bl	800b2ae <SDMMC_CmdGoIdleState>
 8009562:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <SD_PowerON+0x2a>
  {
    return errorstate;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	e072      	b.n	8009654 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f001 feb9 	bl	800b2ea <SDMMC_CmdOperCond>
 8009578:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00d      	beq.n	800959c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fe8f 	bl	800b2ae <SDMMC_CmdGoIdleState>
 8009590:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d004      	beq.n	80095a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	e05b      	b.n	8009654 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d137      	bne.n	800961a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 feb9 	bl	800b328 <SDMMC_CmdAppCommand>
 80095b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d02d      	beq.n	800961a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095c2:	e047      	b.n	8009654 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2100      	movs	r1, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 feac 	bl	800b328 <SDMMC_CmdAppCommand>
 80095d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <SD_PowerON+0x98>
    {
      return errorstate;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	e03b      	b.n	8009654 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	491e      	ldr	r1, [pc, #120]	; (800965c <SD_PowerON+0x118>)
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 fec2 	bl	800b36c <SDMMC_CmdAppOperCommand>
 80095e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095f4:	e02e      	b.n	8009654 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2100      	movs	r1, #0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 fd27 	bl	800b050 <SDIO_GetResponse>
 8009602:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	0fdb      	lsrs	r3, r3, #31
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <SD_PowerON+0xcc>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <SD_PowerON+0xce>
 8009610:	2300      	movs	r3, #0
 8009612:	613b      	str	r3, [r7, #16]

    count++;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	3301      	adds	r3, #1
 8009618:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009620:	4293      	cmp	r3, r2
 8009622:	d802      	bhi.n	800962a <SD_PowerON+0xe6>
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0cc      	beq.n	80095c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009630:	4293      	cmp	r3, r2
 8009632:	d902      	bls.n	800963a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009638:	e00c      	b.n	8009654 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	645a      	str	r2, [r3, #68]	; 0x44
 800964a:	e002      	b.n	8009652 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	c1100000 	.word	0xc1100000

08009660 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009670:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009674:	e018      	b.n	80096a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800967e:	041b      	lsls	r3, r3, #16
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f001 fef3 	bl	800b46e <SDMMC_CmdSendStatus>
 8009688:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	e009      	b.n	80096a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f001 fcd8 	bl	800b050 <SDIO_GetResponse>
 80096a0:	4602      	mov	r2, r0
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e07b      	b.n	80097ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d108      	bne.n	80096dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d2:	d009      	beq.n	80096e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	61da      	str	r2, [r3, #28]
 80096da:	e005      	b.n	80096e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f9 fc9e 	bl	8003044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800971e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	431a      	orrs	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009762:	431a      	orrs	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976c:	ea42 0103 	orr.w	r1, r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	0c1b      	lsrs	r3, r3, #16
 8009786:	f003 0104 	and.w	r1, r3, #4
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	f003 0210 	and.w	r2, r3, #16
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e041      	b.n	8009858 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d106      	bne.n	80097ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7f9 fc73 	bl	80030d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2202      	movs	r2, #2
 80097f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f000 fcd5 	bl	800a1b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b01      	cmp	r3, #1
 8009872:	d001      	beq.n	8009878 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e046      	b.n	8009906 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a23      	ldr	r2, [pc, #140]	; (8009914 <HAL_TIM_Base_Start+0xb4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d022      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009892:	d01d      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a1f      	ldr	r2, [pc, #124]	; (8009918 <HAL_TIM_Base_Start+0xb8>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d018      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1e      	ldr	r2, [pc, #120]	; (800991c <HAL_TIM_Base_Start+0xbc>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d013      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a1c      	ldr	r2, [pc, #112]	; (8009920 <HAL_TIM_Base_Start+0xc0>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00e      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a1b      	ldr	r2, [pc, #108]	; (8009924 <HAL_TIM_Base_Start+0xc4>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d009      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a19      	ldr	r2, [pc, #100]	; (8009928 <HAL_TIM_Base_Start+0xc8>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d004      	beq.n	80098d0 <HAL_TIM_Base_Start+0x70>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a18      	ldr	r2, [pc, #96]	; (800992c <HAL_TIM_Base_Start+0xcc>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d111      	bne.n	80098f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b06      	cmp	r3, #6
 80098e0:	d010      	beq.n	8009904 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f042 0201 	orr.w	r2, r2, #1
 80098f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f2:	e007      	b.n	8009904 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f042 0201 	orr.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	40010000 	.word	0x40010000
 8009918:	40000400 	.word	0x40000400
 800991c:	40000800 	.word	0x40000800
 8009920:	40000c00 	.word	0x40000c00
 8009924:	40010400 	.word	0x40010400
 8009928:	40014000 	.word	0x40014000
 800992c:	40001800 	.word	0x40001800

08009930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e041      	b.n	80099c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f839 	bl	80099ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f000 fc1e 	bl	800a1b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
	...

080099e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <HAL_TIM_PWM_Start+0x24>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	bf14      	ite	ne
 8009a00:	2301      	movne	r3, #1
 8009a02:	2300      	moveq	r3, #0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	e022      	b.n	8009a4e <HAL_TIM_PWM_Start+0x6a>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d109      	bne.n	8009a22 <HAL_TIM_PWM_Start+0x3e>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	bf14      	ite	ne
 8009a1a:	2301      	movne	r3, #1
 8009a1c:	2300      	moveq	r3, #0
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	e015      	b.n	8009a4e <HAL_TIM_PWM_Start+0x6a>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d109      	bne.n	8009a3c <HAL_TIM_PWM_Start+0x58>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	e008      	b.n	8009a4e <HAL_TIM_PWM_Start+0x6a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	bf14      	ite	ne
 8009a48:	2301      	movne	r3, #1
 8009a4a:	2300      	moveq	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e07c      	b.n	8009b50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <HAL_TIM_PWM_Start+0x82>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a64:	e013      	b.n	8009a8e <HAL_TIM_PWM_Start+0xaa>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d104      	bne.n	8009a76 <HAL_TIM_PWM_Start+0x92>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a74:	e00b      	b.n	8009a8e <HAL_TIM_PWM_Start+0xaa>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d104      	bne.n	8009a86 <HAL_TIM_PWM_Start+0xa2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a84:	e003      	b.n	8009a8e <HAL_TIM_PWM_Start+0xaa>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2201      	movs	r2, #1
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fe74 	bl	800a784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a2d      	ldr	r2, [pc, #180]	; (8009b58 <HAL_TIM_PWM_Start+0x174>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d004      	beq.n	8009ab0 <HAL_TIM_PWM_Start+0xcc>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a2c      	ldr	r2, [pc, #176]	; (8009b5c <HAL_TIM_PWM_Start+0x178>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d101      	bne.n	8009ab4 <HAL_TIM_PWM_Start+0xd0>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <HAL_TIM_PWM_Start+0xd2>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d007      	beq.n	8009aca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a22      	ldr	r2, [pc, #136]	; (8009b58 <HAL_TIM_PWM_Start+0x174>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d022      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009adc:	d01d      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a1f      	ldr	r2, [pc, #124]	; (8009b60 <HAL_TIM_PWM_Start+0x17c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d018      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <HAL_TIM_PWM_Start+0x180>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d013      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <HAL_TIM_PWM_Start+0x184>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00e      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a16      	ldr	r2, [pc, #88]	; (8009b5c <HAL_TIM_PWM_Start+0x178>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d009      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a18      	ldr	r2, [pc, #96]	; (8009b6c <HAL_TIM_PWM_Start+0x188>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d004      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x136>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <HAL_TIM_PWM_Start+0x18c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d111      	bne.n	8009b3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b06      	cmp	r3, #6
 8009b2a:	d010      	beq.n	8009b4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3c:	e007      	b.n	8009b4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0201 	orr.w	r2, r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40010000 	.word	0x40010000
 8009b5c:	40010400 	.word	0x40010400
 8009b60:	40000400 	.word	0x40000400
 8009b64:	40000800 	.word	0x40000800
 8009b68:	40000c00 	.word	0x40000c00
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40001800 	.word	0x40001800

08009b74 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e041      	b.n	8009c0c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d106      	bne.n	8009ba2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f839 	bl	8009c14 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f000 fafb 	bl	800a1b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 0208 	bic.w	r2, r2, #8
 8009bc8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d122      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d11b      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f06f 0202 	mvn.w	r2, #2
 8009c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa81 	bl	800a172 <HAL_TIM_IC_CaptureCallback>
 8009c70:	e005      	b.n	8009c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa73 	bl	800a15e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa84 	bl	800a186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d122      	bne.n	8009cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d11b      	bne.n	8009cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f06f 0204 	mvn.w	r2, #4
 8009ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2202      	movs	r2, #2
 8009cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa57 	bl	800a172 <HAL_TIM_IC_CaptureCallback>
 8009cc4:	e005      	b.n	8009cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa49 	bl	800a15e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fa5a 	bl	800a186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f003 0308 	and.w	r3, r3, #8
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d122      	bne.n	8009d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f003 0308 	and.w	r3, r3, #8
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d11b      	bne.n	8009d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f06f 0208 	mvn.w	r2, #8
 8009cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2204      	movs	r2, #4
 8009d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa2d 	bl	800a172 <HAL_TIM_IC_CaptureCallback>
 8009d18:	e005      	b.n	8009d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa1f 	bl	800a15e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fa30 	bl	800a186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b10      	cmp	r3, #16
 8009d38:	d122      	bne.n	8009d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f003 0310 	and.w	r3, r3, #16
 8009d44:	2b10      	cmp	r3, #16
 8009d46:	d11b      	bne.n	8009d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f06f 0210 	mvn.w	r2, #16
 8009d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2208      	movs	r2, #8
 8009d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa03 	bl	800a172 <HAL_TIM_IC_CaptureCallback>
 8009d6c:	e005      	b.n	8009d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9f5 	bl	800a15e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fa06 	bl	800a186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d10e      	bne.n	8009dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d107      	bne.n	8009dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0201 	mvn.w	r2, #1
 8009da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f9cf 	bl	800a14a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db6:	2b80      	cmp	r3, #128	; 0x80
 8009db8:	d10e      	bne.n	8009dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc4:	2b80      	cmp	r3, #128	; 0x80
 8009dc6:	d107      	bne.n	8009dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fdd4 	bl	800a980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d10e      	bne.n	8009e04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	2b40      	cmp	r3, #64	; 0x40
 8009df2:	d107      	bne.n	8009e04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f9cb 	bl	800a19a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d10e      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d107      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f06f 0220 	mvn.w	r2, #32
 8009e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fd9e 	bl	800a96c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e0ae      	b.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b0c      	cmp	r3, #12
 8009e62:	f200 809f 	bhi.w	8009fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009ea1 	.word	0x08009ea1
 8009e70:	08009fa5 	.word	0x08009fa5
 8009e74:	08009fa5 	.word	0x08009fa5
 8009e78:	08009fa5 	.word	0x08009fa5
 8009e7c:	08009ee1 	.word	0x08009ee1
 8009e80:	08009fa5 	.word	0x08009fa5
 8009e84:	08009fa5 	.word	0x08009fa5
 8009e88:	08009fa5 	.word	0x08009fa5
 8009e8c:	08009f23 	.word	0x08009f23
 8009e90:	08009fa5 	.word	0x08009fa5
 8009e94:	08009fa5 	.word	0x08009fa5
 8009e98:	08009fa5 	.word	0x08009fa5
 8009e9c:	08009f63 	.word	0x08009f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fa22 	bl	800a2f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0208 	orr.w	r2, r2, #8
 8009eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0204 	bic.w	r2, r2, #4
 8009eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6999      	ldr	r1, [r3, #24]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	619a      	str	r2, [r3, #24]
      break;
 8009ede:	e064      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fa72 	bl	800a3d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6999      	ldr	r1, [r3, #24]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	619a      	str	r2, [r3, #24]
      break;
 8009f20:	e043      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fac7 	bl	800a4bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69da      	ldr	r2, [r3, #28]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0208 	orr.w	r2, r2, #8
 8009f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0204 	bic.w	r2, r2, #4
 8009f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69d9      	ldr	r1, [r3, #28]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	61da      	str	r2, [r3, #28]
      break;
 8009f60:	e023      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fb1b 	bl	800a5a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69da      	ldr	r2, [r3, #28]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69da      	ldr	r2, [r3, #28]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69d9      	ldr	r1, [r3, #28]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	021a      	lsls	r2, r3, #8
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	61da      	str	r2, [r3, #28]
      break;
 8009fa2:	e002      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e0b4      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x186>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a010:	d03e      	beq.n	800a090 <HAL_TIM_ConfigClockSource+0xd4>
 800a012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a016:	f200 8087 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a01e:	f000 8086 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x172>
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a026:	d87f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a028:	2b70      	cmp	r3, #112	; 0x70
 800a02a:	d01a      	beq.n	800a062 <HAL_TIM_ConfigClockSource+0xa6>
 800a02c:	2b70      	cmp	r3, #112	; 0x70
 800a02e:	d87b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a030:	2b60      	cmp	r3, #96	; 0x60
 800a032:	d050      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x11a>
 800a034:	2b60      	cmp	r3, #96	; 0x60
 800a036:	d877      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a038:	2b50      	cmp	r3, #80	; 0x50
 800a03a:	d03c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0xfa>
 800a03c:	2b50      	cmp	r3, #80	; 0x50
 800a03e:	d873      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	d058      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x13a>
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d86f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a048:	2b30      	cmp	r3, #48	; 0x30
 800a04a:	d064      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a04c:	2b30      	cmp	r3, #48	; 0x30
 800a04e:	d86b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a050:	2b20      	cmp	r3, #32
 800a052:	d060      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d867      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05c      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d05a      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a060:	e062      	b.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6899      	ldr	r1, [r3, #8]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f000 fb67 	bl	800a744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	609a      	str	r2, [r3, #8]
      break;
 800a08e:	e04f      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	6899      	ldr	r1, [r3, #8]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f000 fb50 	bl	800a744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0b2:	609a      	str	r2, [r3, #8]
      break;
 800a0b4:	e03c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 fac4 	bl	800a650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2150      	movs	r1, #80	; 0x50
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fb1d 	bl	800a70e <TIM_ITRx_SetConfig>
      break;
 800a0d4:	e02c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6859      	ldr	r1, [r3, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f000 fae3 	bl	800a6ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2160      	movs	r1, #96	; 0x60
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fb0d 	bl	800a70e <TIM_ITRx_SetConfig>
      break;
 800a0f4:	e01c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	6859      	ldr	r1, [r3, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	461a      	mov	r2, r3
 800a104:	f000 faa4 	bl	800a650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2140      	movs	r1, #64	; 0x40
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fafd 	bl	800a70e <TIM_ITRx_SetConfig>
      break;
 800a114:	e00c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f000 faf4 	bl	800a70e <TIM_ITRx_SetConfig>
      break;
 800a126:	e003      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
      break;
 800a12c:	e000      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a152:	bf00      	nop
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a18e:	bf00      	nop
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a2:	bf00      	nop
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
	...

0800a1b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a40      	ldr	r2, [pc, #256]	; (800a2c4 <TIM_Base_SetConfig+0x114>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d013      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ce:	d00f      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a3d      	ldr	r2, [pc, #244]	; (800a2c8 <TIM_Base_SetConfig+0x118>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00b      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a3c      	ldr	r2, [pc, #240]	; (800a2cc <TIM_Base_SetConfig+0x11c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d007      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a3b      	ldr	r2, [pc, #236]	; (800a2d0 <TIM_Base_SetConfig+0x120>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <TIM_Base_SetConfig+0x40>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a3a      	ldr	r2, [pc, #232]	; (800a2d4 <TIM_Base_SetConfig+0x124>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d108      	bne.n	800a202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a2f      	ldr	r2, [pc, #188]	; (800a2c4 <TIM_Base_SetConfig+0x114>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d02b      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a210:	d027      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a2c      	ldr	r2, [pc, #176]	; (800a2c8 <TIM_Base_SetConfig+0x118>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d023      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a2b      	ldr	r2, [pc, #172]	; (800a2cc <TIM_Base_SetConfig+0x11c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d01f      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a2a      	ldr	r2, [pc, #168]	; (800a2d0 <TIM_Base_SetConfig+0x120>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d01b      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a29      	ldr	r2, [pc, #164]	; (800a2d4 <TIM_Base_SetConfig+0x124>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d017      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a28      	ldr	r2, [pc, #160]	; (800a2d8 <TIM_Base_SetConfig+0x128>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d013      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a27      	ldr	r2, [pc, #156]	; (800a2dc <TIM_Base_SetConfig+0x12c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00f      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a26      	ldr	r2, [pc, #152]	; (800a2e0 <TIM_Base_SetConfig+0x130>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00b      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a25      	ldr	r2, [pc, #148]	; (800a2e4 <TIM_Base_SetConfig+0x134>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d007      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a24      	ldr	r2, [pc, #144]	; (800a2e8 <TIM_Base_SetConfig+0x138>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_Base_SetConfig+0xb2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a23      	ldr	r2, [pc, #140]	; (800a2ec <TIM_Base_SetConfig+0x13c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d108      	bne.n	800a274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	4313      	orrs	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a0a      	ldr	r2, [pc, #40]	; (800a2c4 <TIM_Base_SetConfig+0x114>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d003      	beq.n	800a2a8 <TIM_Base_SetConfig+0xf8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <TIM_Base_SetConfig+0x124>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d103      	bne.n	800a2b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	615a      	str	r2, [r3, #20]
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40000400 	.word	0x40000400
 800a2cc:	40000800 	.word	0x40000800
 800a2d0:	40000c00 	.word	0x40000c00
 800a2d4:	40010400 	.word	0x40010400
 800a2d8:	40014000 	.word	0x40014000
 800a2dc:	40014400 	.word	0x40014400
 800a2e0:	40014800 	.word	0x40014800
 800a2e4:	40001800 	.word	0x40001800
 800a2e8:	40001c00 	.word	0x40001c00
 800a2ec:	40002000 	.word	0x40002000

0800a2f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0303 	bic.w	r3, r3, #3
 800a326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4313      	orrs	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f023 0302 	bic.w	r3, r3, #2
 800a338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a20      	ldr	r2, [pc, #128]	; (800a3c8 <TIM_OC1_SetConfig+0xd8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_OC1_SetConfig+0x64>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a1f      	ldr	r2, [pc, #124]	; (800a3cc <TIM_OC1_SetConfig+0xdc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d10c      	bne.n	800a36e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f023 0308 	bic.w	r3, r3, #8
 800a35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f023 0304 	bic.w	r3, r3, #4
 800a36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <TIM_OC1_SetConfig+0xd8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d003      	beq.n	800a37e <TIM_OC1_SetConfig+0x8e>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a14      	ldr	r2, [pc, #80]	; (800a3cc <TIM_OC1_SetConfig+0xdc>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d111      	bne.n	800a3a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	621a      	str	r2, [r3, #32]
}
 800a3bc:	bf00      	nop
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40010400 	.word	0x40010400

0800a3d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f023 0210 	bic.w	r2, r3, #16
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f023 0320 	bic.w	r3, r3, #32
 800a41a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	011b      	lsls	r3, r3, #4
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	4313      	orrs	r3, r2
 800a426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a22      	ldr	r2, [pc, #136]	; (800a4b4 <TIM_OC2_SetConfig+0xe4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d003      	beq.n	800a438 <TIM_OC2_SetConfig+0x68>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a21      	ldr	r2, [pc, #132]	; (800a4b8 <TIM_OC2_SetConfig+0xe8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d10d      	bne.n	800a454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a43e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	011b      	lsls	r3, r3, #4
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a17      	ldr	r2, [pc, #92]	; (800a4b4 <TIM_OC2_SetConfig+0xe4>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d003      	beq.n	800a464 <TIM_OC2_SetConfig+0x94>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a16      	ldr	r2, [pc, #88]	; (800a4b8 <TIM_OC2_SetConfig+0xe8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d113      	bne.n	800a48c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a46a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	4313      	orrs	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	621a      	str	r2, [r3, #32]
}
 800a4a6:	bf00      	nop
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	40010000 	.word	0x40010000
 800a4b8:	40010400 	.word	0x40010400

0800a4bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a21      	ldr	r2, [pc, #132]	; (800a59c <TIM_OC3_SetConfig+0xe0>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d003      	beq.n	800a522 <TIM_OC3_SetConfig+0x66>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a20      	ldr	r2, [pc, #128]	; (800a5a0 <TIM_OC3_SetConfig+0xe4>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d10d      	bne.n	800a53e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a53c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a16      	ldr	r2, [pc, #88]	; (800a59c <TIM_OC3_SetConfig+0xe0>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d003      	beq.n	800a54e <TIM_OC3_SetConfig+0x92>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a15      	ldr	r2, [pc, #84]	; (800a5a0 <TIM_OC3_SetConfig+0xe4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d113      	bne.n	800a576 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4313      	orrs	r3, r2
 800a574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	621a      	str	r2, [r3, #32]
}
 800a590:	bf00      	nop
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	40010000 	.word	0x40010000
 800a5a0:	40010400 	.word	0x40010400

0800a5a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	021b      	lsls	r3, r3, #8
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	031b      	lsls	r3, r3, #12
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a12      	ldr	r2, [pc, #72]	; (800a648 <TIM_OC4_SetConfig+0xa4>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d003      	beq.n	800a60c <TIM_OC4_SetConfig+0x68>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a11      	ldr	r2, [pc, #68]	; (800a64c <TIM_OC4_SetConfig+0xa8>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d109      	bne.n	800a620 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	019b      	lsls	r3, r3, #6
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	621a      	str	r2, [r3, #32]
}
 800a63a:	bf00      	nop
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	40010000 	.word	0x40010000
 800a64c:	40010400 	.word	0x40010400

0800a650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	f023 0201 	bic.w	r2, r3, #1
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a67a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	4313      	orrs	r3, r2
 800a684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f023 030a 	bic.w	r3, r3, #10
 800a68c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	621a      	str	r2, [r3, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b087      	sub	sp, #28
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	f023 0210 	bic.w	r2, r3, #16
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	031b      	lsls	r3, r3, #12
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	621a      	str	r2, [r3, #32]
}
 800a702:	bf00      	nop
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	f043 0307 	orr.w	r3, r3, #7
 800a730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	609a      	str	r2, [r3, #8]
}
 800a738:	bf00      	nop
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a744:	b480      	push	{r7}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a75e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	021a      	lsls	r2, r3, #8
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	431a      	orrs	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	4313      	orrs	r3, r2
 800a770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	609a      	str	r2, [r3, #8]
}
 800a778:	bf00      	nop
 800a77a:	371c      	adds	r7, #28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a784:	b480      	push	{r7}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f003 031f 	and.w	r3, r3, #31
 800a796:	2201      	movs	r2, #1
 800a798:	fa02 f303 	lsl.w	r3, r2, r3
 800a79c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	43db      	mvns	r3, r3
 800a7a6:	401a      	ands	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a1a      	ldr	r2, [r3, #32]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f003 031f 	and.w	r3, r3, #31
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	621a      	str	r2, [r3, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e05a      	b.n	800a89e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a80e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a21      	ldr	r2, [pc, #132]	; (800a8ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d022      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a834:	d01d      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a1d      	ldr	r2, [pc, #116]	; (800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d018      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1b      	ldr	r2, [pc, #108]	; (800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d013      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1a      	ldr	r2, [pc, #104]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00e      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a18      	ldr	r2, [pc, #96]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d009      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d004      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a15      	ldr	r2, [pc, #84]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d10c      	bne.n	800a88c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4313      	orrs	r3, r2
 800a882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	40010000 	.word	0x40010000
 800a8b0:	40000400 	.word	0x40000400
 800a8b4:	40000800 	.word	0x40000800
 800a8b8:	40000c00 	.word	0x40000c00
 800a8bc:	40010400 	.word	0x40010400
 800a8c0:	40014000 	.word	0x40014000
 800a8c4:	40001800 	.word	0x40001800

0800a8c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d101      	bne.n	800a8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e03d      	b.n	800a960 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	4313      	orrs	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	4313      	orrs	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e03f      	b.n	800aa26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7f8 fc58 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2224      	movs	r2, #36	; 0x24
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68da      	ldr	r2, [r3, #12]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f829 	bl	800aa30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	691a      	ldr	r2, [r3, #16]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	695a      	ldr	r2, [r3, #20]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa34:	b0c0      	sub	sp, #256	; 0x100
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa4c:	68d9      	ldr	r1, [r3, #12]
 800aa4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	ea40 0301 	orr.w	r3, r0, r1
 800aa58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	431a      	orrs	r2, r3
 800aa68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aa88:	f021 010c 	bic.w	r1, r1, #12
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa96:	430b      	orrs	r3, r1
 800aa98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aaa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaaa:	6999      	ldr	r1, [r3, #24]
 800aaac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	ea40 0301 	orr.w	r3, r0, r1
 800aab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4b8f      	ldr	r3, [pc, #572]	; (800acfc <UART_SetConfig+0x2cc>)
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d005      	beq.n	800aad0 <UART_SetConfig+0xa0>
 800aac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4b8d      	ldr	r3, [pc, #564]	; (800ad00 <UART_SetConfig+0x2d0>)
 800aacc:	429a      	cmp	r2, r3
 800aace:	d104      	bne.n	800aada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aad0:	f7fc fccc 	bl	800746c <HAL_RCC_GetPCLK2Freq>
 800aad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aad8:	e003      	b.n	800aae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aada:	f7fc fcb3 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 800aade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaec:	f040 810c 	bne.w	800ad08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aaf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aafa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aafe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab02:	4622      	mov	r2, r4
 800ab04:	462b      	mov	r3, r5
 800ab06:	1891      	adds	r1, r2, r2
 800ab08:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab0a:	415b      	adcs	r3, r3
 800ab0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab12:	4621      	mov	r1, r4
 800ab14:	eb12 0801 	adds.w	r8, r2, r1
 800ab18:	4629      	mov	r1, r5
 800ab1a:	eb43 0901 	adc.w	r9, r3, r1
 800ab1e:	f04f 0200 	mov.w	r2, #0
 800ab22:	f04f 0300 	mov.w	r3, #0
 800ab26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab32:	4690      	mov	r8, r2
 800ab34:	4699      	mov	r9, r3
 800ab36:	4623      	mov	r3, r4
 800ab38:	eb18 0303 	adds.w	r3, r8, r3
 800ab3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab40:	462b      	mov	r3, r5
 800ab42:	eb49 0303 	adc.w	r3, r9, r3
 800ab46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ab5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ab5e:	460b      	mov	r3, r1
 800ab60:	18db      	adds	r3, r3, r3
 800ab62:	653b      	str	r3, [r7, #80]	; 0x50
 800ab64:	4613      	mov	r3, r2
 800ab66:	eb42 0303 	adc.w	r3, r2, r3
 800ab6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ab6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ab70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab74:	f7f5 ff14 	bl	80009a0 <__aeabi_uldivmod>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4b61      	ldr	r3, [pc, #388]	; (800ad04 <UART_SetConfig+0x2d4>)
 800ab7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab82:	095b      	lsrs	r3, r3, #5
 800ab84:	011c      	lsls	r4, r3, #4
 800ab86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ab94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	1891      	adds	r1, r2, r2
 800ab9e:	64b9      	str	r1, [r7, #72]	; 0x48
 800aba0:	415b      	adcs	r3, r3
 800aba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aba8:	4641      	mov	r1, r8
 800abaa:	eb12 0a01 	adds.w	sl, r2, r1
 800abae:	4649      	mov	r1, r9
 800abb0:	eb43 0b01 	adc.w	fp, r3, r1
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	f04f 0300 	mov.w	r3, #0
 800abbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800abc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800abc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abc8:	4692      	mov	sl, r2
 800abca:	469b      	mov	fp, r3
 800abcc:	4643      	mov	r3, r8
 800abce:	eb1a 0303 	adds.w	r3, sl, r3
 800abd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abd6:	464b      	mov	r3, r9
 800abd8:	eb4b 0303 	adc.w	r3, fp, r3
 800abdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800abf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800abf4:	460b      	mov	r3, r1
 800abf6:	18db      	adds	r3, r3, r3
 800abf8:	643b      	str	r3, [r7, #64]	; 0x40
 800abfa:	4613      	mov	r3, r2
 800abfc:	eb42 0303 	adc.w	r3, r2, r3
 800ac00:	647b      	str	r3, [r7, #68]	; 0x44
 800ac02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac0a:	f7f5 fec9 	bl	80009a0 <__aeabi_uldivmod>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4611      	mov	r1, r2
 800ac14:	4b3b      	ldr	r3, [pc, #236]	; (800ad04 <UART_SetConfig+0x2d4>)
 800ac16:	fba3 2301 	umull	r2, r3, r3, r1
 800ac1a:	095b      	lsrs	r3, r3, #5
 800ac1c:	2264      	movs	r2, #100	; 0x64
 800ac1e:	fb02 f303 	mul.w	r3, r2, r3
 800ac22:	1acb      	subs	r3, r1, r3
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac2a:	4b36      	ldr	r3, [pc, #216]	; (800ad04 <UART_SetConfig+0x2d4>)
 800ac2c:	fba3 2302 	umull	r2, r3, r3, r2
 800ac30:	095b      	lsrs	r3, r3, #5
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac38:	441c      	add	r4, r3
 800ac3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ac48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ac4c:	4642      	mov	r2, r8
 800ac4e:	464b      	mov	r3, r9
 800ac50:	1891      	adds	r1, r2, r2
 800ac52:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac54:	415b      	adcs	r3, r3
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac5c:	4641      	mov	r1, r8
 800ac5e:	1851      	adds	r1, r2, r1
 800ac60:	6339      	str	r1, [r7, #48]	; 0x30
 800ac62:	4649      	mov	r1, r9
 800ac64:	414b      	adcs	r3, r1
 800ac66:	637b      	str	r3, [r7, #52]	; 0x34
 800ac68:	f04f 0200 	mov.w	r2, #0
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ac74:	4659      	mov	r1, fp
 800ac76:	00cb      	lsls	r3, r1, #3
 800ac78:	4651      	mov	r1, sl
 800ac7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac7e:	4651      	mov	r1, sl
 800ac80:	00ca      	lsls	r2, r1, #3
 800ac82:	4610      	mov	r0, r2
 800ac84:	4619      	mov	r1, r3
 800ac86:	4603      	mov	r3, r0
 800ac88:	4642      	mov	r2, r8
 800ac8a:	189b      	adds	r3, r3, r2
 800ac8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac90:	464b      	mov	r3, r9
 800ac92:	460a      	mov	r2, r1
 800ac94:	eb42 0303 	adc.w	r3, r2, r3
 800ac98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800acac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800acb0:	460b      	mov	r3, r1
 800acb2:	18db      	adds	r3, r3, r3
 800acb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800acb6:	4613      	mov	r3, r2
 800acb8:	eb42 0303 	adc.w	r3, r2, r3
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800acc6:	f7f5 fe6b 	bl	80009a0 <__aeabi_uldivmod>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <UART_SetConfig+0x2d4>)
 800acd0:	fba3 1302 	umull	r1, r3, r3, r2
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	2164      	movs	r1, #100	; 0x64
 800acd8:	fb01 f303 	mul.w	r3, r1, r3
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	3332      	adds	r3, #50	; 0x32
 800ace2:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <UART_SetConfig+0x2d4>)
 800ace4:	fba2 2303 	umull	r2, r3, r2, r3
 800ace8:	095b      	lsrs	r3, r3, #5
 800acea:	f003 0207 	and.w	r2, r3, #7
 800acee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4422      	add	r2, r4
 800acf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acf8:	e105      	b.n	800af06 <UART_SetConfig+0x4d6>
 800acfa:	bf00      	nop
 800acfc:	40011000 	.word	0x40011000
 800ad00:	40011400 	.word	0x40011400
 800ad04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad1a:	4642      	mov	r2, r8
 800ad1c:	464b      	mov	r3, r9
 800ad1e:	1891      	adds	r1, r2, r2
 800ad20:	6239      	str	r1, [r7, #32]
 800ad22:	415b      	adcs	r3, r3
 800ad24:	627b      	str	r3, [r7, #36]	; 0x24
 800ad26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad2a:	4641      	mov	r1, r8
 800ad2c:	1854      	adds	r4, r2, r1
 800ad2e:	4649      	mov	r1, r9
 800ad30:	eb43 0501 	adc.w	r5, r3, r1
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	f04f 0300 	mov.w	r3, #0
 800ad3c:	00eb      	lsls	r3, r5, #3
 800ad3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad42:	00e2      	lsls	r2, r4, #3
 800ad44:	4614      	mov	r4, r2
 800ad46:	461d      	mov	r5, r3
 800ad48:	4643      	mov	r3, r8
 800ad4a:	18e3      	adds	r3, r4, r3
 800ad4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad50:	464b      	mov	r3, r9
 800ad52:	eb45 0303 	adc.w	r3, r5, r3
 800ad56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	f04f 0300 	mov.w	r3, #0
 800ad72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ad76:	4629      	mov	r1, r5
 800ad78:	008b      	lsls	r3, r1, #2
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad80:	4621      	mov	r1, r4
 800ad82:	008a      	lsls	r2, r1, #2
 800ad84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ad88:	f7f5 fe0a 	bl	80009a0 <__aeabi_uldivmod>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4b60      	ldr	r3, [pc, #384]	; (800af14 <UART_SetConfig+0x4e4>)
 800ad92:	fba3 2302 	umull	r2, r3, r3, r2
 800ad96:	095b      	lsrs	r3, r3, #5
 800ad98:	011c      	lsls	r4, r3, #4
 800ad9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ada4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ada8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800adac:	4642      	mov	r2, r8
 800adae:	464b      	mov	r3, r9
 800adb0:	1891      	adds	r1, r2, r2
 800adb2:	61b9      	str	r1, [r7, #24]
 800adb4:	415b      	adcs	r3, r3
 800adb6:	61fb      	str	r3, [r7, #28]
 800adb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adbc:	4641      	mov	r1, r8
 800adbe:	1851      	adds	r1, r2, r1
 800adc0:	6139      	str	r1, [r7, #16]
 800adc2:	4649      	mov	r1, r9
 800adc4:	414b      	adcs	r3, r1
 800adc6:	617b      	str	r3, [r7, #20]
 800adc8:	f04f 0200 	mov.w	r2, #0
 800adcc:	f04f 0300 	mov.w	r3, #0
 800add0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800add4:	4659      	mov	r1, fp
 800add6:	00cb      	lsls	r3, r1, #3
 800add8:	4651      	mov	r1, sl
 800adda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adde:	4651      	mov	r1, sl
 800ade0:	00ca      	lsls	r2, r1, #3
 800ade2:	4610      	mov	r0, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	4603      	mov	r3, r0
 800ade8:	4642      	mov	r2, r8
 800adea:	189b      	adds	r3, r3, r2
 800adec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adf0:	464b      	mov	r3, r9
 800adf2:	460a      	mov	r2, r1
 800adf4:	eb42 0303 	adc.w	r3, r2, r3
 800adf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae06:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae14:	4649      	mov	r1, r9
 800ae16:	008b      	lsls	r3, r1, #2
 800ae18:	4641      	mov	r1, r8
 800ae1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae1e:	4641      	mov	r1, r8
 800ae20:	008a      	lsls	r2, r1, #2
 800ae22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae26:	f7f5 fdbb 	bl	80009a0 <__aeabi_uldivmod>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	4b39      	ldr	r3, [pc, #228]	; (800af14 <UART_SetConfig+0x4e4>)
 800ae30:	fba3 1302 	umull	r1, r3, r3, r2
 800ae34:	095b      	lsrs	r3, r3, #5
 800ae36:	2164      	movs	r1, #100	; 0x64
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	011b      	lsls	r3, r3, #4
 800ae40:	3332      	adds	r3, #50	; 0x32
 800ae42:	4a34      	ldr	r2, [pc, #208]	; (800af14 <UART_SetConfig+0x4e4>)
 800ae44:	fba2 2303 	umull	r2, r3, r2, r3
 800ae48:	095b      	lsrs	r3, r3, #5
 800ae4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae4e:	441c      	add	r4, r3
 800ae50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae54:	2200      	movs	r2, #0
 800ae56:	673b      	str	r3, [r7, #112]	; 0x70
 800ae58:	677a      	str	r2, [r7, #116]	; 0x74
 800ae5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ae5e:	4642      	mov	r2, r8
 800ae60:	464b      	mov	r3, r9
 800ae62:	1891      	adds	r1, r2, r2
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	415b      	adcs	r3, r3
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae6e:	4641      	mov	r1, r8
 800ae70:	1851      	adds	r1, r2, r1
 800ae72:	6039      	str	r1, [r7, #0]
 800ae74:	4649      	mov	r1, r9
 800ae76:	414b      	adcs	r3, r1
 800ae78:	607b      	str	r3, [r7, #4]
 800ae7a:	f04f 0200 	mov.w	r2, #0
 800ae7e:	f04f 0300 	mov.w	r3, #0
 800ae82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae86:	4659      	mov	r1, fp
 800ae88:	00cb      	lsls	r3, r1, #3
 800ae8a:	4651      	mov	r1, sl
 800ae8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae90:	4651      	mov	r1, sl
 800ae92:	00ca      	lsls	r2, r1, #3
 800ae94:	4610      	mov	r0, r2
 800ae96:	4619      	mov	r1, r3
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4642      	mov	r2, r8
 800ae9c:	189b      	adds	r3, r3, r2
 800ae9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aea0:	464b      	mov	r3, r9
 800aea2:	460a      	mov	r2, r1
 800aea4:	eb42 0303 	adc.w	r3, r2, r3
 800aea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aeaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	663b      	str	r3, [r7, #96]	; 0x60
 800aeb4:	667a      	str	r2, [r7, #100]	; 0x64
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aec2:	4649      	mov	r1, r9
 800aec4:	008b      	lsls	r3, r1, #2
 800aec6:	4641      	mov	r1, r8
 800aec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aecc:	4641      	mov	r1, r8
 800aece:	008a      	lsls	r2, r1, #2
 800aed0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aed4:	f7f5 fd64 	bl	80009a0 <__aeabi_uldivmod>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <UART_SetConfig+0x4e4>)
 800aede:	fba3 1302 	umull	r1, r3, r3, r2
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	2164      	movs	r1, #100	; 0x64
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	3332      	adds	r3, #50	; 0x32
 800aef0:	4a08      	ldr	r2, [pc, #32]	; (800af14 <UART_SetConfig+0x4e4>)
 800aef2:	fba2 2303 	umull	r2, r3, r2, r3
 800aef6:	095b      	lsrs	r3, r3, #5
 800aef8:	f003 020f 	and.w	r2, r3, #15
 800aefc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4422      	add	r2, r4
 800af04:	609a      	str	r2, [r3, #8]
}
 800af06:	bf00      	nop
 800af08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af0c:	46bd      	mov	sp, r7
 800af0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af12:	bf00      	nop
 800af14:	51eb851f 	.word	0x51eb851f

0800af18 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800af18:	b084      	sub	sp, #16
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	f107 001c 	add.w	r0, r7, #28
 800af26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800af2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800af30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800af32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800af36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800af3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800af3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800af3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800af42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800af52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	431a      	orrs	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	b004      	add	sp, #16
 800af6c:	4770      	bx	lr

0800af6e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2203      	movs	r2, #3
 800afb6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0303 	and.w	r3, r3, #3
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b085      	sub	sp, #20
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b000:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b006:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b00c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	4313      	orrs	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b01c:	f023 030f 	bic.w	r3, r3, #15
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	431a      	orrs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	b2db      	uxtb	r3, r3
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3314      	adds	r3, #20
 800b05e:	461a      	mov	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	4413      	add	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
}  
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b076:	b480      	push	{r7}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b09c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b0a2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b0a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0

}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b088      	sub	sp, #32
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b0dc:	2310      	movs	r3, #16
 800b0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ff74 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fe:	2110      	movs	r1, #16
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f9d7 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b108:	69fb      	ldr	r3, [r7, #28]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b088      	sub	sp, #32
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b120:	2311      	movs	r3, #17
 800b122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b124:	2340      	movs	r3, #64	; 0x40
 800b126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b128:	2300      	movs	r3, #0
 800b12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b130:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b132:	f107 0308 	add.w	r3, r7, #8
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ff52 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b142:	2111      	movs	r1, #17
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f9b5 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14c:	69fb      	ldr	r3, [r7, #28]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3720      	adds	r7, #32
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b088      	sub	sp, #32
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b164:	2312      	movs	r3, #18
 800b166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b176:	f107 0308 	add.w	r3, r7, #8
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ff30 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b182:	f241 3288 	movw	r2, #5000	; 0x1388
 800b186:	2112      	movs	r1, #18
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f993 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b190:	69fb      	ldr	r3, [r7, #28]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b088      	sub	sp, #32
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b1a8:	2318      	movs	r3, #24
 800b1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff ff0e 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	2118      	movs	r1, #24
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f971 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b1ec:	2319      	movs	r3, #25
 800b1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1f0:	2340      	movs	r3, #64	; 0x40
 800b1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1fe:	f107 0308 	add.w	r3, r7, #8
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff feec 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b20a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b20e:	2119      	movs	r1, #25
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f94f 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b218:	69fb      	ldr	r3, [r7, #28]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b230:	230c      	movs	r3, #12
 800b232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b234:	2340      	movs	r3, #64	; 0x40
 800b236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b23c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b242:	f107 0308 	add.w	r3, r7, #8
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff feca 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b24e:	4a05      	ldr	r2, [pc, #20]	; (800b264 <SDMMC_CmdStopTransfer+0x40>)
 800b250:	210c      	movs	r1, #12
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f92e 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b25a:	69fb      	ldr	r3, [r7, #28]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	05f5e100 	.word	0x05f5e100

0800b268 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	; 0x28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b278:	2307      	movs	r3, #7
 800b27a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b27c:	2340      	movs	r3, #64	; 0x40
 800b27e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b280:	2300      	movs	r3, #0
 800b282:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b288:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b28a:	f107 0310 	add.w	r3, r7, #16
 800b28e:	4619      	mov	r1, r3
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fea6 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b296:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29a:	2107      	movs	r1, #7
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f000 f909 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b2a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3728      	adds	r7, #40	; 0x28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b088      	sub	sp, #32
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2cc:	f107 0308 	add.w	r3, r7, #8
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff fe85 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fb23 	bl	800b924 <SDMMC_GetCmdError>
 800b2de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3720      	adds	r7, #32
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b088      	sub	sp, #32
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b2f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b2f8:	2308      	movs	r3, #8
 800b2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2fc:	2340      	movs	r3, #64	; 0x40
 800b2fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b300:	2300      	movs	r3, #0
 800b302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b308:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b30a:	f107 0308 	add.w	r3, r7, #8
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff fe66 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fab6 	bl	800b888 <SDMMC_GetCmdResp7>
 800b31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b31e:	69fb      	ldr	r3, [r7, #28]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3720      	adds	r7, #32
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b336:	2337      	movs	r3, #55	; 0x37
 800b338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b33a:	2340      	movs	r3, #64	; 0x40
 800b33c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b346:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b348:	f107 0308 	add.w	r3, r7, #8
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff fe47 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b354:	f241 3288 	movw	r2, #5000	; 0x1388
 800b358:	2137      	movs	r1, #55	; 0x37
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f8aa 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b362:	69fb      	ldr	r3, [r7, #28]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3720      	adds	r7, #32
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b37c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b382:	2329      	movs	r3, #41	; 0x29
 800b384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b386:	2340      	movs	r3, #64	; 0x40
 800b388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b394:	f107 0308 	add.w	r3, r7, #8
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff fe21 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f9bd 	bl	800b720 <SDMMC_GetCmdResp3>
 800b3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3720      	adds	r7, #32
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b088      	sub	sp, #32
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3be:	2302      	movs	r3, #2
 800b3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b3c2:	23c0      	movs	r3, #192	; 0xc0
 800b3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff fe03 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f957 	bl	800b690 <SDMMC_GetCmdResp2>
 800b3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3720      	adds	r7, #32
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b088      	sub	sp, #32
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b3fc:	2309      	movs	r3, #9
 800b3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b400:	23c0      	movs	r3, #192	; 0xc0
 800b402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b404:	2300      	movs	r3, #0
 800b406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b40c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b40e:	f107 0308 	add.w	r3, r7, #8
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff fde4 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f938 	bl	800b690 <SDMMC_GetCmdResp2>
 800b420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b422:	69fb      	ldr	r3, [r7, #28]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3720      	adds	r7, #32
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b43a:	2303      	movs	r3, #3
 800b43c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b43e:	2340      	movs	r3, #64	; 0x40
 800b440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b44a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b44c:	f107 0308 	add.w	r3, r7, #8
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff fdc5 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	2103      	movs	r1, #3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f99d 	bl	800b79c <SDMMC_GetCmdResp6>
 800b462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b464:	69fb      	ldr	r3, [r7, #28]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b088      	sub	sp, #32
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b47c:	230d      	movs	r3, #13
 800b47e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b480:	2340      	movs	r3, #64	; 0x40
 800b482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b48c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b48e:	f107 0308 	add.w	r3, r7, #8
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff fda4 	bl	800afe2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b49e:	210d      	movs	r1, #13
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f807 	bl	800b4b4 <SDMMC_GetCmdResp1>
 800b4a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4c2:	4b70      	ldr	r3, [pc, #448]	; (800b684 <SDMMC_GetCmdResp1+0x1d0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a70      	ldr	r2, [pc, #448]	; (800b688 <SDMMC_GetCmdResp1+0x1d4>)
 800b4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4cc:	0a5a      	lsrs	r2, r3, #9
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	fb02 f303 	mul.w	r3, r2, r3
 800b4d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	1e5a      	subs	r2, r3, #1
 800b4da:	61fa      	str	r2, [r7, #28]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4e4:	e0c9      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0ef      	beq.n	800b4d6 <SDMMC_GetCmdResp1+0x22>
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1ea      	bne.n	800b4d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2204      	movs	r2, #4
 800b510:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b512:	2304      	movs	r3, #4
 800b514:	e0b1      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2201      	movs	r2, #1
 800b526:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b528:	2301      	movs	r3, #1
 800b52a:	e0a6      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	22c5      	movs	r2, #197	; 0xc5
 800b530:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fd7f 	bl	800b036 <SDIO_GetCommandResponse>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	4293      	cmp	r3, r2
 800b540:	d001      	beq.n	800b546 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b542:	2301      	movs	r3, #1
 800b544:	e099      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b546:	2100      	movs	r1, #0
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f7ff fd81 	bl	800b050 <SDIO_GetResponse>
 800b54e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	4b4e      	ldr	r3, [pc, #312]	; (800b68c <SDMMC_GetCmdResp1+0x1d8>)
 800b554:	4013      	ands	r3, r2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b55a:	2300      	movs	r3, #0
 800b55c:	e08d      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2b00      	cmp	r3, #0
 800b562:	da02      	bge.n	800b56a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b568:	e087      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b574:	2340      	movs	r3, #64	; 0x40
 800b576:	e080      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b582:	2380      	movs	r3, #128	; 0x80
 800b584:	e079      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b590:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b594:	e071      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5a4:	e069      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5b4:	e061      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b5c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5c4:	e059      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d4:	e051      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5e4:	e049      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b5f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5f4:	e041      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b604:	e039      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b614:	e031      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b620:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b624:	e029      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b630:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b634:	e021      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b644:	e019      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b650:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b654:	e011      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b664:	e009      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f003 0308 	and.w	r3, r3, #8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b670:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b674:	e001      	b.n	800b67a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3720      	adds	r7, #32
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000000 	.word	0x20000000
 800b688:	10624dd3 	.word	0x10624dd3
 800b68c:	fdffe008 	.word	0xfdffe008

0800b690 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b698:	4b1f      	ldr	r3, [pc, #124]	; (800b718 <SDMMC_GetCmdResp2+0x88>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a1f      	ldr	r2, [pc, #124]	; (800b71c <SDMMC_GetCmdResp2+0x8c>)
 800b69e:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a2:	0a5b      	lsrs	r3, r3, #9
 800b6a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1e5a      	subs	r2, r3, #1
 800b6b2:	60fa      	str	r2, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6bc:	e026      	b.n	800b70c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0ef      	beq.n	800b6ae <SDMMC_GetCmdResp2+0x1e>
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1ea      	bne.n	800b6ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2204      	movs	r2, #4
 800b6e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	e00e      	b.n	800b70c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d004      	beq.n	800b704 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b700:	2301      	movs	r3, #1
 800b702:	e003      	b.n	800b70c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	22c5      	movs	r2, #197	; 0xc5
 800b708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	20000000 	.word	0x20000000
 800b71c:	10624dd3 	.word	0x10624dd3

0800b720 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b728:	4b1a      	ldr	r3, [pc, #104]	; (800b794 <SDMMC_GetCmdResp3+0x74>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a1a      	ldr	r2, [pc, #104]	; (800b798 <SDMMC_GetCmdResp3+0x78>)
 800b72e:	fba2 2303 	umull	r2, r3, r2, r3
 800b732:	0a5b      	lsrs	r3, r3, #9
 800b734:	f241 3288 	movw	r2, #5000	; 0x1388
 800b738:	fb02 f303 	mul.w	r3, r2, r3
 800b73c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	1e5a      	subs	r2, r3, #1
 800b742:	60fa      	str	r2, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b748:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b74c:	e01b      	b.n	800b786 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0ef      	beq.n	800b73e <SDMMC_GetCmdResp3+0x1e>
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1ea      	bne.n	800b73e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d004      	beq.n	800b77e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2204      	movs	r2, #4
 800b778:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b77a:	2304      	movs	r3, #4
 800b77c:	e003      	b.n	800b786 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	22c5      	movs	r2, #197	; 0xc5
 800b782:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20000000 	.word	0x20000000
 800b798:	10624dd3 	.word	0x10624dd3

0800b79c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b088      	sub	sp, #32
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7aa:	4b35      	ldr	r3, [pc, #212]	; (800b880 <SDMMC_GetCmdResp6+0xe4>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a35      	ldr	r2, [pc, #212]	; (800b884 <SDMMC_GetCmdResp6+0xe8>)
 800b7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b4:	0a5b      	lsrs	r3, r3, #9
 800b7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ba:	fb02 f303 	mul.w	r3, r2, r3
 800b7be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	1e5a      	subs	r2, r3, #1
 800b7c4:	61fa      	str	r2, [r7, #28]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d102      	bne.n	800b7d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7ce:	e052      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0ef      	beq.n	800b7c0 <SDMMC_GetCmdResp6+0x24>
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1ea      	bne.n	800b7c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ee:	f003 0304 	and.w	r3, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d004      	beq.n	800b800 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2204      	movs	r2, #4
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	e03a      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2201      	movs	r2, #1
 800b810:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b812:	2301      	movs	r3, #1
 800b814:	e02f      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff fc0d 	bl	800b036 <SDIO_GetCommandResponse>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	7afb      	ldrb	r3, [r7, #11]
 800b822:	4293      	cmp	r3, r2
 800b824:	d001      	beq.n	800b82a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b826:	2301      	movs	r3, #1
 800b828:	e025      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	22c5      	movs	r2, #197	; 0xc5
 800b82e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b830:	2100      	movs	r1, #0
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7ff fc0c 	bl	800b050 <SDIO_GetResponse>
 800b838:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d106      	bne.n	800b852 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	0c1b      	lsrs	r3, r3, #16
 800b848:	b29a      	uxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b84e:	2300      	movs	r3, #0
 800b850:	e011      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b85c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b860:	e009      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b86c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b870:	e001      	b.n	800b876 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b876:	4618      	mov	r0, r3
 800b878:	3720      	adds	r7, #32
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	20000000 	.word	0x20000000
 800b884:	10624dd3 	.word	0x10624dd3

0800b888 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b890:	4b22      	ldr	r3, [pc, #136]	; (800b91c <SDMMC_GetCmdResp7+0x94>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a22      	ldr	r2, [pc, #136]	; (800b920 <SDMMC_GetCmdResp7+0x98>)
 800b896:	fba2 2303 	umull	r2, r3, r2, r3
 800b89a:	0a5b      	lsrs	r3, r3, #9
 800b89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	1e5a      	subs	r2, r3, #1
 800b8aa:	60fa      	str	r2, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8b4:	e02c      	b.n	800b910 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0ef      	beq.n	800b8a6 <SDMMC_GetCmdResp7+0x1e>
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1ea      	bne.n	800b8a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d004      	beq.n	800b8e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2204      	movs	r2, #4
 800b8e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	e014      	b.n	800b910 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d004      	beq.n	800b8fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e009      	b.n	800b910 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2240      	movs	r2, #64	; 0x40
 800b90c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b90e:	2300      	movs	r3, #0
  
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20000000 	.word	0x20000000
 800b920:	10624dd3 	.word	0x10624dd3

0800b924 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b92c:	4b11      	ldr	r3, [pc, #68]	; (800b974 <SDMMC_GetCmdError+0x50>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a11      	ldr	r2, [pc, #68]	; (800b978 <SDMMC_GetCmdError+0x54>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	0a5b      	lsrs	r3, r3, #9
 800b938:	f241 3288 	movw	r2, #5000	; 0x1388
 800b93c:	fb02 f303 	mul.w	r3, r2, r3
 800b940:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	1e5a      	subs	r2, r3, #1
 800b946:	60fa      	str	r2, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b94c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b950:	e009      	b.n	800b966 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0f1      	beq.n	800b942 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	22c5      	movs	r2, #197	; 0xc5
 800b962:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20000000 	.word	0x20000000
 800b978:	10624dd3 	.word	0x10624dd3

0800b97c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b980:	4904      	ldr	r1, [pc, #16]	; (800b994 <MX_FATFS_Init+0x18>)
 800b982:	4805      	ldr	r0, [pc, #20]	; (800b998 <MX_FATFS_Init+0x1c>)
 800b984:	f000 f9d6 	bl	800bd34 <FATFS_LinkDriver>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	4b03      	ldr	r3, [pc, #12]	; (800b99c <MX_FATFS_Init+0x20>)
 800b98e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b990:	bf00      	nop
 800b992:	bd80      	pop	{r7, pc}
 800b994:	200007d4 	.word	0x200007d4
 800b998:	0800c118 	.word	0x0800c118
 800b99c:	200007d0 	.word	0x200007d0

0800b9a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b9aa:	f000 f86b 	bl	800ba84 <BSP_SD_IsDetected>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d001      	beq.n	800b9b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e005      	b.n	800b9c4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b9b8:	4804      	ldr	r0, [pc, #16]	; (800b9cc <BSP_SD_Init+0x2c>)
 800b9ba:	f7fc fef0 	bl	800879e <HAL_SD_Init>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	20000500 	.word	0x20000500

0800b9d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af02      	add	r7, sp, #8
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	68f9      	ldr	r1, [r7, #12]
 800b9ec:	4806      	ldr	r0, [pc, #24]	; (800ba08 <BSP_SD_ReadBlocks+0x38>)
 800b9ee:	f7fc ff87 	bl	8008900 <HAL_SD_ReadBlocks>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3718      	adds	r7, #24
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000500 	.word	0x20000500

0800ba0c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	4806      	ldr	r0, [pc, #24]	; (800ba44 <BSP_SD_WriteBlocks+0x38>)
 800ba2a:	f7fd f947 	bl	8008cbc <HAL_SD_WriteBlocks>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3718      	adds	r7, #24
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000500 	.word	0x20000500

0800ba48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ba4c:	4805      	ldr	r0, [pc, #20]	; (800ba64 <BSP_SD_GetCardState+0x1c>)
 800ba4e:	f7fd fc8b 	bl	8009368 <HAL_SD_GetCardState>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	bf14      	ite	ne
 800ba58:	2301      	movne	r3, #1
 800ba5a:	2300      	moveq	r3, #0
 800ba5c:	b2db      	uxtb	r3, r3
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20000500 	.word	0x20000500

0800ba68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	4803      	ldr	r0, [pc, #12]	; (800ba80 <BSP_SD_GetCardInfo+0x18>)
 800ba74:	f7fd fc4c 	bl	8009310 <HAL_SD_GetCardInfo>
}
 800ba78:	bf00      	nop
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20000500 	.word	0x20000500

0800ba84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ba8e:	f000 f80b 	bl	800baa8 <BSP_PlatformIsDetected>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	b2db      	uxtb	r3, r3
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800baae:	2301      	movs	r3, #1
 800bab0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bab2:	2102      	movs	r1, #2
 800bab4:	4806      	ldr	r0, [pc, #24]	; (800bad0 <BSP_PlatformIsDetected+0x28>)
 800bab6:	f7fa fc6f 	bl	8006398 <HAL_GPIO_ReadPin>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bac0:	2300      	movs	r3, #0
 800bac2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bac4:	79fb      	ldrb	r3, [r7, #7]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	40020c00 	.word	0x40020c00

0800bad4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <SD_CheckStatus+0x38>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bae4:	f7ff ffb0 	bl	800ba48 <BSP_SD_GetCardState>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d107      	bne.n	800bafe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800baee:	4b07      	ldr	r3, [pc, #28]	; (800bb0c <SD_CheckStatus+0x38>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f023 0301 	bic.w	r3, r3, #1
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <SD_CheckStatus+0x38>)
 800bafc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bafe:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <SD_CheckStatus+0x38>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	b2db      	uxtb	r3, r3
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20000009 	.word	0x20000009

0800bb10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <SD_initialize+0x38>)
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bb20:	f7ff ff3e 	bl	800b9a0 <BSP_SD_Init>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d107      	bne.n	800bb3a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bb2a:	79fb      	ldrb	r3, [r7, #7]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff ffd1 	bl	800bad4 <SD_CheckStatus>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <SD_initialize+0x38>)
 800bb38:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bb3a:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <SD_initialize+0x38>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	b2db      	uxtb	r3, r3
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000009 	.word	0x20000009

0800bb4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff ffbb 	bl	800bad4 <SD_CheckStatus>
 800bb5e:	4603      	mov	r3, r0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	607a      	str	r2, [r7, #4]
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	68b8      	ldr	r0, [r7, #8]
 800bb86:	f7ff ff23 	bl	800b9d0 <BSP_SD_ReadBlocks>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d107      	bne.n	800bba0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bb90:	bf00      	nop
 800bb92:	f7ff ff59 	bl	800ba48 <BSP_SD_GetCardState>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1fa      	bne.n	800bb92 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b086      	sub	sp, #24
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
 800bbb4:	603b      	str	r3, [r7, #0]
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	68b8      	ldr	r0, [r7, #8]
 800bbc8:	f7ff ff20 	bl	800ba0c <BSP_SD_WriteBlocks>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d107      	bne.n	800bbe2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bbd2:	bf00      	nop
 800bbd4:	f7ff ff38 	bl	800ba48 <BSP_SD_GetCardState>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1fa      	bne.n	800bbd4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08c      	sub	sp, #48	; 0x30
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	603a      	str	r2, [r7, #0]
 800bbf6:	71fb      	strb	r3, [r7, #7]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bc02:	4b25      	ldr	r3, [pc, #148]	; (800bc98 <SD_ioctl+0xac>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <SD_ioctl+0x28>
 800bc10:	2303      	movs	r3, #3
 800bc12:	e03c      	b.n	800bc8e <SD_ioctl+0xa2>

  switch (cmd)
 800bc14:	79bb      	ldrb	r3, [r7, #6]
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d834      	bhi.n	800bc84 <SD_ioctl+0x98>
 800bc1a:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <SD_ioctl+0x34>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc31 	.word	0x0800bc31
 800bc24:	0800bc39 	.word	0x0800bc39
 800bc28:	0800bc51 	.word	0x0800bc51
 800bc2c:	0800bc6b 	.word	0x0800bc6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc36:	e028      	b.n	800bc8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc38:	f107 030c 	add.w	r3, r7, #12
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ff13 	bl	800ba68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc4e:	e01c      	b.n	800bc8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc50:	f107 030c 	add.w	r3, r7, #12
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7ff ff07 	bl	800ba68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc68:	e00f      	b.n	800bc8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc6a:	f107 030c 	add.w	r3, r7, #12
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7ff fefa 	bl	800ba68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	0a5a      	lsrs	r2, r3, #9
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc82:	e002      	b.n	800bc8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bc84:	2304      	movs	r3, #4
 800bc86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bc8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3730      	adds	r7, #48	; 0x30
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20000009 	.word	0x20000009

0800bc9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	4613      	mov	r3, r2
 800bca8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bcb2:	4b1f      	ldr	r3, [pc, #124]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcb4:	7a5b      	ldrb	r3, [r3, #9]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d131      	bne.n	800bd20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bcbc:	4b1c      	ldr	r3, [pc, #112]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcbe:	7a5b      	ldrb	r3, [r3, #9]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	4b1a      	ldr	r3, [pc, #104]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bcca:	4b19      	ldr	r3, [pc, #100]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bccc:	7a5b      	ldrb	r3, [r3, #9]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	4a17      	ldr	r2, [pc, #92]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bcda:	4b15      	ldr	r3, [pc, #84]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcdc:	7a5b      	ldrb	r3, [r3, #9]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	461a      	mov	r2, r3
 800bce2:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bce4:	4413      	add	r3, r2
 800bce6:	79fa      	ldrb	r2, [r7, #7]
 800bce8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcea:	4b11      	ldr	r3, [pc, #68]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcec:	7a5b      	ldrb	r3, [r3, #9]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	b2d1      	uxtb	r1, r2
 800bcf4:	4a0e      	ldr	r2, [pc, #56]	; (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcf6:	7251      	strb	r1, [r2, #9]
 800bcf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bcfa:	7dbb      	ldrb	r3, [r7, #22]
 800bcfc:	3330      	adds	r3, #48	; 0x30
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3301      	adds	r3, #1
 800bd08:	223a      	movs	r2, #58	; 0x3a
 800bd0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3302      	adds	r3, #2
 800bd10:	222f      	movs	r2, #47	; 0x2f
 800bd12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	3303      	adds	r3, #3
 800bd18:	2200      	movs	r2, #0
 800bd1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	200007d8 	.word	0x200007d8

0800bd34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff ffaa 	bl	800bc9c <FATFS_LinkDriverEx>
 800bd48:	4603      	mov	r3, r0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <_ZdlPvj>:
 800bd52:	f000 b804 	b.w	800bd5e <_ZdlPv>

0800bd56 <_ZdaPv>:
 800bd56:	f000 b802 	b.w	800bd5e <_ZdlPv>

0800bd5a <_Znaj>:
 800bd5a:	f000 b802 	b.w	800bd62 <_Znwj>

0800bd5e <_ZdlPv>:
 800bd5e:	f000 b853 	b.w	800be08 <free>

0800bd62 <_Znwj>:
 800bd62:	2801      	cmp	r0, #1
 800bd64:	bf38      	it	cc
 800bd66:	2001      	movcc	r0, #1
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 f843 	bl	800bdf8 <malloc>
 800bd72:	b930      	cbnz	r0, 800bd82 <_Znwj+0x20>
 800bd74:	f000 f806 	bl	800bd84 <_ZSt15get_new_handlerv>
 800bd78:	b908      	cbnz	r0, 800bd7e <_Znwj+0x1c>
 800bd7a:	f000 f80b 	bl	800bd94 <abort>
 800bd7e:	4780      	blx	r0
 800bd80:	e7f4      	b.n	800bd6c <_Znwj+0xa>
 800bd82:	bd10      	pop	{r4, pc}

0800bd84 <_ZSt15get_new_handlerv>:
 800bd84:	4b02      	ldr	r3, [pc, #8]	; (800bd90 <_ZSt15get_new_handlerv+0xc>)
 800bd86:	6818      	ldr	r0, [r3, #0]
 800bd88:	f3bf 8f5b 	dmb	ish
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	200007e4 	.word	0x200007e4

0800bd94 <abort>:
 800bd94:	b508      	push	{r3, lr}
 800bd96:	2006      	movs	r0, #6
 800bd98:	f000 f95e 	bl	800c058 <raise>
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	f7f7 fc07 	bl	80035b0 <_exit>
	...

0800bda4 <__errno>:
 800bda4:	4b01      	ldr	r3, [pc, #4]	; (800bdac <__errno+0x8>)
 800bda6:	6818      	ldr	r0, [r3, #0]
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	2000000c 	.word	0x2000000c

0800bdb0 <__libc_init_array>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	4d0d      	ldr	r5, [pc, #52]	; (800bde8 <__libc_init_array+0x38>)
 800bdb4:	4c0d      	ldr	r4, [pc, #52]	; (800bdec <__libc_init_array+0x3c>)
 800bdb6:	1b64      	subs	r4, r4, r5
 800bdb8:	10a4      	asrs	r4, r4, #2
 800bdba:	2600      	movs	r6, #0
 800bdbc:	42a6      	cmp	r6, r4
 800bdbe:	d109      	bne.n	800bdd4 <__libc_init_array+0x24>
 800bdc0:	4d0b      	ldr	r5, [pc, #44]	; (800bdf0 <__libc_init_array+0x40>)
 800bdc2:	4c0c      	ldr	r4, [pc, #48]	; (800bdf4 <__libc_init_array+0x44>)
 800bdc4:	f000 f972 	bl	800c0ac <_init>
 800bdc8:	1b64      	subs	r4, r4, r5
 800bdca:	10a4      	asrs	r4, r4, #2
 800bdcc:	2600      	movs	r6, #0
 800bdce:	42a6      	cmp	r6, r4
 800bdd0:	d105      	bne.n	800bdde <__libc_init_array+0x2e>
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd8:	4798      	blx	r3
 800bdda:	3601      	adds	r6, #1
 800bddc:	e7ee      	b.n	800bdbc <__libc_init_array+0xc>
 800bdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bde2:	4798      	blx	r3
 800bde4:	3601      	adds	r6, #1
 800bde6:	e7f2      	b.n	800bdce <__libc_init_array+0x1e>
 800bde8:	0800c134 	.word	0x0800c134
 800bdec:	0800c134 	.word	0x0800c134
 800bdf0:	0800c134 	.word	0x0800c134
 800bdf4:	0800c13c 	.word	0x0800c13c

0800bdf8 <malloc>:
 800bdf8:	4b02      	ldr	r3, [pc, #8]	; (800be04 <malloc+0xc>)
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	f000 b87f 	b.w	800bf00 <_malloc_r>
 800be02:	bf00      	nop
 800be04:	2000000c 	.word	0x2000000c

0800be08 <free>:
 800be08:	4b02      	ldr	r3, [pc, #8]	; (800be14 <free+0xc>)
 800be0a:	4601      	mov	r1, r0
 800be0c:	6818      	ldr	r0, [r3, #0]
 800be0e:	f000 b80b 	b.w	800be28 <_free_r>
 800be12:	bf00      	nop
 800be14:	2000000c 	.word	0x2000000c

0800be18 <memset>:
 800be18:	4402      	add	r2, r0
 800be1a:	4603      	mov	r3, r0
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d100      	bne.n	800be22 <memset+0xa>
 800be20:	4770      	bx	lr
 800be22:	f803 1b01 	strb.w	r1, [r3], #1
 800be26:	e7f9      	b.n	800be1c <memset+0x4>

0800be28 <_free_r>:
 800be28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be2a:	2900      	cmp	r1, #0
 800be2c:	d044      	beq.n	800beb8 <_free_r+0x90>
 800be2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be32:	9001      	str	r0, [sp, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f1a1 0404 	sub.w	r4, r1, #4
 800be3a:	bfb8      	it	lt
 800be3c:	18e4      	addlt	r4, r4, r3
 800be3e:	f000 f927 	bl	800c090 <__malloc_lock>
 800be42:	4a1e      	ldr	r2, [pc, #120]	; (800bebc <_free_r+0x94>)
 800be44:	9801      	ldr	r0, [sp, #4]
 800be46:	6813      	ldr	r3, [r2, #0]
 800be48:	b933      	cbnz	r3, 800be58 <_free_r+0x30>
 800be4a:	6063      	str	r3, [r4, #4]
 800be4c:	6014      	str	r4, [r2, #0]
 800be4e:	b003      	add	sp, #12
 800be50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be54:	f000 b922 	b.w	800c09c <__malloc_unlock>
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d908      	bls.n	800be6e <_free_r+0x46>
 800be5c:	6825      	ldr	r5, [r4, #0]
 800be5e:	1961      	adds	r1, r4, r5
 800be60:	428b      	cmp	r3, r1
 800be62:	bf01      	itttt	eq
 800be64:	6819      	ldreq	r1, [r3, #0]
 800be66:	685b      	ldreq	r3, [r3, #4]
 800be68:	1949      	addeq	r1, r1, r5
 800be6a:	6021      	streq	r1, [r4, #0]
 800be6c:	e7ed      	b.n	800be4a <_free_r+0x22>
 800be6e:	461a      	mov	r2, r3
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	b10b      	cbz	r3, 800be78 <_free_r+0x50>
 800be74:	42a3      	cmp	r3, r4
 800be76:	d9fa      	bls.n	800be6e <_free_r+0x46>
 800be78:	6811      	ldr	r1, [r2, #0]
 800be7a:	1855      	adds	r5, r2, r1
 800be7c:	42a5      	cmp	r5, r4
 800be7e:	d10b      	bne.n	800be98 <_free_r+0x70>
 800be80:	6824      	ldr	r4, [r4, #0]
 800be82:	4421      	add	r1, r4
 800be84:	1854      	adds	r4, r2, r1
 800be86:	42a3      	cmp	r3, r4
 800be88:	6011      	str	r1, [r2, #0]
 800be8a:	d1e0      	bne.n	800be4e <_free_r+0x26>
 800be8c:	681c      	ldr	r4, [r3, #0]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	6053      	str	r3, [r2, #4]
 800be92:	4421      	add	r1, r4
 800be94:	6011      	str	r1, [r2, #0]
 800be96:	e7da      	b.n	800be4e <_free_r+0x26>
 800be98:	d902      	bls.n	800bea0 <_free_r+0x78>
 800be9a:	230c      	movs	r3, #12
 800be9c:	6003      	str	r3, [r0, #0]
 800be9e:	e7d6      	b.n	800be4e <_free_r+0x26>
 800bea0:	6825      	ldr	r5, [r4, #0]
 800bea2:	1961      	adds	r1, r4, r5
 800bea4:	428b      	cmp	r3, r1
 800bea6:	bf04      	itt	eq
 800bea8:	6819      	ldreq	r1, [r3, #0]
 800beaa:	685b      	ldreq	r3, [r3, #4]
 800beac:	6063      	str	r3, [r4, #4]
 800beae:	bf04      	itt	eq
 800beb0:	1949      	addeq	r1, r1, r5
 800beb2:	6021      	streq	r1, [r4, #0]
 800beb4:	6054      	str	r4, [r2, #4]
 800beb6:	e7ca      	b.n	800be4e <_free_r+0x26>
 800beb8:	b003      	add	sp, #12
 800beba:	bd30      	pop	{r4, r5, pc}
 800bebc:	200007e8 	.word	0x200007e8

0800bec0 <sbrk_aligned>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	4e0e      	ldr	r6, [pc, #56]	; (800befc <sbrk_aligned+0x3c>)
 800bec4:	460c      	mov	r4, r1
 800bec6:	6831      	ldr	r1, [r6, #0]
 800bec8:	4605      	mov	r5, r0
 800beca:	b911      	cbnz	r1, 800bed2 <sbrk_aligned+0x12>
 800becc:	f000 f88c 	bl	800bfe8 <_sbrk_r>
 800bed0:	6030      	str	r0, [r6, #0]
 800bed2:	4621      	mov	r1, r4
 800bed4:	4628      	mov	r0, r5
 800bed6:	f000 f887 	bl	800bfe8 <_sbrk_r>
 800beda:	1c43      	adds	r3, r0, #1
 800bedc:	d00a      	beq.n	800bef4 <sbrk_aligned+0x34>
 800bede:	1cc4      	adds	r4, r0, #3
 800bee0:	f024 0403 	bic.w	r4, r4, #3
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d007      	beq.n	800bef8 <sbrk_aligned+0x38>
 800bee8:	1a21      	subs	r1, r4, r0
 800beea:	4628      	mov	r0, r5
 800beec:	f000 f87c 	bl	800bfe8 <_sbrk_r>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d101      	bne.n	800bef8 <sbrk_aligned+0x38>
 800bef4:	f04f 34ff 	mov.w	r4, #4294967295
 800bef8:	4620      	mov	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	200007ec 	.word	0x200007ec

0800bf00 <_malloc_r>:
 800bf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf04:	1ccd      	adds	r5, r1, #3
 800bf06:	f025 0503 	bic.w	r5, r5, #3
 800bf0a:	3508      	adds	r5, #8
 800bf0c:	2d0c      	cmp	r5, #12
 800bf0e:	bf38      	it	cc
 800bf10:	250c      	movcc	r5, #12
 800bf12:	2d00      	cmp	r5, #0
 800bf14:	4607      	mov	r7, r0
 800bf16:	db01      	blt.n	800bf1c <_malloc_r+0x1c>
 800bf18:	42a9      	cmp	r1, r5
 800bf1a:	d905      	bls.n	800bf28 <_malloc_r+0x28>
 800bf1c:	230c      	movs	r3, #12
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	2600      	movs	r6, #0
 800bf22:	4630      	mov	r0, r6
 800bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf28:	4e2e      	ldr	r6, [pc, #184]	; (800bfe4 <_malloc_r+0xe4>)
 800bf2a:	f000 f8b1 	bl	800c090 <__malloc_lock>
 800bf2e:	6833      	ldr	r3, [r6, #0]
 800bf30:	461c      	mov	r4, r3
 800bf32:	bb34      	cbnz	r4, 800bf82 <_malloc_r+0x82>
 800bf34:	4629      	mov	r1, r5
 800bf36:	4638      	mov	r0, r7
 800bf38:	f7ff ffc2 	bl	800bec0 <sbrk_aligned>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	d14d      	bne.n	800bfde <_malloc_r+0xde>
 800bf42:	6834      	ldr	r4, [r6, #0]
 800bf44:	4626      	mov	r6, r4
 800bf46:	2e00      	cmp	r6, #0
 800bf48:	d140      	bne.n	800bfcc <_malloc_r+0xcc>
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4638      	mov	r0, r7
 800bf50:	eb04 0803 	add.w	r8, r4, r3
 800bf54:	f000 f848 	bl	800bfe8 <_sbrk_r>
 800bf58:	4580      	cmp	r8, r0
 800bf5a:	d13a      	bne.n	800bfd2 <_malloc_r+0xd2>
 800bf5c:	6821      	ldr	r1, [r4, #0]
 800bf5e:	3503      	adds	r5, #3
 800bf60:	1a6d      	subs	r5, r5, r1
 800bf62:	f025 0503 	bic.w	r5, r5, #3
 800bf66:	3508      	adds	r5, #8
 800bf68:	2d0c      	cmp	r5, #12
 800bf6a:	bf38      	it	cc
 800bf6c:	250c      	movcc	r5, #12
 800bf6e:	4629      	mov	r1, r5
 800bf70:	4638      	mov	r0, r7
 800bf72:	f7ff ffa5 	bl	800bec0 <sbrk_aligned>
 800bf76:	3001      	adds	r0, #1
 800bf78:	d02b      	beq.n	800bfd2 <_malloc_r+0xd2>
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	442b      	add	r3, r5
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	e00e      	b.n	800bfa0 <_malloc_r+0xa0>
 800bf82:	6822      	ldr	r2, [r4, #0]
 800bf84:	1b52      	subs	r2, r2, r5
 800bf86:	d41e      	bmi.n	800bfc6 <_malloc_r+0xc6>
 800bf88:	2a0b      	cmp	r2, #11
 800bf8a:	d916      	bls.n	800bfba <_malloc_r+0xba>
 800bf8c:	1961      	adds	r1, r4, r5
 800bf8e:	42a3      	cmp	r3, r4
 800bf90:	6025      	str	r5, [r4, #0]
 800bf92:	bf18      	it	ne
 800bf94:	6059      	strne	r1, [r3, #4]
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	bf08      	it	eq
 800bf9a:	6031      	streq	r1, [r6, #0]
 800bf9c:	5162      	str	r2, [r4, r5]
 800bf9e:	604b      	str	r3, [r1, #4]
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f104 060b 	add.w	r6, r4, #11
 800bfa6:	f000 f879 	bl	800c09c <__malloc_unlock>
 800bfaa:	f026 0607 	bic.w	r6, r6, #7
 800bfae:	1d23      	adds	r3, r4, #4
 800bfb0:	1af2      	subs	r2, r6, r3
 800bfb2:	d0b6      	beq.n	800bf22 <_malloc_r+0x22>
 800bfb4:	1b9b      	subs	r3, r3, r6
 800bfb6:	50a3      	str	r3, [r4, r2]
 800bfb8:	e7b3      	b.n	800bf22 <_malloc_r+0x22>
 800bfba:	6862      	ldr	r2, [r4, #4]
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	bf0c      	ite	eq
 800bfc0:	6032      	streq	r2, [r6, #0]
 800bfc2:	605a      	strne	r2, [r3, #4]
 800bfc4:	e7ec      	b.n	800bfa0 <_malloc_r+0xa0>
 800bfc6:	4623      	mov	r3, r4
 800bfc8:	6864      	ldr	r4, [r4, #4]
 800bfca:	e7b2      	b.n	800bf32 <_malloc_r+0x32>
 800bfcc:	4634      	mov	r4, r6
 800bfce:	6876      	ldr	r6, [r6, #4]
 800bfd0:	e7b9      	b.n	800bf46 <_malloc_r+0x46>
 800bfd2:	230c      	movs	r3, #12
 800bfd4:	603b      	str	r3, [r7, #0]
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	f000 f860 	bl	800c09c <__malloc_unlock>
 800bfdc:	e7a1      	b.n	800bf22 <_malloc_r+0x22>
 800bfde:	6025      	str	r5, [r4, #0]
 800bfe0:	e7de      	b.n	800bfa0 <_malloc_r+0xa0>
 800bfe2:	bf00      	nop
 800bfe4:	200007e8 	.word	0x200007e8

0800bfe8 <_sbrk_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4d06      	ldr	r5, [pc, #24]	; (800c004 <_sbrk_r+0x1c>)
 800bfec:	2300      	movs	r3, #0
 800bfee:	4604      	mov	r4, r0
 800bff0:	4608      	mov	r0, r1
 800bff2:	602b      	str	r3, [r5, #0]
 800bff4:	f7f7 fae6 	bl	80035c4 <_sbrk>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_sbrk_r+0x1a>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_sbrk_r+0x1a>
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	200007f0 	.word	0x200007f0

0800c008 <_raise_r>:
 800c008:	291f      	cmp	r1, #31
 800c00a:	b538      	push	{r3, r4, r5, lr}
 800c00c:	4604      	mov	r4, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	d904      	bls.n	800c01c <_raise_r+0x14>
 800c012:	2316      	movs	r3, #22
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c01e:	b112      	cbz	r2, 800c026 <_raise_r+0x1e>
 800c020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c024:	b94b      	cbnz	r3, 800c03a <_raise_r+0x32>
 800c026:	4620      	mov	r0, r4
 800c028:	f000 f830 	bl	800c08c <_getpid_r>
 800c02c:	462a      	mov	r2, r5
 800c02e:	4601      	mov	r1, r0
 800c030:	4620      	mov	r0, r4
 800c032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c036:	f000 b817 	b.w	800c068 <_kill_r>
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d00a      	beq.n	800c054 <_raise_r+0x4c>
 800c03e:	1c59      	adds	r1, r3, #1
 800c040:	d103      	bne.n	800c04a <_raise_r+0x42>
 800c042:	2316      	movs	r3, #22
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	2001      	movs	r0, #1
 800c048:	e7e7      	b.n	800c01a <_raise_r+0x12>
 800c04a:	2400      	movs	r4, #0
 800c04c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c050:	4628      	mov	r0, r5
 800c052:	4798      	blx	r3
 800c054:	2000      	movs	r0, #0
 800c056:	e7e0      	b.n	800c01a <_raise_r+0x12>

0800c058 <raise>:
 800c058:	4b02      	ldr	r3, [pc, #8]	; (800c064 <raise+0xc>)
 800c05a:	4601      	mov	r1, r0
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	f7ff bfd3 	b.w	800c008 <_raise_r>
 800c062:	bf00      	nop
 800c064:	2000000c 	.word	0x2000000c

0800c068 <_kill_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d07      	ldr	r5, [pc, #28]	; (800c088 <_kill_r+0x20>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	4611      	mov	r1, r2
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	f7f7 fa8b 	bl	8003590 <_kill>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	d102      	bne.n	800c084 <_kill_r+0x1c>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	b103      	cbz	r3, 800c084 <_kill_r+0x1c>
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	bd38      	pop	{r3, r4, r5, pc}
 800c086:	bf00      	nop
 800c088:	200007f0 	.word	0x200007f0

0800c08c <_getpid_r>:
 800c08c:	f7f7 ba78 	b.w	8003580 <_getpid>

0800c090 <__malloc_lock>:
 800c090:	4801      	ldr	r0, [pc, #4]	; (800c098 <__malloc_lock+0x8>)
 800c092:	f000 b809 	b.w	800c0a8 <__retarget_lock_acquire_recursive>
 800c096:	bf00      	nop
 800c098:	200007f4 	.word	0x200007f4

0800c09c <__malloc_unlock>:
 800c09c:	4801      	ldr	r0, [pc, #4]	; (800c0a4 <__malloc_unlock+0x8>)
 800c09e:	f000 b804 	b.w	800c0aa <__retarget_lock_release_recursive>
 800c0a2:	bf00      	nop
 800c0a4:	200007f4 	.word	0x200007f4

0800c0a8 <__retarget_lock_acquire_recursive>:
 800c0a8:	4770      	bx	lr

0800c0aa <__retarget_lock_release_recursive>:
 800c0aa:	4770      	bx	lr

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
