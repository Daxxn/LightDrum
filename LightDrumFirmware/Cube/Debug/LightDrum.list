
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd8  08009dd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de0  08009de0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000070  08009e60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  08009e60  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b62a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005066  00000000  00000000  0004b6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002070  00000000  00000000  00050730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea0  00000000  00000000  000527a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002add0  00000000  00000000  00054640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c46  00000000  00000000  0007f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb3fc  00000000  00000000  000a9056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef0  00000000  00000000  001944a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009d60 	.word	0x08009d60

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08009d60 	.word	0x08009d60

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN6ButtonC1Ev>:
 */

#include "Button.h"


Button::Button()
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <_ZN6ButtonC1Ev+0x1c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
{
}
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	08009d80 	.word	0x08009d80

08000528 <_ZN6ButtonD1Ev>:

Button::~Button()
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <_ZN6ButtonD1Ev+0x1c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
{
}
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	08009d80 	.word	0x08009d80

08000548 <_ZN6ButtonD0Ev>:
Button::~Button()
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
}
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffe9 	bl	8000528 <_ZN6ButtonD1Ev>
 8000556:	2110      	movs	r1, #16
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f009 fa53 	bl	8009a04 <_ZdlPvj>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f004 f943 	bl	8004830 <HAL_GPIO_WritePin>
	};
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <_ZN9ShiftRegsC1Ev+0x2c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3308      	adds	r3, #8
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffce 	bl	8000568 <_ZN3PinC1Ev>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3310      	adds	r3, #16
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffc9 	bl	8000568 <_ZN3PinC1Ev>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08009da0 	.word	0x08009da0

080005e4 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	3308      	adds	r3, #8
 80005fc:	3208      	adds	r2, #8
 80005fe:	6811      	ldr	r1, [r2, #0]
 8000600:	6019      	str	r1, [r3, #0]
 8000602:	8891      	ldrh	r1, [r2, #4]
 8000604:	7992      	ldrb	r2, [r2, #6]
 8000606:	8099      	strh	r1, [r3, #4]
 8000608:	719a      	strb	r2, [r3, #6]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	3310      	adds	r3, #16
 8000610:	3210      	adds	r2, #16
 8000612:	6811      	ldr	r1, [r2, #0]
 8000614:	6019      	str	r1, [r3, #0]
 8000616:	8891      	ldrh	r1, [r2, #4]
 8000618:	7992      	ldrb	r2, [r2, #6]
 800061a:	8099      	strh	r1, [r3, #4]
 800061c:	719a      	strb	r2, [r3, #6]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	8b1a      	ldrh	r2, [r3, #24]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	831a      	strh	r2, [r3, #24]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	61da      	str	r2, [r3, #28]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	6a1a      	ldr	r2, [r3, #32]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	621a      	str	r2, [r3, #32]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Init>:
		TIM_HandleTypeDef    *in_htim3,
		UART_HandleTypeDef   *in_huart1,
		UART_HandleTypeDef   *in_huart2,
		UART_HandleTypeDef   *in_huart3
	)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af02      	add	r7, sp, #8
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	4931      	ldr	r1, [pc, #196]	; (8000720 <Init+0xdc>)
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff8e 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066a:	492d      	ldr	r1, [pc, #180]	; (8000720 <Init+0xdc>)
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff86 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>

	currentADCHandle = in_hadc1;
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <Init+0xe0>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6013      	str	r3, [r2, #0]
	currentADCMemHandle = in_hdma_adc1;
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <Init+0xe4>)
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	6013      	str	r3, [r2, #0]
	stripI2cHandle = in_hfmpi2c1;
 800067e:	4a2b      	ldr	r2, [pc, #172]	; (800072c <Init+0xe8>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <Init+0xec>)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	6013      	str	r3, [r2, #0]
	i2cHandle = in_hi2c1;
 800068a:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <Init+0xf0>)
 800068c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800068e:	6013      	str	r3, [r2, #0]
	audioHandle = in_hi2s3;
 8000690:	4a29      	ldr	r2, [pc, #164]	; (8000738 <Init+0xf4>)
 8000692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000694:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = in_hdma_spi3_rx;
 8000696:	4a29      	ldr	r2, [pc, #164]	; (800073c <Init+0xf8>)
 8000698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800069a:	6013      	str	r3, [r2, #0]
	rtcHandle = in_hrtc;
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <Init+0xfc>)
 800069e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a0:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <Init+0x100>)
 80006a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006a6:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <Init+0x104>)
 80006aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ac:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 80006ae:	4a27      	ldr	r2, [pc, #156]	; (800074c <Init+0x108>)
 80006b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b2:	6013      	str	r3, [r2, #0]
	pwm2Handle = in_htim2;
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <Init+0x10c>)
 80006b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006b8:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 80006ba:	4a26      	ldr	r2, [pc, #152]	; (8000754 <Init+0x110>)
 80006bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006be:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <Init+0x114>)
 80006c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006c4:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <Init+0x118>)
 80006c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006cc:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 80006ce:	4a24      	ldr	r2, [pc, #144]	; (8000760 <Init+0x11c>)
 80006d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006d4:	6013      	str	r3, [r2, #0]

//	screen.Startup(screenHandle);
	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <Init+0x104>)
 80006d8:	681d      	ldr	r5, [r3, #0]
 80006da:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80006de:	466a      	mov	r2, sp
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	cb0c      	ldmia	r3, {r2, r3}
 80006f2:	4629      	mov	r1, r5
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f95b 	bl	80009b0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <Init+0x120>)
 8000702:	f7ff ff6f 	bl	80005e4 <_ZN9ShiftRegsaSERKS_>
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f992 	bl	8000a34 <_ZN9ShiftRegsD1Ev>

	shiftReg.Init();
 8000710:	4814      	ldr	r0, [pc, #80]	; (8000764 <Init+0x120>)
 8000712:	f000 f9b7 	bl	8000a84 <_ZN9ShiftRegs4InitEv>
}
 8000716:	bf00      	nop
 8000718:	3748      	adds	r7, #72	; 0x48
 800071a:	46bd      	mov	sp, r7
 800071c:	bdb0      	pop	{r4, r5, r7, pc}
 800071e:	bf00      	nop
 8000720:	40020c00 	.word	0x40020c00
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000090 	.word	0x20000090
 800072c:	20000094 	.word	0x20000094
 8000730:	20000098 	.word	0x20000098
 8000734:	2000009c 	.word	0x2000009c
 8000738:	200000a0 	.word	0x200000a0
 800073c:	200000a4 	.word	0x200000a4
 8000740:	200000a8 	.word	0x200000a8
 8000744:	200000ac 	.word	0x200000ac
 8000748:	200000b0 	.word	0x200000b0
 800074c:	200000b4 	.word	0x200000b4
 8000750:	200000b8 	.word	0x200000b8
 8000754:	200000bc 	.word	0x200000bc
 8000758:	200000c0 	.word	0x200000c0
 800075c:	200000c4 	.word	0x200000c4
 8000760:	200000c8 	.word	0x200000c8
 8000764:	200000cc 	.word	0x200000cc

08000768 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, 0);
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <Main+0x30>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 8000776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077a:	f002 f887 	bl	800288c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, UINT32_MAX / 2);
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <Main+0x30>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 800078a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078e:	f002 f87d 	bl	800288c <HAL_Delay>
//		Screen Nav Testing

//
//	ReadCurrent();
//	shiftReg.Update();
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000b8 	.word	0x200000b8

0800079c <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_UP_IND);
 80007a0:	2103      	movs	r1, #3
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <MenuUpInterruptCallback+0x10>)
 80007a4:	f000 f9ad 	bl	8000b02 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000cc 	.word	0x200000cc

080007b0 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_DOWN_IND);
 80007b4:	2102      	movs	r1, #2
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <MenuDownInterruptCallback+0x10>)
 80007b8:	f000 f9a3 	bl	8000b02 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000cc 	.word	0x200000cc

080007c4 <MenuRightInterruptCallback>:
//void MenuLeftInterruptCallback()
//{
//
//}
void MenuRightInterruptCallback()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_RIGHT_IND);
 80007c8:	2105      	movs	r1, #5
 80007ca:	4802      	ldr	r0, [pc, #8]	; (80007d4 <MenuRightInterruptCallback+0x10>)
 80007cc:	f000 f999 	bl	8000b02 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000cc 	.word	0x200000cc

080007d8 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 80007dc:	2108      	movs	r1, #8
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <MenuActInterruptCallback+0x10>)
 80007e0:	f000 f98f 	bl	8000b02 <_ZN9ShiftRegs11ToggleValueEj>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000cc 	.word	0x200000cc

080007ec <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	relayState = relayState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MenuBackInterruptCallback+0x38>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MenuBackInterruptCallback+0x38>)
 8000802:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin, relayState);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MenuBackInterruptCallback+0x38>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	2101      	movs	r1, #1
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <MenuBackInterruptCallback+0x3c>)
 800080e:	f004 f80f 	bl	8004830 <HAL_GPIO_WritePin>
	shiftReg.SetValue((uint8_t)relayState, MENU_BACK_IND);
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <MenuBackInterruptCallback+0x38>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <MenuBackInterruptCallback+0x40>)
 800081c:	f000 f944 	bl	8000aa8 <_ZN9ShiftRegs8SetValueEhj>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000134 	.word	0x20000134
 8000828:	40020c00 	.word	0x40020c00
 800082c:	200000cc 	.word	0x200000cc

08000830 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <_Z41__static_initialization_and_destruction_0ii>:
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d113      	bne.n	8000884 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000862:	4293      	cmp	r3, r2
 8000864:	d10e      	bne.n	8000884 <_Z41__static_initialization_and_destruction_0ii+0x38>
ShiftRegs shiftReg;
 8000866:	4815      	ldr	r0, [pc, #84]	; (80008bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000868:	f7ff fea4 	bl	80005b4 <_ZN9ShiftRegsC1Ev>
Nextion screen = Nextion();
 800086c:	4814      	ldr	r0, [pc, #80]	; (80008c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800086e:	f000 f83f 	bl	80008f0 <_ZN7NextionC1Ev>
Button menuUp = Button();
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000874:	f7ff fe48 	bl	8000508 <_ZN6ButtonC1Ev>
Button menuDown = Button();
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800087a:	f7ff fe45 	bl	8000508 <_ZN6ButtonC1Ev>
StripCurrent stripCurr = StripCurrent();
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000880:	f000 f96c 	bl	8000b5c <_ZN12StripCurrentC1Ev>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d113      	bne.n	80008b2 <_Z41__static_initialization_and_destruction_0ii+0x66>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000890:	4293      	cmp	r3, r2
 8000892:	d10e      	bne.n	80008b2 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000896:	f000 f971 	bl	8000b7c <_ZN12StripCurrentD1Ev>
Button menuDown = Button();
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800089c:	f7ff fe44 	bl	8000528 <_ZN6ButtonD1Ev>
Button menuUp = Button();
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80008a2:	f7ff fe41 	bl	8000528 <_ZN6ButtonD1Ev>
Nextion screen = Nextion();
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80008a8:	f000 f848 	bl	800093c <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80008ae:	f000 f8c1 	bl	8000a34 <_ZN9ShiftRegsD1Ev>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000cc 	.word	0x200000cc
 80008c0:	200000f0 	.word	0x200000f0
 80008c4:	20000108 	.word	0x20000108
 80008c8:	20000118 	.word	0x20000118
 80008cc:	20000128 	.word	0x20000128

080008d0 <_GLOBAL__sub_I_currentADCHandle>:
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ffb7 	bl	800084c <_Z41__static_initialization_and_destruction_0ii>
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_GLOBAL__sub_D_currentADCHandle>:
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ffaf 	bl	800084c <_Z41__static_initialization_and_destruction_0ii>
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <_ZN7NextionC1Ev+0x48>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 80008fe:	2010      	movs	r0, #16
 8000900:	f009 f884 	bl	8009a0c <_Znaj>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 800090c:	2008      	movs	r0, #8
 800090e:	f009 f87d 	bl	8009a0c <_Znaj>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 800091a:	2010      	movs	r0, #16
 800091c:	f009 f876 	bl	8009a0c <_Znaj>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	611a      	str	r2, [r3, #16]
	this->index = 0;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	719a      	strb	r2, [r3, #6]
}
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	08009d90 	.word	0x08009d90

0800093c <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <_ZN7NextionD1Ev+0x50>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
{
	delete[] cmdBuffer;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <_ZN7NextionD1Ev+0x20>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	4618      	mov	r0, r3
 8000958:	f009 f856 	bl	8009a08 <_ZdaPv>
	delete[] recBuffer;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d004      	beq.n	800096e <_ZN7NextionD1Ev+0x32>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	4618      	mov	r0, r3
 800096a:	f009 f84d 	bl	8009a08 <_ZdaPv>
	delete[] buffer;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <_ZN7NextionD1Ev+0x44>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	4618      	mov	r0, r3
 800097c:	f009 f844 	bl	8009a08 <_ZdaPv>
}
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08009d90 	.word	0x08009d90

08000990 <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
}
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ffcf 	bl	800093c <_ZN7NextionD1Ev>
 800099e:	2118      	movs	r1, #24
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f009 f82f 	bl	8009a04 <_ZdlPvj>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4639      	mov	r1, r7
 80009bc:	e881 000c 	stmia.w	r1, {r2, r3}
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3308      	adds	r3, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fdcc 	bl	8000568 <_ZN3PinC1Ev>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3310      	adds	r3, #16
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fdc7 	bl	8000568 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3308      	adds	r3, #8
 80009e4:	463a      	mov	r2, r7
 80009e6:	6810      	ldr	r0, [r2, #0]
 80009e8:	6018      	str	r0, [r3, #0]
 80009ea:	8891      	ldrh	r1, [r2, #4]
 80009ec:	7992      	ldrb	r2, [r2, #6]
 80009ee:	8099      	strh	r1, [r3, #4]
 80009f0:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3310      	adds	r3, #16
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	6810      	ldr	r0, [r2, #0]
 80009fc:	6018      	str	r0, [r3, #0]
 80009fe:	8891      	ldrh	r1, [r2, #4]
 8000a00:	7992      	ldrb	r2, [r2, #6]
 8000a02:	8099      	strh	r1, [r3, #4]
 8000a04:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8000a06:	2002      	movs	r0, #2
 8000a08:	f009 f800 	bl	8009a0c <_Znaj>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4613      	mov	r3, r2
 8000a12:	2100      	movs	r1, #0
 8000a14:	7019      	strb	r1, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	2100      	movs	r1, #0
 8000a1a:	7019      	strb	r1, [r3, #0]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2200      	movs	r2, #0
 8000a24:	831a      	strh	r2, [r3, #24]
}
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08009da0 	.word	0x08009da0

08000a34 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <_ZN9ShiftRegsD1Ev+0x2c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <_ZN9ShiftRegsD1Ev+0x20>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 ffda 	bl	8009a08 <_ZdaPv>
}
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08009da0 	.word	0x08009da0

08000a64 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
}
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ffe1 	bl	8000a34 <_ZN9ShiftRegsD1Ev>
 8000a72:	2124      	movs	r1, #36	; 0x24
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f008 ffc5 	bl	8009a04 <_ZdlPvj>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3308      	adds	r3, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f893 	bl	8000bbc <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3310      	adds	r3, #16
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f88e 	bl	8000bbc <_ZN3Pin5ClearEv>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 8000ab6:	7afb      	ldrb	r3, [r7, #11]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d10d      	bne.n	8000ad8 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	8b1b      	ldrh	r3, [r3, #24]
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8000ad6:	e00e      	b.n	8000af6 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b1b      	ldrh	r3, [r3, #24]
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	2101      	movs	r1, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4013      	ands	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	831a      	strh	r2, [r3, #24]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8000b0c:	6839      	ldr	r1, [r7, #0]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f80f 	bl	8000b32 <_ZN9ShiftRegs8GetValueEj>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ffbf 	bl	8000aa8 <_ZN9ShiftRegs8SetValueEhj>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	8b1b      	ldrh	r3, [r3, #24]
 8000b40:	461a      	mov	r2, r3
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	fa42 f303 	asr.w	r3, r2, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_ZN12StripCurrentC1Ev>:
 *      Author: Daxxn
 */

#include <StripCurrent.h>

StripCurrent::StripCurrent()
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <_ZN12StripCurrentC1Ev+0x1c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
{
}
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	08009db0 	.word	0x08009db0

08000b7c <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <_ZN12StripCurrentD1Ev+0x1c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
{
}
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	08009db0 	.word	0x08009db0

08000b9c <_ZN12StripCurrentD0Ev>:
StripCurrent::~StripCurrent()
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
}
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ffe9 	bl	8000b7c <_ZN12StripCurrentD1Ev>
 8000baa:	210c      	movs	r1, #12
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f008 ff29 	bl	8009a04 <_ZdlPvj>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	8899      	ldrh	r1, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	799b      	ldrb	r3, [r3, #6]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	f003 fe2d 	bl	8004830 <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bee:	d020      	beq.n	8000c32 <HAL_GPIO_EXTI_Callback+0x54>
 8000bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bf4:	dc31      	bgt.n	8000c5a <HAL_GPIO_EXTI_Callback+0x7c>
 8000bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfa:	d01d      	beq.n	8000c38 <HAL_GPIO_EXTI_Callback+0x5a>
 8000bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c00:	dc2b      	bgt.n	8000c5a <HAL_GPIO_EXTI_Callback+0x7c>
 8000c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c06:	d01a      	beq.n	8000c3e <HAL_GPIO_EXTI_Callback+0x60>
 8000c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c0c:	dc25      	bgt.n	8000c5a <HAL_GPIO_EXTI_Callback+0x7c>
 8000c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c12:	d020      	beq.n	8000c56 <HAL_GPIO_EXTI_Callback+0x78>
 8000c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c18:	dc1f      	bgt.n	8000c5a <HAL_GPIO_EXTI_Callback+0x7c>
 8000c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c1e:	d017      	beq.n	8000c50 <HAL_GPIO_EXTI_Callback+0x72>
 8000c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c24:	dc19      	bgt.n	8000c5a <HAL_GPIO_EXTI_Callback+0x7c>
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d00c      	beq.n	8000c44 <HAL_GPIO_EXTI_Callback+0x66>
 8000c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c2e:	d00c      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x6c>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 8000c30:	e013      	b.n	8000c5a <HAL_GPIO_EXTI_Callback+0x7c>
			Enc1TurnInterruptCallback();
 8000c32:	f7ff fdfd 	bl	8000830 <Enc1TurnInterruptCallback>
			break;
 8000c36:	e011      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x7e>
			Enc2TurnInterruptCallback();
 8000c38:	f7ff fe01 	bl	800083e <Enc2TurnInterruptCallback>
			break;
 8000c3c:	e00e      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x7e>
			MenuUpInterruptCallback();
 8000c3e:	f7ff fdad 	bl	800079c <MenuUpInterruptCallback>
			break;
 8000c42:	e00b      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x7e>
			MenuDownInterruptCallback();
 8000c44:	f7ff fdb4 	bl	80007b0 <MenuDownInterruptCallback>
			break;
 8000c48:	e008      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x7e>
			MenuRightInterruptCallback();
 8000c4a:	f7ff fdbb 	bl	80007c4 <MenuRightInterruptCallback>
			break;
 8000c4e:	e005      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
 8000c50:	f7ff fdc2 	bl	80007d8 <MenuActInterruptCallback>
			break;
 8000c54:	e002      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x7e>
			MenuBackInterruptCallback();
 8000c56:	f7ff fdc9 	bl	80007ec <MenuBackInterruptCallback>
			break;
 8000c5a:	bf00      	nop
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f001 fd9d 	bl	80027a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Init(
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <main+0xd8>)
 8000c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <main+0xdc>)
 8000c74:	930a      	str	r3, [sp, #40]	; 0x28
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <main+0xe0>)
 8000c78:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <main+0xe4>)
 8000c7c:	9308      	str	r3, [sp, #32]
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <main+0xe8>)
 8000c80:	9307      	str	r3, [sp, #28]
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <main+0xec>)
 8000c84:	9306      	str	r3, [sp, #24]
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <main+0xf0>)
 8000c88:	9305      	str	r3, [sp, #20]
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <main+0xf4>)
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <main+0xf8>)
 8000c90:	9303      	str	r3, [sp, #12]
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <main+0xfc>)
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <main+0x100>)
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <main+0x104>)
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <main+0x108>)
 8000ca0:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <main+0x10c>)
 8000ca2:	4934      	ldr	r1, [pc, #208]	; (8000d74 <main+0x110>)
 8000ca4:	4834      	ldr	r0, [pc, #208]	; (8000d78 <main+0x114>)
 8000ca6:	f7ff fccd 	bl	8000644 <Init>
		  &huart3
  );
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000caa:	f000 f869 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cae:	f000 fd55 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb2:	f000 fd15 	bl	80016e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cb6:	f000 f8cf 	bl	8000e58 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cba:	f000 fb53 	bl	8001364 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000cbe:	f000 f967 	bl	8000f90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cc2:	f000 fbcf 	bl	8001464 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000cc6:	f000 fc8d 	bl	80015e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 fcb5 	bl	8001638 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000cce:	f000 fc4b 	bl	8001568 <MX_TIM6_Init>
  MX_RTC_Init();
 8000cd2:	f000 f9b9 	bl	8001048 <MX_RTC_Init>
  MX_I2S3_Init();
 8000cd6:	f000 f989 	bl	8000fec <MX_I2S3_Init>
  MX_SDIO_SD_Init();
 8000cda:	f000 fa47 	bl	800116c <MX_SDIO_SD_Init>
  MX_SPI4_Init();
 8000cde:	f000 fa6b 	bl	80011b8 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8000ce2:	f000 f919 	bl	8000f18 <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8000ce6:	f000 fcd1 	bl	800168c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000cea:	f000 fa9b 	bl	8001224 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, pData, Length);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4817      	ldr	r0, [pc, #92]	; (8000d50 <main+0xec>)
 8000cf2:	f006 ff6f 	bl	8007bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <main+0xe8>)
 8000cfa:	f006 ff6b 	bl	8007bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4812      	ldr	r0, [pc, #72]	; (8000d4c <main+0xe8>)
 8000d02:	f006 ff67 	bl	8007bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d06:	2100      	movs	r1, #0
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <main+0xe4>)
 8000d0a:	f006 ff63 	bl	8007bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d0e:	210c      	movs	r1, #12
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <main+0xe4>)
 8000d12:	f006 ff5f 	bl	8007bd4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <main+0x118>)
 8000d1e:	f003 fd87 	bl	8004830 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <main+0x118>)
 8000d2a:	f003 fd81 	bl	8004830 <HAL_GPIO_WritePin>

  HAL_ADC_Start(&hadc1);
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <main+0x114>)
 8000d30:	f001 fe36 	bl	80029a0 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8000d34:	f7ff fd18 	bl	8000768 <Main>
 8000d38:	e7fc      	b.n	8000d34 <main+0xd0>
 8000d3a:	bf00      	nop
 8000d3c:	20000648 	.word	0x20000648
 8000d40:	20000604 	.word	0x20000604
 8000d44:	200005c0 	.word	0x200005c0
 8000d48:	20000530 	.word	0x20000530
 8000d4c:	200004e8 	.word	0x200004e8
 8000d50:	200004a0 	.word	0x200004a0
 8000d54:	20000448 	.word	0x20000448
 8000d58:	200003c4 	.word	0x200003c4
 8000d5c:	200003a4 	.word	0x200003a4
 8000d60:	20000344 	.word	0x20000344
 8000d64:	200002fc 	.word	0x200002fc
 8000d68:	200002a8 	.word	0x200002a8
 8000d6c:	20000248 	.word	0x20000248
 8000d70:	200001fc 	.word	0x200001fc
 8000d74:	2000019c 	.word	0x2000019c
 8000d78:	20000138 	.word	0x20000138
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2234      	movs	r2, #52	; 0x34
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f008 fe9c 	bl	8009acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <SystemClock_Config+0xd0>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <SystemClock_Config+0xd0>)
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <SystemClock_Config+0xd0>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <SystemClock_Config+0xd4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <SystemClock_Config+0xd4>)
 8000dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <SystemClock_Config+0xd4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000df4:	2308      	movs	r3, #8
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000df8:	2332      	movs	r3, #50	; 0x32
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 f8af 	bl	8005f70 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e18:	f000 fdbc 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2101      	movs	r1, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fb4c 	bl	80054d4 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e42:	f000 fda7 	bl	8001994 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3750      	adds	r7, #80	; 0x50
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e6c:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <MX_ADC1_Init+0xb8>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <MX_ADC1_Init+0xbc>)
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb8:	4814      	ldr	r0, [pc, #80]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000eba:	f001 fd0b 	bl	80028d4 <HAL_ADC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ec4:	f000 fd66 	bl	8001994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000eda:	f001 fe3d 	bl	8002b58 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ee4:	f000 fd56 	bl	8001994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_ADC1_Init+0xb4>)
 8000ef6:	f001 fe2f 	bl	8002b58 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f00:	f000 fd48 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000138 	.word	0x20000138
 8000f10:	40012000 	.word	0x40012000
 8000f14:	0f000001 	.word	0x0f000001

08000f18 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <MX_FMPI2C1_Init+0x70>)
 8000f20:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x0020081F;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <MX_FMPI2C1_Init+0x74>)
 8000f26:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f54:	f002 fc54 	bl	8003800 <HAL_FMPI2C_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f000 fd19 	bl	8001994 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_FMPI2C1_Init+0x6c>)
 8000f66:	f003 fa72 	bl	800444e <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f000 fd10 	bl	8001994 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f003 fab5 	bl	80044e4 <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f003 fab2 	bl	80044e4 <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200001fc 	.word	0x200001fc
 8000f88:	40006000 	.word	0x40006000
 8000f8c:	0020081f 	.word	0x0020081f

08000f90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_I2C1_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_I2C1_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fce:	f003 fc7b 	bl	80048c8 <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f000 fcdc 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002a8 	.word	0x200002a8
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	000186a0 	.word	0x000186a0

08000fec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_I2S3_Init+0x54>)
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <MX_I2S3_Init+0x58>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_I2S3_Init+0x54>)
 8000ff8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ffc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_I2S3_Init+0x54>)
 8001000:	2210      	movs	r2, #16
 8001002:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_I2S3_Init+0x54>)
 8001006:	2205      	movs	r2, #5
 8001008:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_I2S3_Init+0x54>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_I2S3_Init+0x54>)
 8001012:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001016:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_I2S3_Init+0x54>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_I2S3_Init+0x54>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_I2S3_Init+0x54>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_I2S3_Init+0x54>)
 800102c:	f003 fd90 	bl	8004b50 <HAL_I2S_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001036:	f000 fcad 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200002fc 	.word	0x200002fc
 8001044:	40003c00 	.word	0x40003c00

08001048 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800104e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2228      	movs	r2, #40	; 0x28
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f008 fd2f 	bl	8009acc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <MX_RTC_Init+0x11c>)
 8001070:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <MX_RTC_Init+0x120>)
 8001072:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001074:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_RTC_Init+0x11c>)
 8001076:	2240      	movs	r2, #64	; 0x40
 8001078:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <MX_RTC_Init+0x11c>)
 800107c:	227f      	movs	r2, #127	; 0x7f
 800107e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_RTC_Init+0x11c>)
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_RTC_Init+0x11c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <MX_RTC_Init+0x11c>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <MX_RTC_Init+0x11c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001098:	4832      	ldr	r0, [pc, #200]	; (8001164 <MX_RTC_Init+0x11c>)
 800109a:	f005 f9ed 	bl	8006478 <HAL_RTC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80010a4:	f000 fc76 	bl	8001994 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	4824      	ldr	r0, [pc, #144]	; (8001164 <MX_RTC_Init+0x11c>)
 80010d2:	f005 fa47 	bl	8006564 <HAL_RTC_SetTime>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80010dc:	f000 fc5a 	bl	8001994 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_RTC_Init+0x11c>)
 8001102:	f005 fac9 	bl	8006698 <HAL_RTC_SetDate>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800110c:	f000 fc42 	bl	8001994 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001110:	2301      	movs	r3, #1
 8001112:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001114:	2301      	movs	r3, #1
 8001116:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001118:	2300      	movs	r3, #0
 800111a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001120:	2300      	movs	r3, #0
 8001122:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	2201      	movs	r2, #1
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_RTC_Init+0x11c>)
 800114c:	f005 fb28 	bl	80067a0 <HAL_RTC_SetAlarm_IT>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001156:	f000 fc1d 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200003a4 	.word	0x200003a4
 8001168:	40002800 	.word	0x40002800

0800116c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_SDIO_SD_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 8001190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001194:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SDIO_SD_Init+0x44>)
 800119e:	f005 fd3c 	bl	8006c1a <HAL_SD_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 80011a8:	f000 fbf4 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200003c4 	.word	0x200003c4
 80011b4:	40012c00 	.word	0x40012c00

080011b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_SPI4_Init+0x64>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <MX_SPI4_Init+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI4_Init+0x64>)
 80011c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI4_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_SPI4_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI4_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI4_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI4_Init+0x64>)
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI4_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_SPI4_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI4_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_SPI4_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI4_Init+0x64>)
 8001204:	220a      	movs	r2, #10
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_SPI4_Init+0x64>)
 800120a:	f006 fbb1 	bl	8007970 <HAL_SPI_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001214:	f000 fbbe 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000448 	.word	0x20000448
 8001220:	40013400 	.word	0x40013400

08001224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b096      	sub	sp, #88	; 0x58
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2220      	movs	r2, #32
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fc35 	bl	8009acc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <MX_TIM1_Init+0x138>)
 8001264:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <MX_TIM1_Init+0x13c>)
 8001266:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001268:	4b3c      	ldr	r3, [pc, #240]	; (800135c <MX_TIM1_Init+0x138>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_TIM1_Init+0x138>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <MX_TIM1_Init+0x138>)
 8001276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_TIM1_Init+0x138>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <MX_TIM1_Init+0x138>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_TIM1_Init+0x138>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <MX_TIM1_Init+0x138>)
 8001290:	f006 fbf7 	bl	8007a82 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800129a:	f000 fb7b 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a8:	4619      	mov	r1, r3
 80012aa:	482c      	ldr	r0, [pc, #176]	; (800135c <MX_TIM1_Init+0x138>)
 80012ac:	f006 ff7e 	bl	80081ac <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012b6:	f000 fb6d 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ba:	4828      	ldr	r0, [pc, #160]	; (800135c <MX_TIM1_Init+0x138>)
 80012bc:	f006 fc30 	bl	8007b20 <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012c6:	f000 fb65 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d6:	4619      	mov	r1, r3
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_TIM1_Init+0x138>)
 80012da:	f007 fb71 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012e4:	f000 fb56 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e8:	2360      	movs	r3, #96	; 0x60
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM1_Init+0x138>)
 800130e:	f006 fe8b 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001318:	f000 fb3c 	bl	8001994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM1_Init+0x138>)
 8001340:	f007 fbba 	bl	8008ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800134a:	f000 fb23 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM1_Init+0x138>)
 8001350:	f000 ff7e 	bl	8002250 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200004a0 	.word	0x200004a0
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_TIM2_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013bc:	4828      	ldr	r0, [pc, #160]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013be:	f006 fb60 	bl	8007a82 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013c8:	f000 fae4 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4821      	ldr	r0, [pc, #132]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013da:	f006 fee7 	bl	80081ac <HAL_TIM_ConfigClockSource>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013e4:	f000 fad6 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e8:	481d      	ldr	r0, [pc, #116]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013ea:	f006 fb99 	bl	8007b20 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013f4:	f000 face 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	4619      	mov	r1, r3
 8001406:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001408:	f007 fada 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001412:	f000 fabf 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_TIM2_Init+0xfc>)
 800142e:	f006 fdfb 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001438:	f000 faac 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001444:	f006 fdf0 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800144e:	f000 faa1 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001454:	f000 fefc 	bl	8002250 <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200004e8 	.word	0x200004e8

08001464 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <MX_TIM3_Init+0xfc>)
 8001496:	4a33      	ldr	r2, [pc, #204]	; (8001564 <MX_TIM3_Init+0x100>)
 8001498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <MX_TIM3_Init+0xfc>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ba:	4829      	ldr	r0, [pc, #164]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014bc:	f006 fae1 	bl	8007a82 <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014c6:	f000 fa65 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4822      	ldr	r0, [pc, #136]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014d8:	f006 fe68 	bl	80081ac <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014e2:	f000 fa57 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014e6:	481e      	ldr	r0, [pc, #120]	; (8001560 <MX_TIM3_Init+0xfc>)
 80014e8:	f006 fb1a 	bl	8007b20 <HAL_TIM_PWM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014f2:	f000 fa4f 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4619      	mov	r1, r3
 8001504:	4816      	ldr	r0, [pc, #88]	; (8001560 <MX_TIM3_Init+0xfc>)
 8001506:	f007 fa5b 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001510:	f000 fa40 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_TIM3_Init+0xfc>)
 800152c:	f006 fd7c 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001536:	f000 fa2d 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	220c      	movs	r2, #12
 800153e:	4619      	mov	r1, r3
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <MX_TIM3_Init+0xfc>)
 8001542:	f006 fd71 	bl	8008028 <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800154c:	f000 fa22 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <MX_TIM3_Init+0xfc>)
 8001552:	f000 fe7d 	bl	8002250 <HAL_TIM_MspPostInit>

}
 8001556:	bf00      	nop
 8001558:	3738      	adds	r7, #56	; 0x38
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000530 	.word	0x20000530
 8001564:	40000400 	.word	0x40000400

08001568 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM6_Init+0x74>)
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <MX_TIM6_Init+0x78>)
 800157a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_TIM6_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_TIM6_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_TIM6_Init+0x74>)
 800158a:	22ff      	movs	r2, #255	; 0xff
 800158c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_TIM6_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <MX_TIM6_Init+0x74>)
 8001596:	f006 fa74 	bl	8007a82 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80015a0:	f000 f9f8 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80015a4:	2108      	movs	r1, #8
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM6_Init+0x74>)
 80015a8:	f006 fbdc 	bl	8007d64 <HAL_TIM_OnePulse_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80015b2:	f000 f9ef 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015b6:	2320      	movs	r3, #32
 80015b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM6_Init+0x74>)
 80015c4:	f007 f9fc 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f000 f9e1 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000578 	.word	0x20000578
 80015e0:	40001000 	.word	0x40001000

080015e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART1_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 800161c:	f007 fab2 	bl	8008b84 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f9b5 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200005c0 	.word	0x200005c0
 8001634:	40011000 	.word	0x40011000

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f007 fa88 	bl	8008b84 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f98b 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000604 	.word	0x20000604
 8001688:	40004400 	.word	0x40004400

0800168c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_USART3_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f007 fa5e 	bl	8008b84 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 f961 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000648 	.word	0x20000648
 80016dc:	40004800 	.word	0x40004800

080016e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_DMA_Init+0x78>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <MX_DMA_Init+0x78>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_DMA_Init+0x78>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_DMA_Init+0x78>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_DMA_Init+0x78>)
 800170c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_DMA_Init+0x78>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	200b      	movs	r0, #11
 8001724:	f001 fd1b 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001728:	200b      	movs	r0, #11
 800172a:	f001 fd34 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	200c      	movs	r0, #12
 8001734:	f001 fd13 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001738:	200c      	movs	r0, #12
 800173a:	f001 fd2c 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2038      	movs	r0, #56	; 0x38
 8001744:	f001 fd0b 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001748:	2038      	movs	r0, #56	; 0x38
 800174a:	f001 fd24 	bl	8003196 <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b82      	ldr	r3, [pc, #520]	; (8001980 <MX_GPIO_Init+0x224>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a81      	ldr	r2, [pc, #516]	; (8001980 <MX_GPIO_Init+0x224>)
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <MX_GPIO_Init+0x224>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <MX_GPIO_Init+0x224>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <MX_GPIO_Init+0x224>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b78      	ldr	r3, [pc, #480]	; (8001980 <MX_GPIO_Init+0x224>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b74      	ldr	r3, [pc, #464]	; (8001980 <MX_GPIO_Init+0x224>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a73      	ldr	r2, [pc, #460]	; (8001980 <MX_GPIO_Init+0x224>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b71      	ldr	r3, [pc, #452]	; (8001980 <MX_GPIO_Init+0x224>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <MX_GPIO_Init+0x224>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a6c      	ldr	r2, [pc, #432]	; (8001980 <MX_GPIO_Init+0x224>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <MX_GPIO_Init+0x224>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b66      	ldr	r3, [pc, #408]	; (8001980 <MX_GPIO_Init+0x224>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a65      	ldr	r2, [pc, #404]	; (8001980 <MX_GPIO_Init+0x224>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <MX_GPIO_Init+0x224>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <MX_GPIO_Init+0x224>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a5e      	ldr	r2, [pc, #376]	; (8001980 <MX_GPIO_Init+0x224>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <MX_GPIO_Init+0x224>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2101      	movs	r1, #1
 800181e:	4859      	ldr	r0, [pc, #356]	; (8001984 <MX_GPIO_Init+0x228>)
 8001820:	f003 f806 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f24e 0101 	movw	r1, #57345	; 0xe001
 800182a:	4857      	ldr	r0, [pc, #348]	; (8001988 <MX_GPIO_Init+0x22c>)
 800182c:	f003 f800 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001836:	4853      	ldr	r0, [pc, #332]	; (8001984 <MX_GPIO_Init+0x228>)
 8001838:	f002 fffa 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin;
 800183c:	f240 1301 	movw	r3, #257	; 0x101
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	484b      	ldr	r0, [pc, #300]	; (8001984 <MX_GPIO_Init+0x228>)
 8001856:	f002 fe67 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VDDA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VDDA_PG_Pin|STRIP_PG_Pin;
 800185a:	230e      	movs	r3, #14
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4845      	ldr	r0, [pc, #276]	; (8001984 <MX_GPIO_Init+0x228>)
 800186e:	f002 fe5b 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 8001872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001878:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187e:	2301      	movs	r3, #1
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4840      	ldr	r0, [pc, #256]	; (800198c <MX_GPIO_Init+0x230>)
 800188a:	f002 fe4d 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 800188e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	483b      	ldr	r0, [pc, #236]	; (8001990 <MX_GPIO_Init+0x234>)
 80018a4:	f002 fe40 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 80018a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4834      	ldr	r0, [pc, #208]	; (8001990 <MX_GPIO_Init+0x234>)
 80018c0:	f002 fe32 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 80018c4:	f641 7328 	movw	r3, #7976	; 0x1f28
 80018c8:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	482b      	ldr	r0, [pc, #172]	; (8001988 <MX_GPIO_Init+0x22c>)
 80018dc:	f002 fe24 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 80018e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4823      	ldr	r0, [pc, #140]	; (8001988 <MX_GPIO_Init+0x22c>)
 80018fa:	f002 fe15 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 80018fe:	f244 0301 	movw	r3, #16385	; 0x4001
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <MX_GPIO_Init+0x22c>)
 8001918:	f002 fe06 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001920:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4815      	ldr	r0, [pc, #84]	; (8001988 <MX_GPIO_Init+0x22c>)
 8001932:	f002 fdf9 	bl	8004528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2007      	movs	r0, #7
 800193c:	f001 fc0f 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001940:	2007      	movs	r0, #7
 8001942:	f001 fc28 	bl	8003196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2009      	movs	r0, #9
 800194c:	f001 fc07 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001950:	2009      	movs	r0, #9
 8001952:	f001 fc20 	bl	8003196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2017      	movs	r0, #23
 800195c:	f001 fbff 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001960:	2017      	movs	r0, #23
 8001962:	f001 fc18 	bl	8003196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2028      	movs	r0, #40	; 0x28
 800196c:	f001 fbf7 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f001 fc10 	bl	8003196 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	; 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40021000 	.word	0x40021000
 8001990:	40020400 	.word	0x40020400

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 800199c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <Error_Handler+0x1c>)
 80019a2:	f002 ff5e 	bl	8004862 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80019a6:	20c8      	movs	r0, #200	; 0xc8
 80019a8:	f000 ff70 	bl	800288c <HAL_Delay>
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 80019ac:	e7f6      	b.n	800199c <Error_Handler+0x8>
 80019ae:	bf00      	nop
 80019b0:	40020800 	.word	0x40020800

080019b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_MspInit+0x58>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_MspInit+0x58>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_MspInit+0x58>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_MspInit+0x58>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_MspInit+0x58>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MspInit+0x58>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2005      	movs	r0, #5
 80019f8:	f001 fbb1 	bl	800315e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019fc:	2005      	movs	r0, #5
 80019fe:	f001 fbca 	bl	8003196 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_ADC_MspInit+0x144>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	f040 808c 	bne.w	8001b4c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6453      	str	r3, [r2, #68]	; 0x44
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a3f      	ldr	r2, [pc, #252]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_ADC_MspInit+0x148>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STRIP1_CURR_Pin|STRIP5_CURR_Pin|STRIP2_CURR_Pin|STRIP6_CURR_Pin;
 8001aa4:	23f0      	movs	r3, #240	; 0xf0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4829      	ldr	r0, [pc, #164]	; (8001b5c <HAL_ADC_MspInit+0x14c>)
 8001ab8:	f002 fd36 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP7_CURR_Pin|STRIP3_CURR_Pin;
 8001abc:	2330      	movs	r3, #48	; 0x30
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4824      	ldr	r0, [pc, #144]	; (8001b60 <HAL_ADC_MspInit+0x150>)
 8001ad0:	f002 fd2a 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP4_CURR_Pin|STRIP8_CURR_Pin;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481f      	ldr	r0, [pc, #124]	; (8001b64 <HAL_ADC_MspInit+0x154>)
 8001ae8:	f002 fd1e 	bl	8004528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_ADC_MspInit+0x15c>)
 8001af0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b22:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b32:	f001 fb4b 	bl	80031cc <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001b3c:	f7ff ff2a 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_ADC_MspInit+0x158>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3730      	adds	r7, #48	; 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020400 	.word	0x40020400
 8001b68:	2000019c 	.word	0x2000019c
 8001b6c:	40026410 	.word	0x40026410

08001b70 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09a      	sub	sp, #104	; 0x68
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	223c      	movs	r2, #60	; 0x3c
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f007 ff9b 	bl	8009acc <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_FMPI2C_MspInit+0x168>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	f040 8097 	bne.w	8001cd0 <HAL_FMPI2C_MspInit+0x160>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 feae 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bba:	f7ff feeb 	bl	8001994 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a3e      	ldr	r2, [pc, #248]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c10:	4619      	mov	r1, r3
 8001c12:	4833      	ldr	r0, [pc, #204]	; (8001ce0 <HAL_FMPI2C_MspInit+0x170>)
 8001c14:	f002 fc88 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c30:	4619      	mov	r1, r3
 8001c32:	482c      	ldr	r0, [pc, #176]	; (8001ce4 <HAL_FMPI2C_MspInit+0x174>)
 8001c34:	f002 fc78 	bl	8004528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_FMPI2C_MspInit+0x16c>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <HAL_FMPI2C_MspInit+0x17c>)
 8001c58:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c74:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001c96:	f001 fa99 	bl	80031cc <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_FMPI2C_MspInit+0x134>
    {
      Error_Handler();
 8001ca0:	f7ff fe78 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_FMPI2C_MspInit+0x178>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	205f      	movs	r0, #95	; 0x5f
 8001cb6:	f001 fa52 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 8001cba:	205f      	movs	r0, #95	; 0x5f
 8001cbc:	f001 fa6b 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2060      	movs	r0, #96	; 0x60
 8001cc6:	f001 fa4a 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 8001cca:	2060      	movs	r0, #96	; 0x60
 8001ccc:	f001 fa63 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3768      	adds	r7, #104	; 0x68
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40006000 	.word	0x40006000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	20000248 	.word	0x20000248
 8001cec:	40026028 	.word	0x40026028

08001cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_I2C_MspInit+0x84>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2e:	23c0      	movs	r3, #192	; 0xc0
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d32:	2312      	movs	r3, #18
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <HAL_I2C_MspInit+0x8c>)
 8001d4a:	f002 fbed 	bl	8004528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40005400 	.word	0x40005400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020400 	.word	0x40020400

08001d80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b09a      	sub	sp, #104	; 0x68
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	223c      	movs	r2, #60	; 0x3c
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f007 fe93 	bl	8009acc <memset>
  if(hi2s->Instance==SPI3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_I2S_MspInit+0x1a0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	f040 80b2 	bne.w	8001f16 <HAL_I2S_MspInit+0x196>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 8001db2:	2381      	movs	r3, #129	; 0x81
 8001db4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001db6:	2332      	movs	r3, #50	; 0x32
 8001db8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fd9c 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8001dde:	f7ff fdd9 	bl	8001994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b45      	ldr	r3, [pc, #276]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a39      	ldr	r2, [pc, #228]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_I2S_MspInit+0x1a4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PD6     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e56:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e64:	2306      	movs	r3, #6
 8001e66:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482e      	ldr	r0, [pc, #184]	; (8001f28 <HAL_I2S_MspInit+0x1a8>)
 8001e70:	f002 fb5a 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e86:	2306      	movs	r3, #6
 8001e88:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4826      	ldr	r0, [pc, #152]	; (8001f2c <HAL_I2S_MspInit+0x1ac>)
 8001e92:	f002 fb49 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eae:	4619      	mov	r1, r3
 8001eb0:	481f      	ldr	r0, [pc, #124]	; (8001f30 <HAL_I2S_MspInit+0x1b0>)
 8001eb2:	f002 fb39 	bl	8004528 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_I2S_MspInit+0x1b8>)
 8001eba:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eec:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001efa:	480e      	ldr	r0, [pc, #56]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001efc:	f001 f966 	bl	80031cc <HAL_DMA_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2S_MspInit+0x18a>
    {
      Error_Handler();
 8001f06:	f7ff fd45 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001f0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f10:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_I2S_MspInit+0x1b4>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3768      	adds	r7, #104	; 0x68
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40003c00 	.word	0x40003c00
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	20000344 	.word	0x20000344
 8001f38:	40026010 	.word	0x40026010

08001f3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b092      	sub	sp, #72	; 0x48
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	223c      	movs	r2, #60	; 0x3c
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f007 fdbd 	bl	8009acc <memset>
  if(hrtc->Instance==RTC)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_RTC_MspInit+0x5c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d119      	bne.n	8001f90 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fcd0 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f76:	f7ff fd0d 	bl	8001994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RTC_MspInit+0x60>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2029      	movs	r0, #41	; 0x29
 8001f86:	f001 f8ea 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f8a:	2029      	movs	r0, #41	; 0x29
 8001f8c:	f001 f903 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3748      	adds	r7, #72	; 0x48
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40002800 	.word	0x40002800
 8001f9c:	42470e3c 	.word	0x42470e3c

08001fa0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b09a      	sub	sp, #104	; 0x68
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb8:	f107 0318 	add.w	r3, r7, #24
 8001fbc:	223c      	movs	r2, #60	; 0x3c
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fd83 	bl	8009acc <memset>
  if(hsd->Instance==SDIO)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a44      	ldr	r2, [pc, #272]	; (80020dc <HAL_SD_MspInit+0x13c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	f040 8081 	bne.w	80020d4 <HAL_SD_MspInit+0x134>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001fd2:	2360      	movs	r3, #96	; 0x60
 8001fd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fc94 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001fee:	f7ff fcd1 	bl	8001994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8001ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_SD_MspInit+0x140>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_SD_MspInit+0x140>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_SD_MspInit+0x140>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002074:	230c      	movs	r3, #12
 8002076:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800207c:	4619      	mov	r1, r3
 800207e:	4819      	ldr	r0, [pc, #100]	; (80020e4 <HAL_SD_MspInit+0x144>)
 8002080:	f002 fa52 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002084:	2304      	movs	r3, #4
 8002086:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002094:	230c      	movs	r3, #12
 8002096:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002098:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800209c:	4619      	mov	r1, r3
 800209e:	4812      	ldr	r0, [pc, #72]	; (80020e8 <HAL_SD_MspInit+0x148>)
 80020a0:	f002 fa42 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a4:	2310      	movs	r3, #16
 80020a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80020b4:	230c      	movs	r3, #12
 80020b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020bc:	4619      	mov	r1, r3
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <HAL_SD_MspInit+0x14c>)
 80020c0:	f002 fa32 	bl	8004528 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2031      	movs	r0, #49	; 0x31
 80020ca:	f001 f848 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80020ce:	2031      	movs	r0, #49	; 0x31
 80020d0:	f001 f861 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3768      	adds	r7, #104	; 0x68
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40020400 	.word	0x40020400

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_SPI_MspInit+0x84>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12c      	bne.n	800216c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_SPI_MspInit+0x88>)
 800211c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_SPI_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GRAPH_SDI_Pin|GRAPH_CLK_Pin;
 800214a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800215c:	2305      	movs	r3, #5
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_SPI_MspInit+0x8c>)
 8002168:	f002 f9de 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40013400 	.word	0x40013400
 8002178:	40023800 	.word	0x40023800
 800217c:	40021000 	.word	0x40021000

08002180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <HAL_TIM_Base_MspInit+0xc0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10e      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80021ae:	e042      	b.n	8002236 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a20      	ldr	r2, [pc, #128]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
}
 80021d6:	e02e      	b.n	8002236 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <HAL_TIM_Base_MspInit+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	e01a      	b.n	8002236 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_TIM_Base_MspInit+0xcc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d115      	bne.n	8002236 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_TIM_Base_MspInit+0xc4>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2036      	movs	r0, #54	; 0x36
 800222c:	f000 ff97 	bl	800315e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002230:	2036      	movs	r0, #54	; 0x36
 8002232:	f000 ffb0 	bl	8003196 <HAL_NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40023800 	.word	0x40023800
 8002248:	40000400 	.word	0x40000400
 800224c:	40001000 	.word	0x40001000

08002250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a37      	ldr	r2, [pc, #220]	; (800234c <HAL_TIM_MspPostInit+0xfc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11f      	bne.n	80022b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a35      	ldr	r2, [pc, #212]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = AUDIO_SRC_IND_Pin;
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_SRC_IND_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	482a      	ldr	r0, [pc, #168]	; (8002354 <HAL_TIM_MspPostInit+0x104>)
 80022ac:	f002 f93c 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022b0:	e047      	b.n	8002342 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d11e      	bne.n	80022fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HP_SEL_IND_Pin|XLR_SEL_IND_Pin;
 80022d8:	2303      	movs	r3, #3
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e8:	2301      	movs	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4818      	ldr	r0, [pc, #96]	; (8002354 <HAL_TIM_MspPostInit+0x104>)
 80022f4:	f002 f918 	bl	8004528 <HAL_GPIO_Init>
}
 80022f8:	e023      	b.n	8002342 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_TIM_MspPostInit+0x108>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d11e      	bne.n	8002342 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_TIM_MspPostInit+0x100>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 8002320:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002332:	2302      	movs	r3, #2
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4807      	ldr	r0, [pc, #28]	; (800235c <HAL_TIM_MspPostInit+0x10c>)
 800233e:	f002 f8f3 	bl	8004528 <HAL_GPIO_Init>
}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40000400 	.word	0x40000400
 800235c:	40020800 	.word	0x40020800

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	; 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5b      	ldr	r2, [pc, #364]	; (80024ec <HAL_UART_MspInit+0x18c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d12d      	bne.n	80023de <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a59      	ldr	r2, [pc, #356]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	623b      	str	r3, [r7, #32]
 800239c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_UART_MspInit+0x190>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_UART_MspInit+0x190>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_UART_MspInit+0x190>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 80023ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023cc:	2307      	movs	r3, #7
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4847      	ldr	r0, [pc, #284]	; (80024f4 <HAL_UART_MspInit+0x194>)
 80023d8:	f002 f8a6 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023dc:	e082      	b.n	80024e4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a45      	ldr	r2, [pc, #276]	; (80024f8 <HAL_UART_MspInit+0x198>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d12c      	bne.n	8002442 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_UART_MspInit+0x190>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4a3f      	ldr	r2, [pc, #252]	; (80024f0 <HAL_UART_MspInit+0x190>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f6:	6413      	str	r3, [r2, #64]	; 0x40
 80023f8:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_UART_MspInit+0x190>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 8002420:	230c      	movs	r3, #12
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002430:	2307      	movs	r3, #7
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	482e      	ldr	r0, [pc, #184]	; (80024f4 <HAL_UART_MspInit+0x194>)
 800243c:	f002 f874 	bl	8004528 <HAL_GPIO_Init>
}
 8002440:	e050      	b.n	80024e4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2d      	ldr	r2, [pc, #180]	; (80024fc <HAL_UART_MspInit+0x19c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d14b      	bne.n	80024e4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_UART_MspInit+0x190>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	6313      	str	r3, [r2, #48]	; 0x30
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_UART_MspInit+0x190>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 80024a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b2:	2307      	movs	r3, #7
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4810      	ldr	r0, [pc, #64]	; (8002500 <HAL_UART_MspInit+0x1a0>)
 80024be:	f002 f833 	bl	8004528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 80024c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024d4:	2307      	movs	r3, #7
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <HAL_UART_MspInit+0x1a4>)
 80024e0:	f002 f822 	bl	8004528 <HAL_GPIO_Init>
}
 80024e4:	bf00      	nop
 80024e6:	3738      	adds	r7, #56	; 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40004400 	.word	0x40004400
 80024fc:	40004800 	.word	0x40004800
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 f97a 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDIO_CD_Pin);
 800256e:	2002      	movs	r0, #2
 8002570:	f002 f992 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}

08002578 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 800257c:	2008      	movs	r0, #8
 800257e:	f002 f98b 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <DMA1_Stream0_IRQHandler+0x10>)
 800258e:	f000 feed 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000344 	.word	0x20000344

0800259c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Stream1_IRQHandler+0x10>)
 80025a2:	f000 fee3 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000248 	.word	0x20000248

080025b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 80025b4:	2020      	movs	r0, #32
 80025b6:	f002 f96f 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 80025ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025be:	f002 f96b 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 80025c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025c6:	f002 f967 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}

080025ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 80025d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025d6:	f002 f95f 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 80025da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025de:	f002 f95b 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 80025e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025e6:	f002 f957 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80025ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025ee:	f002 f953 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 80025f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025f6:	f002 f94f 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 80025fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025fe:	f002 f94b 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <RTC_Alarm_IRQHandler+0x10>)
 800260e:	f004 fa09 	bl	8006a24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200003a4 	.word	0x200003a4

0800261c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <SDIO_IRQHandler+0x10>)
 8002622:	f004 fbab 	bl	8006d7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200003c4 	.word	0x200003c4

08002630 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TIM6_IRQHandler+0x10>)
 8002636:	f005 fbef 	bl	8007e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000578 	.word	0x20000578

08002644 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <DMA2_Stream0_IRQHandler+0x10>)
 800264a:	f000 fe8f 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000019c 	.word	0x2000019c

08002658 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <FMPI2C1_EV_IRQHandler+0x10>)
 800265e:	f001 f95e 	bl	800391e <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200001fc 	.word	0x200001fc

0800266c <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <FMPI2C1_ER_IRQHandler+0x10>)
 8002672:	f001 f96e 	bl	8003952 <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001fc 	.word	0x200001fc

08002680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return 1;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_kill>:

int _kill(int pid, int sig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800269a:	f007 f9dd 	bl	8009a58 <__errno>
 800269e:	4603      	mov	r3, r0
 80026a0:	2216      	movs	r2, #22
 80026a2:	601a      	str	r2, [r3, #0]
  return -1;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_exit>:

void _exit (int status)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffe7 	bl	8002690 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026c2:	e7fe      	b.n	80026c2 <_exit+0x12>

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f007 f9b0 	bl	8009a58 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20040000 	.word	0x20040000
 8002724:	00000400 	.word	0x00000400
 8002728:	2000068c 	.word	0x2000068c
 800272c:	200006a8 	.word	0x200006a8

08002730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275a:	490e      	ldr	r1, [pc, #56]	; (8002794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002770:	4c0b      	ldr	r4, [pc, #44]	; (80027a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800277e:	f7ff ffd7 	bl	8002730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f007 f96f 	bl	8009a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7fe fa6d 	bl	8000c64 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800278c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002798:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 800279c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027a0:	200006a8 	.word	0x200006a8

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <HAL_Init+0x40>)
 80027b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_Init+0x40>)
 80027be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_Init+0x40>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 fcb9 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	200f      	movs	r0, #15
 80027d8:	f000 f808 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027dc:	f7ff f8ea 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x54>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	fbb3 f3f1 	udiv	r3, r3, r1
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fcd1 	bl	80031b2 <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00e      	b.n	8002838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d80a      	bhi.n	8002836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 fc99 	bl	800315e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <HAL_InitTick+0x5c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000000 	.word	0x20000000
 8002844:	20000008 	.word	0x20000008
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000008 	.word	0x20000008
 8002870:	20000690 	.word	0x20000690

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000690 	.word	0x20000690

0800288c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff ffee 	bl	8002874 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d005      	beq.n	80028b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_Delay+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b2:	bf00      	nop
 80028b4:	f7ff ffde 	bl	8002874 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d8f7      	bhi.n	80028b4 <HAL_Delay+0x28>
  {
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000008 	.word	0x20000008

080028d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e04a      	b.n	8002980 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d120      	bne.n	8002934 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_ADC_Init+0xb4>)
 80028f6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a24      	ldr	r2, [pc, #144]	; (800298c <HAL_ADC_Init+0xb8>)
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <HAL_ADC_Init+0xbc>)
 8002902:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_ADC_Init+0xc0>)
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_ADC_Init+0xc4>)
 800290e:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_ADC_Init+0xc8>)
 800291c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002948:	f023 0302 	bic.w	r3, r3, #2
 800294c:	f043 0202 	orr.w	r2, r3, #2
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fa21 	bl	8002d9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f023 0303 	bic.w	r3, r3, #3
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
 8002970:	e001      	b.n	8002976 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08002b09 	.word	0x08002b09
 800298c:	08002b1d 	.word	0x08002b1d
 8002990:	08002b31 	.word	0x08002b31
 8002994:	08002b45 	.word	0x08002b45
 8002998:	08002f95 	.word	0x08002f95
 800299c:	08001a11 	.word	0x08001a11

080029a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Start+0x1a>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e097      	b.n	8002aea <HAL_ADC_Start+0x14a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d018      	beq.n	8002a02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029e0:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <HAL_ADC_Start+0x158>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_ADC_Start+0x15c>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9a      	lsrs	r2, r3, #18
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d15f      	bne.n	8002ad0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d106      	bne.n	8002a5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f023 0206 	bic.w	r2, r3, #6
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a5c:	e002      	b.n	8002a64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_ADC_Start+0x160>)
 8002a6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d129      	bne.n	8002ae8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e020      	b.n	8002ae8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_ADC_Start+0x164>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d11b      	bne.n	8002ae8 <HAL_ADC_Start+0x148>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d114      	bne.n	8002ae8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	e00b      	b.n	8002ae8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f043 0210 	orr.w	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	40012300 	.word	0x40012300
 8002b04:	40012000 	.word	0x40012000

08002b08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1c>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e105      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x228>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	d925      	bls.n	8002bd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68d9      	ldr	r1, [r3, #12]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	3b1e      	subs	r3, #30
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	400a      	ands	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68d9      	ldr	r1, [r3, #12]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4403      	add	r3, r0
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e022      	b.n	8002c16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6919      	ldr	r1, [r3, #16]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	2207      	movs	r2, #7
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6919      	ldr	r1, [r3, #16]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4403      	add	r3, r0
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d824      	bhi.n	8002c68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3b05      	subs	r3, #5
 8002c30:	221f      	movs	r2, #31
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	3b05      	subs	r3, #5
 8002c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
 8002c66:	e04c      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d824      	bhi.n	8002cba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b23      	subs	r3, #35	; 0x23
 8002c82:	221f      	movs	r2, #31
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	400a      	ands	r2, r1
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b23      	subs	r3, #35	; 0x23
 8002cac:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb8:	e023      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b41      	subs	r3, #65	; 0x41
 8002ccc:	221f      	movs	r2, #31
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	400a      	ands	r2, r1
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b41      	subs	r3, #65	; 0x41
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_ADC_ConfigChannel+0x234>)
 8002d04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_ADC_ConfigChannel+0x238>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d109      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x1cc>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b12      	cmp	r3, #18
 8002d16:	d105      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_ADC_ConfigChannel+0x238>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d123      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x21e>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d003      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0x1e6>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d11b      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d111      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_ADC_ConfigChannel+0x23c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_ADC_ConfigChannel+0x240>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	0c9a      	lsrs	r2, r3, #18
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d68:	e002      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f9      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012300 	.word	0x40012300
 8002d90:	40012000 	.word	0x40012000
 8002d94:	20000000 	.word	0x20000000
 8002d98:	431bde83 	.word	0x431bde83

08002d9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da4:	4b79      	ldr	r3, [pc, #484]	; (8002f8c <ADC_Init+0x1f0>)
 8002da6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	021a      	lsls	r2, r3, #8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <ADC_Init+0x1f4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d022      	beq.n	8002e7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6899      	ldr	r1, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	e00f      	b.n	8002e9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0202 	bic.w	r2, r2, #2
 8002ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7e1b      	ldrb	r3, [r3, #24]
 8002eb4:	005a      	lsls	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01b      	beq.n	8002f00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ee6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	035a      	lsls	r2, r3, #13
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e007      	b.n	8002f10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	051a      	lsls	r2, r3, #20
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f52:	025a      	lsls	r2, r3, #9
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	029a      	lsls	r2, r3, #10
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40012300 	.word	0x40012300
 8002f90:	0f000001 	.word	0x0f000001

08002f94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 0307 	and.w	r3, r3, #7
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff29 	bl	8002fa8 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff3e 	bl	8002ff0 <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff8e 	bl	800309c <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5d 	bl	8003048 <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff31 	bl	800300c <__NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffa2 	bl	8003104 <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff fb4c 	bl	8002874 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e099      	b.n	800331c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003208:	e00f      	b.n	800322a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800320a:	f7ff fb33 	bl	8002874 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b05      	cmp	r3, #5
 8003216:	d908      	bls.n	800322a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e078      	b.n	800331c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e8      	bne.n	800320a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_DMA_Init+0x158>)
 8003244:	4013      	ands	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4313      	orrs	r3, r2
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0307 	bic.w	r3, r3, #7
 80032aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d117      	bne.n	80032ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa19 	bl	8003708 <DMA_CheckFifoParam>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ea:	2301      	movs	r3, #1
 80032ec:	e016      	b.n	800331c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f9d0 	bl	800369c <DMA_CalcBaseAndBitshift>
 80032fc:	4603      	mov	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	223f      	movs	r2, #63	; 0x3f
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	f010803f 	.word	0xf010803f

08003328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e00c      	b.n	8003360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003378:	4b8e      	ldr	r3, [pc, #568]	; (80035b4 <HAL_DMA_IRQHandler+0x248>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a8e      	ldr	r2, [pc, #568]	; (80035b8 <HAL_DMA_IRQHandler+0x24c>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	2208      	movs	r2, #8
 80033c6:	409a      	lsls	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	2204      	movs	r2, #4
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2210      	movs	r2, #16
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d043      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03c      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2210      	movs	r2, #16
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e01f      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e016      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0208 	bic.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	2220      	movs	r2, #32
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 808f 	beq.w	800360c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8087 	beq.w	800360c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2220      	movs	r2, #32
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d136      	bne.n	8003584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0216 	bic.w	r2, r2, #22
 8003524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_DMA_IRQHandler+0x1da>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	223f      	movs	r2, #63	; 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
        }
        return;
 8003582:	e079      	b.n	8003678 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d031      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
 80035b0:	e02c      	b.n	800360c <HAL_DMA_IRQHandler+0x2a0>
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000
 80035b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e01e      	b.n	800360c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0210 	bic.w	r2, r2, #16
 80035ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	2b00      	cmp	r3, #0
 8003612:	d032      	beq.n	800367a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d022      	beq.n	8003666 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2205      	movs	r2, #5
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	d307      	bcc.n	8003654 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f2      	bne.n	8003638 <HAL_DMA_IRQHandler+0x2cc>
 8003652:	e000      	b.n	8003656 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003654:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
 8003676:	e000      	b.n	800367a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003678:	bf00      	nop
    }
  }
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368e:	b2db      	uxtb	r3, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3b10      	subs	r3, #16
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <DMA_CalcBaseAndBitshift+0x64>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <DMA_CalcBaseAndBitshift+0x68>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d909      	bls.n	80036de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	; 0x58
 80036dc:	e007      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	08009dd0 	.word	0x08009dd0

08003708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d856      	bhi.n	80037d6 <DMA_CheckFifoParam+0xce>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <DMA_CheckFifoParam+0x28>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003741 	.word	0x08003741
 8003734:	08003753 	.word	0x08003753
 8003738:	08003741 	.word	0x08003741
 800373c:	080037d7 	.word	0x080037d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d046      	beq.n	80037da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e043      	b.n	80037da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375a:	d140      	bne.n	80037de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e03d      	b.n	80037de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376a:	d121      	bne.n	80037b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d837      	bhi.n	80037e2 <DMA_CheckFifoParam+0xda>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <DMA_CheckFifoParam+0x70>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	08003789 	.word	0x08003789
 800377c:	0800378f 	.word	0x0800378f
 8003780:	08003789 	.word	0x08003789
 8003784:	080037a1 	.word	0x080037a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e030      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d025      	beq.n	80037e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379e:	e022      	b.n	80037e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a8:	d11f      	bne.n	80037ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ae:	e01c      	b.n	80037ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d903      	bls.n	80037be <DMA_CheckFifoParam+0xb6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037bc:	e018      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      break;
 80037c2:	e015      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e00b      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037d6:	bf00      	nop
 80037d8:	e00a      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e008      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e006      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
    }
  } 
  
  return status; 
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e081      	b.n	8003916 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe f9a2 	bl	8001b70 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003850:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003860:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e006      	b.n	8003888 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d104      	bne.n	800389a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038bc:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69d9      	ldr	r1, [r3, #28]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
  }
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b086      	sub	sp, #24
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d010      	beq.n	8003998 <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	09db      	lsrs	r3, r3, #7
 800397a:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003996:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	0a9b      	lsrs	r3, r3, #10
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	09db      	lsrs	r3, r3, #7
 80039a8:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0208 	orr.w	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c4:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	09db      	lsrs	r3, r3, #7
 80039d6:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 030b 	and.w	r3, r3, #11
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fb8a 	bl	8004120 <FMPI2C_ITError>
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <FMPI2C_Slave_ISR_IT+0x24>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0ec      	b.n	8003c92 <FMPI2C_Slave_ISR_IT+0x1fe>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8003ad8:	6939      	ldr	r1, [r7, #16]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f9c0 	bl	8003e60 <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d04d      	beq.n	8003b88 <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d047      	beq.n	8003b88 <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d128      	bne.n	8003b54 <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b28      	cmp	r3, #40	; 0x28
 8003b0c:	d108      	bne.n	8003b20 <FMPI2C_Slave_ISR_IT+0x8c>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b14:	d104      	bne.n	8003b20 <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8003b16:	6939      	ldr	r1, [r7, #16]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 faab 	bl	8004074 <FMPI2C_ITListenCplt>
 8003b1e:	e032      	b.n	8003b86 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b29      	cmp	r3, #41	; 0x29
 8003b2a:	d10e      	bne.n	8003b4a <FMPI2C_Slave_ISR_IT+0xb6>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b32:	d00a      	beq.n	8003b4a <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fbe6 	bl	800430e <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f92d 	bl	8003da2 <FMPI2C_ITSlaveSeqCplt>
 8003b48:	e01d      	b.n	8003b86 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2210      	movs	r2, #16
 8003b50:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 8003b52:	e096      	b.n	8003c82 <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <FMPI2C_Slave_ISR_IT+0xe4>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b74:	f040 8085 	bne.w	8003c82 <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 8003b84:	e07d      	b.n	8003c82 <FMPI2C_Slave_ISR_IT+0x1ee>
 8003b86:	e07c      	b.n	8003c82 <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d030      	beq.n	8003bf6 <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02a      	beq.n	8003bf6 <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d14f      	bne.n	8003c86 <FMPI2C_Slave_ISR_IT+0x1f2>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bec:	d04b      	beq.n	8003c86 <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f8d7 	bl	8003da2 <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 8003bf4:	e047      	b.n	8003c86 <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	08db      	lsrs	r3, r3, #3
 8003c06:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 8003c0e:	6939      	ldr	r1, [r7, #16]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f842 	bl	8003c9a <FMPI2C_ITAddrCplt>
 8003c16:	e037      	b.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d031      	beq.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d02b      	beq.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c6a:	e00d      	b.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c72:	d002      	beq.n	8003c7a <FMPI2C_Slave_ISR_IT+0x1e6>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f891 	bl	8003da2 <FMPI2C_ITSlaveSeqCplt>
 8003c80:	e002      	b.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 8003c86:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cb0:	2b28      	cmp	r3, #40	; 0x28
 8003cb2:	d16a      	bne.n	8003d8a <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cd2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cee:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d138      	bne.n	8003d6a <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003cf8:	897b      	ldrh	r3, [r7, #10]
 8003cfa:	09db      	lsrs	r3, r3, #7
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	4053      	eors	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f003 0306 	and.w	r3, r3, #6
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11c      	bne.n	8003d46 <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d0c:	897b      	ldrh	r3, [r7, #10]
 8003d0e:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d13b      	bne.n	8003d9a <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8003d38:	89ba      	ldrh	r2, [r7, #12]
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff fe7c 	bl	8003a3c <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 8003d44:	e029      	b.n	8003d9a <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8003d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fb1f 	bl	8004392 <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8003d5c:	89ba      	ldrh	r2, [r7, #12]
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe6a 	bl	8003a3c <HAL_FMPI2C_AddrCallback>
}
 8003d68:	e017      	b.n	8003d9a <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8003d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fb0f 	bl	8004392 <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8003d7c:	89ba      	ldrh	r2, [r7, #12]
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fe5a 	bl	8003a3c <HAL_FMPI2C_AddrCallback>
}
 8003d88:	e007      	b.n	8003d9a <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	0b9b      	lsrs	r3, r3, #14
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e00d      	b.n	8003df4 <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	0bdb      	lsrs	r3, r3, #15
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b29      	cmp	r3, #41	; 0x29
 8003dfe:	d112      	bne.n	8003e26 <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2228      	movs	r2, #40	; 0x28
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2221      	movs	r2, #33	; 0x21
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 8003e0e:	2101      	movs	r1, #1
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fabe 	bl	8004392 <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fdf8 	bl	8003a14 <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e24:	e017      	b.n	8003e56 <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d111      	bne.n	8003e56 <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2228      	movs	r2, #40	; 0x28
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2222      	movs	r2, #34	; 0x22
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 8003e40:	2102      	movs	r1, #2
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 faa5 	bl	8004392 <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fde9 	bl	8003a28 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b21      	cmp	r3, #33	; 0x21
 8003e8a:	d002      	beq.n	8003e92 <FMPI2C_ITSlaveCplt+0x32>
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b29      	cmp	r3, #41	; 0x29
 8003e90:	d108      	bne.n	8003ea4 <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 8003e92:	f248 0101 	movw	r1, #32769	; 0x8001
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa7b 	bl	8004392 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea2:	e00d      	b.n	8003ec0 <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b22      	cmp	r3, #34	; 0x22
 8003ea8:	d002      	beq.n	8003eb0 <FMPI2C_ITSlaveCplt+0x50>
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b2a      	cmp	r3, #42	; 0x2a
 8003eae:	d107      	bne.n	8003ec0 <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 8003eb0:	f248 0102 	movw	r1, #32770	; 0x8002
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fa6c 	bl	8004392 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2222      	movs	r2, #34	; 0x22
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ece:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b64      	ldr	r3, [pc, #400]	; (800406c <FMPI2C_ITSlaveCplt+0x20c>)
 8003edc:	400b      	ands	r3, r1
 8003ede:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fa14 	bl	800430e <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	0b9b      	lsrs	r3, r3, #14
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d013      	beq.n	8003f1a <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f00:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d020      	beq.n	8003f4c <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f18:	e018      	b.n	8003f4c <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	0bdb      	lsrs	r3, r3, #15
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d012      	beq.n	8003f4c <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f34:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0304 	bic.w	r3, r3, #4
 8003f5e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00c      	beq.n	8003f9a <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d010      	beq.n	8003fe8 <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8a7 	bl	8004120 <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b28      	cmp	r3, #40	; 0x28
 8003fdc:	d141      	bne.n	8004062 <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f847 	bl	8004074 <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8003fe6:	e03c      	b.n	8004062 <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff0:	d014      	beq.n	800401c <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fed5 	bl	8003da2 <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <FMPI2C_ITSlaveCplt+0x210>)
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fd1f 	bl	8003a58 <HAL_FMPI2C_ListenCpltCallback>
}
 800401a:	e022      	b.n	8004062 <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b22      	cmp	r3, #34	; 0x22
 8004026:	d10e      	bne.n	8004046 <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fcf2 	bl	8003a28 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8004044:	e00d      	b.n	8004062 <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fcd9 	bl	8003a14 <HAL_FMPI2C_SlaveTxCpltCallback>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	fe00e800 	.word	0xfe00e800
 8004070:	ffff0000 	.word	0xffff0000

08004074 <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <FMPI2C_ITListenCplt+0xa8>)
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d022      	beq.n	80040f2 <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 80040f2:	f248 0103 	movw	r1, #32771	; 0x8003
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f94b 	bl	8004392 <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2210      	movs	r2, #16
 8004102:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fca3 	bl	8003a58 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	ffff0000 	.word	0xffff0000

08004120 <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a5d      	ldr	r2, [pc, #372]	; (80042b4 <FMPI2C_ITError+0x194>)
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b28      	cmp	r3, #40	; 0x28
 8004156:	d005      	beq.n	8004164 <FMPI2C_ITError+0x44>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b29      	cmp	r3, #41	; 0x29
 800415c:	d002      	beq.n	8004164 <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b2a      	cmp	r3, #42	; 0x2a
 8004162:	d10b      	bne.n	800417c <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004164:	2103      	movs	r1, #3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f913 	bl	8004392 <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2228      	movs	r2, #40	; 0x28
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a50      	ldr	r2, [pc, #320]	; (80042b8 <FMPI2C_ITError+0x198>)
 8004178:	635a      	str	r2, [r3, #52]	; 0x34
 800417a:	e011      	b.n	80041a0 <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 800417c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f906 	bl	8004392 <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b60      	cmp	r3, #96	; 0x60
 8004190:	d003      	beq.n	800419a <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d039      	beq.n	8004222 <FMPI2C_ITError+0x102>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b11      	cmp	r3, #17
 80041b2:	d002      	beq.n	80041ba <FMPI2C_ITError+0x9a>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b21      	cmp	r3, #33	; 0x21
 80041b8:	d133      	bne.n	8004222 <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c8:	d107      	bne.n	80041da <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fa4e 	bl	8003680 <HAL_DMA_GetState>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d017      	beq.n	800421a <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	4a33      	ldr	r2, [pc, #204]	; (80042bc <FMPI2C_ITError+0x19c>)
 80041f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff f892 	bl	8003328 <HAL_DMA_Abort_IT>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d04d      	beq.n	80042a6 <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004214:	4610      	mov	r0, r2
 8004216:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004218:	e045      	b.n	80042a6 <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f850 	bl	80042c0 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004220:	e041      	b.n	80042a6 <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d039      	beq.n	800429e <FMPI2C_ITError+0x17e>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b12      	cmp	r3, #18
 800422e:	d002      	beq.n	8004236 <FMPI2C_ITError+0x116>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b22      	cmp	r3, #34	; 0x22
 8004234:	d133      	bne.n	800429e <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004244:	d107      	bne.n	8004256 <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004254:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fa10 	bl	8003680 <HAL_DMA_GetState>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d017      	beq.n	8004296 <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <FMPI2C_ITError+0x19c>)
 800426c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff f854 	bl	8003328 <HAL_DMA_Abort_IT>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d011      	beq.n	80042aa <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004290:	4610      	mov	r0, r2
 8004292:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004294:	e009      	b.n	80042aa <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f812 	bl	80042c0 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 800429c:	e005      	b.n	80042aa <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f80e 	bl	80042c0 <FMPI2C_TreatErrorCallback>
  }
}
 80042a4:	e002      	b.n	80042ac <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042aa:	bf00      	nop
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	ffff0000 	.word	0xffff0000
 80042b8:	08003a95 	.word	0x08003a95
 80042bc:	08004357 	.word	0x08004357

080042c0 <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d10e      	bne.n	80042f2 <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fbc8 	bl	8003a80 <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 80042f0:	e009      	b.n	8004306 <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fbb3 	bl	8003a6c <HAL_FMPI2C_ErrorCallback>
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b02      	cmp	r3, #2
 8004322:	d103      	bne.n	800432c <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d007      	beq.n	800434a <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	619a      	str	r2, [r3, #24]
  }
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	2200      	movs	r2, #0
 8004372:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2200      	movs	r2, #0
 8004382:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff ff9b 	bl	80042c0 <FMPI2C_TreatErrorCallback>
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00f      	beq.n	80043cc <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80043b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c0:	2b28      	cmp	r3, #40	; 0x28
 80043c2:	d003      	beq.n	80043cc <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00f      	beq.n	80043f6 <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80043dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ea:	2b28      	cmp	r3, #40	; 0x28
 80043ec:	d003      	beq.n	80043f6 <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 80043f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da03      	bge.n	8004406 <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d103      	bne.n	8004414 <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004412:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	2b20      	cmp	r3, #32
 8004418:	d103      	bne.n	8004422 <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f043 0320 	orr.w	r3, r3, #32
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d103      	bne.n	8004430 <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43da      	mvns	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	400a      	ands	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	d138      	bne.n	80044d6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 800446e:	2302      	movs	r3, #2
 8004470:	e032      	b.n	80044d8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2224      	movs	r2, #36	; 0x24
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80044f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044fa:	6453      	str	r3, [r2, #68]	; 0x44
 80044fc:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 800450a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450c:	4905      	ldr	r1, [pc, #20]	; (8004524 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40023800 	.word	0x40023800
 8004524:	40013800 	.word	0x40013800

08004528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	; 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e159      	b.n	80047f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004544:	2201      	movs	r2, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	f040 8148 	bne.w	80047f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d005      	beq.n	800457a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004576:	2b02      	cmp	r3, #2
 8004578:	d130      	bne.n	80045dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	2203      	movs	r2, #3
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b0:	2201      	movs	r2, #1
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 0201 	and.w	r2, r3, #1
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d017      	beq.n	8004618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d123      	bne.n	800466c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	08da      	lsrs	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3208      	adds	r2, #8
 800462c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	220f      	movs	r2, #15
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	08da      	lsrs	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3208      	adds	r2, #8
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	2203      	movs	r2, #3
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0203 	and.w	r2, r3, #3
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a2 	beq.w	80047f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_GPIO_Init+0x2e8>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_GPIO_Init+0x2e8>)
 80046b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046bc:	6453      	str	r3, [r2, #68]	; 0x44
 80046be:	4b54      	ldr	r3, [pc, #336]	; (8004810 <HAL_GPIO_Init+0x2e8>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ca:	4a52      	ldr	r2, [pc, #328]	; (8004814 <HAL_GPIO_Init+0x2ec>)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	3302      	adds	r3, #2
 80046d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	220f      	movs	r2, #15
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a49      	ldr	r2, [pc, #292]	; (8004818 <HAL_GPIO_Init+0x2f0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d019      	beq.n	800472a <HAL_GPIO_Init+0x202>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a48      	ldr	r2, [pc, #288]	; (800481c <HAL_GPIO_Init+0x2f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x1fe>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a47      	ldr	r2, [pc, #284]	; (8004820 <HAL_GPIO_Init+0x2f8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00d      	beq.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a46      	ldr	r2, [pc, #280]	; (8004824 <HAL_GPIO_Init+0x2fc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <HAL_GPIO_Init+0x1f6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a45      	ldr	r2, [pc, #276]	; (8004828 <HAL_GPIO_Init+0x300>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_GPIO_Init+0x1f2>
 8004716:	2304      	movs	r3, #4
 8004718:	e008      	b.n	800472c <HAL_GPIO_Init+0x204>
 800471a:	2307      	movs	r3, #7
 800471c:	e006      	b.n	800472c <HAL_GPIO_Init+0x204>
 800471e:	2303      	movs	r3, #3
 8004720:	e004      	b.n	800472c <HAL_GPIO_Init+0x204>
 8004722:	2302      	movs	r3, #2
 8004724:	e002      	b.n	800472c <HAL_GPIO_Init+0x204>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_GPIO_Init+0x204>
 800472a:	2300      	movs	r3, #0
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	f002 0203 	and.w	r2, r2, #3
 8004732:	0092      	lsls	r2, r2, #2
 8004734:	4093      	lsls	r3, r2
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473c:	4935      	ldr	r1, [pc, #212]	; (8004814 <HAL_GPIO_Init+0x2ec>)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800474a:	4b38      	ldr	r3, [pc, #224]	; (800482c <HAL_GPIO_Init+0x304>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800476e:	4a2f      	ldr	r2, [pc, #188]	; (800482c <HAL_GPIO_Init+0x304>)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004774:	4b2d      	ldr	r3, [pc, #180]	; (800482c <HAL_GPIO_Init+0x304>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004798:	4a24      	ldr	r2, [pc, #144]	; (800482c <HAL_GPIO_Init+0x304>)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <HAL_GPIO_Init+0x304>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047c2:	4a1a      	ldr	r2, [pc, #104]	; (800482c <HAL_GPIO_Init+0x304>)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <HAL_GPIO_Init+0x304>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ec:	4a0f      	ldr	r2, [pc, #60]	; (800482c <HAL_GPIO_Init+0x304>)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	f67f aea2 	bls.w	8004544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3724      	adds	r7, #36	; 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	40013800 	.word	0x40013800
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400
 8004820:	40020800 	.word	0x40020800
 8004824:	40020c00 	.word	0x40020c00
 8004828:	40021000 	.word	0x40021000
 800482c:	40013c00 	.word	0x40013c00

08004830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
 800483c:	4613      	mov	r3, r2
 800483e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004840:	787b      	ldrb	r3, [r7, #1]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800484c:	e003      	b.n	8004856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	041a      	lsls	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	619a      	str	r2, [r3, #24]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004874:	887a      	ldrh	r2, [r7, #2]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4013      	ands	r3, r2
 800487a:	041a      	lsls	r2, r3, #16
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	43d9      	mvns	r1, r3
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	400b      	ands	r3, r1
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ae:	4a05      	ldr	r2, [pc, #20]	; (80048c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fc f991 	bl	8000bde <HAL_GPIO_EXTI_Callback>
  }
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40013c00 	.word	0x40013c00

080048c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e12b      	b.n	8004b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd f9fe 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800492a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800492c:	f000 ffc8 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8004930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4a81      	ldr	r2, [pc, #516]	; (8004b3c <HAL_I2C_Init+0x274>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d807      	bhi.n	800494c <HAL_I2C_Init+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a80      	ldr	r2, [pc, #512]	; (8004b40 <HAL_I2C_Init+0x278>)
 8004940:	4293      	cmp	r3, r2
 8004942:	bf94      	ite	ls
 8004944:	2301      	movls	r3, #1
 8004946:	2300      	movhi	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e006      	b.n	800495a <HAL_I2C_Init+0x92>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a7d      	ldr	r2, [pc, #500]	; (8004b44 <HAL_I2C_Init+0x27c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	bf94      	ite	ls
 8004954:	2301      	movls	r3, #1
 8004956:	2300      	movhi	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0e7      	b.n	8004b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a78      	ldr	r2, [pc, #480]	; (8004b48 <HAL_I2C_Init+0x280>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0c9b      	lsrs	r3, r3, #18
 800496c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <HAL_I2C_Init+0x274>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d802      	bhi.n	800499c <HAL_I2C_Init+0xd4>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	3301      	adds	r3, #1
 800499a:	e009      	b.n	80049b0 <HAL_I2C_Init+0xe8>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <HAL_I2C_Init+0x284>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	3301      	adds	r3, #1
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	495c      	ldr	r1, [pc, #368]	; (8004b3c <HAL_I2C_Init+0x274>)
 80049cc:	428b      	cmp	r3, r1
 80049ce:	d819      	bhi.n	8004a04 <HAL_I2C_Init+0x13c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1e59      	subs	r1, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fbb1 f3f3 	udiv	r3, r1, r3
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049e4:	400b      	ands	r3, r1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_I2C_Init+0x138>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1e59      	subs	r1, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fe:	e051      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a00:	2304      	movs	r3, #4
 8004a02:	e04f      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d111      	bne.n	8004a30 <HAL_I2C_Init+0x168>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e58      	subs	r0, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	440b      	add	r3, r1
 8004a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e012      	b.n	8004a56 <HAL_I2C_Init+0x18e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e58      	subs	r0, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	0099      	lsls	r1, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Init+0x196>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e022      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <HAL_I2C_Init+0x1bc>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1e58      	subs	r0, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	440b      	add	r3, r1
 8004a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	e00f      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	0099      	lsls	r1, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	6809      	ldr	r1, [r1, #0]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6911      	ldr	r1, [r2, #16]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	000186a0 	.word	0x000186a0
 8004b40:	001e847f 	.word	0x001e847f
 8004b44:	003d08ff 	.word	0x003d08ff
 8004b48:	431bde83 	.word	0x431bde83
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e154      	b.n	8004e0c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a98      	ldr	r2, [pc, #608]	; (8004ddc <HAL_I2S_Init+0x28c>)
 8004b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fd f8ff 	bl	8001d80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b98:	f023 030f 	bic.w	r3, r3, #15
 8004b9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d06f      	beq.n	8004c8e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e001      	b.n	8004bc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d802      	bhi.n	8004bce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a83      	ldr	r2, [pc, #524]	; (8004de0 <HAL_I2S_Init+0x290>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_I2S_Init+0x92>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a81      	ldr	r2, [pc, #516]	; (8004de4 <HAL_I2S_Init+0x294>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d104      	bne.n	8004bec <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004be2:	2001      	movs	r0, #1
 8004be4:	f001 f862 	bl	8005cac <HAL_RCCEx_GetPeriphCLKFreq>
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	e003      	b.n	8004bf4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8004bec:	2002      	movs	r0, #2
 8004bee:	f001 f85d 	bl	8005cac <HAL_RCCEx_GetPeriphCLKFreq>
 8004bf2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfc:	d125      	bne.n	8004c4a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d010      	beq.n	8004c28 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	3305      	adds	r3, #5
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e01f      	b.n	8004c68 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	3305      	adds	r3, #5
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	e00e      	b.n	8004c68 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	3305      	adds	r3, #5
 8004c66:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4a5f      	ldr	r2, [pc, #380]	; (8004de8 <HAL_I2S_Init+0x298>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	e003      	b.n	8004c96 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d902      	bls.n	8004ca2 <HAL_I2S_Init+0x152>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2bff      	cmp	r3, #255	; 0xff
 8004ca0:	d907      	bls.n	8004cb2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e0ac      	b.n	8004e0c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cd0:	f023 030f 	bic.w	r3, r3, #15
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6851      	ldr	r1, [r2, #4]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6992      	ldr	r2, [r2, #24]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b30      	cmp	r3, #48	; 0x30
 8004cfc:	d003      	beq.n	8004d06 <HAL_I2S_Init+0x1b6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2bb0      	cmp	r3, #176	; 0xb0
 8004d04:	d107      	bne.n	8004d16 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d14:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d16e      	bne.n	8004dfc <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a32      	ldr	r2, [pc, #200]	; (8004dec <HAL_I2S_Init+0x29c>)
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2d      	ldr	r2, [pc, #180]	; (8004de0 <HAL_I2S_Init+0x290>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2S_Init+0x1e2>
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_I2S_Init+0x2a0>)
 8004d30:	e001      	b.n	8004d36 <HAL_I2S_Init+0x1e6>
 8004d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	4928      	ldr	r1, [pc, #160]	; (8004de0 <HAL_I2S_Init+0x290>)
 8004d3e:	428a      	cmp	r2, r1
 8004d40:	d101      	bne.n	8004d46 <HAL_I2S_Init+0x1f6>
 8004d42:	4a2b      	ldr	r2, [pc, #172]	; (8004df0 <HAL_I2S_Init+0x2a0>)
 8004d44:	e001      	b.n	8004d4a <HAL_I2S_Init+0x1fa>
 8004d46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004d4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d4e:	f023 030f 	bic.w	r3, r3, #15
 8004d52:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <HAL_I2S_Init+0x290>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2S_Init+0x212>
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_I2S_Init+0x2a0>)
 8004d60:	e001      	b.n	8004d66 <HAL_I2S_Init+0x216>
 8004d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d66:	2202      	movs	r2, #2
 8004d68:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <HAL_I2S_Init+0x290>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_I2S_Init+0x228>
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <HAL_I2S_Init+0x2a0>)
 8004d76:	e001      	b.n	8004d7c <HAL_I2S_Init+0x22c>
 8004d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d88:	d003      	beq.n	8004d92 <HAL_I2S_Init+0x242>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	e001      	b.n	8004d9e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004db2:	4313      	orrs	r3, r2
 8004db4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dca:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_I2S_Init+0x290>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10e      	bne.n	8004df4 <HAL_I2S_Init+0x2a4>
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_I2S_Init+0x2a0>)
 8004dd8:	e00e      	b.n	8004df8 <HAL_I2S_Init+0x2a8>
 8004dda:	bf00      	nop
 8004ddc:	08004f0b 	.word	0x08004f0b
 8004de0:	40003800 	.word	0x40003800
 8004de4:	40003c00 	.word	0x40003c00
 8004de8:	cccccccd 	.word	0xcccccccd
 8004dec:	08005021 	.word	0x08005021
 8004df0:	40003400 	.word	0x40003400
 8004df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df8:	897a      	ldrh	r2, [r7, #10]
 8004dfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10e      	bne.n	8004ea4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ffb8 	bl	8004e14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	b292      	uxth	r2, r2
 8004ec0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10e      	bne.n	8004f02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ef2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ff93 	bl	8004e28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d13a      	bne.n	8004f9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d109      	bne.n	8004f44 <I2S_IRQHandler+0x3a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d102      	bne.n	8004f44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ffb4 	bl	8004eac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d126      	bne.n	8004f9c <I2S_IRQHandler+0x92>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d11f      	bne.n	8004f9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f043 0202 	orr.w	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ff50 	bl	8004e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d136      	bne.n	8005016 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d109      	bne.n	8004fc6 <I2S_IRQHandler+0xbc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d102      	bne.n	8004fc6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff ff45 	bl	8004e50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d122      	bne.n	8005016 <I2S_IRQHandler+0x10c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d11b      	bne.n	8005016 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ff13 	bl	8004e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005016:	bf00      	nop
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a92      	ldr	r2, [pc, #584]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800503a:	4b92      	ldr	r3, [pc, #584]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800503c:	e001      	b.n	8005042 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800503e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a8b      	ldr	r2, [pc, #556]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005058:	4b8a      	ldr	r3, [pc, #552]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800505a:	e001      	b.n	8005060 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800505c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506c:	d004      	beq.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 8099 	bne.w	80051aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d107      	bne.n	8005092 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f925 	bl	80052dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d107      	bne.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9c8 	bl	800543c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d13a      	bne.n	800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d035      	beq.n	800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a6e      	ldr	r2, [pc, #440]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80050ca:	4b6e      	ldr	r3, [pc, #440]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050cc:	e001      	b.n	80050d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80050ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4969      	ldr	r1, [pc, #420]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050da:	428b      	cmp	r3, r1
 80050dc:	d101      	bne.n	80050e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80050de:	4b69      	ldr	r3, [pc, #420]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e0:	e001      	b.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80050e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fe88 	bl	8004e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	f040 80c3 	bne.w	80052be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80bd 	beq.w	80052be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005152:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a49      	ldr	r2, [pc, #292]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800515e:	4b49      	ldr	r3, [pc, #292]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005160:	e001      	b.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4944      	ldr	r1, [pc, #272]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800516e:	428b      	cmp	r3, r1
 8005170:	d101      	bne.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005172:	4b44      	ldr	r3, [pc, #272]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005174:	e001      	b.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800517e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fe4a 	bl	8004e3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051a8:	e089      	b.n	80052be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8be 	bl	8005340 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8fd 	bl	80053d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d12f      	bne.n	8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02a      	beq.n	8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005200:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800520e:	e001      	b.n	8005214 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4919      	ldr	r1, [pc, #100]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800521c:	428b      	cmp	r3, r1
 800521e:	d101      	bne.n	8005224 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005220:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005222:	e001      	b.n	8005228 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005228:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800522c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f043 0202 	orr.w	r2, r3, #2
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fdfa 	bl	8004e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d136      	bne.n	80052c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d031      	beq.n	80052c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a07      	ldr	r2, [pc, #28]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005268:	e001      	b.n	800526e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800526a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4902      	ldr	r1, [pc, #8]	; (8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005276:	428b      	cmp	r3, r1
 8005278:	d106      	bne.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800527a:	4b02      	ldr	r3, [pc, #8]	; (8005284 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800527c:	e006      	b.n	800528c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800527e:	bf00      	nop
 8005280:	40003800 	.word	0x40003800
 8005284:	40003400 	.word	0x40003400
 8005288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005290:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fdc0 	bl	8004e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052bc:	e000      	b.n	80052c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052be:	bf00      	nop
}
 80052c0:	bf00      	nop
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	1c99      	adds	r1, r3, #2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6251      	str	r1, [r2, #36]	; 0x24
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d113      	bne.n	8005336 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800531c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ffc9 	bl	80052c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	1c99      	adds	r1, r3, #2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6251      	str	r1, [r2, #36]	; 0x24
 8005352:	8819      	ldrh	r1, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <I2SEx_TxISR_I2SExt+0x90>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <I2SEx_TxISR_I2SExt+0x22>
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <I2SEx_TxISR_I2SExt+0x94>)
 8005360:	e001      	b.n	8005366 <I2SEx_TxISR_I2SExt+0x26>
 8005362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005366:	460a      	mov	r2, r1
 8005368:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d121      	bne.n	80053c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <I2SEx_TxISR_I2SExt+0x90>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d101      	bne.n	8005390 <I2SEx_TxISR_I2SExt+0x50>
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <I2SEx_TxISR_I2SExt+0x94>)
 800538e:	e001      	b.n	8005394 <I2SEx_TxISR_I2SExt+0x54>
 8005390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	490d      	ldr	r1, [pc, #52]	; (80053d0 <I2SEx_TxISR_I2SExt+0x90>)
 800539c:	428b      	cmp	r3, r1
 800539e:	d101      	bne.n	80053a4 <I2SEx_TxISR_I2SExt+0x64>
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <I2SEx_TxISR_I2SExt+0x94>)
 80053a2:	e001      	b.n	80053a8 <I2SEx_TxISR_I2SExt+0x68>
 80053a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ff81 	bl	80052c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40003800 	.word	0x40003800
 80053d4:	40003400 	.word	0x40003400

080053d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68d8      	ldr	r0, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	1c99      	adds	r1, r3, #2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053f0:	b282      	uxth	r2, r0
 80053f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d113      	bne.n	8005434 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800541a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ff4a 	bl	80052c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a20      	ldr	r2, [pc, #128]	; (80054cc <I2SEx_RxISR_I2SExt+0x90>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d101      	bne.n	8005452 <I2SEx_RxISR_I2SExt+0x16>
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <I2SEx_RxISR_I2SExt+0x94>)
 8005450:	e001      	b.n	8005456 <I2SEx_RxISR_I2SExt+0x1a>
 8005452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005456:	68d8      	ldr	r0, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	1c99      	adds	r1, r3, #2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005462:	b282      	uxth	r2, r0
 8005464:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d121      	bne.n	80054c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a12      	ldr	r2, [pc, #72]	; (80054cc <I2SEx_RxISR_I2SExt+0x90>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <I2SEx_RxISR_I2SExt+0x50>
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <I2SEx_RxISR_I2SExt+0x94>)
 800548a:	e001      	b.n	8005490 <I2SEx_RxISR_I2SExt+0x54>
 800548c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	490d      	ldr	r1, [pc, #52]	; (80054cc <I2SEx_RxISR_I2SExt+0x90>)
 8005498:	428b      	cmp	r3, r1
 800549a:	d101      	bne.n	80054a0 <I2SEx_RxISR_I2SExt+0x64>
 800549c:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <I2SEx_RxISR_I2SExt+0x94>)
 800549e:	e001      	b.n	80054a4 <I2SEx_RxISR_I2SExt+0x68>
 80054a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff03 	bl	80052c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40003800 	.word	0x40003800
 80054d0:	40003400 	.word	0x40003400

080054d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0cc      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054e8:	4b68      	ldr	r3, [pc, #416]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d90c      	bls.n	8005510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	4b65      	ldr	r3, [pc, #404]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b63      	ldr	r3, [pc, #396]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0b8      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005528:	4b59      	ldr	r3, [pc, #356]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a58      	ldr	r2, [pc, #352]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005540:	4b53      	ldr	r3, [pc, #332]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a52      	ldr	r2, [pc, #328]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800554a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554c:	4b50      	ldr	r3, [pc, #320]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	494d      	ldr	r1, [pc, #308]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d044      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d119      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d003      	beq.n	8005592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800558e:	2b03      	cmp	r3, #3
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e06f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a2:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e067      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055b2:	4b37      	ldr	r3, [pc, #220]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 0203 	bic.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4934      	ldr	r1, [pc, #208]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c4:	f7fd f956 	bl	8002874 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fd f952 	bl	8002874 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e04f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 020c 	and.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1eb      	bne.n	80055cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f4:	4b25      	ldr	r3, [pc, #148]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d20c      	bcs.n	800561c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e032      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4916      	ldr	r1, [pc, #88]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	490e      	ldr	r1, [pc, #56]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800565a:	f000 f821 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 800565e:	4602      	mov	r2, r0
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	490a      	ldr	r1, [pc, #40]	; (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	5ccb      	ldrb	r3, [r1, r3]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	4a09      	ldr	r2, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fd f8b6 	bl	80027ec <HAL_InitTick>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40023c00 	.word	0x40023c00
 8005690:	40023800 	.word	0x40023800
 8005694:	08009db8 	.word	0x08009db8
 8005698:	20000000 	.word	0x20000000
 800569c:	20000004 	.word	0x20000004

080056a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a4:	b094      	sub	sp, #80	; 0x50
 80056a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	647b      	str	r3, [r7, #68]	; 0x44
 80056ac:	2300      	movs	r3, #0
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	2300      	movs	r3, #0
 80056b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b8:	4b79      	ldr	r3, [pc, #484]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d00d      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x40>
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	f200 80e1 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x1ec>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d003      	beq.n	80056da <HAL_RCC_GetSysClockFreq+0x3a>
 80056d2:	e0db      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056d4:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056d8:	e0db      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056da:	4b72      	ldr	r3, [pc, #456]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056de:	e0d8      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056e0:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d063      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f6:	4b6a      	ldr	r3, [pc, #424]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	2200      	movs	r2, #0
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005708:	633b      	str	r3, [r7, #48]	; 0x30
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
 800570e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005712:	4622      	mov	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	f04f 0000 	mov.w	r0, #0
 800571a:	f04f 0100 	mov.w	r1, #0
 800571e:	0159      	lsls	r1, r3, #5
 8005720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005724:	0150      	lsls	r0, r2, #5
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4621      	mov	r1, r4
 800572c:	1a51      	subs	r1, r2, r1
 800572e:	6139      	str	r1, [r7, #16]
 8005730:	4629      	mov	r1, r5
 8005732:	eb63 0301 	sbc.w	r3, r3, r1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005744:	4659      	mov	r1, fp
 8005746:	018b      	lsls	r3, r1, #6
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574e:	4651      	mov	r1, sl
 8005750:	018a      	lsls	r2, r1, #6
 8005752:	4651      	mov	r1, sl
 8005754:	ebb2 0801 	subs.w	r8, r2, r1
 8005758:	4659      	mov	r1, fp
 800575a:	eb63 0901 	sbc.w	r9, r3, r1
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005772:	4690      	mov	r8, r2
 8005774:	4699      	mov	r9, r3
 8005776:	4623      	mov	r3, r4
 8005778:	eb18 0303 	adds.w	r3, r8, r3
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	462b      	mov	r3, r5
 8005780:	eb49 0303 	adc.w	r3, r9, r3
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005792:	4629      	mov	r1, r5
 8005794:	028b      	lsls	r3, r1, #10
 8005796:	4621      	mov	r1, r4
 8005798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800579c:	4621      	mov	r1, r4
 800579e:	028a      	lsls	r2, r1, #10
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a6:	2200      	movs	r2, #0
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057b0:	f7fa fd28 	bl	8000204 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	e058      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	2200      	movs	r2, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	4611      	mov	r1, r2
 80057ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	2300      	movs	r3, #0
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0159      	lsls	r1, r3, #5
 80057e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ea:	0150      	lsls	r0, r2, #5
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4641      	mov	r1, r8
 80057f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057f6:	4649      	mov	r1, r9
 80057f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800580c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005810:	ebb2 040a 	subs.w	r4, r2, sl
 8005814:	eb63 050b 	sbc.w	r5, r3, fp
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	00eb      	lsls	r3, r5, #3
 8005822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005826:	00e2      	lsls	r2, r4, #3
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	4643      	mov	r3, r8
 800582e:	18e3      	adds	r3, r4, r3
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	464b      	mov	r3, r9
 8005834:	eb45 0303 	adc.w	r3, r5, r3
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005846:	4629      	mov	r1, r5
 8005848:	028b      	lsls	r3, r1, #10
 800584a:	4621      	mov	r1, r4
 800584c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005850:	4621      	mov	r1, r4
 8005852:	028a      	lsls	r2, r1, #10
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585a:	2200      	movs	r2, #0
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	61fa      	str	r2, [r7, #28]
 8005860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005864:	f7fa fcce 	bl	8000204 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4613      	mov	r3, r2
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588a:	e002      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005894:	4618      	mov	r0, r3
 8005896:	3750      	adds	r7, #80	; 0x50
 8005898:	46bd      	mov	sp, r7
 800589a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	00f42400 	.word	0x00f42400

080058a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	08009dc8 	.word	0x08009dc8

080058e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058ec:	f7ff ffdc 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0b5b      	lsrs	r3, r3, #13
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	08009dc8 	.word	0x08009dc8

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005930:	4b87      	ldr	r3, [pc, #540]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005936:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4984      	ldr	r1, [pc, #528]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800594e:	2301      	movs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d010      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800595e:	4b7c      	ldr	r3, [pc, #496]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005964:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	4978      	ldr	r1, [pc, #480]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8083 	beq.w	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	4b6f      	ldr	r3, [pc, #444]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	4a6e      	ldr	r2, [pc, #440]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599c:	6413      	str	r3, [r2, #64]	; 0x40
 800599e:	4b6c      	ldr	r3, [pc, #432]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059aa:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a69      	ldr	r2, [pc, #420]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059b6:	f7fc ff5d 	bl	8002874 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059bc:	e008      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059be:	f7fc ff59 	bl	8002874 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e162      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059d0:	4b60      	ldr	r3, [pc, #384]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059dc:	4b5c      	ldr	r3, [pc, #368]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02f      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d028      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059fa:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a02:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a04:	4b54      	ldr	r3, [pc, #336]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a0a:	4b53      	ldr	r3, [pc, #332]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a10:	4a4f      	ldr	r2, [pc, #316]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a16:	4b4e      	ldr	r3, [pc, #312]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d114      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a22:	f7fc ff27 	bl	8002874 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fc ff23 	bl	8002874 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e12a      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ee      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a58:	d10d      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005a5a:	4b3d      	ldr	r3, [pc, #244]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	4938      	ldr	r1, [pc, #224]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	608b      	str	r3, [r1, #8]
 8005a74:	e005      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005a76:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4a35      	ldr	r2, [pc, #212]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a80:	6093      	str	r3, [r2, #8]
 8005a82:	4b33      	ldr	r3, [pc, #204]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8e:	4930      	ldr	r1, [pc, #192]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005aa8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005ab6:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005abc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	4922      	ldr	r1, [pc, #136]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d011      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ade:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	491a      	ldr	r1, [pc, #104]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af6:	d101      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8005af8:	2301      	movs	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	490e      	ldr	r1, [pc, #56]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d004      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	f040 8091 	bne.w	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b34:	f7fc fe9e 	bl	8002874 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b3a:	e013      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b3c:	f7fc fe9a 	bl	8002874 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d90c      	bls.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0a3      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40007000 	.word	0x40007000
 8005b58:	42470e40 	.word	0x42470e40
 8005b5c:	424711e0 	.word	0x424711e0
 8005b60:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b64:	4b4e      	ldr	r3, [pc, #312]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005b70:	4a4c      	ldr	r2, [pc, #304]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d023      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d019      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d019      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd2:	d110      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	019b      	lsls	r3, r3, #6
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	071b      	lsls	r3, r3, #28
 8005bee:	492c      	ldr	r1, [pc, #176]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	019b      	lsls	r3, r3, #6
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	061b      	lsls	r3, r3, #24
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	071b      	lsls	r3, r3, #28
 8005c1c:	4920      	ldr	r1, [pc, #128]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c2a:	f7fc fe23 	bl	8002874 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c32:	f7fc fe1f 	bl	8002874 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e028      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c44:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	490d      	ldr	r1, [pc, #52]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c84:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	4904      	ldr	r1, [pc, #16]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	424710d8 	.word	0x424710d8
 8005ca8:	42470068 	.word	0x42470068

08005cac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d004      	beq.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	f000 80a1 	beq.w	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005cd2:	e13f      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005cd4:	4ba3      	ldr	r3, [pc, #652]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cda:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005ce6:	f000 8084 	beq.w	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005cf0:	f200 808c 	bhi.w	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cfa:	d04f      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d02:	f200 8083 	bhi.w	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d12:	d17b      	bne.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d14:	4b94      	ldr	r3, [pc, #592]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d16:	617b      	str	r3, [r7, #20]
          break;
 8005d18:	e07b      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005d1a:	4b92      	ldr	r3, [pc, #584]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d28:	d109      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d2a:	4b8e      	ldr	r3, [pc, #568]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d34:	4a8c      	ldr	r2, [pc, #560]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	e019      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d3e:	4b89      	ldr	r3, [pc, #548]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4a:	d109      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d4c:	4b85      	ldr	r3, [pc, #532]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d56:	4a85      	ldr	r2, [pc, #532]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e008      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d60:	4b80      	ldr	r3, [pc, #512]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d6a:	4a80      	ldr	r2, [pc, #512]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d72:	4b7c      	ldr	r3, [pc, #496]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d78:	099b      	lsrs	r3, r3, #6
 8005d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d86:	4b77      	ldr	r3, [pc, #476]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8c:	0f1b      	lsrs	r3, r3, #28
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]
          break;
 8005d9a:	e03a      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d9c:	4b71      	ldr	r3, [pc, #452]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da8:	d108      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005daa:	4b6e      	ldr	r3, [pc, #440]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db2:	4a6e      	ldr	r2, [pc, #440]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e007      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dbc:	4b69      	ldr	r3, [pc, #420]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc4:	4a69      	ldr	r2, [pc, #420]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005dcc:	4b65      	ldr	r3, [pc, #404]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	099b      	lsrs	r3, r3, #6
 8005dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	fb02 f303 	mul.w	r3, r2, r3
 8005ddc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005dde:	4b61      	ldr	r3, [pc, #388]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	0f1b      	lsrs	r3, r3, #28
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	617b      	str	r3, [r7, #20]
          break;
 8005df0:	e00f      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005df2:	4b5c      	ldr	r3, [pc, #368]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfe:	d102      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8005e00:	4b5a      	ldr	r3, [pc, #360]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e02:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005e04:	e005      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8005e06:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e08:	617b      	str	r3, [r7, #20]
          break;
 8005e0a:	e002      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
          break;
 8005e10:	bf00      	nop
        }
      }
      break;
 8005e12:	e09f      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005e14:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e26:	f000 8084 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e30:	f200 808c 	bhi.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3a:	d04f      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e42:	f200 8083 	bhi.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d006      	beq.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e52:	d17b      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e54:	4b44      	ldr	r3, [pc, #272]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e56:	617b      	str	r3, [r7, #20]
          break;
 8005e58:	e07b      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005e5a:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e68:	d109      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e6a:	4b3e      	ldr	r3, [pc, #248]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e74:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	e019      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e7e:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e8c:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e96:	4a35      	ldr	r2, [pc, #212]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eaa:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005eb2:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ec6:	4b27      	ldr	r3, [pc, #156]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ecc:	0f1b      	lsrs	r3, r3, #28
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	617b      	str	r3, [r7, #20]
          break;
 8005eda:	e03a      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee8:	d108      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eea:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	e007      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005f0c:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	fb02 f303 	mul.w	r3, r2, r3
 8005f1c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	0f1b      	lsrs	r3, r3, #28
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	617b      	str	r3, [r7, #20]
          break;
 8005f30:	e00f      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3e:	d102      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f42:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005f44:	e005      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f48:	617b      	str	r3, [r7, #20]
          break;
 8005f4a:	e002      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]
          break;
 8005f50:	bf00      	nop
        }
      }
      break;
 8005f52:	bf00      	nop
    }
  }
  return frequency;
 8005f54:	697b      	ldr	r3, [r7, #20]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	00bb8000 	.word	0x00bb8000
 8005f6c:	00f42400 	.word	0x00f42400

08005f70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e273      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d075      	beq.n	800607a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d00c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d112      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb2:	d10b      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05b      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d157      	bne.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e24e      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x74>
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e01d      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCC_OscConfig+0x98>
 8005fee:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6c      	ldr	r2, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e00b      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8006008:	4b69      	ldr	r3, [pc, #420]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fc fc24 	bl	8002874 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006030:	f7fc fc20 	bl	8002874 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	; 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e213      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0xc0>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fc fc10 	bl	8002874 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fc fc0c 	bl	8002874 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e1ff      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d063      	beq.n	800614e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d116      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1d3      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4937      	ldr	r1, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	e03a      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fc fbc5 	bl	8002874 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fc fbc1 	bl	8002874 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e1b4      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610c:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4925      	ldr	r1, [pc, #148]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	e015      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006122:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fc fba4 	bl	8002874 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006130:	f7fc fba0 	bl	8002874 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e193      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d036      	beq.n	80061c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fc fb84 	bl	8002874 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006170:	f7fc fb80 	bl	8002874 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e173      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x200>
 800618e:	e01b      	b.n	80061c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006196:	f7fc fb6d 	bl	8002874 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	e00e      	b.n	80061bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619e:	f7fc fb69 	bl	8002874 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d907      	bls.n	80061bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e15c      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	4b8a      	ldr	r3, [pc, #552]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ea      	bne.n	800619e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8097 	beq.w	8006304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4b83      	ldr	r3, [pc, #524]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b7f      	ldr	r3, [pc, #508]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	4a7e      	ldr	r2, [pc, #504]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	; 0x40
 80061f6:	4b7c      	ldr	r3, [pc, #496]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	4b79      	ldr	r3, [pc, #484]	; (80063ec <HAL_RCC_OscConfig+0x47c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d118      	bne.n	8006244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006212:	4b76      	ldr	r3, [pc, #472]	; (80063ec <HAL_RCC_OscConfig+0x47c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a75      	ldr	r2, [pc, #468]	; (80063ec <HAL_RCC_OscConfig+0x47c>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621e:	f7fc fb29 	bl	8002874 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fc fb25 	bl	8002874 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e118      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006238:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <HAL_RCC_OscConfig+0x47c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <HAL_RCC_OscConfig+0x2ea>
 800624c:	4b66      	ldr	r3, [pc, #408]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a65      	ldr	r2, [pc, #404]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e01c      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b05      	cmp	r3, #5
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0x30c>
 8006262:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a60      	ldr	r2, [pc, #384]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
 800626e:	4b5e      	ldr	r3, [pc, #376]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a5d      	ldr	r2, [pc, #372]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800627c:	4b5a      	ldr	r3, [pc, #360]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a59      	ldr	r2, [pc, #356]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	4b57      	ldr	r3, [pc, #348]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	4a56      	ldr	r2, [pc, #344]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800628e:	f023 0304 	bic.w	r3, r3, #4
 8006292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fc faea 	bl	8002874 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fc fae6 	bl	8002874 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0d7      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	4b4b      	ldr	r3, [pc, #300]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RCC_OscConfig+0x334>
 80062c6:	e014      	b.n	80062f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c8:	f7fc fad4 	bl	8002874 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fc fad0 	bl	8002874 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0c1      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e6:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1ee      	bne.n	80062d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d105      	bne.n	8006304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f8:	4b3b      	ldr	r3, [pc, #236]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	4a3a      	ldr	r2, [pc, #232]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80062fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80ad 	beq.w	8006468 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800630e:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b08      	cmp	r3, #8
 8006318:	d060      	beq.n	80063dc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d145      	bne.n	80063ae <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <HAL_RCC_OscConfig+0x480>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fc faa4 	bl	8002874 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fc faa0 	bl	8002874 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e093      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	3b01      	subs	r3, #1
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	071b      	lsls	r3, r3, #28
 800637a:	491b      	ldr	r1, [pc, #108]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800637c:	4313      	orrs	r3, r2
 800637e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006380:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <HAL_RCC_OscConfig+0x480>)
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fc fa75 	bl	8002874 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638e:	f7fc fa71 	bl	8002874 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e064      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x41e>
 80063ac:	e05c      	b.n	8006468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <HAL_RCC_OscConfig+0x480>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fc fa5e 	bl	8002874 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063bc:	f7fc fa5a 	bl	8002874 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e04d      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f0      	bne.n	80063bc <HAL_RCC_OscConfig+0x44c>
 80063da:	e045      	b.n	8006468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d107      	bne.n	80063f4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e040      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
 80063e8:	40023800 	.word	0x40023800
 80063ec:	40007000 	.word	0x40007000
 80063f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063f4:	4b1f      	ldr	r3, [pc, #124]	; (8006474 <HAL_RCC_OscConfig+0x504>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d030      	beq.n	8006464 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800640c:	429a      	cmp	r2, r3
 800640e:	d129      	bne.n	8006464 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d122      	bne.n	8006464 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800642a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800642c:	4293      	cmp	r3, r2
 800642e:	d119      	bne.n	8006464 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	3b01      	subs	r3, #1
 800643e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006440:	429a      	cmp	r2, r3
 8006442:	d10f      	bne.n	8006464 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d107      	bne.n	8006464 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800

08006478 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e066      	b.n	800655c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7f5b      	ldrb	r3, [r3, #29]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fb fd4c 	bl	8001f3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	22ca      	movs	r2, #202	; 0xca
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2253      	movs	r2, #83	; 0x53
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb2a 	bl	8006b14 <RTC_EnterInitMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d12c      	bne.n	8006524 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064dc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6899      	ldr	r1, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68d2      	ldr	r2, [r2, #12]
 8006504:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6919      	ldr	r1, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	041a      	lsls	r2, r3, #16
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb31 	bl	8006b82 <RTC_ExitInitMode>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d113      	bne.n	8006552 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	22ff      	movs	r2, #255	; 0xff
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	7f1b      	ldrb	r3, [r3, #28]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_RTC_SetTime+0x1c>
 800657c:	2302      	movs	r3, #2
 800657e:	e087      	b.n	8006690 <HAL_RTC_SetTime+0x12c>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2202      	movs	r2, #2
 800658a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d126      	bne.n	80065e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fb0e 	bl	8006bcc <RTC_ByteToBcd2>
 80065b0:	4603      	mov	r3, r0
 80065b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fb07 	bl	8006bcc <RTC_ByteToBcd2>
 80065be:	4603      	mov	r3, r0
 80065c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	789b      	ldrb	r3, [r3, #2]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 faff 	bl	8006bcc <RTC_ByteToBcd2>
 80065ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e018      	b.n	8006612 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006600:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006606:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	78db      	ldrb	r3, [r3, #3]
 800660c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	22ca      	movs	r2, #202	; 0xca
 8006618:	625a      	str	r2, [r3, #36]	; 0x24
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2253      	movs	r2, #83	; 0x53
 8006620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fa76 	bl	8006b14 <RTC_EnterInitMode>
 8006628:	4603      	mov	r3, r0
 800662a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800662c:	7cfb      	ldrb	r3, [r7, #19]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d120      	bne.n	8006674 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800663c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006640:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006650:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6899      	ldr	r1, [r3, #8]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa89 	bl	8006b82 <RTC_ExitInitMode>
 8006670:	4603      	mov	r3, r0
 8006672:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	771a      	strb	r2, [r3, #28]

  return status;
 800668e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006690:	4618      	mov	r0, r3
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	bd90      	pop	{r4, r7, pc}

08006698 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	7f1b      	ldrb	r3, [r3, #28]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_RTC_SetDate+0x1c>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e071      	b.n	8006798 <HAL_RTC_SetDate+0x100>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2202      	movs	r2, #2
 80066be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <HAL_RTC_SetDate+0x4c>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	f023 0310 	bic.w	r3, r3, #16
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	330a      	adds	r3, #10
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11c      	bne.n	8006724 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fa6c 	bl	8006bcc <RTC_ByteToBcd2>
 80066f4:	4603      	mov	r3, r0
 80066f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fa65 	bl	8006bcc <RTC_ByteToBcd2>
 8006702:	4603      	mov	r3, r0
 8006704:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006706:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	789b      	ldrb	r3, [r3, #2]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fa5d 	bl	8006bcc <RTC_ByteToBcd2>
 8006712:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006714:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e00e      	b.n	8006742 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	78db      	ldrb	r3, [r3, #3]
 8006728:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006730:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006736:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	22ca      	movs	r2, #202	; 0xca
 8006748:	625a      	str	r2, [r3, #36]	; 0x24
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2253      	movs	r2, #83	; 0x53
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f9de 	bl	8006b14 <RTC_EnterInitMode>
 8006758:	4603      	mov	r3, r0
 800675a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800675c:	7cfb      	ldrb	r3, [r7, #19]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10c      	bne.n	800677c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800676c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006770:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fa05 	bl	8006b82 <RTC_ExitInitMode>
 8006778:	4603      	mov	r3, r0
 800677a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800677c:	7cfb      	ldrb	r3, [r7, #19]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	22ff      	movs	r2, #255	; 0xff
 800678e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	771a      	strb	r2, [r3, #28]

  return status;
 8006796:	7cfb      	ldrb	r3, [r7, #19]
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd90      	pop	{r4, r7, pc}

080067a0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b089      	sub	sp, #36	; 0x24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80067ac:	4b9a      	ldr	r3, [pc, #616]	; (8006a18 <HAL_RTC_SetAlarm_IT+0x278>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a9a      	ldr	r2, [pc, #616]	; (8006a1c <HAL_RTC_SetAlarm_IT+0x27c>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0adb      	lsrs	r3, r3, #11
 80067b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	7f1b      	ldrb	r3, [r3, #28]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_RTC_SetAlarm_IT+0x36>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e11c      	b.n	8006a10 <HAL_RTC_SetAlarm_IT+0x270>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2202      	movs	r2, #2
 80067e0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d137      	bne.n	8006858 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 f9e3 	bl	8006bcc <RTC_ByteToBcd2>
 8006806:	4603      	mov	r3, r0
 8006808:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f9dc 	bl	8006bcc <RTC_ByteToBcd2>
 8006814:	4603      	mov	r3, r0
 8006816:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006818:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	789b      	ldrb	r3, [r3, #2]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f9d4 	bl	8006bcc <RTC_ByteToBcd2>
 8006824:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006826:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006830:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f9c6 	bl	8006bcc <RTC_ByteToBcd2>
 8006840:	4603      	mov	r3, r0
 8006842:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006844:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800684c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006852:	4313      	orrs	r3, r2
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e023      	b.n	80068a0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006878:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800687e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	78db      	ldrb	r3, [r3, #3]
 8006884:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006886:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800688e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006890:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006896:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800689c:	4313      	orrs	r3, r2
 800689e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	22ca      	movs	r2, #202	; 0xca
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2253      	movs	r2, #83	; 0x53
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c4:	d141      	bne.n	800694a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068d4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80068e6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1e5a      	subs	r2, r3, #1
 80068ec:	617a      	str	r2, [r7, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10b      	bne.n	800690a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	22ff      	movs	r2, #255	; 0xff
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2203      	movs	r2, #3
 80068fe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e082      	b.n	8006a10 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0e7      	beq.n	80068e8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006936:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	e04b      	b.n	80069e2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006958:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f462 7220 	orn	r2, r2, #640	; 0x280
 800696a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800696c:	4b2a      	ldr	r3, [pc, #168]	; (8006a18 <HAL_RTC_SetAlarm_IT+0x278>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0adb      	lsrs	r3, r3, #11
 8006978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800697c:	fb02 f303 	mul.w	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	1e5a      	subs	r2, r3, #1
 8006986:	617a      	str	r2, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10b      	bne.n	80069a4 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2203      	movs	r2, #3
 8006998:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e035      	b.n	8006a10 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0e7      	beq.n	8006982 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <HAL_RTC_SetAlarm_IT+0x280>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a0e      	ldr	r2, [pc, #56]	; (8006a20 <HAL_RTC_SetAlarm_IT+0x280>)
 80069e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ec:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <HAL_RTC_SetAlarm_IT+0x280>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <HAL_RTC_SetAlarm_IT+0x280>)
 80069f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069f8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	22ff      	movs	r2, #255	; 0xff
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3724      	adds	r7, #36	; 0x24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd90      	pop	{r4, r7, pc}
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	10624dd3 	.word	0x10624dd3
 8006a20:	40013c00 	.word	0x40013c00

08006a24 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d012      	beq.n	8006a60 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f831 	bl	8006ab0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006a5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d012      	beq.n	8006a94 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8c2 	bl	8006c06 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006a92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <HAL_RTC_AlarmIRQHandler+0x88>)
 8006a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a9a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	775a      	strb	r2, [r3, #29]
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40013c00 	.word	0x40013c00

08006ab0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ade:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ae0:	f7fb fec8 	bl	8002874 <HAL_GetTick>
 8006ae4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ae6:	e009      	b.n	8006afc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ae8:	f7fb fec4 	bl	8002874 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af6:	d901      	bls.n	8006afc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e007      	b.n	8006b0c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0ee      	beq.n	8006ae8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d122      	bne.n	8006b78 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b42:	f7fb fe97 	bl	8002874 <HAL_GetTick>
 8006b46:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b48:	e00c      	b.n	8006b64 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b4a:	f7fb fe93 	bl	8002874 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b58:	d904      	bls.n	8006b64 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <RTC_EnterInitMode+0x64>
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d1e8      	bne.n	8006b4a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b9c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff ff89 	bl	8006ac4 <HAL_RTC_WaitForSynchro>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006bda:	e005      	b.n	8006be8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	3301      	adds	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	3b0a      	subs	r3, #10
 8006be6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	2b09      	cmp	r3, #9
 8006bec:	d8f6      	bhi.n	8006bdc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	b2db      	uxtb	r3, r3
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e022      	b.n	8006c72 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fb f9ae 	bl	8001fa0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2203      	movs	r2, #3
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f815 	bl	8006c7c <HAL_SD_InitCard>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e00a      	b.n	8006c72 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c7c:	b5b0      	push	{r4, r5, r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006c98:	2376      	movs	r3, #118	; 0x76
 8006c9a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681d      	ldr	r5, [r3, #0]
 8006ca0:	466c      	mov	r4, sp
 8006ca2:	f107 0314 	add.w	r3, r7, #20
 8006ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cae:	f107 0308 	add.w	r3, r7, #8
 8006cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f002 fa27 	bl	8009108 <SDIO_Init>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e04f      	b.n	8006d6c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006ccc:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <HAL_SD_InitCard+0xf8>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f002 fa5f 	bl	800919a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006cdc:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <HAL_SD_InitCard+0xf8>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006ce2:	2002      	movs	r0, #2
 8006ce4:	f7fb fdd2 	bl	800288c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fce5 	bl	80076b8 <SD_PowerON>
 8006cee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e02e      	b.n	8006d6c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fc04 	bl	800751c <SD_InitCard>
 8006d14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e01b      	b.n	8006d6c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f002 fa92 	bl	8009266 <SDMMC_CmdBlockLength>
 8006d42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <HAL_SD_InitCard+0xfc>)
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	; 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bdb0      	pop	{r4, r5, r7, pc}
 8006d74:	422580a0 	.word	0x422580a0
 8006d78:	004005ff 	.word	0x004005ff

08006d7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_SD_IRQHandler+0x2e>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fd3e 	bl	8007824 <SD_Read_IT>
 8006da8:	e155      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 808f 	beq.w	8006ed8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006dd2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006dd6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d039      	beq.n	8006e66 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <HAL_SD_IRQHandler+0x8a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f002 fa4e 	bl	80092ac <SDMMC_CmdStopTransfer>
 8006e10:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f933 	bl	8007090 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <HAL_SD_IRQHandler+0xda>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f910 	bl	800707c <HAL_SD_RxCpltCallback>
 8006e5c:	e0fb      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f902 	bl	8007068 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e64:	e0f7      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80f2 	beq.w	8007056 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f002 fa13 	bl	80092ac <SDMMC_CmdStopTransfer>
 8006e86:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8f8 	bl	8007090 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f040 80d5 	bne.w	8007056 <HAL_SD_IRQHandler+0x2da>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 80cf 	bne.w	8007056 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0208 	bic.w	r2, r2, #8
 8006ec6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8c9 	bl	8007068 <HAL_SD_TxCpltCallback>
}
 8006ed6:	e0be      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <HAL_SD_IRQHandler+0x17c>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fce8 	bl	80078c6 <SD_Write_IT>
 8006ef6:	e0ae      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80a7 	beq.w	8007056 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f043 0202 	orr.w	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	f043 0208 	orr.w	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	f043 0210 	orr.w	r2, r3, #16
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006f88:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f002 f98c 	bl	80092ac <SDMMC_CmdStopTransfer>
 8006f94:	4602      	mov	r2, r0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f869 	bl	8007090 <HAL_SD_ErrorCallback>
}
 8006fbe:	e04a      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d045      	beq.n	8007056 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <HAL_SD_IRQHandler+0x262>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d011      	beq.n	8007002 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_SD_IRQHandler+0x2e4>)
 8006fe4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fc f99c 	bl	8003328 <HAL_DMA_Abort_IT>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02f      	beq.n	8007056 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fa20 	bl	8007440 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007000:	e029      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <HAL_SD_IRQHandler+0x29a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d011      	beq.n	800703a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	4a12      	ldr	r2, [pc, #72]	; (8007064 <HAL_SD_IRQHandler+0x2e8>)
 800701c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	4618      	mov	r0, r3
 8007024:	f7fc f980 	bl	8003328 <HAL_DMA_Abort_IT>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d013      	beq.n	8007056 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fa3b 	bl	80074ae <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007038:	e00d      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f828 	bl	80070a4 <HAL_SD_AbortCallback>
}
 8007054:	e7ff      	b.n	8007056 <HAL_SD_IRQHandler+0x2da>
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	08007441 	.word	0x08007441
 8007064:	080074af 	.word	0x080074af

08007068 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c6:	0f9b      	lsrs	r3, r3, #30
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d2:	0e9b      	lsrs	r3, r3, #26
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e4:	0e1b      	lsrs	r3, r3, #24
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b2da      	uxtb	r2, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007118:	0d1b      	lsrs	r3, r3, #20
 800711a:	b29a      	uxth	r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	b2da      	uxtb	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007136:	0bdb      	lsrs	r3, r3, #15
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007148:	0b9b      	lsrs	r3, r3, #14
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	b2da      	uxtb	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800715a:	0b5b      	lsrs	r3, r3, #13
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	b2da      	uxtb	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716c:	0b1b      	lsrs	r3, r3, #12
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007184:	2b00      	cmp	r3, #0
 8007186:	d163      	bne.n	8007250 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800718c:	009a      	lsls	r2, r3, #2
 800718e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007192:	4013      	ands	r3, r2
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007198:	0f92      	lsrs	r2, r2, #30
 800719a:	431a      	orrs	r2, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a4:	0edb      	lsrs	r3, r3, #27
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c8:	0d5b      	lsrs	r3, r3, #21
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071da:	0c9b      	lsrs	r3, r3, #18
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ec:	0bdb      	lsrs	r3, r3, #15
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	7e1b      	ldrb	r3, [r3, #24]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	3302      	adds	r3, #2
 8007210:	2201      	movs	r2, #1
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800721a:	fb03 f202 	mul.w	r2, r3, r2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	7a1b      	ldrb	r3, [r3, #8]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	2201      	movs	r2, #1
 800722e:	409a      	lsls	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800723c:	0a52      	lsrs	r2, r2, #9
 800723e:	fb03 f202 	mul.w	r2, r3, r2
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724c:	661a      	str	r2, [r3, #96]	; 0x60
 800724e:	e031      	b.n	80072b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	2b01      	cmp	r3, #1
 8007256:	d11d      	bne.n	8007294 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	431a      	orrs	r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	3301      	adds	r3, #1
 8007274:	029a      	lsls	r2, r3, #10
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007288:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	661a      	str	r2, [r3, #96]	; 0x60
 8007292:	e00f      	b.n	80072b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a58      	ldr	r2, [pc, #352]	; (80073fc <HAL_SD_GetCardCSD+0x344>)
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e09d      	b.n	80073f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b8:	0b9b      	lsrs	r3, r3, #14
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ca:	09db      	lsrs	r3, r3, #7
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	0fdb      	lsrs	r3, r3, #31
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f8:	0f5b      	lsrs	r3, r3, #29
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	b2da      	uxtb	r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	0e9b      	lsrs	r3, r3, #26
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	b2da      	uxtb	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731c:	0d9b      	lsrs	r3, r3, #22
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	b2da      	uxtb	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	0d5b      	lsrs	r3, r3, #21
 8007330:	b2db      	uxtb	r3, r3
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	b2da      	uxtb	r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	b2da      	uxtb	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	0bdb      	lsrs	r3, r3, #15
 8007360:	b2db      	uxtb	r3, r3
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	b2da      	uxtb	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	0b9b      	lsrs	r3, r3, #14
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	b2da      	uxtb	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	0b5b      	lsrs	r3, r3, #13
 8007388:	b2db      	uxtb	r3, r3
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	b2da      	uxtb	r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	0b1b      	lsrs	r3, r3, #12
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	0a9b      	lsrs	r3, r3, #10
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	004005ff 	.word	0x004005ff

08007400 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800740c:	f107 030c 	add.w	r3, r7, #12
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9de 	bl	80077d4 <SD_SendStatus>
 8007418:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	0a5b      	lsrs	r3, r3, #9
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007436:	693b      	ldr	r3, [r7, #16]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f240 523a 	movw	r2, #1338	; 0x53a
 8007456:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff ffd1 	bl	8007400 <HAL_SD_GetCardState>
 800745e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b06      	cmp	r3, #6
 8007472:	d002      	beq.n	800747a <SD_DMATxAbort+0x3a>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b05      	cmp	r3, #5
 8007478:	d10a      	bne.n	8007490 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f001 ff14 	bl	80092ac <SDMMC_CmdStopTransfer>
 8007484:	4602      	mov	r2, r0
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	431a      	orrs	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	2b00      	cmp	r3, #0
 8007496:	d103      	bne.n	80074a0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff fe03 	bl	80070a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800749e:	e002      	b.n	80074a6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff fdf5 	bl	8007090 <HAL_SD_ErrorCallback>
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f7ff ff9a 	bl	8007400 <HAL_SD_GetCardState>
 80074cc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b06      	cmp	r3, #6
 80074e0:	d002      	beq.n	80074e8 <SD_DMARxAbort+0x3a>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b05      	cmp	r3, #5
 80074e6:	d10a      	bne.n	80074fe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fedd 	bl	80092ac <SDMMC_CmdStopTransfer>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	431a      	orrs	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fdcc 	bl	80070a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800750c:	e002      	b.n	8007514 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff fdbe 	bl	8007090 <HAL_SD_ErrorCallback>
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800751c:	b5b0      	push	{r4, r5, r7, lr}
 800751e:	b094      	sub	sp, #80	; 0x50
 8007520:	af04      	add	r7, sp, #16
 8007522:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007524:	2301      	movs	r3, #1
 8007526:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fe42 	bl	80091b6 <SDIO_GetPowerState>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007538:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800753c:	e0b8      	b.n	80076b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	2b03      	cmp	r3, #3
 8007544:	d02f      	beq.n	80075a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4618      	mov	r0, r3
 800754c:	f001 ff75 	bl	800943a <SDMMC_CmdSendCID>
 8007550:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <SD_InitCard+0x40>
    {
      return errorstate;
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	e0a9      	b.n	80076b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fe6c 	bl	8009240 <SDIO_GetResponse>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2104      	movs	r1, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f001 fe63 	bl	8009240 <SDIO_GetResponse>
 800757a:	4602      	mov	r2, r0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2108      	movs	r1, #8
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fe5a 	bl	8009240 <SDIO_GetResponse>
 800758c:	4602      	mov	r2, r0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	210c      	movs	r1, #12
 8007598:	4618      	mov	r0, r3
 800759a:	f001 fe51 	bl	8009240 <SDIO_GetResponse>
 800759e:	4602      	mov	r2, r0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d00d      	beq.n	80075ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f107 020e 	add.w	r2, r7, #14
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 ff7b 	bl	80094b4 <SDMMC_CmdSetRelAdd>
 80075be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <SD_InitCard+0xae>
    {
      return errorstate;
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c8:	e072      	b.n	80076b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d036      	beq.n	8007640 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075d2:	89fb      	ldrh	r3, [r7, #14]
 80075d4:	461a      	mov	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f001 ff45 	bl	8009476 <SDMMC_CmdSendCSD>
 80075ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	e05b      	b.n	80076b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 fe1e 	bl	8009240 <SDIO_GetResponse>
 8007604:	4602      	mov	r2, r0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2104      	movs	r1, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fe15 	bl	8009240 <SDIO_GetResponse>
 8007616:	4602      	mov	r2, r0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2108      	movs	r1, #8
 8007622:	4618      	mov	r0, r3
 8007624:	f001 fe0c 	bl	8009240 <SDIO_GetResponse>
 8007628:	4602      	mov	r2, r0
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	210c      	movs	r1, #12
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fe03 	bl	8009240 <SDIO_GetResponse>
 800763a:	4602      	mov	r2, r0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2104      	movs	r1, #4
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fdfa 	bl	8009240 <SDIO_GetResponse>
 800764c:	4603      	mov	r3, r0
 800764e:	0d1a      	lsrs	r2, r3, #20
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007654:	f107 0310 	add.w	r3, r7, #16
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fd2c 	bl	80070b8 <HAL_SD_GetCardCSD>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800766a:	e021      	b.n	80076b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	2200      	movs	r2, #0
 8007678:	461c      	mov	r4, r3
 800767a:	4615      	mov	r5, r2
 800767c:	4622      	mov	r2, r4
 800767e:	462b      	mov	r3, r5
 8007680:	4608      	mov	r0, r1
 8007682:	f001 fe35 	bl	80092f0 <SDMMC_CmdSelDesel>
 8007686:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <SD_InitCard+0x176>
  {
    return errorstate;
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	e00e      	b.n	80076b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681d      	ldr	r5, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	466c      	mov	r4, sp
 800769a:	f103 0210 	add.w	r2, r3, #16
 800769e:	ca07      	ldmia	r2, {r0, r1, r2}
 80076a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076a4:	3304      	adds	r3, #4
 80076a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076a8:	4628      	mov	r0, r5
 80076aa:	f001 fd2d 	bl	8009108 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3740      	adds	r7, #64	; 0x40
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bdb0      	pop	{r4, r5, r7, pc}

080076b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fe30 	bl	8009336 <SDMMC_CmdGoIdleState>
 80076d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	e072      	b.n	80077c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fe43 	bl	8009372 <SDMMC_CmdOperCond>
 80076ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fe19 	bl	8009336 <SDMMC_CmdGoIdleState>
 8007704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <SD_PowerON+0x5e>
    {
      return errorstate;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	e05b      	b.n	80077c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771a:	2b01      	cmp	r3, #1
 800771c:	d137      	bne.n	800778e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fe43 	bl	80093b0 <SDMMC_CmdAppCommand>
 800772a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02d      	beq.n	800778e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007732:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007736:	e047      	b.n	80077c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fe36 	bl	80093b0 <SDMMC_CmdAppCommand>
 8007744:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <SD_PowerON+0x98>
    {
      return errorstate;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	e03b      	b.n	80077c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	491e      	ldr	r1, [pc, #120]	; (80077d0 <SD_PowerON+0x118>)
 8007756:	4618      	mov	r0, r3
 8007758:	f001 fe4c 	bl	80093f4 <SDMMC_CmdAppOperCommand>
 800775c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007768:	e02e      	b.n	80077c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f001 fd65 	bl	8009240 <SDIO_GetResponse>
 8007776:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	0fdb      	lsrs	r3, r3, #31
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <SD_PowerON+0xcc>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <SD_PowerON+0xce>
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]

    count++;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	3301      	adds	r3, #1
 800778c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007794:	4293      	cmp	r3, r2
 8007796:	d802      	bhi.n	800779e <SD_PowerON+0xe6>
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0cc      	beq.n	8007738 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d902      	bls.n	80077ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80077a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077ac:	e00c      	b.n	80077c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	645a      	str	r2, [r3, #68]	; 0x44
 80077be:	e002      	b.n	80077c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	c1100000 	.word	0xc1100000

080077d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80077e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077e8:	e018      	b.n	800781c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f2:	041b      	lsls	r3, r3, #16
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f001 fe7d 	bl	80094f6 <SDMMC_CmdSendStatus>
 80077fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e009      	b.n	800781c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fd16 	bl	8009240 <SDIO_GetResponse>
 8007814:	4602      	mov	r2, r0
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d03f      	beq.n	80078be <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e033      	b.n	80078ac <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fc88 	bl	800915e <SDIO_ReadFIFO>
 800784e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3b01      	subs	r3, #1
 8007862:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3b01      	subs	r3, #1
 8007878:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	3b01      	subs	r3, #1
 800788e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	0e1b      	lsrs	r3, r3, #24
 8007894:	b2da      	uxtb	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	701a      	strb	r2, [r3, #0]
      tmp++;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	3301      	adds	r3, #1
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b07      	cmp	r3, #7
 80078b0:	d9c8      	bls.n	8007844 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80078be:	bf00      	nop
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d043      	beq.n	8007968 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e037      	b.n	8007956 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	021a      	lsls	r2, r3, #8
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4313      	orrs	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3b01      	subs	r3, #1
 800790e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	041a      	lsls	r2, r3, #16
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	4313      	orrs	r3, r2
 800791a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3b01      	subs	r3, #1
 8007926:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	061a      	lsls	r2, r3, #24
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4313      	orrs	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3b01      	subs	r3, #1
 800793e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f107 0208 	add.w	r2, r7, #8
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f001 fc14 	bl	8009178 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3301      	adds	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b07      	cmp	r3, #7
 800795a:	d9c4      	bls.n	80078e6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007968:	bf00      	nop
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e07b      	b.n	8007a7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d108      	bne.n	800799c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007992:	d009      	beq.n	80079a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	61da      	str	r2, [r3, #28]
 800799a:	e005      	b.n	80079a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fa fb94 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	ea42 0103 	orr.w	r1, r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	f003 0104 	and.w	r1, r3, #4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	f003 0210 	and.w	r2, r3, #16
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e041      	b.n	8007b18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fa fb69 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f000 fc6d 	bl	80083a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e041      	b.n	8007bb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f839 	bl	8007bbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f000 fc1e 	bl	80083a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <HAL_TIM_PWM_Start+0x24>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	bf14      	ite	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	e022      	b.n	8007c3e <HAL_TIM_PWM_Start+0x6a>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d109      	bne.n	8007c12 <HAL_TIM_PWM_Start+0x3e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	bf14      	ite	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	2300      	moveq	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	e015      	b.n	8007c3e <HAL_TIM_PWM_Start+0x6a>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d109      	bne.n	8007c2c <HAL_TIM_PWM_Start+0x58>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	bf14      	ite	ne
 8007c24:	2301      	movne	r3, #1
 8007c26:	2300      	moveq	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	e008      	b.n	8007c3e <HAL_TIM_PWM_Start+0x6a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	bf14      	ite	ne
 8007c38:	2301      	movne	r3, #1
 8007c3a:	2300      	moveq	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e07c      	b.n	8007d40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <HAL_TIM_PWM_Start+0x82>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c54:	e013      	b.n	8007c7e <HAL_TIM_PWM_Start+0xaa>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d104      	bne.n	8007c66 <HAL_TIM_PWM_Start+0x92>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c64:	e00b      	b.n	8007c7e <HAL_TIM_PWM_Start+0xaa>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d104      	bne.n	8007c76 <HAL_TIM_PWM_Start+0xa2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c74:	e003      	b.n	8007c7e <HAL_TIM_PWM_Start+0xaa>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2201      	movs	r2, #1
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fe74 	bl	8008974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2d      	ldr	r2, [pc, #180]	; (8007d48 <HAL_TIM_PWM_Start+0x174>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <HAL_TIM_PWM_Start+0xcc>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a2c      	ldr	r2, [pc, #176]	; (8007d4c <HAL_TIM_PWM_Start+0x178>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIM_PWM_Start+0xd0>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIM_PWM_Start+0xd2>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <HAL_TIM_PWM_Start+0x174>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d022      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ccc:	d01d      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_TIM_PWM_Start+0x17c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d018      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_TIM_PWM_Start+0x180>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <HAL_TIM_PWM_Start+0x184>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00e      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a16      	ldr	r2, [pc, #88]	; (8007d4c <HAL_TIM_PWM_Start+0x178>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d009      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a18      	ldr	r2, [pc, #96]	; (8007d5c <HAL_TIM_PWM_Start+0x188>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x136>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <HAL_TIM_PWM_Start+0x18c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d111      	bne.n	8007d2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b06      	cmp	r3, #6
 8007d1a:	d010      	beq.n	8007d3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2c:	e007      	b.n	8007d3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0201 	orr.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400
 8007d50:	40000400 	.word	0x40000400
 8007d54:	40000800 	.word	0x40000800
 8007d58:	40000c00 	.word	0x40000c00
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40001800 	.word	0x40001800

08007d64 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e041      	b.n	8007dfc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f839 	bl	8007e04 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f000 fafb 	bl	80083a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0208 	bic.w	r2, r2, #8
 8007db8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6819      	ldr	r1, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d122      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d11b      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0202 	mvn.w	r2, #2
 8007e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa81 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa73 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa84 	bl	8008376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d122      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0204 	mvn.w	r2, #4
 8007e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa57 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa49 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa5a 	bl	8008376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d122      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d11b      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0208 	mvn.w	r2, #8
 8007eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa2d 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007f08:	e005      	b.n	8007f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa1f 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa30 	bl	8008376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d122      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	d11b      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0210 	mvn.w	r2, #16
 8007f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2208      	movs	r2, #8
 8007f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa03 	bl	8008362 <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9f5 	bl	800834e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa06 	bl	8008376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d10e      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d107      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0201 	mvn.w	r2, #1
 8007f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9cf 	bl	800833a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb4:	2b80      	cmp	r3, #128	; 0x80
 8007fb6:	d107      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fdd4 	bl	8008b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d10e      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	d107      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9cb 	bl	800838a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d10e      	bne.n	8008020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b20      	cmp	r3, #32
 800800e:	d107      	bne.n	8008020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0220 	mvn.w	r2, #32
 8008018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fd9e 	bl	8008b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008042:	2302      	movs	r3, #2
 8008044:	e0ae      	b.n	80081a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b0c      	cmp	r3, #12
 8008052:	f200 809f 	bhi.w	8008194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008091 	.word	0x08008091
 8008060:	08008195 	.word	0x08008195
 8008064:	08008195 	.word	0x08008195
 8008068:	08008195 	.word	0x08008195
 800806c:	080080d1 	.word	0x080080d1
 8008070:	08008195 	.word	0x08008195
 8008074:	08008195 	.word	0x08008195
 8008078:	08008195 	.word	0x08008195
 800807c:	08008113 	.word	0x08008113
 8008080:	08008195 	.word	0x08008195
 8008084:	08008195 	.word	0x08008195
 8008088:	08008195 	.word	0x08008195
 800808c:	08008153 	.word	0x08008153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fa22 	bl	80084e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0208 	orr.w	r2, r2, #8
 80080aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6999      	ldr	r1, [r3, #24]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	619a      	str	r2, [r3, #24]
      break;
 80080ce:	e064      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fa72 	bl	80085c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6999      	ldr	r1, [r3, #24]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	021a      	lsls	r2, r3, #8
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	619a      	str	r2, [r3, #24]
      break;
 8008110:	e043      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fac7 	bl	80086ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69da      	ldr	r2, [r3, #28]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0208 	orr.w	r2, r2, #8
 800812c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0204 	bic.w	r2, r2, #4
 800813c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69d9      	ldr	r1, [r3, #28]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	61da      	str	r2, [r3, #28]
      break;
 8008150:	e023      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68b9      	ldr	r1, [r7, #8]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fb1b 	bl	8008794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800816c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800817c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69d9      	ldr	r1, [r3, #28]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	021a      	lsls	r2, r3, #8
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	61da      	str	r2, [r3, #28]
      break;
 8008192:	e002      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_TIM_ConfigClockSource+0x1c>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e0b4      	b.n	8008332 <HAL_TIM_ConfigClockSource+0x186>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008200:	d03e      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0xd4>
 8008202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008206:	f200 8087 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	f000 8086 	beq.w	800831e <HAL_TIM_ConfigClockSource+0x172>
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008216:	d87f      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008218:	2b70      	cmp	r3, #112	; 0x70
 800821a:	d01a      	beq.n	8008252 <HAL_TIM_ConfigClockSource+0xa6>
 800821c:	2b70      	cmp	r3, #112	; 0x70
 800821e:	d87b      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008220:	2b60      	cmp	r3, #96	; 0x60
 8008222:	d050      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008224:	2b60      	cmp	r3, #96	; 0x60
 8008226:	d877      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008228:	2b50      	cmp	r3, #80	; 0x50
 800822a:	d03c      	beq.n	80082a6 <HAL_TIM_ConfigClockSource+0xfa>
 800822c:	2b50      	cmp	r3, #80	; 0x50
 800822e:	d873      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d058      	beq.n	80082e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d86f      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b30      	cmp	r3, #48	; 0x30
 800823a:	d064      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 800823c:	2b30      	cmp	r3, #48	; 0x30
 800823e:	d86b      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008240:	2b20      	cmp	r3, #32
 8008242:	d060      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	2b20      	cmp	r3, #32
 8008246:	d867      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d05c      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 800824c:	2b10      	cmp	r3, #16
 800824e:	d05a      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x15a>
 8008250:	e062      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6899      	ldr	r1, [r3, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f000 fb67 	bl	8008934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	609a      	str	r2, [r3, #8]
      break;
 800827e:	e04f      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6818      	ldr	r0, [r3, #0]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	6899      	ldr	r1, [r3, #8]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f000 fb50 	bl	8008934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082a2:	609a      	str	r2, [r3, #8]
      break;
 80082a4:	e03c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6859      	ldr	r1, [r3, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f000 fac4 	bl	8008840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2150      	movs	r1, #80	; 0x50
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fb1d 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 80082c4:	e02c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6859      	ldr	r1, [r3, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	461a      	mov	r2, r3
 80082d4:	f000 fae3 	bl	800889e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2160      	movs	r1, #96	; 0x60
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fb0d 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 80082e4:	e01c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6859      	ldr	r1, [r3, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f000 faa4 	bl	8008840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2140      	movs	r1, #64	; 0x40
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fafd 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 8008304:	e00c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f000 faf4 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 8008316:	e003      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
      break;
 800831c:	e000      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800831e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a40      	ldr	r2, [pc, #256]	; (80084b4 <TIM_Base_SetConfig+0x114>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d013      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083be:	d00f      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3d      	ldr	r2, [pc, #244]	; (80084b8 <TIM_Base_SetConfig+0x118>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a3c      	ldr	r2, [pc, #240]	; (80084bc <TIM_Base_SetConfig+0x11c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a3b      	ldr	r2, [pc, #236]	; (80084c0 <TIM_Base_SetConfig+0x120>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a3a      	ldr	r2, [pc, #232]	; (80084c4 <TIM_Base_SetConfig+0x124>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d108      	bne.n	80083f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2f      	ldr	r2, [pc, #188]	; (80084b4 <TIM_Base_SetConfig+0x114>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d02b      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008400:	d027      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2c      	ldr	r2, [pc, #176]	; (80084b8 <TIM_Base_SetConfig+0x118>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d023      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2b      	ldr	r2, [pc, #172]	; (80084bc <TIM_Base_SetConfig+0x11c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01f      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2a      	ldr	r2, [pc, #168]	; (80084c0 <TIM_Base_SetConfig+0x120>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01b      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a29      	ldr	r2, [pc, #164]	; (80084c4 <TIM_Base_SetConfig+0x124>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d017      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a28      	ldr	r2, [pc, #160]	; (80084c8 <TIM_Base_SetConfig+0x128>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a27      	ldr	r2, [pc, #156]	; (80084cc <TIM_Base_SetConfig+0x12c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00f      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a26      	ldr	r2, [pc, #152]	; (80084d0 <TIM_Base_SetConfig+0x130>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00b      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a25      	ldr	r2, [pc, #148]	; (80084d4 <TIM_Base_SetConfig+0x134>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d007      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a24      	ldr	r2, [pc, #144]	; (80084d8 <TIM_Base_SetConfig+0x138>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d003      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a23      	ldr	r2, [pc, #140]	; (80084dc <TIM_Base_SetConfig+0x13c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d108      	bne.n	8008464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <TIM_Base_SetConfig+0x114>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0xf8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a0c      	ldr	r2, [pc, #48]	; (80084c4 <TIM_Base_SetConfig+0x124>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d103      	bne.n	80084a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	615a      	str	r2, [r3, #20]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40010000 	.word	0x40010000
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40000800 	.word	0x40000800
 80084c0:	40000c00 	.word	0x40000c00
 80084c4:	40010400 	.word	0x40010400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800
 80084d4:	40001800 	.word	0x40001800
 80084d8:	40001c00 	.word	0x40001c00
 80084dc:	40002000 	.word	0x40002000

080084e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 0302 	bic.w	r3, r3, #2
 8008528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <TIM_OC1_SetConfig+0xd8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_OC1_SetConfig+0x64>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <TIM_OC1_SetConfig+0xdc>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d10c      	bne.n	800855e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f023 0308 	bic.w	r3, r3, #8
 800854a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	4313      	orrs	r3, r2
 8008554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f023 0304 	bic.w	r3, r3, #4
 800855c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <TIM_OC1_SetConfig+0xd8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d003      	beq.n	800856e <TIM_OC1_SetConfig+0x8e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a14      	ldr	r2, [pc, #80]	; (80085bc <TIM_OC1_SetConfig+0xdc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d111      	bne.n	8008592 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800857c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	4313      	orrs	r3, r2
 8008586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	621a      	str	r2, [r3, #32]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	40010000 	.word	0x40010000
 80085bc:	40010400 	.word	0x40010400

080085c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0210 	bic.w	r2, r3, #16
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0320 	bic.w	r3, r3, #32
 800860a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a22      	ldr	r2, [pc, #136]	; (80086a4 <TIM_OC2_SetConfig+0xe4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_OC2_SetConfig+0x68>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <TIM_OC2_SetConfig+0xe8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10d      	bne.n	8008644 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <TIM_OC2_SetConfig+0xe4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_OC2_SetConfig+0x94>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <TIM_OC2_SetConfig+0xe8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d113      	bne.n	800867c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800865a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	621a      	str	r2, [r3, #32]
}
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40010000 	.word	0x40010000
 80086a8:	40010400 	.word	0x40010400

080086ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0303 	bic.w	r3, r3, #3
 80086e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a21      	ldr	r2, [pc, #132]	; (800878c <TIM_OC3_SetConfig+0xe0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d003      	beq.n	8008712 <TIM_OC3_SetConfig+0x66>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a20      	ldr	r2, [pc, #128]	; (8008790 <TIM_OC3_SetConfig+0xe4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d10d      	bne.n	800872e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800872c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a16      	ldr	r2, [pc, #88]	; (800878c <TIM_OC3_SetConfig+0xe0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <TIM_OC3_SetConfig+0x92>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a15      	ldr	r2, [pc, #84]	; (8008790 <TIM_OC3_SetConfig+0xe4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d113      	bne.n	8008766 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	621a      	str	r2, [r3, #32]
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400

08008794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a12      	ldr	r2, [pc, #72]	; (8008838 <TIM_OC4_SetConfig+0xa4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC4_SetConfig+0x68>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a11      	ldr	r2, [pc, #68]	; (800883c <TIM_OC4_SetConfig+0xa8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d109      	bne.n	8008810 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	019b      	lsls	r3, r3, #6
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40010000 	.word	0x40010000
 800883c:	40010400 	.word	0x40010400

08008840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	f023 0201 	bic.w	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800886a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 030a 	bic.w	r3, r3, #10
 800887c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	621a      	str	r2, [r3, #32]
}
 8008892:	bf00      	nop
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800889e:	b480      	push	{r7}
 80088a0:	b087      	sub	sp, #28
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f023 0210 	bic.w	r2, r3, #16
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	031b      	lsls	r3, r3, #12
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	f043 0307 	orr.w	r3, r3, #7
 8008920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	609a      	str	r2, [r3, #8]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800894e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	021a      	lsls	r2, r3, #8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	431a      	orrs	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4313      	orrs	r3, r2
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2201      	movs	r2, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	431a      	orrs	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
}
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089d4:	2302      	movs	r3, #2
 80089d6:	e05a      	b.n	8008a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a21      	ldr	r2, [pc, #132]	; (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d022      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a24:	d01d      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1d      	ldr	r2, [pc, #116]	; (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d018      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d013      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1a      	ldr	r2, [pc, #104]	; (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00e      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a18      	ldr	r2, [pc, #96]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d009      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a17      	ldr	r2, [pc, #92]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d004      	beq.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d10c      	bne.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	40010000 	.word	0x40010000
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	40000800 	.word	0x40000800
 8008aa8:	40000c00 	.word	0x40000c00
 8008aac:	40010400 	.word	0x40010400
 8008ab0:	40014000 	.word	0x40014000
 8008ab4:	40001800 	.word	0x40001800

08008ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e03d      	b.n	8008b50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e03f      	b.n	8008c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7f9 fbd8 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2224      	movs	r2, #36	; 0x24
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f829 	bl	8008c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695a      	ldr	r2, [r3, #20]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c24:	b0c0      	sub	sp, #256	; 0x100
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	68d9      	ldr	r1, [r3, #12]
 8008c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	ea40 0301 	orr.w	r3, r0, r1
 8008c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c78:	f021 010c 	bic.w	r1, r1, #12
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c86:	430b      	orrs	r3, r1
 8008c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9a:	6999      	ldr	r1, [r3, #24]
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	ea40 0301 	orr.w	r3, r0, r1
 8008ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	4b8f      	ldr	r3, [pc, #572]	; (8008eec <UART_SetConfig+0x2cc>)
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d005      	beq.n	8008cc0 <UART_SetConfig+0xa0>
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	4b8d      	ldr	r3, [pc, #564]	; (8008ef0 <UART_SetConfig+0x2d0>)
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d104      	bne.n	8008cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cc0:	f7fc fe12 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 8008cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cc8:	e003      	b.n	8008cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cca:	f7fc fdf9 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8008cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cdc:	f040 810c 	bne.w	8008ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	1891      	adds	r1, r2, r2
 8008cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cfa:	415b      	adcs	r3, r3
 8008cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d02:	4621      	mov	r1, r4
 8008d04:	eb12 0801 	adds.w	r8, r2, r1
 8008d08:	4629      	mov	r1, r5
 8008d0a:	eb43 0901 	adc.w	r9, r3, r1
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d22:	4690      	mov	r8, r2
 8008d24:	4699      	mov	r9, r3
 8008d26:	4623      	mov	r3, r4
 8008d28:	eb18 0303 	adds.w	r3, r8, r3
 8008d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d30:	462b      	mov	r3, r5
 8008d32:	eb49 0303 	adc.w	r3, r9, r3
 8008d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d4e:	460b      	mov	r3, r1
 8008d50:	18db      	adds	r3, r3, r3
 8008d52:	653b      	str	r3, [r7, #80]	; 0x50
 8008d54:	4613      	mov	r3, r2
 8008d56:	eb42 0303 	adc.w	r3, r2, r3
 8008d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d64:	f7f7 fa4e 	bl	8000204 <__aeabi_uldivmod>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4b61      	ldr	r3, [pc, #388]	; (8008ef4 <UART_SetConfig+0x2d4>)
 8008d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	011c      	lsls	r4, r3, #4
 8008d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d88:	4642      	mov	r2, r8
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	1891      	adds	r1, r2, r2
 8008d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d90:	415b      	adcs	r3, r3
 8008d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d98:	4641      	mov	r1, r8
 8008d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8008d9e:	4649      	mov	r1, r9
 8008da0:	eb43 0b01 	adc.w	fp, r3, r1
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008db8:	4692      	mov	sl, r2
 8008dba:	469b      	mov	fp, r3
 8008dbc:	4643      	mov	r3, r8
 8008dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8008dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8008dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008de4:	460b      	mov	r3, r1
 8008de6:	18db      	adds	r3, r3, r3
 8008de8:	643b      	str	r3, [r7, #64]	; 0x40
 8008dea:	4613      	mov	r3, r2
 8008dec:	eb42 0303 	adc.w	r3, r2, r3
 8008df0:	647b      	str	r3, [r7, #68]	; 0x44
 8008df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008dfa:	f7f7 fa03 	bl	8000204 <__aeabi_uldivmod>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	4b3b      	ldr	r3, [pc, #236]	; (8008ef4 <UART_SetConfig+0x2d4>)
 8008e06:	fba3 2301 	umull	r2, r3, r3, r1
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	2264      	movs	r2, #100	; 0x64
 8008e0e:	fb02 f303 	mul.w	r3, r2, r3
 8008e12:	1acb      	subs	r3, r1, r3
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e1a:	4b36      	ldr	r3, [pc, #216]	; (8008ef4 <UART_SetConfig+0x2d4>)
 8008e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8008e20:	095b      	lsrs	r3, r3, #5
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e28:	441c      	add	r4, r3
 8008e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	1891      	adds	r1, r2, r2
 8008e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e44:	415b      	adcs	r3, r3
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	1851      	adds	r1, r2, r1
 8008e50:	6339      	str	r1, [r7, #48]	; 0x30
 8008e52:	4649      	mov	r1, r9
 8008e54:	414b      	adcs	r3, r1
 8008e56:	637b      	str	r3, [r7, #52]	; 0x34
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e64:	4659      	mov	r1, fp
 8008e66:	00cb      	lsls	r3, r1, #3
 8008e68:	4651      	mov	r1, sl
 8008e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e6e:	4651      	mov	r1, sl
 8008e70:	00ca      	lsls	r2, r1, #3
 8008e72:	4610      	mov	r0, r2
 8008e74:	4619      	mov	r1, r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	4642      	mov	r2, r8
 8008e7a:	189b      	adds	r3, r3, r2
 8008e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e80:	464b      	mov	r3, r9
 8008e82:	460a      	mov	r2, r1
 8008e84:	eb42 0303 	adc.w	r3, r2, r3
 8008e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	18db      	adds	r3, r3, r3
 8008ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	eb42 0303 	adc.w	r3, r2, r3
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008eb6:	f7f7 f9a5 	bl	8000204 <__aeabi_uldivmod>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <UART_SetConfig+0x2d4>)
 8008ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ec4:	095b      	lsrs	r3, r3, #5
 8008ec6:	2164      	movs	r1, #100	; 0x64
 8008ec8:	fb01 f303 	mul.w	r3, r1, r3
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	3332      	adds	r3, #50	; 0x32
 8008ed2:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <UART_SetConfig+0x2d4>)
 8008ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed8:	095b      	lsrs	r3, r3, #5
 8008eda:	f003 0207 	and.w	r2, r3, #7
 8008ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4422      	add	r2, r4
 8008ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ee8:	e105      	b.n	80090f6 <UART_SetConfig+0x4d6>
 8008eea:	bf00      	nop
 8008eec:	40011000 	.word	0x40011000
 8008ef0:	40011400 	.word	0x40011400
 8008ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f0a:	4642      	mov	r2, r8
 8008f0c:	464b      	mov	r3, r9
 8008f0e:	1891      	adds	r1, r2, r2
 8008f10:	6239      	str	r1, [r7, #32]
 8008f12:	415b      	adcs	r3, r3
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
 8008f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f1a:	4641      	mov	r1, r8
 8008f1c:	1854      	adds	r4, r2, r1
 8008f1e:	4649      	mov	r1, r9
 8008f20:	eb43 0501 	adc.w	r5, r3, r1
 8008f24:	f04f 0200 	mov.w	r2, #0
 8008f28:	f04f 0300 	mov.w	r3, #0
 8008f2c:	00eb      	lsls	r3, r5, #3
 8008f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f32:	00e2      	lsls	r2, r4, #3
 8008f34:	4614      	mov	r4, r2
 8008f36:	461d      	mov	r5, r3
 8008f38:	4643      	mov	r3, r8
 8008f3a:	18e3      	adds	r3, r4, r3
 8008f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f40:	464b      	mov	r3, r9
 8008f42:	eb45 0303 	adc.w	r3, r5, r3
 8008f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f5a:	f04f 0200 	mov.w	r2, #0
 8008f5e:	f04f 0300 	mov.w	r3, #0
 8008f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f66:	4629      	mov	r1, r5
 8008f68:	008b      	lsls	r3, r1, #2
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f70:	4621      	mov	r1, r4
 8008f72:	008a      	lsls	r2, r1, #2
 8008f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f78:	f7f7 f944 	bl	8000204 <__aeabi_uldivmod>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4b60      	ldr	r3, [pc, #384]	; (8009104 <UART_SetConfig+0x4e4>)
 8008f82:	fba3 2302 	umull	r2, r3, r3, r2
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	011c      	lsls	r4, r3, #4
 8008f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	61b9      	str	r1, [r7, #24]
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fac:	4641      	mov	r1, r8
 8008fae:	1851      	adds	r1, r2, r1
 8008fb0:	6139      	str	r1, [r7, #16]
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	00cb      	lsls	r3, r1, #3
 8008fc8:	4651      	mov	r1, sl
 8008fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fce:	4651      	mov	r1, sl
 8008fd0:	00ca      	lsls	r2, r1, #3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009004:	4649      	mov	r1, r9
 8009006:	008b      	lsls	r3, r1, #2
 8009008:	4641      	mov	r1, r8
 800900a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800900e:	4641      	mov	r1, r8
 8009010:	008a      	lsls	r2, r1, #2
 8009012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009016:	f7f7 f8f5 	bl	8000204 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b39      	ldr	r3, [pc, #228]	; (8009104 <UART_SetConfig+0x4e4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	; 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	3332      	adds	r3, #50	; 0x32
 8009032:	4a34      	ldr	r2, [pc, #208]	; (8009104 <UART_SetConfig+0x4e4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800903e:	441c      	add	r4, r3
 8009040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009044:	2200      	movs	r2, #0
 8009046:	673b      	str	r3, [r7, #112]	; 0x70
 8009048:	677a      	str	r2, [r7, #116]	; 0x74
 800904a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	1891      	adds	r1, r2, r2
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	415b      	adcs	r3, r3
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800905e:	4641      	mov	r1, r8
 8009060:	1851      	adds	r1, r2, r1
 8009062:	6039      	str	r1, [r7, #0]
 8009064:	4649      	mov	r1, r9
 8009066:	414b      	adcs	r3, r1
 8009068:	607b      	str	r3, [r7, #4]
 800906a:	f04f 0200 	mov.w	r2, #0
 800906e:	f04f 0300 	mov.w	r3, #0
 8009072:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009076:	4659      	mov	r1, fp
 8009078:	00cb      	lsls	r3, r1, #3
 800907a:	4651      	mov	r1, sl
 800907c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009080:	4651      	mov	r1, sl
 8009082:	00ca      	lsls	r2, r1, #3
 8009084:	4610      	mov	r0, r2
 8009086:	4619      	mov	r1, r3
 8009088:	4603      	mov	r3, r0
 800908a:	4642      	mov	r2, r8
 800908c:	189b      	adds	r3, r3, r2
 800908e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009090:	464b      	mov	r3, r9
 8009092:	460a      	mov	r2, r1
 8009094:	eb42 0303 	adc.w	r3, r2, r3
 8009098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800909a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	663b      	str	r3, [r7, #96]	; 0x60
 80090a4:	667a      	str	r2, [r7, #100]	; 0x64
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090b2:	4649      	mov	r1, r9
 80090b4:	008b      	lsls	r3, r1, #2
 80090b6:	4641      	mov	r1, r8
 80090b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090bc:	4641      	mov	r1, r8
 80090be:	008a      	lsls	r2, r1, #2
 80090c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090c4:	f7f7 f89e 	bl	8000204 <__aeabi_uldivmod>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <UART_SetConfig+0x4e4>)
 80090ce:	fba3 1302 	umull	r1, r3, r3, r2
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	2164      	movs	r1, #100	; 0x64
 80090d6:	fb01 f303 	mul.w	r3, r1, r3
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	3332      	adds	r3, #50	; 0x32
 80090e0:	4a08      	ldr	r2, [pc, #32]	; (8009104 <UART_SetConfig+0x4e4>)
 80090e2:	fba2 2303 	umull	r2, r3, r2, r3
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	f003 020f 	and.w	r2, r3, #15
 80090ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4422      	add	r2, r4
 80090f4:	609a      	str	r2, [r3, #8]
}
 80090f6:	bf00      	nop
 80090f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090fc:	46bd      	mov	sp, r7
 80090fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009102:	bf00      	nop
 8009104:	51eb851f 	.word	0x51eb851f

08009108 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009108:	b084      	sub	sp, #16
 800910a:	b480      	push	{r7}
 800910c:	b085      	sub	sp, #20
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	f107 001c 	add.w	r0, r7, #28
 8009116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800911e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009120:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009122:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009126:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800912a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800912e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009132:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009142:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	b004      	add	sp, #16
 800915c:	4770      	bx	lr

0800915e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2203      	movs	r2, #3
 80091a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0303 	and.w	r3, r3, #3
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091f0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80091f6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80091fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800920c:	f023 030f 	bic.w	r3, r3, #15
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	b2db      	uxtb	r3, r3
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3314      	adds	r3, #20
 800924e:	461a      	mov	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	4413      	add	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
}  
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009274:	2310      	movs	r3, #16
 8009276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009278:	2340      	movs	r3, #64	; 0x40
 800927a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009284:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ffa0 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009292:	f241 3288 	movw	r2, #5000	; 0x1388
 8009296:	2110      	movs	r1, #16
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f94f 	bl	800953c <SDMMC_GetCmdResp1>
 800929e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a0:	69fb      	ldr	r3, [r7, #28]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80092b8:	230c      	movs	r3, #12
 80092ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092bc:	2340      	movs	r3, #64	; 0x40
 80092be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ff7e 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80092d6:	4a05      	ldr	r2, [pc, #20]	; (80092ec <SDMMC_CmdStopTransfer+0x40>)
 80092d8:	210c      	movs	r1, #12
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f92e 	bl	800953c <SDMMC_GetCmdResp1>
 80092e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e2:	69fb      	ldr	r3, [r7, #28]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3720      	adds	r7, #32
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	05f5e100 	.word	0x05f5e100

080092f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009300:	2307      	movs	r3, #7
 8009302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800930c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009310:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009312:	f107 0310 	add.w	r3, r7, #16
 8009316:	4619      	mov	r1, r3
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff ff5a 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800931e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009322:	2107      	movs	r1, #7
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 f909 	bl	800953c <SDMMC_GetCmdResp1>
 800932a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800932e:	4618      	mov	r0, r3
 8009330:	3728      	adds	r7, #40	; 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b088      	sub	sp, #32
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800934e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff ff39 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fb23 	bl	80099ac <SDMMC_GetCmdError>
 8009366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009368:	69fb      	ldr	r3, [r7, #28]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b088      	sub	sp, #32
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800937a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800937e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009380:	2308      	movs	r3, #8
 8009382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009384:	2340      	movs	r3, #64	; 0x40
 8009386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009388:	2300      	movs	r3, #0
 800938a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800938c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff ff1a 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fab6 	bl	8009910 <SDMMC_GetCmdResp7>
 80093a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a6:	69fb      	ldr	r3, [r7, #28]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3720      	adds	r7, #32
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80093be:	2337      	movs	r3, #55	; 0x37
 80093c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fefb 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80093dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e0:	2137      	movs	r1, #55	; 0x37
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8aa 	bl	800953c <SDMMC_GetCmdResp1>
 80093e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ea:	69fb      	ldr	r3, [r7, #28]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800940a:	2329      	movs	r3, #41	; 0x29
 800940c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800940e:	2340      	movs	r3, #64	; 0x40
 8009410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009412:	2300      	movs	r3, #0
 8009414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800941c:	f107 0308 	add.w	r3, r7, #8
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fed5 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9bd 	bl	80097a8 <SDMMC_GetCmdResp3>
 800942e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009430:	69fb      	ldr	r3, [r7, #28]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b088      	sub	sp, #32
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009446:	2302      	movs	r3, #2
 8009448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800944a:	23c0      	movs	r3, #192	; 0xc0
 800944c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009456:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009458:	f107 0308 	add.w	r3, r7, #8
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff feb7 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f957 	bl	8009718 <SDMMC_GetCmdResp2>
 800946a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800946c:	69fb      	ldr	r3, [r7, #28]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009484:	2309      	movs	r3, #9
 8009486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009488:	23c0      	movs	r3, #192	; 0xc0
 800948a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009494:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009496:	f107 0308 	add.w	r3, r7, #8
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff fe98 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f938 	bl	8009718 <SDMMC_GetCmdResp2>
 80094a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094aa:	69fb      	ldr	r3, [r7, #28]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80094c2:	2303      	movs	r3, #3
 80094c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fe79 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	2103      	movs	r1, #3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f99d 	bl	8009824 <SDMMC_GetCmdResp6>
 80094ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ec:	69fb      	ldr	r3, [r7, #28]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b088      	sub	sp, #32
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009504:	230d      	movs	r3, #13
 8009506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009514:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009516:	f107 0308 	add.w	r3, r7, #8
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff fe58 	bl	80091d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009522:	f241 3288 	movw	r2, #5000	; 0x1388
 8009526:	210d      	movs	r1, #13
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f807 	bl	800953c <SDMMC_GetCmdResp1>
 800952e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009530:	69fb      	ldr	r3, [r7, #28]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	460b      	mov	r3, r1
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800954a:	4b70      	ldr	r3, [pc, #448]	; (800970c <SDMMC_GetCmdResp1+0x1d0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a70      	ldr	r2, [pc, #448]	; (8009710 <SDMMC_GetCmdResp1+0x1d4>)
 8009550:	fba2 2303 	umull	r2, r3, r2, r3
 8009554:	0a5a      	lsrs	r2, r3, #9
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	fb02 f303 	mul.w	r3, r2, r3
 800955c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	1e5a      	subs	r2, r3, #1
 8009562:	61fa      	str	r2, [r7, #28]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d102      	bne.n	800956e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800956c:	e0c9      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0ef      	beq.n	800955e <SDMMC_GetCmdResp1+0x22>
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1ea      	bne.n	800955e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2204      	movs	r2, #4
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800959a:	2304      	movs	r3, #4
 800959c:	e0b1      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e0a6      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	22c5      	movs	r2, #197	; 0xc5
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fe33 	bl	8009226 <SDIO_GetCommandResponse>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d001      	beq.n	80095ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e099      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80095ce:	2100      	movs	r1, #0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff fe35 	bl	8009240 <SDIO_GetResponse>
 80095d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	4b4e      	ldr	r3, [pc, #312]	; (8009714 <SDMMC_GetCmdResp1+0x1d8>)
 80095dc:	4013      	ands	r3, r2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e08d      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da02      	bge.n	80095f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095f0:	e087      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095fc:	2340      	movs	r3, #64	; 0x40
 80095fe:	e080      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800960a:	2380      	movs	r3, #128	; 0x80
 800960c:	e079      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961c:	e071      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800962c:	e069      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963c:	e061      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800964c:	e059      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800965c:	e051      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800966c:	e049      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800967c:	e041      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800968c:	e039      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800969c:	e031      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80096a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80096ac:	e029      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80096b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096bc:	e021      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80096c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096cc:	e019      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096dc:	e011      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096ec:	e009      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096fc:	e001      	b.n	8009702 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009702:	4618      	mov	r0, r3
 8009704:	3720      	adds	r7, #32
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000000 	.word	0x20000000
 8009710:	10624dd3 	.word	0x10624dd3
 8009714:	fdffe008 	.word	0xfdffe008

08009718 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009720:	4b1f      	ldr	r3, [pc, #124]	; (80097a0 <SDMMC_GetCmdResp2+0x88>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1f      	ldr	r2, [pc, #124]	; (80097a4 <SDMMC_GetCmdResp2+0x8c>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009730:	fb02 f303 	mul.w	r3, r2, r3
 8009734:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1e5a      	subs	r2, r3, #1
 800973a:	60fa      	str	r2, [r7, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009744:	e026      	b.n	8009794 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0ef      	beq.n	8009736 <SDMMC_GetCmdResp2+0x1e>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1ea      	bne.n	8009736 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2204      	movs	r2, #4
 8009770:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009772:	2304      	movs	r3, #4
 8009774:	e00e      	b.n	8009794 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009788:	2301      	movs	r3, #1
 800978a:	e003      	b.n	8009794 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	22c5      	movs	r2, #197	; 0xc5
 8009790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20000000 	.word	0x20000000
 80097a4:	10624dd3 	.word	0x10624dd3

080097a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097b0:	4b1a      	ldr	r3, [pc, #104]	; (800981c <SDMMC_GetCmdResp3+0x74>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a1a      	ldr	r2, [pc, #104]	; (8009820 <SDMMC_GetCmdResp3+0x78>)
 80097b6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ba:	0a5b      	lsrs	r3, r3, #9
 80097bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c0:	fb02 f303 	mul.w	r3, r2, r3
 80097c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1e5a      	subs	r2, r3, #1
 80097ca:	60fa      	str	r2, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097d4:	e01b      	b.n	800980e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0ef      	beq.n	80097c6 <SDMMC_GetCmdResp3+0x1e>
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1ea      	bne.n	80097c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2204      	movs	r2, #4
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009802:	2304      	movs	r3, #4
 8009804:	e003      	b.n	800980e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	22c5      	movs	r2, #197	; 0xc5
 800980a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000000 	.word	0x20000000
 8009820:	10624dd3 	.word	0x10624dd3

08009824 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	460b      	mov	r3, r1
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009832:	4b35      	ldr	r3, [pc, #212]	; (8009908 <SDMMC_GetCmdResp6+0xe4>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a35      	ldr	r2, [pc, #212]	; (800990c <SDMMC_GetCmdResp6+0xe8>)
 8009838:	fba2 2303 	umull	r2, r3, r2, r3
 800983c:	0a5b      	lsrs	r3, r3, #9
 800983e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009842:	fb02 f303 	mul.w	r3, r2, r3
 8009846:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	1e5a      	subs	r2, r3, #1
 800984c:	61fa      	str	r2, [r7, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009856:	e052      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0ef      	beq.n	8009848 <SDMMC_GetCmdResp6+0x24>
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1ea      	bne.n	8009848 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2204      	movs	r2, #4
 8009882:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009884:	2304      	movs	r3, #4
 8009886:	e03a      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2201      	movs	r2, #1
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800989a:	2301      	movs	r3, #1
 800989c:	e02f      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f7ff fcc1 	bl	8009226 <SDIO_GetCommandResponse>
 80098a4:	4603      	mov	r3, r0
 80098a6:	461a      	mov	r2, r3
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d001      	beq.n	80098b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e025      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	22c5      	movs	r2, #197	; 0xc5
 80098b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80098b8:	2100      	movs	r1, #0
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f7ff fcc0 	bl	8009240 <SDIO_GetResponse>
 80098c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d106      	bne.n	80098da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	0c1b      	lsrs	r3, r3, #16
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	e011      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098e8:	e009      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f8:	e001      	b.n	80098fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20000000 	.word	0x20000000
 800990c:	10624dd3 	.word	0x10624dd3

08009910 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009918:	4b22      	ldr	r3, [pc, #136]	; (80099a4 <SDMMC_GetCmdResp7+0x94>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a22      	ldr	r2, [pc, #136]	; (80099a8 <SDMMC_GetCmdResp7+0x98>)
 800991e:	fba2 2303 	umull	r2, r3, r2, r3
 8009922:	0a5b      	lsrs	r3, r3, #9
 8009924:	f241 3288 	movw	r2, #5000	; 0x1388
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	60fa      	str	r2, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009938:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800993c:	e02c      	b.n	8009998 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009942:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0ef      	beq.n	800992e <SDMMC_GetCmdResp7+0x1e>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1ea      	bne.n	800992e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2204      	movs	r2, #4
 8009968:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800996a:	2304      	movs	r3, #4
 800996c:	e014      	b.n	8009998 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009980:	2301      	movs	r3, #1
 8009982:	e009      	b.n	8009998 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2240      	movs	r2, #64	; 0x40
 8009994:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009996:	2300      	movs	r3, #0
  
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	20000000 	.word	0x20000000
 80099a8:	10624dd3 	.word	0x10624dd3

080099ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099b4:	4b11      	ldr	r3, [pc, #68]	; (80099fc <SDMMC_GetCmdError+0x50>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a11      	ldr	r2, [pc, #68]	; (8009a00 <SDMMC_GetCmdError+0x54>)
 80099ba:	fba2 2303 	umull	r2, r3, r2, r3
 80099be:	0a5b      	lsrs	r3, r3, #9
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	fb02 f303 	mul.w	r3, r2, r3
 80099c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1e5a      	subs	r2, r3, #1
 80099ce:	60fa      	str	r2, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099d8:	e009      	b.n	80099ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f1      	beq.n	80099ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	22c5      	movs	r2, #197	; 0xc5
 80099ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	20000000 	.word	0x20000000
 8009a00:	10624dd3 	.word	0x10624dd3

08009a04 <_ZdlPvj>:
 8009a04:	f000 b804 	b.w	8009a10 <_ZdlPv>

08009a08 <_ZdaPv>:
 8009a08:	f000 b802 	b.w	8009a10 <_ZdlPv>

08009a0c <_Znaj>:
 8009a0c:	f000 b802 	b.w	8009a14 <_Znwj>

08009a10 <_ZdlPv>:
 8009a10:	f000 b854 	b.w	8009abc <free>

08009a14 <_Znwj>:
 8009a14:	2801      	cmp	r0, #1
 8009a16:	bf38      	it	cc
 8009a18:	2001      	movcc	r0, #1
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f000 f844 	bl	8009aac <malloc>
 8009a24:	b930      	cbnz	r0, 8009a34 <_Znwj+0x20>
 8009a26:	f000 f807 	bl	8009a38 <_ZSt15get_new_handlerv>
 8009a2a:	b908      	cbnz	r0, 8009a30 <_Znwj+0x1c>
 8009a2c:	f000 f80c 	bl	8009a48 <abort>
 8009a30:	4780      	blx	r0
 8009a32:	e7f4      	b.n	8009a1e <_Znwj+0xa>
 8009a34:	bd10      	pop	{r4, pc}
	...

08009a38 <_ZSt15get_new_handlerv>:
 8009a38:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <_ZSt15get_new_handlerv+0xc>)
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	f3bf 8f5b 	dmb	ish
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000694 	.word	0x20000694

08009a48 <abort>:
 8009a48:	b508      	push	{r3, lr}
 8009a4a:	2006      	movs	r0, #6
 8009a4c:	f000 f95e 	bl	8009d0c <raise>
 8009a50:	2001      	movs	r0, #1
 8009a52:	f7f8 fe2d 	bl	80026b0 <_exit>
	...

08009a58 <__errno>:
 8009a58:	4b01      	ldr	r3, [pc, #4]	; (8009a60 <__errno+0x8>)
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	2000000c 	.word	0x2000000c

08009a64 <__libc_init_array>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4d0d      	ldr	r5, [pc, #52]	; (8009a9c <__libc_init_array+0x38>)
 8009a68:	4c0d      	ldr	r4, [pc, #52]	; (8009aa0 <__libc_init_array+0x3c>)
 8009a6a:	1b64      	subs	r4, r4, r5
 8009a6c:	10a4      	asrs	r4, r4, #2
 8009a6e:	2600      	movs	r6, #0
 8009a70:	42a6      	cmp	r6, r4
 8009a72:	d109      	bne.n	8009a88 <__libc_init_array+0x24>
 8009a74:	4d0b      	ldr	r5, [pc, #44]	; (8009aa4 <__libc_init_array+0x40>)
 8009a76:	4c0c      	ldr	r4, [pc, #48]	; (8009aa8 <__libc_init_array+0x44>)
 8009a78:	f000 f972 	bl	8009d60 <_init>
 8009a7c:	1b64      	subs	r4, r4, r5
 8009a7e:	10a4      	asrs	r4, r4, #2
 8009a80:	2600      	movs	r6, #0
 8009a82:	42a6      	cmp	r6, r4
 8009a84:	d105      	bne.n	8009a92 <__libc_init_array+0x2e>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8c:	4798      	blx	r3
 8009a8e:	3601      	adds	r6, #1
 8009a90:	e7ee      	b.n	8009a70 <__libc_init_array+0xc>
 8009a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a96:	4798      	blx	r3
 8009a98:	3601      	adds	r6, #1
 8009a9a:	e7f2      	b.n	8009a82 <__libc_init_array+0x1e>
 8009a9c:	08009de0 	.word	0x08009de0
 8009aa0:	08009de0 	.word	0x08009de0
 8009aa4:	08009de0 	.word	0x08009de0
 8009aa8:	08009de8 	.word	0x08009de8

08009aac <malloc>:
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <malloc+0xc>)
 8009aae:	4601      	mov	r1, r0
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	f000 b87f 	b.w	8009bb4 <_malloc_r>
 8009ab6:	bf00      	nop
 8009ab8:	2000000c 	.word	0x2000000c

08009abc <free>:
 8009abc:	4b02      	ldr	r3, [pc, #8]	; (8009ac8 <free+0xc>)
 8009abe:	4601      	mov	r1, r0
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	f000 b80b 	b.w	8009adc <_free_r>
 8009ac6:	bf00      	nop
 8009ac8:	2000000c 	.word	0x2000000c

08009acc <memset>:
 8009acc:	4402      	add	r2, r0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d100      	bne.n	8009ad6 <memset+0xa>
 8009ad4:	4770      	bx	lr
 8009ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8009ada:	e7f9      	b.n	8009ad0 <memset+0x4>

08009adc <_free_r>:
 8009adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	d044      	beq.n	8009b6c <_free_r+0x90>
 8009ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae6:	9001      	str	r0, [sp, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f1a1 0404 	sub.w	r4, r1, #4
 8009aee:	bfb8      	it	lt
 8009af0:	18e4      	addlt	r4, r4, r3
 8009af2:	f000 f927 	bl	8009d44 <__malloc_lock>
 8009af6:	4a1e      	ldr	r2, [pc, #120]	; (8009b70 <_free_r+0x94>)
 8009af8:	9801      	ldr	r0, [sp, #4]
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	b933      	cbnz	r3, 8009b0c <_free_r+0x30>
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	b003      	add	sp, #12
 8009b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b08:	f000 b922 	b.w	8009d50 <__malloc_unlock>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d908      	bls.n	8009b22 <_free_r+0x46>
 8009b10:	6825      	ldr	r5, [r4, #0]
 8009b12:	1961      	adds	r1, r4, r5
 8009b14:	428b      	cmp	r3, r1
 8009b16:	bf01      	itttt	eq
 8009b18:	6819      	ldreq	r1, [r3, #0]
 8009b1a:	685b      	ldreq	r3, [r3, #4]
 8009b1c:	1949      	addeq	r1, r1, r5
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	e7ed      	b.n	8009afe <_free_r+0x22>
 8009b22:	461a      	mov	r2, r3
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b10b      	cbz	r3, 8009b2c <_free_r+0x50>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d9fa      	bls.n	8009b22 <_free_r+0x46>
 8009b2c:	6811      	ldr	r1, [r2, #0]
 8009b2e:	1855      	adds	r5, r2, r1
 8009b30:	42a5      	cmp	r5, r4
 8009b32:	d10b      	bne.n	8009b4c <_free_r+0x70>
 8009b34:	6824      	ldr	r4, [r4, #0]
 8009b36:	4421      	add	r1, r4
 8009b38:	1854      	adds	r4, r2, r1
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	6011      	str	r1, [r2, #0]
 8009b3e:	d1e0      	bne.n	8009b02 <_free_r+0x26>
 8009b40:	681c      	ldr	r4, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	6053      	str	r3, [r2, #4]
 8009b46:	4421      	add	r1, r4
 8009b48:	6011      	str	r1, [r2, #0]
 8009b4a:	e7da      	b.n	8009b02 <_free_r+0x26>
 8009b4c:	d902      	bls.n	8009b54 <_free_r+0x78>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	6003      	str	r3, [r0, #0]
 8009b52:	e7d6      	b.n	8009b02 <_free_r+0x26>
 8009b54:	6825      	ldr	r5, [r4, #0]
 8009b56:	1961      	adds	r1, r4, r5
 8009b58:	428b      	cmp	r3, r1
 8009b5a:	bf04      	itt	eq
 8009b5c:	6819      	ldreq	r1, [r3, #0]
 8009b5e:	685b      	ldreq	r3, [r3, #4]
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	bf04      	itt	eq
 8009b64:	1949      	addeq	r1, r1, r5
 8009b66:	6021      	streq	r1, [r4, #0]
 8009b68:	6054      	str	r4, [r2, #4]
 8009b6a:	e7ca      	b.n	8009b02 <_free_r+0x26>
 8009b6c:	b003      	add	sp, #12
 8009b6e:	bd30      	pop	{r4, r5, pc}
 8009b70:	20000698 	.word	0x20000698

08009b74 <sbrk_aligned>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4e0e      	ldr	r6, [pc, #56]	; (8009bb0 <sbrk_aligned+0x3c>)
 8009b78:	460c      	mov	r4, r1
 8009b7a:	6831      	ldr	r1, [r6, #0]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	b911      	cbnz	r1, 8009b86 <sbrk_aligned+0x12>
 8009b80:	f000 f88c 	bl	8009c9c <_sbrk_r>
 8009b84:	6030      	str	r0, [r6, #0]
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 f887 	bl	8009c9c <_sbrk_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d00a      	beq.n	8009ba8 <sbrk_aligned+0x34>
 8009b92:	1cc4      	adds	r4, r0, #3
 8009b94:	f024 0403 	bic.w	r4, r4, #3
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d007      	beq.n	8009bac <sbrk_aligned+0x38>
 8009b9c:	1a21      	subs	r1, r4, r0
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f87c 	bl	8009c9c <_sbrk_r>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d101      	bne.n	8009bac <sbrk_aligned+0x38>
 8009ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	2000069c 	.word	0x2000069c

08009bb4 <_malloc_r>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	1ccd      	adds	r5, r1, #3
 8009bba:	f025 0503 	bic.w	r5, r5, #3
 8009bbe:	3508      	adds	r5, #8
 8009bc0:	2d0c      	cmp	r5, #12
 8009bc2:	bf38      	it	cc
 8009bc4:	250c      	movcc	r5, #12
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	4607      	mov	r7, r0
 8009bca:	db01      	blt.n	8009bd0 <_malloc_r+0x1c>
 8009bcc:	42a9      	cmp	r1, r5
 8009bce:	d905      	bls.n	8009bdc <_malloc_r+0x28>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bdc:	4e2e      	ldr	r6, [pc, #184]	; (8009c98 <_malloc_r+0xe4>)
 8009bde:	f000 f8b1 	bl	8009d44 <__malloc_lock>
 8009be2:	6833      	ldr	r3, [r6, #0]
 8009be4:	461c      	mov	r4, r3
 8009be6:	bb34      	cbnz	r4, 8009c36 <_malloc_r+0x82>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4638      	mov	r0, r7
 8009bec:	f7ff ffc2 	bl	8009b74 <sbrk_aligned>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	d14d      	bne.n	8009c92 <_malloc_r+0xde>
 8009bf6:	6834      	ldr	r4, [r6, #0]
 8009bf8:	4626      	mov	r6, r4
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d140      	bne.n	8009c80 <_malloc_r+0xcc>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	4631      	mov	r1, r6
 8009c02:	4638      	mov	r0, r7
 8009c04:	eb04 0803 	add.w	r8, r4, r3
 8009c08:	f000 f848 	bl	8009c9c <_sbrk_r>
 8009c0c:	4580      	cmp	r8, r0
 8009c0e:	d13a      	bne.n	8009c86 <_malloc_r+0xd2>
 8009c10:	6821      	ldr	r1, [r4, #0]
 8009c12:	3503      	adds	r5, #3
 8009c14:	1a6d      	subs	r5, r5, r1
 8009c16:	f025 0503 	bic.w	r5, r5, #3
 8009c1a:	3508      	adds	r5, #8
 8009c1c:	2d0c      	cmp	r5, #12
 8009c1e:	bf38      	it	cc
 8009c20:	250c      	movcc	r5, #12
 8009c22:	4629      	mov	r1, r5
 8009c24:	4638      	mov	r0, r7
 8009c26:	f7ff ffa5 	bl	8009b74 <sbrk_aligned>
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d02b      	beq.n	8009c86 <_malloc_r+0xd2>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	442b      	add	r3, r5
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	e00e      	b.n	8009c54 <_malloc_r+0xa0>
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	1b52      	subs	r2, r2, r5
 8009c3a:	d41e      	bmi.n	8009c7a <_malloc_r+0xc6>
 8009c3c:	2a0b      	cmp	r2, #11
 8009c3e:	d916      	bls.n	8009c6e <_malloc_r+0xba>
 8009c40:	1961      	adds	r1, r4, r5
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	6025      	str	r5, [r4, #0]
 8009c46:	bf18      	it	ne
 8009c48:	6059      	strne	r1, [r3, #4]
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	bf08      	it	eq
 8009c4e:	6031      	streq	r1, [r6, #0]
 8009c50:	5162      	str	r2, [r4, r5]
 8009c52:	604b      	str	r3, [r1, #4]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f104 060b 	add.w	r6, r4, #11
 8009c5a:	f000 f879 	bl	8009d50 <__malloc_unlock>
 8009c5e:	f026 0607 	bic.w	r6, r6, #7
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	1af2      	subs	r2, r6, r3
 8009c66:	d0b6      	beq.n	8009bd6 <_malloc_r+0x22>
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	50a3      	str	r3, [r4, r2]
 8009c6c:	e7b3      	b.n	8009bd6 <_malloc_r+0x22>
 8009c6e:	6862      	ldr	r2, [r4, #4]
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	bf0c      	ite	eq
 8009c74:	6032      	streq	r2, [r6, #0]
 8009c76:	605a      	strne	r2, [r3, #4]
 8009c78:	e7ec      	b.n	8009c54 <_malloc_r+0xa0>
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	6864      	ldr	r4, [r4, #4]
 8009c7e:	e7b2      	b.n	8009be6 <_malloc_r+0x32>
 8009c80:	4634      	mov	r4, r6
 8009c82:	6876      	ldr	r6, [r6, #4]
 8009c84:	e7b9      	b.n	8009bfa <_malloc_r+0x46>
 8009c86:	230c      	movs	r3, #12
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f000 f860 	bl	8009d50 <__malloc_unlock>
 8009c90:	e7a1      	b.n	8009bd6 <_malloc_r+0x22>
 8009c92:	6025      	str	r5, [r4, #0]
 8009c94:	e7de      	b.n	8009c54 <_malloc_r+0xa0>
 8009c96:	bf00      	nop
 8009c98:	20000698 	.word	0x20000698

08009c9c <_sbrk_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d06      	ldr	r5, [pc, #24]	; (8009cb8 <_sbrk_r+0x1c>)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	f7f8 fd0c 	bl	80026c4 <_sbrk>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_sbrk_r+0x1a>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_sbrk_r+0x1a>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	200006a0 	.word	0x200006a0

08009cbc <_raise_r>:
 8009cbc:	291f      	cmp	r1, #31
 8009cbe:	b538      	push	{r3, r4, r5, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	d904      	bls.n	8009cd0 <_raise_r+0x14>
 8009cc6:	2316      	movs	r3, #22
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cd2:	b112      	cbz	r2, 8009cda <_raise_r+0x1e>
 8009cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cd8:	b94b      	cbnz	r3, 8009cee <_raise_r+0x32>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 f830 	bl	8009d40 <_getpid_r>
 8009ce0:	462a      	mov	r2, r5
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cea:	f000 b817 	b.w	8009d1c <_kill_r>
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d00a      	beq.n	8009d08 <_raise_r+0x4c>
 8009cf2:	1c59      	adds	r1, r3, #1
 8009cf4:	d103      	bne.n	8009cfe <_raise_r+0x42>
 8009cf6:	2316      	movs	r3, #22
 8009cf8:	6003      	str	r3, [r0, #0]
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	e7e7      	b.n	8009cce <_raise_r+0x12>
 8009cfe:	2400      	movs	r4, #0
 8009d00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d04:	4628      	mov	r0, r5
 8009d06:	4798      	blx	r3
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7e0      	b.n	8009cce <_raise_r+0x12>

08009d0c <raise>:
 8009d0c:	4b02      	ldr	r3, [pc, #8]	; (8009d18 <raise+0xc>)
 8009d0e:	4601      	mov	r1, r0
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	f7ff bfd3 	b.w	8009cbc <_raise_r>
 8009d16:	bf00      	nop
 8009d18:	2000000c 	.word	0x2000000c

08009d1c <_kill_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d07      	ldr	r5, [pc, #28]	; (8009d3c <_kill_r+0x20>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	f7f8 fcb1 	bl	8002690 <_kill>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d102      	bne.n	8009d38 <_kill_r+0x1c>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	b103      	cbz	r3, 8009d38 <_kill_r+0x1c>
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	bd38      	pop	{r3, r4, r5, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200006a0 	.word	0x200006a0

08009d40 <_getpid_r>:
 8009d40:	f7f8 bc9e 	b.w	8002680 <_getpid>

08009d44 <__malloc_lock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__malloc_lock+0x8>)
 8009d46:	f000 b809 	b.w	8009d5c <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	200006a4 	.word	0x200006a4

08009d50 <__malloc_unlock>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__malloc_unlock+0x8>)
 8009d52:	f000 b804 	b.w	8009d5e <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	200006a4 	.word	0x200006a4

08009d5c <__retarget_lock_acquire_recursive>:
 8009d5c:	4770      	bx	lr

08009d5e <__retarget_lock_release_recursive>:
 8009d5e:	4770      	bx	lr

08009d60 <_init>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr

08009d6c <_fini>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr
