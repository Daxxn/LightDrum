
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad04  0800ad04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad0c  0800ad0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ad1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  20000070  0800ad8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800ad8c  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c4b0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005134  00000000  00000000  0004c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002090  00000000  00000000  00051688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec0  00000000  00000000  00053718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002add7  00000000  00000000  000555d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029dc6  00000000  00000000  000803af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb508  00000000  00000000  000aa175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019567d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f78  00000000  00000000  001956d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800ac8c 	.word	0x0800ac8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	0800ac8c 	.word	0x0800ac8c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN6ButtonC1Ev>:
 */

#include "Button.h"


Button::Button()
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <_ZN6ButtonC1Ev+0x1c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
{
}
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	0800acac 	.word	0x0800acac

08000528 <_ZN6ButtonD1Ev>:

Button::~Button()
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <_ZN6ButtonD1Ev+0x1c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
{
}
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	0800acac 	.word	0x0800acac

08000548 <_ZN6ButtonD0Ev>:
Button::~Button()
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
}
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffe9 	bl	8000528 <_ZN6ButtonD1Ev>
 8000556:	2110      	movs	r1, #16
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f00a f9e9 	bl	800a930 <_ZdlPvj>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f004 fe69 	bl	800527c <HAL_GPIO_WritePin>
	};
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <_ZN12StripCurrentC1Ev>:
 *
 */
class StripCurrent
{
public:
	StripCurrent() {};
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <_ZN12StripCurrentC1Ev+0x1c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	0800acdc 	.word	0x0800acdc

080005d4 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <_ZN9ShiftRegsC1Ev+0x2c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3308      	adds	r3, #8
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffbe 	bl	8000568 <_ZN3PinC1Ev>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3310      	adds	r3, #16
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffb9 	bl	8000568 <_ZN3PinC1Ev>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800accc 	.word	0x0800accc

08000604 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	3308      	adds	r3, #8
 800061c:	3208      	adds	r2, #8
 800061e:	6811      	ldr	r1, [r2, #0]
 8000620:	6019      	str	r1, [r3, #0]
 8000622:	8891      	ldrh	r1, [r2, #4]
 8000624:	7992      	ldrb	r2, [r2, #6]
 8000626:	8099      	strh	r1, [r3, #4]
 8000628:	719a      	strb	r2, [r3, #6]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	3310      	adds	r3, #16
 8000630:	3210      	adds	r2, #16
 8000632:	6811      	ldr	r1, [r2, #0]
 8000634:	6019      	str	r1, [r3, #0]
 8000636:	8891      	ldrh	r1, [r2, #4]
 8000638:	7992      	ldrb	r2, [r2, #6]
 800063a:	8099      	strh	r1, [r3, #4]
 800063c:	719a      	strb	r2, [r3, #6]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	8b1a      	ldrh	r2, [r3, #24]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	831a      	strh	r2, [r3, #24]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	69da      	ldr	r2, [r3, #28]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	61da      	str	r2, [r3, #28]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	6a1a      	ldr	r2, [r3, #32]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	621a      	str	r2, [r3, #32]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_ZN12StripCurrentaSERKS_>:
class StripCurrent
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	689a      	ldr	r2, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	8a1a      	ldrh	r2, [r3, #16]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	821a      	strh	r2, [r3, #16]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <Init>:
		TIM_HandleTypeDef    *in_htim8,
		UART_HandleTypeDef   *in_huart1,
		UART_HandleTypeDef   *in_huart2,
		UART_HandleTypeDef   *in_huart3
	)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b098      	sub	sp, #96	; 0x60
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	4956      	ldr	r1, [pc, #344]	; (800080c <Init+0x170>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff62 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006c2:	4952      	ldr	r1, [pc, #328]	; (800080c <Init+0x170>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff5a 	bl	800057e <_ZN3PinC1EP12GPIO_TypeDeft>

	currentADCHandle = in_hadc1;
 80006ca:	4a51      	ldr	r2, [pc, #324]	; (8000810 <Init+0x174>)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	6013      	str	r3, [r2, #0]
	currentADCMemHandle = in_hdma_adc1;
 80006d0:	4a50      	ldr	r2, [pc, #320]	; (8000814 <Init+0x178>)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	6013      	str	r3, [r2, #0]
	stripI2cHandle = in_hfmpi2c1;
 80006d6:	4a50      	ldr	r2, [pc, #320]	; (8000818 <Init+0x17c>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 80006dc:	4a4f      	ldr	r2, [pc, #316]	; (800081c <Init+0x180>)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	6013      	str	r3, [r2, #0]
	i2cHandle = in_hi2c1;
 80006e2:	4a4f      	ldr	r2, [pc, #316]	; (8000820 <Init+0x184>)
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	6013      	str	r3, [r2, #0]
	audioHandle = in_hi2s3;
 80006e8:	4a4e      	ldr	r2, [pc, #312]	; (8000824 <Init+0x188>)
 80006ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ec:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = in_hdma_spi3_rx;
 80006ee:	4a4e      	ldr	r2, [pc, #312]	; (8000828 <Init+0x18c>)
 80006f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006f2:	6013      	str	r3, [r2, #0]
	rtcHandle = in_hrtc;
 80006f4:	4a4d      	ldr	r2, [pc, #308]	; (800082c <Init+0x190>)
 80006f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f8:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 80006fa:	4a4d      	ldr	r2, [pc, #308]	; (8000830 <Init+0x194>)
 80006fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006fe:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 8000700:	4a4c      	ldr	r2, [pc, #304]	; (8000834 <Init+0x198>)
 8000702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000704:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 8000706:	4a4c      	ldr	r2, [pc, #304]	; (8000838 <Init+0x19c>)
 8000708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800070c:	6013      	str	r3, [r2, #0]
	pwm2Handle = in_htim2;
 800070e:	4a4b      	ldr	r2, [pc, #300]	; (800083c <Init+0x1a0>)
 8000710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000714:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8000716:	4a4a      	ldr	r2, [pc, #296]	; (8000840 <Init+0x1a4>)
 8000718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800071c:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 800071e:	4a49      	ldr	r2, [pc, #292]	; (8000844 <Init+0x1a8>)
 8000720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000724:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 8000726:	4a48      	ldr	r2, [pc, #288]	; (8000848 <Init+0x1ac>)
 8000728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800072c:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 800072e:	4a47      	ldr	r2, [pc, #284]	; (800084c <Init+0x1b0>)
 8000730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000734:	6013      	str	r3, [r2, #0]
	adcTimHandle = in_htim8;
 8000736:	4a46      	ldr	r2, [pc, #280]	; (8000850 <Init+0x1b4>)
 8000738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800073c:	6013      	str	r3, [r2, #0]

//	screen.Startup(screenHandle);
	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <Init+0x198>)
 8000740:	681d      	ldr	r5, [r3, #0]
 8000742:	f107 0420 	add.w	r4, r7, #32
 8000746:	466a      	mov	r2, sp
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000750:	e882 0003 	stmia.w	r2, {r0, r1}
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	cb0c      	ldmia	r3, {r2, r3}
 800075a:	4629      	mov	r1, r5
 800075c:	4620      	mov	r0, r4
 800075e:	f000 f9ab 	bl	8000ab8 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4619      	mov	r1, r3
 8000768:	483a      	ldr	r0, [pc, #232]	; (8000854 <Init+0x1b8>)
 800076a:	f7ff ff4b 	bl	8000604 <_ZN9ShiftRegsaSERKS_>
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f9e2 	bl	8000b3c <_ZN9ShiftRegsD1Ev>
	stripCurr = StripCurrent(currentADCHandle, adcTimHandle);
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <Init+0x174>)
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <Init+0x1b4>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000784:	4618      	mov	r0, r3
 8000786:	f000 facb 	bl	8000d20 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>
 800078a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800078e:	4619      	mov	r1, r3
 8000790:	4831      	ldr	r0, [pc, #196]	; (8000858 <Init+0x1bc>)
 8000792:	f7ff ff67 	bl	8000664 <_ZN12StripCurrentaSERKS_>
 8000796:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fad8 	bl	8000d50 <_ZN12StripCurrentD1Ev>

	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_1);
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <Init+0x19c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 f9aa 	bl	8008b00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2Handle, TIM_CHANNEL_1);
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <Init+0x1a0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f008 f9a4 	bl	8008b00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm2Handle, TIM_CHANNEL_2);
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <Init+0x1a0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f008 f99e 	bl	8008b00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_1);
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <Init+0x1a4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 f998 	bl	8008b00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_4);
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <Init+0x1a4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	210c      	movs	r1, #12
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 f992 	bl	8008b00 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <Init+0x170>)
 80007e4:	f004 fd4a 	bl	800527c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <Init+0x170>)
 80007f0:	f004 fd44 	bl	800527c <HAL_GPIO_WritePin>

	stripCurr.Init();
 80007f4:	4818      	ldr	r0, [pc, #96]	; (8000858 <Init+0x1bc>)
 80007f6:	f000 fad3 	bl	8000da0 <_ZN12StripCurrent4InitEv>

	shiftReg.Init();
 80007fa:	4816      	ldr	r0, [pc, #88]	; (8000854 <Init+0x1b8>)
 80007fc:	f000 f9c6 	bl	8000b8c <_ZN9ShiftRegs4InitEv>

	return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3758      	adds	r7, #88	; 0x58
 8000806:	46bd      	mov	sp, r7
 8000808:	bdb0      	pop	{r4, r5, r7, pc}
 800080a:	bf00      	nop
 800080c:	40020c00 	.word	0x40020c00
 8000810:	2000008c 	.word	0x2000008c
 8000814:	20000090 	.word	0x20000090
 8000818:	20000094 	.word	0x20000094
 800081c:	20000098 	.word	0x20000098
 8000820:	2000009c 	.word	0x2000009c
 8000824:	200000a0 	.word	0x200000a0
 8000828:	200000a4 	.word	0x200000a4
 800082c:	200000a8 	.word	0x200000a8
 8000830:	200000ac 	.word	0x200000ac
 8000834:	200000b0 	.word	0x200000b0
 8000838:	200000b4 	.word	0x200000b4
 800083c:	200000b8 	.word	0x200000b8
 8000840:	200000bc 	.word	0x200000bc
 8000844:	200000c4 	.word	0x200000c4
 8000848:	200000c8 	.word	0x200000c8
 800084c:	200000cc 	.word	0x200000cc
 8000850:	200000c0 	.word	0x200000c0
 8000854:	200000d0 	.word	0x200000d0
 8000858:	2000012c 	.word	0x2000012c

0800085c <InitTest>:

void InitTest()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	shiftReg.IndicatorTest();
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <InitTest+0x10>)
 8000862:	f000 f9a5 	bl	8000bb0 <_ZN9ShiftRegs13IndicatorTestEv>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000d0 	.word	0x200000d0

08000870 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, 0);
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <Main+0x30>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2200      	movs	r2, #0
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f002 fa19 	bl	8002cb8 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(pwm2Handle, TIM_CHANNEL_1, UINT32_MAX / 2);
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <Main+0x30>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 8000892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000896:	f002 fa0f 	bl	8002cb8 <HAL_Delay>
//		Screen Nav Testing

//
//	ReadCurrent();
//	shiftReg.Update();
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000b8 	.word	0x200000b8

080008a4 <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_UP_IND);
 80008a8:	2103      	movs	r1, #3
 80008aa:	4802      	ldr	r0, [pc, #8]	; (80008b4 <MenuUpInterruptCallback+0x10>)
 80008ac:	f000 f9d3 	bl	8000c56 <_ZN9ShiftRegs11ToggleValueEj>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000d0 	.word	0x200000d0

080008b8 <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_DOWN_IND);
 80008bc:	2102      	movs	r1, #2
 80008be:	4802      	ldr	r0, [pc, #8]	; (80008c8 <MenuDownInterruptCallback+0x10>)
 80008c0:	f000 f9c9 	bl	8000c56 <_ZN9ShiftRegs11ToggleValueEj>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000d0 	.word	0x200000d0

080008cc <MenuRightInterruptCallback>:
//void MenuLeftInterruptCallback()
//{
//
//}
void MenuRightInterruptCallback()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_RIGHT_IND);
 80008d0:	2105      	movs	r1, #5
 80008d2:	4802      	ldr	r0, [pc, #8]	; (80008dc <MenuRightInterruptCallback+0x10>)
 80008d4:	f000 f9bf 	bl	8000c56 <_ZN9ShiftRegs11ToggleValueEj>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000d0 	.word	0x200000d0

080008e0 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 80008e4:	2108      	movs	r1, #8
 80008e6:	4802      	ldr	r0, [pc, #8]	; (80008f0 <MenuActInterruptCallback+0x10>)
 80008e8:	f000 f9b5 	bl	8000c56 <_ZN9ShiftRegs11ToggleValueEj>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000d0 	.word	0x200000d0

080008f4 <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	relayState = relayState == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MenuBackInterruptCallback+0x38>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <MenuBackInterruptCallback+0x38>)
 800090a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin, relayState);
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MenuBackInterruptCallback+0x38>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	2101      	movs	r1, #1
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <MenuBackInterruptCallback+0x3c>)
 8000916:	f004 fcb1 	bl	800527c <HAL_GPIO_WritePin>
	shiftReg.SetValue((uint8_t)relayState, MENU_BACK_IND);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <MenuBackInterruptCallback+0x38>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MenuBackInterruptCallback+0x40>)
 8000924:	f000 f96a 	bl	8000bfc <_ZN9ShiftRegs8SetValueEhj>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000140 	.word	0x20000140
 8000930:	40020c00 	.word	0x40020c00
 8000934:	200000d0 	.word	0x200000d0

08000938 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_Z41__static_initialization_and_destruction_0ii>:
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d113      	bne.n	800098c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096a:	4293      	cmp	r3, r2
 800096c:	d10e      	bne.n	800098c <_Z41__static_initialization_and_destruction_0ii+0x38>
ShiftRegs shiftReg;
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000970:	f7ff fe30 	bl	80005d4 <_ZN9ShiftRegsC1Ev>
Nextion screen = Nextion();
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000976:	f000 f83f 	bl	80009f8 <_ZN7NextionC1Ev>
Button menuUp = Button();
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800097c:	f7ff fdc4 	bl	8000508 <_ZN6ButtonC1Ev>
Button menuDown = Button();
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000982:	f7ff fdc1 	bl	8000508 <_ZN6ButtonC1Ev>
StripCurrent stripCurr;
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000988:	f7ff fe14 	bl	80005b4 <_ZN12StripCurrentC1Ev>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d113      	bne.n	80009ba <_Z41__static_initialization_and_destruction_0ii+0x66>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000998:	4293      	cmp	r3, r2
 800099a:	d10e      	bne.n	80009ba <_Z41__static_initialization_and_destruction_0ii+0x66>
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800099e:	f000 f9d7 	bl	8000d50 <_ZN12StripCurrentD1Ev>
Button menuDown = Button();
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80009a4:	f7ff fdc0 	bl	8000528 <_ZN6ButtonD1Ev>
Button menuUp = Button();
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80009aa:	f7ff fdbd 	bl	8000528 <_ZN6ButtonD1Ev>
Nextion screen = Nextion();
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80009b0:	f000 f848 	bl	8000a44 <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80009b6:	f000 f8c1 	bl	8000b3c <_ZN9ShiftRegsD1Ev>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000d0 	.word	0x200000d0
 80009c8:	200000f4 	.word	0x200000f4
 80009cc:	2000010c 	.word	0x2000010c
 80009d0:	2000011c 	.word	0x2000011c
 80009d4:	2000012c 	.word	0x2000012c

080009d8 <_GLOBAL__sub_I_currentADCHandle>:
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
 80009dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff ffb7 	bl	8000954 <_Z41__static_initialization_and_destruction_0ii>
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_GLOBAL__sub_D_currentADCHandle>:
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ffaf 	bl	8000954 <_Z41__static_initialization_and_destruction_0ii>
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <_ZN7NextionC1Ev+0x48>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8000a06:	2010      	movs	r0, #16
 8000a08:	f009 ff96 	bl	800a938 <_Znaj>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8000a14:	2008      	movs	r0, #8
 8000a16:	f009 ff8f 	bl	800a938 <_Znaj>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 8000a22:	2010      	movs	r0, #16
 8000a24:	f009 ff88 	bl	800a938 <_Znaj>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	611a      	str	r2, [r3, #16]
	this->index = 0;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	719a      	strb	r2, [r3, #6]
}
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	0800acbc 	.word	0x0800acbc

08000a44 <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <_ZN7NextionD1Ev+0x50>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
{
	delete[] cmdBuffer;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <_ZN7NextionD1Ev+0x20>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f009 ff68 	bl	800a934 <_ZdaPv>
	delete[] recBuffer;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <_ZN7NextionD1Ev+0x32>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f009 ff5f 	bl	800a934 <_ZdaPv>
	delete[] buffer;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <_ZN7NextionD1Ev+0x44>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 ff56 	bl	800a934 <_ZdaPv>
}
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	0800acbc 	.word	0x0800acbc

08000a98 <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
}
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffcf 	bl	8000a44 <_ZN7NextionD1Ev>
 8000aa6:	2118      	movs	r1, #24
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f009 ff41 	bl	800a930 <_ZdlPvj>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	4639      	mov	r1, r7
 8000ac4:	e881 000c 	stmia.w	r1, {r2, r3}
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd48 	bl	8000568 <_ZN3PinC1Ev>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3310      	adds	r3, #16
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd43 	bl	8000568 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3308      	adds	r3, #8
 8000aec:	463a      	mov	r2, r7
 8000aee:	6810      	ldr	r0, [r2, #0]
 8000af0:	6018      	str	r0, [r3, #0]
 8000af2:	8891      	ldrh	r1, [r2, #4]
 8000af4:	7992      	ldrb	r2, [r2, #6]
 8000af6:	8099      	strh	r1, [r3, #4]
 8000af8:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3310      	adds	r3, #16
 8000afe:	f107 0218 	add.w	r2, r7, #24
 8000b02:	6810      	ldr	r0, [r2, #0]
 8000b04:	6018      	str	r0, [r3, #0]
 8000b06:	8891      	ldrh	r1, [r2, #4]
 8000b08:	7992      	ldrb	r2, [r2, #6]
 8000b0a:	8099      	strh	r1, [r3, #4]
 8000b0c:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f009 ff12 	bl	800a938 <_Znaj>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4613      	mov	r3, r2
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	7019      	strb	r1, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	2100      	movs	r1, #0
 8000b22:	7019      	strb	r1, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	831a      	strh	r2, [r3, #24]
}
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	0800accc 	.word	0x0800accc

08000b3c <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <_ZN9ShiftRegsD1Ev+0x2c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d004      	beq.n	8000b5c <_ZN9ShiftRegsD1Ev+0x20>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f009 feec 	bl	800a934 <_ZdaPv>
}
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	0800accc 	.word	0x0800accc

08000b6c <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
}
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ffe1 	bl	8000b3c <_ZN9ShiftRegsD1Ev>
 8000b7a:	2124      	movs	r1, #36	; 0x24
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f009 fed7 	bl	800a930 <_ZdlPvj>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3308      	adds	r3, #8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f941 	bl	8000e20 <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f93c 	bl	8000e20 <_ZN3Pin5ClearEv>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_ZN9ShiftRegs13IndicatorTestEv>:

void ShiftRegs::IndicatorTest()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 32; ++i) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b1f      	cmp	r3, #31
 8000bc4:	dc16      	bgt.n	8000bf4 <_ZN9ShiftRegs13IndicatorTestEv+0x44>

		ToggleValue(count);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f843 	bl	8000c56 <_ZN9ShiftRegs11ToggleValueEj>
		Update();
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f86d 	bl	8000cb0 <_ZN9ShiftRegs6UpdateEv>
		count++;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
		if (count >= 16)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d901      	bls.n	8000be6 <_ZN9ShiftRegs13IndicatorTestEv+0x36>
		{
			count = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(50);
 8000be6:	2032      	movs	r0, #50	; 0x32
 8000be8:	f002 f866 	bl	8002cb8 <HAL_Delay>
	for (int i = 0; i < 32; ++i) {
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	e7e5      	b.n	8000bc0 <_ZN9ShiftRegs13IndicatorTestEv+0x10>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	460b      	mov	r3, r1
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10d      	bne.n	8000c2c <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	8b1b      	ldrh	r3, [r3, #24]
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	2101      	movs	r1, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8000c2a:	e00e      	b.n	8000c4a <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	8b1b      	ldrh	r3, [r3, #24]
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	2101      	movs	r1, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4013      	ands	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	831a      	strh	r2, [r3, #24]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f80f 	bl	8000c86 <_ZN9ShiftRegs8GetValueEj>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf0c      	ite	eq
 8000c6e:	2301      	moveq	r3, #1
 8000c70:	2300      	movne	r3, #0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffbf 	bl	8000bfc <_ZN9ShiftRegs8SetValueEhj>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	8b1b      	ldrh	r3, [r3, #24]
 8000c94:	461a      	mov	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	fa42 f303 	asr.w	r3, r2, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_ZN9ShiftRegs6UpdateEv>:

void ShiftRegs::Update()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	this->_buffer[0] = this->_number & 0xFF;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	8b1a      	ldrh	r2, [r3, #24]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	701a      	strb	r2, [r3, #0]
	this->_buffer[1] = (this->_number & 0xFF00) >> 8;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	8b1b      	ldrh	r3, [r3, #24]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	701a      	strb	r2, [r3, #0]
	this->OEPin.Write(GPIO_PIN_SET);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3308      	adds	r3, #8
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f882 	bl	8000de6 <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_SET);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3310      	adds	r3, #16
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f87c 	bl	8000de6 <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_SET);
	HAL_SPI_Transmit(this->_spi, this->_buffer, 2, Timeout);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69d8      	ldr	r0, [r3, #28]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a19      	ldr	r1, [r3, #32]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	f007 fbe7 	bl	80084ce <HAL_SPI_Transmit>
	this->OEPin.Write(GPIO_PIN_RESET);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3308      	adds	r3, #8
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f86d 	bl	8000de6 <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_RESET);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3310      	adds	r3, #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f867 	bl	8000de6 <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef>:
 */

#include "main.h"
#include <StripCurrent.h>

StripCurrent::StripCurrent(ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *timerHandle)
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDef+0x2c>)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	601a      	str	r2, [r3, #0]
{
	this->adc = adcHandle;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	605a      	str	r2, [r3, #4]
	this->timer = timerHandle;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
}
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	0800acdc 	.word	0x0800acdc

08000d50 <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <_ZN12StripCurrentD1Ev+0x2c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
{
	delete[] this->buffer;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <_ZN12StripCurrentD1Ev+0x20>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f009 fde2 	bl	800a934 <_ZdaPv>
}
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800acdc 	.word	0x0800acdc

08000d80 <_ZN12StripCurrentD0Ev>:
StripCurrent::~StripCurrent()
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
}
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ffe1 	bl	8000d50 <_ZN12StripCurrentD1Ev>
 8000d8e:	2114      	movs	r1, #20
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f009 fdcd 	bl	800a930 <_ZdlPvj>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_ZN12StripCurrent4InitEv>:

void StripCurrent::Init()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	this->buffer = new uint8_t[STRIP_CURR_BUFFER_LEN];
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f009 fdc4 	bl	800a938 <_Znaj>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	60da      	str	r2, [r3, #12]
	HAL_ADC_Start(this->adc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 f805 	bl	8002dcc <HAL_ADC_Start>
	HAL_ADC_Start_DMA(this->adc, (uint32_t *)this->buffer, STRIP_CURR_BUFFER_LEN);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6858      	ldr	r0, [r3, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f002 f9c4 	bl	800315c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(this->timer);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f007 fdcf 	bl	800897c <HAL_TIM_Base_Start>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	8899      	ldrh	r1, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	799b      	ldrb	r3, [r3, #6]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d106      	bne.n	8000e10 <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	e000      	b.n	8000e12 <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f004 fa32 	bl	800527c <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	8899      	ldrh	r1, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	799b      	ldrb	r3, [r3, #6]
 8000e34:	461a      	mov	r2, r3
 8000e36:	f004 fa21 	bl	800527c <HAL_GPIO_WritePin>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e52:	d020      	beq.n	8000e96 <HAL_GPIO_EXTI_Callback+0x54>
 8000e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e58:	dc31      	bgt.n	8000ebe <HAL_GPIO_EXTI_Callback+0x7c>
 8000e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e5e:	d01d      	beq.n	8000e9c <HAL_GPIO_EXTI_Callback+0x5a>
 8000e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e64:	dc2b      	bgt.n	8000ebe <HAL_GPIO_EXTI_Callback+0x7c>
 8000e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e6a:	d01a      	beq.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x60>
 8000e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e70:	dc25      	bgt.n	8000ebe <HAL_GPIO_EXTI_Callback+0x7c>
 8000e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e76:	d020      	beq.n	8000eba <HAL_GPIO_EXTI_Callback+0x78>
 8000e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e7c:	dc1f      	bgt.n	8000ebe <HAL_GPIO_EXTI_Callback+0x7c>
 8000e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x72>
 8000e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e88:	dc19      	bgt.n	8000ebe <HAL_GPIO_EXTI_Callback+0x7c>
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d00c      	beq.n	8000ea8 <HAL_GPIO_EXTI_Callback+0x66>
 8000e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e92:	d00c      	beq.n	8000eae <HAL_GPIO_EXTI_Callback+0x6c>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 8000e94:	e013      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x7c>
			Enc1TurnInterruptCallback();
 8000e96:	f7ff fd4f 	bl	8000938 <Enc1TurnInterruptCallback>
			break;
 8000e9a:	e011      	b.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x7e>
			Enc2TurnInterruptCallback();
 8000e9c:	f7ff fd53 	bl	8000946 <Enc2TurnInterruptCallback>
			break;
 8000ea0:	e00e      	b.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuUpInterruptCallback();
 8000ea2:	f7ff fcff 	bl	80008a4 <MenuUpInterruptCallback>
			break;
 8000ea6:	e00b      	b.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuDownInterruptCallback();
 8000ea8:	f7ff fd06 	bl	80008b8 <MenuDownInterruptCallback>
			break;
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuRightInterruptCallback();
 8000eae:	f7ff fd0d 	bl	80008cc <MenuRightInterruptCallback>
			break;
 8000eb2:	e005      	b.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
 8000eb4:	f7ff fd14 	bl	80008e0 <MenuActInterruptCallback>
			break;
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuBackInterruptCallback();
 8000eba:	f7ff fd1b 	bl	80008f4 <MenuBackInterruptCallback>
			break;
 8000ebe:	bf00      	nop
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 fe81 	bl	8002bd4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f86f 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fe1d 	bl	8001b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eda:	f000 fddd 	bl	8001a98 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ede:	f000 f8d5 	bl	800108c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ee2:	f000 fbc9 	bl	8001678 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ee6:	f000 f9dd 	bl	80012a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000eea:	f000 fc45 	bl	8001778 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000eee:	f000 fd55 	bl	800199c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ef2:	f000 fd7d 	bl	80019f0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000ef6:	f000 fcc1 	bl	800187c <MX_TIM6_Init>
  MX_RTC_Init();
 8000efa:	f000 fa2f 	bl	800135c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000efe:	f000 fabf 	bl	8001480 <MX_SDIO_SD_Init>
  MX_SPI4_Init();
 8000f02:	f000 fae3 	bl	80014cc <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8000f06:	f000 f991 	bl	800122c <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fd9b 	bl	8001a44 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f0e:	f000 fb13 	bl	8001538 <MX_TIM1_Init>
  MX_I2S3_Init();
 8000f12:	f000 f9f5 	bl	8001300 <MX_I2S3_Init>
  MX_TIM8_Init();
 8000f16:	f000 fcef 	bl	80018f8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, pData, Length);
  if (Init(
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <main+0xa8>)
 8000f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <main+0xac>)
 8000f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <main+0xb0>)
 8000f24:	930a      	str	r3, [sp, #40]	; 0x28
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <main+0xb4>)
 8000f28:	9309      	str	r3, [sp, #36]	; 0x24
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <main+0xb8>)
 8000f2c:	9308      	str	r3, [sp, #32]
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <main+0xbc>)
 8000f30:	9307      	str	r3, [sp, #28]
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <main+0xc0>)
 8000f34:	9306      	str	r3, [sp, #24]
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <main+0xc4>)
 8000f38:	9305      	str	r3, [sp, #20]
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <main+0xc8>)
 8000f3c:	9304      	str	r3, [sp, #16]
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <main+0xcc>)
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <main+0xd0>)
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <main+0xd4>)
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <main+0xd8>)
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <main+0xdc>)
 8000f50:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <main+0xe0>)
 8000f52:	4916      	ldr	r1, [pc, #88]	; (8000fac <main+0xe4>)
 8000f54:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <main+0xe8>)
 8000f56:	f7ff fba1 	bl	800069c <Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <main+0x9c>
		  &huart1,
		  &huart2,
		  &huart3
  ))
  {
	  Error_Handler();
 8000f60:	f000 ff08 	bl	8001d74 <Error_Handler>
  }

  // For Init tests
  InitTest();
 8000f64:	f7ff fc7a 	bl	800085c <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8000f68:	f7ff fc82 	bl	8000870 <Main>
 8000f6c:	e7fc      	b.n	8000f68 <main+0xa0>
 8000f6e:	bf00      	nop
 8000f70:	2000069c 	.word	0x2000069c
 8000f74:	20000658 	.word	0x20000658
 8000f78:	20000614 	.word	0x20000614
 8000f7c:	200005cc 	.word	0x200005cc
 8000f80:	2000053c 	.word	0x2000053c
 8000f84:	200004f4 	.word	0x200004f4
 8000f88:	200004ac 	.word	0x200004ac
 8000f8c:	20000454 	.word	0x20000454
 8000f90:	200003d0 	.word	0x200003d0
 8000f94:	200003b0 	.word	0x200003b0
 8000f98:	20000350 	.word	0x20000350
 8000f9c:	20000308 	.word	0x20000308
 8000fa0:	200002b4 	.word	0x200002b4
 8000fa4:	20000254 	.word	0x20000254
 8000fa8:	20000208 	.word	0x20000208
 8000fac:	200001a8 	.word	0x200001a8
 8000fb0:	20000144 	.word	0x20000144

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 fd18 	bl	800a9f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <SystemClock_Config+0xd0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <SystemClock_Config+0xd0>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <SystemClock_Config+0xd0>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <SystemClock_Config+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <SystemClock_Config+0xd4>)
 8000ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <SystemClock_Config+0xd4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001010:	2305      	movs	r3, #5
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800101a:	2301      	movs	r3, #1
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001028:	2308      	movs	r3, #8
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800102c:	2332      	movs	r3, #50	; 0x32
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fcbb 	bl	80069bc <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800104c:	f000 fe92 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f004 ff58 	bl	8005f20 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001076:	f000 fe7d 	bl	8001d74 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3750      	adds	r7, #80	; 0x50
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800109e:	4b61      	ldr	r3, [pc, #388]	; (8001224 <MX_ADC1_Init+0x198>)
 80010a0:	4a61      	ldr	r2, [pc, #388]	; (8001228 <MX_ADC1_Init+0x19c>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a4:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <MX_ADC1_Init+0x198>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80010aa:	4b5e      	ldr	r3, [pc, #376]	; (8001224 <MX_ADC1_Init+0x198>)
 80010ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <MX_ADC1_Init+0x198>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b8:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <MX_ADC1_Init+0x198>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <MX_ADC1_Init+0x198>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <MX_ADC1_Init+0x198>)
 80010c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <MX_ADC1_Init+0x198>)
 80010d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d6:	4b53      	ldr	r3, [pc, #332]	; (8001224 <MX_ADC1_Init+0x198>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80010dc:	4b51      	ldr	r3, [pc, #324]	; (8001224 <MX_ADC1_Init+0x198>)
 80010de:	220a      	movs	r2, #10
 80010e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e2:	4b50      	ldr	r3, [pc, #320]	; (8001224 <MX_ADC1_Init+0x198>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ea:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <MX_ADC1_Init+0x198>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f0:	484c      	ldr	r0, [pc, #304]	; (8001224 <MX_ADC1_Init+0x198>)
 80010f2:	f001 fe05 	bl	8002d00 <HAL_ADC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010fc:	f000 fe3a 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001100:	2304      	movs	r3, #4
 8001102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4844      	ldr	r0, [pc, #272]	; (8001224 <MX_ADC1_Init+0x198>)
 8001112:	f002 f93b 	bl	800338c <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800111c:	f000 fe2a 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001120:	2305      	movs	r3, #5
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	483d      	ldr	r0, [pc, #244]	; (8001224 <MX_ADC1_Init+0x198>)
 800112e:	f002 f92d 	bl	800338c <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001138:	f000 fe1c 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800113c:	2306      	movs	r3, #6
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001140:	2303      	movs	r3, #3
 8001142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4836      	ldr	r0, [pc, #216]	; (8001224 <MX_ADC1_Init+0x198>)
 800114a:	f002 f91f 	bl	800338c <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001154:	f000 fe0e 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001158:	2307      	movs	r3, #7
 800115a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	482f      	ldr	r0, [pc, #188]	; (8001224 <MX_ADC1_Init+0x198>)
 8001166:	f002 f911 	bl	800338c <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001170:	f000 fe00 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001174:	2308      	movs	r3, #8
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001178:	2305      	movs	r3, #5
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4828      	ldr	r0, [pc, #160]	; (8001224 <MX_ADC1_Init+0x198>)
 8001182:	f002 f903 	bl	800338c <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800118c:	f000 fdf2 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001190:	2309      	movs	r3, #9
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001194:	2306      	movs	r3, #6
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4821      	ldr	r0, [pc, #132]	; (8001224 <MX_ADC1_Init+0x198>)
 800119e:	f002 f8f5 	bl	800338c <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80011a8:	f000 fde4 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011ac:	230e      	movs	r3, #14
 80011ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <MX_ADC1_Init+0x198>)
 80011ba:	f002 f8e7 	bl	800338c <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80011c4:	f000 fdd6 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011c8:	230f      	movs	r3, #15
 80011ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80011cc:	2308      	movs	r3, #8
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <MX_ADC1_Init+0x198>)
 80011d6:	f002 f8d9 	bl	800338c <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80011e0:	f000 fdc8 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80011e4:	2311      	movs	r3, #17
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80011e8:	2309      	movs	r3, #9
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_ADC1_Init+0x198>)
 80011f2:	f002 f8cb 	bl	800338c <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 80011fc:	f000 fdba 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001200:	2310      	movs	r3, #16
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001204:	230a      	movs	r3, #10
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_ADC1_Init+0x198>)
 800120e:	f002 f8bd 	bl	800338c <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8001218:	f000 fdac 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000144 	.word	0x20000144
 8001228:	40012000 	.word	0x40012000

0800122c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001232:	4a1a      	ldr	r2, [pc, #104]	; (800129c <MX_FMPI2C1_Init+0x70>)
 8001234:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x0020081F;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001238:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <MX_FMPI2C1_Init+0x74>)
 800123a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001244:	2201      	movs	r2, #1
 8001246:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 8001268:	f002 fff0 	bl	800424c <HAL_FMPI2C_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 fd7f 	bl	8001d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_FMPI2C1_Init+0x6c>)
 800127a:	f003 fe0e 	bl	8004e9a <HAL_FMPI2CEx_ConfigAnalogFilter>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001284:	f000 fd76 	bl	8001d74 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 8001288:	2001      	movs	r0, #1
 800128a:	f003 fe51 	bl	8004f30 <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 800128e:	2002      	movs	r0, #2
 8001290:	f003 fe4e 	bl	8004f30 <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000208 	.word	0x20000208
 800129c:	40006000 	.word	0x40006000
 80012a0:	0020081f 	.word	0x0020081f

080012a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_I2C1_Init+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_I2C1_Init+0x58>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012e2:	f004 f817 	bl	8005314 <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 fd42 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002b4 	.word	0x200002b4
 80012f8:	40005400 	.word	0x40005400
 80012fc:	000186a0 	.word	0x000186a0

08001300 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_I2S3_Init+0x54>)
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <MX_I2S3_Init+0x58>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2S3_Init+0x54>)
 800130c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001310:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_I2S3_Init+0x54>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_I2S3_Init+0x54>)
 800131a:	2205      	movs	r2, #5
 800131c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_I2S3_Init+0x54>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_I2S3_Init+0x54>)
 8001326:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800132a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_I2S3_Init+0x54>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_I2S3_Init+0x54>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_I2S3_Init+0x54>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_I2S3_Init+0x54>)
 8001340:	f004 f92c 	bl	800559c <HAL_I2S_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800134a:	f000 fd13 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000308 	.word	0x20000308
 8001358:	40003c00 	.word	0x40003c00

0800135c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	; 0x40
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2228      	movs	r2, #40	; 0x28
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f009 fb3b 	bl	800a9f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <MX_RTC_Init+0x11c>)
 8001384:	4a3d      	ldr	r2, [pc, #244]	; (800147c <MX_RTC_Init+0x120>)
 8001386:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001388:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <MX_RTC_Init+0x11c>)
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <MX_RTC_Init+0x11c>)
 8001390:	227f      	movs	r2, #127	; 0x7f
 8001392:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_RTC_Init+0x11c>)
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <MX_RTC_Init+0x11c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_RTC_Init+0x11c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_RTC_Init+0x11c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ac:	4832      	ldr	r0, [pc, #200]	; (8001478 <MX_RTC_Init+0x11c>)
 80013ae:	f005 fd89 	bl	8006ec4 <HAL_RTC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80013b8:	f000 fcdc 	bl	8001d74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e0:	2201      	movs	r2, #1
 80013e2:	4619      	mov	r1, r3
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <MX_RTC_Init+0x11c>)
 80013e6:	f005 fde3 	bl	8006fb0 <HAL_RTC_SetTime>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80013f0:	f000 fcc0 	bl	8001d74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800140c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001410:	2201      	movs	r2, #1
 8001412:	4619      	mov	r1, r3
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_RTC_Init+0x11c>)
 8001416:	f005 fe65 	bl	80070e4 <HAL_RTC_SetDate>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001420:	f000 fca8 	bl	8001d74 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001424:	2301      	movs	r3, #1
 8001426:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001428:	2301      	movs	r3, #1
 800142a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800142c:	2300      	movs	r3, #0
 800142e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001434:	2300      	movs	r3, #0
 8001436:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800144c:	2301      	movs	r3, #1
 800144e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2201      	movs	r2, #1
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_RTC_Init+0x11c>)
 8001460:	f005 fec4 	bl	80071ec <HAL_RTC_SetAlarm_IT>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_RTC_Init+0x112>
  {
    Error_Handler();
 800146a:	f000 fc83 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200003b0 	.word	0x200003b0
 800147c:	40002800 	.word	0x40002800

08001480 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <MX_SDIO_SD_Init+0x48>)
 8001488:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 80014a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_SDIO_SD_Init+0x44>)
 80014b2:	f006 f8d8 	bl	8007666 <HAL_SD_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 80014bc:	f000 fc5a 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200003d0 	.word	0x200003d0
 80014c8:	40012c00 	.word	0x40012c00

080014cc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_SPI4_Init+0x64>)
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <MX_SPI4_Init+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI4_Init+0x64>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI4_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_SPI4_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI4_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI4_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI4_Init+0x64>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI4_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_SPI4_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI4_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_SPI4_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI4_Init+0x64>)
 8001518:	220a      	movs	r2, #10
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_SPI4_Init+0x64>)
 800151e:	f006 ff4d 	bl	80083bc <HAL_SPI_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001528:	f000 fc24 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000454 	.word	0x20000454
 8001534:	40013400 	.word	0x40013400

08001538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f009 fa41 	bl	800a9f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <MX_TIM1_Init+0x138>)
 8001578:	4a3e      	ldr	r2, [pc, #248]	; (8001674 <MX_TIM1_Init+0x13c>)
 800157a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <MX_TIM1_Init+0x138>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <MX_TIM1_Init+0x138>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <MX_TIM1_Init+0x138>)
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <MX_TIM1_Init+0x138>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <MX_TIM1_Init+0x138>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <MX_TIM1_Init+0x138>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a2:	4833      	ldr	r0, [pc, #204]	; (8001670 <MX_TIM1_Init+0x138>)
 80015a4:	f007 f99a 	bl	80088dc <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015ae:	f000 fbe1 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015bc:	4619      	mov	r1, r3
 80015be:	482c      	ldr	r0, [pc, #176]	; (8001670 <MX_TIM1_Init+0x138>)
 80015c0:	f007 fd8a 	bl	80090d8 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015ca:	f000 fbd3 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ce:	4828      	ldr	r0, [pc, #160]	; (8001670 <MX_TIM1_Init+0x138>)
 80015d0:	f007 fa3c 	bl	8008a4c <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015da:	f000 fbcb 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ea:	4619      	mov	r1, r3
 80015ec:	4820      	ldr	r0, [pc, #128]	; (8001670 <MX_TIM1_Init+0x138>)
 80015ee:	f008 f97d 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015f8:	f000 fbbc 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM1_Init+0x138>)
 8001622:	f007 fc97 	bl	8008f54 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800162c:	f000 fba2 	bl	8001d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001648:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM1_Init+0x138>)
 8001654:	f008 f9c6 	bl	80099e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800165e:	f000 fb89 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM1_Init+0x138>)
 8001664:	f001 f800 	bl	8002668 <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3758      	adds	r7, #88	; 0x58
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200004ac 	.word	0x200004ac
 8001674:	40010000 	.word	0x40010000

08001678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d0:	4828      	ldr	r0, [pc, #160]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016d2:	f007 f903 	bl	80088dc <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016dc:	f000 fb4a 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4821      	ldr	r0, [pc, #132]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016ee:	f007 fcf3 	bl	80090d8 <HAL_TIM_ConfigClockSource>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016f8:	f000 fb3c 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016fc:	481d      	ldr	r0, [pc, #116]	; (8001774 <MX_TIM2_Init+0xfc>)
 80016fe:	f007 f9a5 	bl	8008a4c <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001708:	f000 fb34 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	4619      	mov	r1, r3
 800171a:	4816      	ldr	r0, [pc, #88]	; (8001774 <MX_TIM2_Init+0xfc>)
 800171c:	f008 f8e6 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001726:	f000 fb25 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172a:	2360      	movs	r3, #96	; 0x60
 800172c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM2_Init+0xfc>)
 8001742:	f007 fc07 	bl	8008f54 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800174c:	f000 fb12 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2204      	movs	r2, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_TIM2_Init+0xfc>)
 8001758:	f007 fbfc 	bl	8008f54 <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001762:	f000 fb07 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM2_Init+0xfc>)
 8001768:	f000 ff7e 	bl	8002668 <HAL_TIM_MspPostInit>

}
 800176c:	bf00      	nop
 800176e:	3738      	adds	r7, #56	; 0x38
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200004f4 	.word	0x200004f4

08001778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	f107 0320 	add.w	r3, r7, #32
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017aa:	4a33      	ldr	r2, [pc, #204]	; (8001878 <MX_TIM3_Init+0x100>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ce:	4829      	ldr	r0, [pc, #164]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017d0:	f007 f884 	bl	80088dc <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017da:	f000 facb 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4822      	ldr	r0, [pc, #136]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017ec:	f007 fc74 	bl	80090d8 <HAL_TIM_ConfigClockSource>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017f6:	f000 fabd 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017fa:	481e      	ldr	r0, [pc, #120]	; (8001874 <MX_TIM3_Init+0xfc>)
 80017fc:	f007 f926 	bl	8008a4c <HAL_TIM_PWM_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001806:	f000 fab5 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	4619      	mov	r1, r3
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <MX_TIM3_Init+0xfc>)
 800181a:	f008 f867 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001824:	f000 faa6 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001828:	2360      	movs	r3, #96	; 0x60
 800182a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <MX_TIM3_Init+0xfc>)
 8001840:	f007 fb88 	bl	8008f54 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800184a:	f000 fa93 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	220c      	movs	r2, #12
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM3_Init+0xfc>)
 8001856:	f007 fb7d 	bl	8008f54 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001860:	f000 fa88 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM3_Init+0xfc>)
 8001866:	f000 feff 	bl	8002668 <HAL_TIM_MspPostInit>

}
 800186a:	bf00      	nop
 800186c:	3738      	adds	r7, #56	; 0x38
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000053c 	.word	0x2000053c
 8001878:	40000400 	.word	0x40000400

0800187c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM6_Init+0x74>)
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <MX_TIM6_Init+0x78>)
 800188e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_TIM6_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM6_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_TIM6_Init+0x74>)
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_TIM6_Init+0x74>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <MX_TIM6_Init+0x74>)
 80018aa:	f007 f817 	bl	80088dc <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80018b4:	f000 fa5e 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80018b8:	2108      	movs	r1, #8
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_TIM6_Init+0x74>)
 80018bc:	f007 f9e8 	bl	8008c90 <HAL_TIM_OnePulse_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 80018c6:	f000 fa55 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ca:	2320      	movs	r3, #32
 80018cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM6_Init+0x74>)
 80018d8:	f008 f808 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 80018e2:	f000 fa47 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000584 	.word	0x20000584
 80018f4:	40001000 	.word	0x40001000

080018f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_TIM8_Init+0x9c>)
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <MX_TIM8_Init+0xa0>)
 8001918:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 11999;
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_TIM8_Init+0x9c>)
 800191c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001920:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_TIM8_Init+0x9c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_TIM8_Init+0x9c>)
 800192a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_TIM8_Init+0x9c>)
 8001932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001936:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_TIM8_Init+0x9c>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM8_Init+0x9c>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_TIM8_Init+0x9c>)
 8001946:	f006 ffc9 	bl	80088dc <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001950:	f000 fa10 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM8_Init+0x9c>)
 8001962:	f007 fbb9 	bl	80090d8 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800196c:	f000 fa02 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001970:	2320      	movs	r3, #32
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM8_Init+0x9c>)
 800197e:	f007 ffb5 	bl	80098ec <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001988:	f000 f9f4 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200005cc 	.word	0x200005cc
 8001998:	40010400 	.word	0x40010400

0800199c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_USART1_UART_Init+0x50>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019d4:	f008 f86c 	bl	8009ab0 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 f9c9 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000614 	.word	0x20000614
 80019ec:	40011000 	.word	0x40011000

080019f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_USART2_UART_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a28:	f008 f842 	bl	8009ab0 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f99f 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000658 	.word	0x20000658
 8001a40:	40004400 	.word	0x40004400

08001a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_USART3_UART_Init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	f008 f818 	bl	8009ab0 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a86:	f000 f975 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000069c 	.word	0x2000069c
 8001a94:	40004800 	.word	0x40004800

08001a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_DMA_Init+0x78>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <MX_DMA_Init+0x78>)
 8001aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_DMA_Init+0x78>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_DMA_Init+0x78>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <MX_DMA_Init+0x78>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_DMA_Init+0x78>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200b      	movs	r0, #11
 8001adc:	f001 ffdf 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ae0:	200b      	movs	r0, #11
 8001ae2:	f001 fff8 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	200c      	movs	r0, #12
 8001aec:	f001 ffd7 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001af0:	200c      	movs	r0, #12
 8001af2:	f001 fff0 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2038      	movs	r0, #56	; 0x38
 8001afc:	f001 ffcf 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b00:	2038      	movs	r0, #56	; 0x38
 8001b02:	f001 ffe8 	bl	8003ad6 <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a8b      	ldr	r2, [pc, #556]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a84      	ldr	r2, [pc, #528]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b7e      	ldr	r3, [pc, #504]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a7d      	ldr	r2, [pc, #500]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b77      	ldr	r3, [pc, #476]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a76      	ldr	r2, [pc, #472]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b74      	ldr	r3, [pc, #464]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a6f      	ldr	r2, [pc, #444]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <MX_GPIO_Init+0x24c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4863      	ldr	r0, [pc, #396]	; (8001d64 <MX_GPIO_Init+0x250>)
 8001bd8:	f003 fb50 	bl	800527c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f24e 0101 	movw	r1, #57345	; 0xe001
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <MX_GPIO_Init+0x254>)
 8001be4:	f003 fb4a 	bl	800527c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	485d      	ldr	r0, [pc, #372]	; (8001d64 <MX_GPIO_Init+0x250>)
 8001bf0:	f003 fb44 	bl	800527c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_EN_GPIO_Port, DMX_EN_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	485c      	ldr	r0, [pc, #368]	; (8001d6c <MX_GPIO_Init+0x258>)
 8001bfc:	f003 fb3e 	bl	800527c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin;
 8001c00:	f240 1301 	movw	r3, #257	; 0x101
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4852      	ldr	r0, [pc, #328]	; (8001d64 <MX_GPIO_Init+0x250>)
 8001c1a:	f003 f9ab 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VDDA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VDDA_PG_Pin|STRIP_PG_Pin;
 8001c1e:	230e      	movs	r3, #14
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	484c      	ldr	r0, [pc, #304]	; (8001d64 <MX_GPIO_Init+0x250>)
 8001c32:	f003 f99f 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 8001c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4848      	ldr	r0, [pc, #288]	; (8001d70 <MX_GPIO_Init+0x25c>)
 8001c4e:	f003 f991 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8001c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	4841      	ldr	r0, [pc, #260]	; (8001d6c <MX_GPIO_Init+0x258>)
 8001c68:	f003 f984 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8001c6c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	483a      	ldr	r0, [pc, #232]	; (8001d6c <MX_GPIO_Init+0x258>)
 8001c84:	f003 f976 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 8001c88:	f641 7328 	movw	r3, #7976	; 0x1f28
 8001c8c:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4832      	ldr	r0, [pc, #200]	; (8001d68 <MX_GPIO_Init+0x254>)
 8001ca0:	f003 f968 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 8001ca4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	482a      	ldr	r0, [pc, #168]	; (8001d68 <MX_GPIO_Init+0x254>)
 8001cbe:	f003 f959 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 8001cc2:	f244 0301 	movw	r3, #16385	; 0x4001
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4823      	ldr	r0, [pc, #140]	; (8001d68 <MX_GPIO_Init+0x254>)
 8001cdc:	f003 f94a 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ce4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <MX_GPIO_Init+0x254>)
 8001cf6:	f003 f93d 	bl	8004f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DMX_EN_Pin */
  GPIO_InitStruct.Pin = DMX_EN_Pin;
 8001cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DMX_EN_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4816      	ldr	r0, [pc, #88]	; (8001d6c <MX_GPIO_Init+0x258>)
 8001d14:	f003 f92e 	bl	8004f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2007      	movs	r0, #7
 8001d1e:	f001 febe 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d22:	2007      	movs	r0, #7
 8001d24:	f001 fed7 	bl	8003ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2009      	movs	r0, #9
 8001d2e:	f001 feb6 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d32:	2009      	movs	r0, #9
 8001d34:	f001 fecf 	bl	8003ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2017      	movs	r0, #23
 8001d3e:	f001 feae 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d42:	2017      	movs	r0, #23
 8001d44:	f001 fec7 	bl	8003ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2028      	movs	r0, #40	; 0x28
 8001d4e:	f001 fea6 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d52:	2028      	movs	r0, #40	; 0x28
 8001d54:	f001 febf 	bl	8003ad6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d58:	bf00      	nop
 8001d5a:	3730      	adds	r7, #48	; 0x30
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40021000 	.word	0x40021000

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 8001d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <Error_Handler+0x1c>)
 8001d82:	f003 fa94 	bl	80052ae <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001d86:	20c8      	movs	r0, #200	; 0xc8
 8001d88:	f000 ff96 	bl	8002cb8 <HAL_Delay>
	  HAL_GPIO_TogglePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin);
 8001d8c:	e7f6      	b.n	8001d7c <Error_Handler+0x8>
 8001d8e:	bf00      	nop
 8001d90:	40020800 	.word	0x40020800

08001d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_MspInit+0x58>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_MspInit+0x58>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_MspInit+0x58>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_MspInit+0x58>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_MspInit+0x58>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_MspInit+0x58>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2005      	movs	r0, #5
 8001dd8:	f001 fe61 	bl	8003a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ddc:	2005      	movs	r0, #5
 8001dde:	f001 fe7a 	bl	8003ad6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_ADC_MspInit+0x150>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	f040 8092 	bne.w	8001f38 <HAL_ADC_MspInit+0x148>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6453      	str	r3, [r2, #68]	; 0x44
 8001e24:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a3b      	ldr	r2, [pc, #236]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_ADC_MspInit+0x154>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STRIP1_MON_Pin|STRIP5_MON_Pin|STRIP2_MON_Pin|STRIP6_MON_Pin;
 8001e84:	23f0      	movs	r3, #240	; 0xf0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	482c      	ldr	r0, [pc, #176]	; (8001f48 <HAL_ADC_MspInit+0x158>)
 8001e98:	f003 f86c 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP7_MON_Pin|STRIP3_MON_Pin;
 8001e9c:	2330      	movs	r3, #48	; 0x30
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	4827      	ldr	r0, [pc, #156]	; (8001f4c <HAL_ADC_MspInit+0x15c>)
 8001eb0:	f003 f860 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP4_MON_Pin|STRIP8_MON_Pin;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4822      	ldr	r0, [pc, #136]	; (8001f50 <HAL_ADC_MspInit+0x160>)
 8001ec8:	f003 f854 	bl	8004f74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001ece:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_ADC_MspInit+0x168>)
 8001ed0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f0c:	4811      	ldr	r0, [pc, #68]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001f0e:	f001 fdfd 	bl	8003b0c <HAL_DMA_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8001f18:	f7ff ff2c 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
 8001f22:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <HAL_ADC_MspInit+0x164>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2012      	movs	r0, #18
 8001f2e:	f001 fdb6 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f32:	2012      	movs	r0, #18
 8001f34:	f001 fdcf 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40012000 	.word	0x40012000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	40020400 	.word	0x40020400
 8001f54:	200001a8 	.word	0x200001a8
 8001f58:	40026410 	.word	0x40026410

08001f5c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b09a      	sub	sp, #104	; 0x68
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0318 	add.w	r3, r7, #24
 8001f78:	223c      	movs	r2, #60	; 0x3c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f008 fd3b 	bl	800a9f8 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a4f      	ldr	r2, [pc, #316]	; (80020c4 <HAL_FMPI2C_MspInit+0x168>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	f040 8097 	bne.w	80020bc <HAL_FMPI2C_MspInit+0x160>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8001f8e:	2310      	movs	r3, #16
 8001f90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001f92:	2300      	movs	r3, #0
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f9de 	bl	800635c <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fa6:	f7ff fee5 	bl	8001d74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a45      	ldr	r2, [pc, #276]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a3e      	ldr	r2, [pc, #248]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4833      	ldr	r0, [pc, #204]	; (80020cc <HAL_FMPI2C_MspInit+0x170>)
 8002000:	f002 ffb8 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002008:	2312      	movs	r3, #18
 800200a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200c:	2301      	movs	r3, #1
 800200e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002014:	2304      	movs	r3, #4
 8002016:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002018:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800201c:	4619      	mov	r1, r3
 800201e:	482c      	ldr	r0, [pc, #176]	; (80020d0 <HAL_FMPI2C_MspInit+0x174>)
 8002020:	f002 ffa8 	bl	8004f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_FMPI2C_MspInit+0x16c>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_FMPI2C_MspInit+0x17c>)
 8002044:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002048:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204c:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 800205c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002060:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002070:	2200      	movs	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002076:	2200      	movs	r2, #0
 8002078:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 8002080:	4814      	ldr	r0, [pc, #80]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002082:	f001 fd43 	bl	8003b0c <HAL_DMA_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_FMPI2C_MspInit+0x134>
    {
      Error_Handler();
 800208c:	f7ff fe72 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_FMPI2C_MspInit+0x178>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6393      	str	r3, [r2, #56]	; 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	205f      	movs	r0, #95	; 0x5f
 80020a2:	f001 fcfc 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 80020a6:	205f      	movs	r0, #95	; 0x5f
 80020a8:	f001 fd15 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2060      	movs	r0, #96	; 0x60
 80020b2:	f001 fcf4 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 80020b6:	2060      	movs	r0, #96	; 0x60
 80020b8:	f001 fd0d 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3768      	adds	r7, #104	; 0x68
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40006000 	.word	0x40006000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40020800 	.word	0x40020800
 80020d4:	20000254 	.word	0x20000254
 80020d8:	40026028 	.word	0x40026028

080020dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_I2C_MspInit+0x84>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12b      	bne.n	8002156 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_I2C_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_I2C_MspInit+0x88>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_I2C_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211e:	2312      	movs	r3, #18
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212a:	2304      	movs	r3, #4
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <HAL_I2C_MspInit+0x8c>)
 8002136:	f002 ff1d 	bl	8004f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_I2C_MspInit+0x88>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_I2C_MspInit+0x88>)
 8002144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_I2C_MspInit+0x88>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40005400 	.word	0x40005400
 8002164:	40023800 	.word	0x40023800
 8002168:	40020400 	.word	0x40020400

0800216c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b09a      	sub	sp, #104	; 0x68
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	223c      	movs	r2, #60	; 0x3c
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f008 fc33 	bl	800a9f8 <memset>
  if(hi2s->Instance==SPI3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5d      	ldr	r2, [pc, #372]	; (800230c <HAL_I2S_MspInit+0x1a0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 80b2 	bne.w	8002302 <HAL_I2S_MspInit+0x196>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 800219e:	2381      	movs	r3, #129	; 0x81
 80021a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80021a2:	2332      	movs	r3, #50	; 0x32
 80021a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80021a6:	2308      	movs	r3, #8
 80021a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80021aa:	2302      	movs	r3, #2
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80021ae:	2302      	movs	r3, #2
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f8cc 	bl	800635c <HAL_RCCEx_PeriphCLKConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 80021ca:	f7ff fdd3 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 80021d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a40      	ldr	r2, [pc, #256]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a39      	ldr	r2, [pc, #228]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_I2S_MspInit+0x1a4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PD6     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800223e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002250:	2306      	movs	r3, #6
 8002252:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002258:	4619      	mov	r1, r3
 800225a:	482e      	ldr	r0, [pc, #184]	; (8002314 <HAL_I2S_MspInit+0x1a8>)
 800225c:	f002 fe8a 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002264:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002272:	2306      	movs	r3, #6
 8002274:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002276:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800227a:	4619      	mov	r1, r3
 800227c:	4826      	ldr	r0, [pc, #152]	; (8002318 <HAL_I2S_MspInit+0x1ac>)
 800227e:	f002 fe79 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002292:	2305      	movs	r3, #5
 8002294:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800229a:	4619      	mov	r1, r3
 800229c:	481f      	ldr	r0, [pc, #124]	; (800231c <HAL_I2S_MspInit+0x1b0>)
 800229e:	f002 fe69 	bl	8004f74 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_I2S_MspInit+0x1b8>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022e8:	f001 fc10 	bl	8003b0c <HAL_DMA_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2S_MspInit+0x18a>
    {
      Error_Handler();
 80022f2:	f7ff fd3f 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80022fc:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_I2S_MspInit+0x1b4>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002302:	bf00      	nop
 8002304:	3768      	adds	r7, #104	; 0x68
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40003c00 	.word	0x40003c00
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	20000350 	.word	0x20000350
 8002324:	40026010 	.word	0x40026010

08002328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b092      	sub	sp, #72	; 0x48
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	223c      	movs	r2, #60	; 0x3c
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f008 fb5d 	bl	800a9f8 <memset>
  if(hrtc->Instance==RTC)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_RTC_MspInit+0x5c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d119      	bne.n	800237c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002348:	2308      	movs	r3, #8
 800234a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800234c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4618      	mov	r0, r3
 8002358:	f004 f800 	bl	800635c <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002362:	f7ff fd07 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_RTC_MspInit+0x60>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2029      	movs	r0, #41	; 0x29
 8002372:	f001 fb94 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002376:	2029      	movs	r0, #41	; 0x29
 8002378:	f001 fbad 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3748      	adds	r7, #72	; 0x48
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40002800 	.word	0x40002800
 8002388:	42470e3c 	.word	0x42470e3c

0800238c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b09a      	sub	sp, #104	; 0x68
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a4:	f107 0318 	add.w	r3, r7, #24
 80023a8:	223c      	movs	r2, #60	; 0x3c
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f008 fb23 	bl	800a9f8 <memset>
  if(hsd->Instance==SDIO)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <HAL_SD_MspInit+0x13c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	f040 8081 	bne.w	80024c0 <HAL_SD_MspInit+0x134>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80023be:	2360      	movs	r3, #96	; 0x60
 80023c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80023c2:	2300      	movs	r3, #0
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 ffc4 	bl	800635c <HAL_RCCEx_PeriphCLKConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80023da:	f7ff fccb 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_SD_MspInit+0x140>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a39      	ldr	r2, [pc, #228]	; (80024cc <HAL_SD_MspInit+0x140>)
 80023e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_SD_MspInit+0x140>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b33      	ldr	r3, [pc, #204]	; (80024cc <HAL_SD_MspInit+0x140>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a32      	ldr	r2, [pc, #200]	; (80024cc <HAL_SD_MspInit+0x140>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_SD_MspInit+0x140>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_SD_MspInit+0x140>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_SD_MspInit+0x140>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_SD_MspInit+0x140>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <HAL_SD_MspInit+0x140>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_SD_MspInit+0x140>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_SD_MspInit+0x140>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800244e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002452:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002460:	230c      	movs	r3, #12
 8002462:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002468:	4619      	mov	r1, r3
 800246a:	4819      	ldr	r0, [pc, #100]	; (80024d0 <HAL_SD_MspInit+0x144>)
 800246c:	f002 fd82 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002470:	2304      	movs	r3, #4
 8002472:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002480:	230c      	movs	r3, #12
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002488:	4619      	mov	r1, r3
 800248a:	4812      	ldr	r0, [pc, #72]	; (80024d4 <HAL_SD_MspInit+0x148>)
 800248c:	f002 fd72 	bl	8004f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002490:	2310      	movs	r3, #16
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024a0:	230c      	movs	r3, #12
 80024a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024a8:	4619      	mov	r1, r3
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <HAL_SD_MspInit+0x14c>)
 80024ac:	f002 fd62 	bl	8004f74 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2031      	movs	r0, #49	; 0x31
 80024b6:	f001 faf2 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80024ba:	2031      	movs	r0, #49	; 0x31
 80024bc:	f001 fb0b 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80024c0:	bf00      	nop
 80024c2:	3768      	adds	r7, #104	; 0x68
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40020400 	.word	0x40020400

080024dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <HAL_SPI_MspInit+0x84>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12c      	bne.n	8002558 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_SPI_MspInit+0x88>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HAL_SPI_MspInit+0x88>)
 8002508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_SPI_MspInit+0x88>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_SPI_MspInit+0x88>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_SPI_MspInit+0x88>)
 8002524:	f043 0310 	orr.w	r3, r3, #16
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_SPI_MspInit+0x88>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GRAPH_SDI_Pin|GRAPH_CLK_Pin;
 8002536:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002548:	2305      	movs	r3, #5
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_SPI_MspInit+0x8c>)
 8002554:	f002 fd0e 	bl	8004f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40013400 	.word	0x40013400
 8002564:	40023800 	.word	0x40023800
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a36      	ldr	r2, [pc, #216]	; (8002654 <HAL_TIM_Base_MspInit+0xe8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10e      	bne.n	800259c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b32      	ldr	r3, [pc, #200]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800259a:	e056      	b.n	800264a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
}
 80025c2:	e042      	b.n	800264a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a24      	ldr	r2, [pc, #144]	; (800265c <HAL_TIM_Base_MspInit+0xf0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
}
 80025ea:	e02e      	b.n	800264a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <HAL_TIM_Base_MspInit+0xf4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d116      	bne.n	8002624 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a16      	ldr	r2, [pc, #88]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002600:	f043 0310 	orr.w	r3, r3, #16
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2036      	movs	r0, #54	; 0x36
 8002618:	f001 fa41 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800261c:	2036      	movs	r0, #54	; 0x36
 800261e:	f001 fa5a 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 8002622:	e012      	b.n	800264a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_TIM_Base_MspInit+0xf8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10d      	bne.n	800264a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_TIM_Base_MspInit+0xec>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
}
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	40023800 	.word	0x40023800
 800265c:	40000400 	.word	0x40000400
 8002660:	40001000 	.word	0x40001000
 8002664:	40010400 	.word	0x40010400

08002668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a37      	ldr	r2, [pc, #220]	; (8002764 <HAL_TIM_MspPostInit+0xfc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d11f      	bne.n	80026ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a35      	ldr	r2, [pc, #212]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = AUDIO_SRC_IND_Pin;
 80026a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_SRC_IND_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	482a      	ldr	r0, [pc, #168]	; (800276c <HAL_TIM_MspPostInit+0x104>)
 80026c4:	f002 fc56 	bl	8004f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026c8:	e047      	b.n	800275a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d11e      	bne.n	8002712 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a22      	ldr	r2, [pc, #136]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6313      	str	r3, [r2, #48]	; 0x30
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HP_SEL_IND_Pin|XLR_SEL_IND_Pin;
 80026f0:	2303      	movs	r3, #3
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002700:	2301      	movs	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4818      	ldr	r0, [pc, #96]	; (800276c <HAL_TIM_MspPostInit+0x104>)
 800270c:	f002 fc32 	bl	8004f74 <HAL_GPIO_Init>
}
 8002710:	e023      	b.n	800275a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_TIM_MspPostInit+0x108>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d11e      	bne.n	800275a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_TIM_MspPostInit+0x100>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 8002738:	f44f 7310 	mov.w	r3, #576	; 0x240
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800274a:	2302      	movs	r3, #2
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <HAL_TIM_MspPostInit+0x10c>)
 8002756:	f002 fc0d 	bl	8004f74 <HAL_GPIO_Init>
}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40010000 	.word	0x40010000
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	40000400 	.word	0x40000400
 8002774:	40020800 	.word	0x40020800

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08e      	sub	sp, #56	; 0x38
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_UART_MspInit+0x18c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12d      	bne.n	80027f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_UART_MspInit+0x190>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a59      	ldr	r2, [pc, #356]	; (8002908 <HAL_UART_MspInit+0x190>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b57      	ldr	r3, [pc, #348]	; (8002908 <HAL_UART_MspInit+0x190>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_UART_MspInit+0x190>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_UART_MspInit+0x190>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_UART_MspInit+0x190>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 80027d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e4:	2307      	movs	r3, #7
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	4847      	ldr	r0, [pc, #284]	; (800290c <HAL_UART_MspInit+0x194>)
 80027f0:	f002 fbc0 	bl	8004f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f4:	e082      	b.n	80028fc <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a45      	ldr	r2, [pc, #276]	; (8002910 <HAL_UART_MspInit+0x198>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d12c      	bne.n	800285a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	4b40      	ldr	r3, [pc, #256]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a3f      	ldr	r2, [pc, #252]	; (8002908 <HAL_UART_MspInit+0x190>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
 8002810:	4b3d      	ldr	r3, [pc, #244]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4a38      	ldr	r2, [pc, #224]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6313      	str	r3, [r2, #48]	; 0x30
 800282c:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_UART_MspInit+0x190>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 8002838:	230c      	movs	r3, #12
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002848:	2307      	movs	r3, #7
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	482e      	ldr	r0, [pc, #184]	; (800290c <HAL_UART_MspInit+0x194>)
 8002854:	f002 fb8e 	bl	8004f74 <HAL_GPIO_Init>
}
 8002858:	e050      	b.n	80028fc <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <HAL_UART_MspInit+0x19c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d14b      	bne.n	80028fc <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_UART_MspInit+0x190>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <HAL_UART_MspInit+0x190>)
 800286e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002872:	6413      	str	r3, [r2, #64]	; 0x40
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_UART_MspInit+0x190>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	6313      	str	r3, [r2, #48]	; 0x30
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_UART_MspInit+0x190>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_UART_MspInit+0x190>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_UART_MspInit+0x190>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_UART_MspInit+0x190>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 80028b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028ca:	2307      	movs	r3, #7
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	4619      	mov	r1, r3
 80028d4:	4810      	ldr	r0, [pc, #64]	; (8002918 <HAL_UART_MspInit+0x1a0>)
 80028d6:	f002 fb4d 	bl	8004f74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 80028da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028ec:	2307      	movs	r3, #7
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f4:	4619      	mov	r1, r3
 80028f6:	4809      	ldr	r0, [pc, #36]	; (800291c <HAL_UART_MspInit+0x1a4>)
 80028f8:	f002 fb3c 	bl	8004f74 <HAL_GPIO_Init>
}
 80028fc:	bf00      	nop
 80028fe:	3738      	adds	r7, #56	; 0x38
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40011000 	.word	0x40011000
 8002908:	40023800 	.word	0x40023800
 800290c:	40020000 	.word	0x40020000
 8002910:	40004400 	.word	0x40004400
 8002914:	40004800 	.word	0x40004800
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800

08002920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <NMI_Handler+0x4>

08002926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800292a:	e7fe      	b.n	800292a <HardFault_Handler+0x4>

0800292c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <MemManage_Handler+0x4>

08002932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <BusFault_Handler+0x4>

08002938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <UsageFault_Handler+0x4>

0800293e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296c:	f000 f984 	bl	8002c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDIO_CD_Pin);
 8002986:	2002      	movs	r0, #2
 8002988:	f002 fcac 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 8002994:	2008      	movs	r0, #8
 8002996:	f002 fca5 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA1_Stream0_IRQHandler+0x10>)
 80029a6:	f001 f9d9 	bl	8003d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000350 	.word	0x20000350

080029b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA1_Stream1_IRQHandler+0x10>)
 80029ba:	f001 f9cf 	bl	8003d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000254 	.word	0x20000254

080029c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <ADC_IRQHandler+0x10>)
 80029ce:	f000 fab1 	bl	8002f34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000144 	.word	0x20000144

080029dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 80029e0:	2020      	movs	r0, #32
 80029e2:	f002 fc7f 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 80029e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029ea:	f002 fc7b 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 80029ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029f2:	f002 fc77 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}

080029fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 80029fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a02:	f002 fc6f 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 8002a06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a0a:	f002 fc6b 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 8002a0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a12:	f002 fc67 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8002a16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a1a:	f002 fc63 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8002a1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a22:	f002 fc5f 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 8002a26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a2a:	f002 fc5b 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <RTC_Alarm_IRQHandler+0x10>)
 8002a3a:	f004 fd19 	bl	8007470 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200003b0 	.word	0x200003b0

08002a48 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <SDIO_IRQHandler+0x10>)
 8002a4e:	f004 febb 	bl	80077c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200003d0 	.word	0x200003d0

08002a5c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM6_IRQHandler+0x10>)
 8002a62:	f006 f96f 	bl	8008d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000584 	.word	0x20000584

08002a70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <DMA2_Stream0_IRQHandler+0x10>)
 8002a76:	f001 f971 	bl	8003d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200001a8 	.word	0x200001a8

08002a84 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <FMPI2C1_EV_IRQHandler+0x10>)
 8002a8a:	f001 fc6e 	bl	800436a <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000208 	.word	0x20000208

08002a98 <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <FMPI2C1_ER_IRQHandler+0x10>)
 8002a9e:	f001 fc7e 	bl	800439e <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000208 	.word	0x20000208

08002aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return 1;
 8002ab0:	2301      	movs	r3, #1
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_kill>:

int _kill(int pid, int sig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac6:	f007 ff5d 	bl	800a984 <__errno>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2216      	movs	r2, #22
 8002ace:	601a      	str	r2, [r3, #0]
  return -1;
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_exit>:

void _exit (int status)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ffe7 	bl	8002abc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aee:	e7fe      	b.n	8002aee <_exit+0x12>

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f007 ff30 	bl	800a984 <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20040000 	.word	0x20040000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	200006e0 	.word	0x200006e0
 8002b58:	20000700 	.word	0x20000700

08002b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <SystemInit+0x20>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <SystemInit+0x20>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b86:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b9c:	4c0b      	ldr	r4, [pc, #44]	; (8002bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002baa:	f7ff ffd7 	bl	8002b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f007 feef 	bl	800a990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7fe f989 	bl	8000ec8 <main>
  bx  lr    
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bb8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002bc4:	0800ad1c 	.word	0x0800ad1c
  ldr r2, =_sbss
 8002bc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002bcc:	200006fc 	.word	0x200006fc

08002bd0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <CAN1_RX0_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_Init+0x40>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_Init+0x40>)
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_Init+0x40>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	f000 ff43 	bl	8003a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c02:	200f      	movs	r0, #15
 8002c04:	f000 f808 	bl	8002c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c08:	f7ff f8c4 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00

08002c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_InitTick+0x54>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_InitTick+0x58>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 ff5b 	bl	8003af2 <HAL_SYSTICK_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00e      	b.n	8002c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d80a      	bhi.n	8002c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f000 ff23 	bl	8003a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c58:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <HAL_InitTick+0x5c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000008 	.word	0x20000008
 8002c74:	20000004 	.word	0x20000004

08002c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_IncTick+0x20>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_IncTick+0x24>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_IncTick+0x24>)
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	200006e4 	.word	0x200006e4

08002ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_GetTick+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	200006e4 	.word	0x200006e4

08002cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff ffee 	bl	8002ca0 <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d005      	beq.n	8002cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_Delay+0x44>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cde:	bf00      	nop
 8002ce0:	f7ff ffde 	bl	8002ca0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d8f7      	bhi.n	8002ce0 <HAL_Delay+0x28>
  {
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000008 	.word	0x20000008

08002d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e04a      	b.n	8002dac <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d120      	bne.n	8002d60 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_ADC_Init+0xb4>)
 8002d22:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a24      	ldr	r2, [pc, #144]	; (8002db8 <HAL_ADC_Init+0xb8>)
 8002d28:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <HAL_ADC_Init+0xbc>)
 8002d2e:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_ADC_Init+0xc0>)
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_ADC_Init+0xc4>)
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <HAL_ADC_Init+0xc8>)
 8002d48:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d118      	bne.n	8002d9e <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d74:	f023 0302 	bic.w	r3, r3, #2
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fc25 	bl	80035d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f023 0303 	bic.w	r3, r3, #3
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d9c:	e001      	b.n	8002da2 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0800333d 	.word	0x0800333d
 8002db8:	08003351 	.word	0x08003351
 8002dbc:	08003365 	.word	0x08003365
 8002dc0:	08003379 	.word	0x08003379
 8002dc4:	080038d5 	.word	0x080038d5
 8002dc8:	08001df1 	.word	0x08001df1

08002dcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Start+0x1a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e097      	b.n	8002f16 <HAL_ADC_Start+0x14a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d018      	beq.n	8002e2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_ADC_Start+0x158>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a45      	ldr	r2, [pc, #276]	; (8002f28 <HAL_ADC_Start+0x15c>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9a      	lsrs	r2, r3, #18
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f9      	bne.n	8002e22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d15f      	bne.n	8002efc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f023 0206 	bic.w	r2, r3, #6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
 8002e88:	e002      	b.n	8002e90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_ADC_Start+0x160>)
 8002e9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d129      	bne.n	8002f14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e020      	b.n	8002f14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_ADC_Start+0x164>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d11b      	bne.n	8002f14 <HAL_ADC_Start+0x148>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d114      	bne.n	8002f14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	e00b      	b.n	8002f14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0210 	orr.w	r2, r3, #16
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	40012300 	.word	0x40012300
 8002f30:	40012000 	.word	0x40012000

08002f34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d04a      	beq.n	8003000 <HAL_ADC_IRQHandler+0xcc>
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d047      	beq.n	8003000 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d12b      	bne.n	8002fee <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d127      	bne.n	8002fee <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0220 	bic.w	r2, r2, #32
 8002fc8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0212 	mvn.w	r2, #18
 8002ffe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d058      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x194>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d055      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d139      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d12b      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d124      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11d      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d119      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003090:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 020c 	mvn.w	r2, #12
 80030c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d018      	beq.n	8003110 <HAL_ADC_IRQHandler+0x1dc>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10e      	bne.n	8003110 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0201 	mvn.w	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800311e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_ADC_IRQHandler+0x220>
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f043 0202 	orr.w	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0220 	mvn.w	r2, #32
 8003140:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0220 	mvn.w	r2, #32
 8003152:	601a      	str	r2, [r3, #0]
  }
}
 8003154:	bf00      	nop
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_ADC_Start_DMA+0x1e>
 8003176:	2302      	movs	r3, #2
 8003178:	e0ce      	b.n	8003318 <HAL_ADC_Start_DMA+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d018      	beq.n	80031c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031a0:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <HAL_ADC_Start_DMA+0x1c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5f      	ldr	r2, [pc, #380]	; (8003324 <HAL_ADC_Start_DMA+0x1c8>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0c9a      	lsrs	r2, r3, #18
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031b4:	e002      	b.n	80031bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f9      	bne.n	80031b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d0:	d107      	bne.n	80031e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 8086 	bne.w	80032fe <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800321c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d106      	bne.n	8003240 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f023 0206 	bic.w	r2, r3, #6
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
 800323e:	e002      	b.n	8003246 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_ADC_Start_DMA+0x1cc>)
 8003250:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	4a35      	ldr	r2, [pc, #212]	; (800332c <HAL_ADC_Start_DMA+0x1d0>)
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_ADC_Start_DMA+0x1d4>)
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	4a33      	ldr	r2, [pc, #204]	; (8003334 <HAL_ADC_Start_DMA+0x1d8>)
 8003268:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003272:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003282:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003292:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	334c      	adds	r3, #76	; 0x4c
 800329e:	4619      	mov	r1, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f000 fce0 	bl	8003c68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d129      	bne.n	8003316 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	e020      	b.n	8003316 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <HAL_ADC_Start_DMA+0x1dc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d11b      	bne.n	8003316 <HAL_ADC_Start_DMA+0x1ba>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d114      	bne.n	8003316 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	e00b      	b.n	8003316 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000000 	.word	0x20000000
 8003324:	431bde83 	.word	0x431bde83
 8003328:	40012300 	.word	0x40012300
 800332c:	080037c9 	.word	0x080037c9
 8003330:	08003887 	.word	0x08003887
 8003334:	080038a5 	.word	0x080038a5
 8003338:	40012000 	.word	0x40012000

0800333c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1c>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e105      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x228>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d925      	bls.n	8003404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	3b1e      	subs	r3, #30
 80033ce:	2207      	movs	r2, #7
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43da      	mvns	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	400a      	ands	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68d9      	ldr	r1, [r3, #12]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4403      	add	r3, r0
 80033f6:	3b1e      	subs	r3, #30
 80033f8:	409a      	lsls	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e022      	b.n	800344a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6919      	ldr	r1, [r3, #16]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	2207      	movs	r2, #7
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	400a      	ands	r2, r1
 8003426:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6919      	ldr	r1, [r3, #16]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	4618      	mov	r0, r3
 800343a:	4603      	mov	r3, r0
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4403      	add	r3, r0
 8003440:	409a      	lsls	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b06      	cmp	r3, #6
 8003450:	d824      	bhi.n	800349c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b05      	subs	r3, #5
 8003464:	221f      	movs	r2, #31
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	4618      	mov	r0, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b05      	subs	r3, #5
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
 800349a:	e04c      	b.n	8003536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d824      	bhi.n	80034ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b23      	subs	r3, #35	; 0x23
 80034b6:	221f      	movs	r2, #31
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43da      	mvns	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b23      	subs	r3, #35	; 0x23
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
 80034ec:	e023      	b.n	8003536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	3b41      	subs	r3, #65	; 0x41
 8003500:	221f      	movs	r2, #31
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	400a      	ands	r2, r1
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	3b41      	subs	r3, #65	; 0x41
 800352a:	fa00 f203 	lsl.w	r2, r0, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_ADC_ConfigChannel+0x234>)
 8003538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_ADC_ConfigChannel+0x238>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d109      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1cc>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b12      	cmp	r3, #18
 800354a:	d105      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_ADC_ConfigChannel+0x238>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d123      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x21e>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d003      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x1e6>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b11      	cmp	r3, #17
 8003570:	d11b      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b10      	cmp	r3, #16
 8003584:	d111      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_ADC_ConfigChannel+0x23c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <HAL_ADC_ConfigChannel+0x240>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0c9a      	lsrs	r2, r3, #18
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800359c:	e002      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f9      	bne.n	800359e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40012300 	.word	0x40012300
 80035c4:	40012000 	.word	0x40012000
 80035c8:	20000000 	.word	0x20000000
 80035cc:	431bde83 	.word	0x431bde83

080035d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d8:	4b79      	ldr	r3, [pc, #484]	; (80037c0 <ADC_Init+0x1f0>)
 80035da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	021a      	lsls	r2, r3, #8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <ADC_Init+0x1f4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6899      	ldr	r1, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	e00f      	b.n	80036ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0202 	bic.w	r2, r2, #2
 80036dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7e1b      	ldrb	r3, [r3, #24]
 80036e8:	005a      	lsls	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800371a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	3b01      	subs	r3, #1
 8003728:	035a      	lsls	r2, r3, #13
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e007      	b.n	8003744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	3b01      	subs	r3, #1
 8003760:	051a      	lsls	r2, r3, #20
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003786:	025a      	lsls	r2, r3, #9
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	029a      	lsls	r2, r3, #10
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40012300 	.word	0x40012300
 80037c4:	0f000001 	.word	0x0f000001

080037c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d13d      	bne.n	800385e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d12b      	bne.n	8003854 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003800:	2b00      	cmp	r3, #0
 8003802:	d127      	bne.n	8003854 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800381c:	2b00      	cmp	r3, #0
 800381e:	d119      	bne.n	8003854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0220 	bic.w	r2, r2, #32
 800382e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800385c:	e00f      	b.n	800387e <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	4798      	blx	r3
}
 8003872:	e004      	b.n	800387e <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2240      	movs	r2, #64	; 0x40
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	f043 0204 	orr.w	r2, r3, #4
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003904:	4013      	ands	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <__NVIC_SetPriorityGrouping+0x44>)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	60d3      	str	r3, [r2, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <__NVIC_GetPriorityGrouping+0x18>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	f003 0307 	and.w	r3, r3, #7
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db0b      	blt.n	8003976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	4907      	ldr	r1, [pc, #28]	; (8003984 <__NVIC_EnableIRQ+0x38>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2001      	movs	r0, #1
 800396e:	fa00 f202 	lsl.w	r2, r0, r2
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000e100 	.word	0xe000e100

08003988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db0a      	blt.n	80039b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	490c      	ldr	r1, [pc, #48]	; (80039d4 <__NVIC_SetPriority+0x4c>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	440b      	add	r3, r1
 80039ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b0:	e00a      	b.n	80039c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4908      	ldr	r1, [pc, #32]	; (80039d8 <__NVIC_SetPriority+0x50>)
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	3b04      	subs	r3, #4
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	440b      	add	r3, r1
 80039c6:	761a      	strb	r2, [r3, #24]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000e100 	.word	0xe000e100
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f1c3 0307 	rsb	r3, r3, #7
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	bf28      	it	cs
 80039fa:	2304      	movcs	r3, #4
 80039fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d902      	bls.n	8003a0c <NVIC_EncodePriority+0x30>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3b03      	subs	r3, #3
 8003a0a:	e000      	b.n	8003a0e <NVIC_EncodePriority+0x32>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	401a      	ands	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a24:	f04f 31ff 	mov.w	r1, #4294967295
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	4313      	orrs	r3, r2
         );
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a54:	d301      	bcc.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00f      	b.n	8003a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <SysTick_Config+0x40>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	210f      	movs	r1, #15
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	f7ff ff8e 	bl	8003988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x40>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x40>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff29 	bl	80038e8 <__NVIC_SetPriorityGrouping>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab0:	f7ff ff3e 	bl	8003930 <__NVIC_GetPriorityGrouping>
 8003ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff ff8e 	bl	80039dc <NVIC_EncodePriority>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff5d 	bl	8003988 <__NVIC_SetPriority>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff31 	bl	800394c <__NVIC_EnableIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffa2 	bl	8003a44 <SysTick_Config>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff f8c2 	bl	8002ca0 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e099      	b.n	8003c5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b48:	e00f      	b.n	8003b6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b4a:	f7ff f8a9 	bl	8002ca0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d908      	bls.n	8003b6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2203      	movs	r2, #3
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e078      	b.n	8003c5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e8      	bne.n	8003b4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <HAL_DMA_Init+0x158>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d107      	bne.n	8003bd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d117      	bne.n	8003c2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fa9f 	bl	8004154 <DMA_CheckFifoParam>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e016      	b.n	8003c5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa56 	bl	80040e8 <DMA_CalcBaseAndBitshift>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	223f      	movs	r2, #63	; 0x3f
 8003c46:	409a      	lsls	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	f010803f 	.word	0xf010803f

08003c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_DMA_Start_IT+0x26>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e040      	b.n	8003d10 <HAL_DMA_Start_IT+0xa8>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d12f      	bne.n	8003d02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f9e8 	bl	800408c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	223f      	movs	r2, #63	; 0x3f
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0216 	orr.w	r2, r2, #22
 8003cd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e005      	b.n	8003d0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00c      	b.n	8003d50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2205      	movs	r2, #5
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d68:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_DMA_IRQHandler+0x248>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a8e      	ldr	r2, [pc, #568]	; (8003fa8 <HAL_DMA_IRQHandler+0x24c>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0a9b      	lsrs	r3, r3, #10
 8003d74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2208      	movs	r2, #8
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01a      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	2208      	movs	r2, #8
 8003db6:	409a      	lsls	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	2201      	movs	r2, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	2201      	movs	r2, #1
 8003dec:	409a      	lsls	r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	2204      	movs	r2, #4
 8003e04:	409a      	lsls	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d012      	beq.n	8003e34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	2204      	movs	r2, #4
 8003e22:	409a      	lsls	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0204 	orr.w	r2, r3, #4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	2210      	movs	r2, #16
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d043      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d03c      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2210      	movs	r2, #16
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d018      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d108      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d024      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	4798      	blx	r3
 8003e8a:	e01f      	b.n	8003ecc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
 8003e9c:	e016      	b.n	8003ecc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0208 	bic.w	r2, r2, #8
 8003eba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 808f 	beq.w	8003ffc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8087 	beq.w	8003ffc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d136      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0216 	bic.w	r2, r2, #22
 8003f14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <HAL_DMA_IRQHandler+0x1da>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0208 	bic.w	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	223f      	movs	r2, #63	; 0x3f
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d07e      	beq.n	8004068 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
        }
        return;
 8003f72:	e079      	b.n	8004068 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01d      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10d      	bne.n	8003fac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d031      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
 8003fa0:	e02c      	b.n	8003ffc <HAL_DMA_IRQHandler+0x2a0>
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d023      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
 8003fbc:	e01e      	b.n	8003ffc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0210 	bic.w	r2, r2, #16
 8003fda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d032      	beq.n	800406a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d022      	beq.n	8004056 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2205      	movs	r2, #5
 8004014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3301      	adds	r3, #1
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	d307      	bcc.n	8004044 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f2      	bne.n	8004028 <HAL_DMA_IRQHandler+0x2cc>
 8004042:	e000      	b.n	8004046 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004044:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e000      	b.n	800406a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004068:	bf00      	nop
    }
  }
}
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407e:	b2db      	uxtb	r3, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d108      	bne.n	80040cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040ca:	e007      	b.n	80040dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3b10      	subs	r3, #16
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <DMA_CalcBaseAndBitshift+0x64>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <DMA_CalcBaseAndBitshift+0x68>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d909      	bls.n	800412a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	1d1a      	adds	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	659a      	str	r2, [r3, #88]	; 0x58
 8004128:	e007      	b.n	800413a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	aaaaaaab 	.word	0xaaaaaaab
 8004150:	0800acfc 	.word	0x0800acfc

08004154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11f      	bne.n	80041ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d856      	bhi.n	8004222 <DMA_CheckFifoParam+0xce>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <DMA_CheckFifoParam+0x28>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800419f 	.word	0x0800419f
 8004184:	0800418d 	.word	0x0800418d
 8004188:	08004223 	.word	0x08004223
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d046      	beq.n	8004226 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419c:	e043      	b.n	8004226 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041a6:	d140      	bne.n	800422a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ac:	e03d      	b.n	800422a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b6:	d121      	bne.n	80041fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d837      	bhi.n	800422e <DMA_CheckFifoParam+0xda>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <DMA_CheckFifoParam+0x70>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041db 	.word	0x080041db
 80041cc:	080041d5 	.word	0x080041d5
 80041d0:	080041ed 	.word	0x080041ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e030      	b.n	800423c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d025      	beq.n	8004232 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ea:	e022      	b.n	8004232 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041f4:	d11f      	bne.n	8004236 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041fa:	e01c      	b.n	8004236 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d903      	bls.n	800420a <DMA_CheckFifoParam+0xb6>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d003      	beq.n	8004210 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004208:	e018      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      break;
 800420e:	e015      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00e      	beq.n	800423a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e00b      	b.n	800423a <DMA_CheckFifoParam+0xe6>
      break;
 8004222:	bf00      	nop
 8004224:	e00a      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e008      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      break;
 800422a:	bf00      	nop
 800422c:	e006      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
 8004230:	e004      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      break;   
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <DMA_CheckFifoParam+0xe8>
      break;
 800423a:	bf00      	nop
    }
  } 
  
  return status; 
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop

0800424c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e081      	b.n	8004362 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fe72 	bl	8001f5c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800429c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ac:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	e006      	b.n	80042d4 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d104      	bne.n	80042e6 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004308:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
  }
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b086      	sub	sp, #24
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_FMPI2C_ER_IRQHandler+0x46>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_FMPI2C_ER_IRQHandler+0x46>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f043 0201 	orr.w	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e2:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	0a9b      	lsrs	r3, r3, #10
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d010      	beq.n	8004412 <HAL_FMPI2C_ER_IRQHandler+0x74>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_FMPI2C_ER_IRQHandler+0x74>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f043 0208 	orr.w	r2, r3, #8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004410:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	0a5b      	lsrs	r3, r3, #9
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <HAL_FMPI2C_ER_IRQHandler+0xa2>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	09db      	lsrs	r3, r3, #7
 8004422:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_FMPI2C_ER_IRQHandler+0xa2>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 030b 	and.w	r3, r3, #11
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_FMPI2C_ER_IRQHandler+0xba>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fb8a 	bl	8004b6c <FMPI2C_ITError>
  }
}
 8004458:	bf00      	nop
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
 8004494:	4613      	mov	r3, r2
 8004496:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <FMPI2C_Slave_ISR_IT+0x24>
 8004500:	2302      	movs	r3, #2
 8004502:	e0ec      	b.n	80046de <FMPI2C_Slave_ISR_IT+0x1fe>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <FMPI2C_Slave_ISR_IT+0x4c>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <FMPI2C_Slave_ISR_IT+0x4c>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8004524:	6939      	ldr	r1, [r7, #16]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f9c0 	bl	80048ac <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d04d      	beq.n	80045d4 <FMPI2C_Slave_ISR_IT+0xf4>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0301 	and.w	r3, r3, #1
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8004540:	2b00      	cmp	r3, #0
 8004542:	d047      	beq.n	80045d4 <FMPI2C_Slave_ISR_IT+0xf4>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d128      	bne.n	80045a0 <FMPI2C_Slave_ISR_IT+0xc0>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b28      	cmp	r3, #40	; 0x28
 8004558:	d108      	bne.n	800456c <FMPI2C_Slave_ISR_IT+0x8c>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004560:	d104      	bne.n	800456c <FMPI2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 faab 	bl	8004ac0 <FMPI2C_ITListenCplt>
 800456a:	e032      	b.n	80045d2 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b29      	cmp	r3, #41	; 0x29
 8004576:	d10e      	bne.n	8004596 <FMPI2C_Slave_ISR_IT+0xb6>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800457e:	d00a      	beq.n	8004596 <FMPI2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2210      	movs	r2, #16
 8004586:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fbe6 	bl	8004d5a <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f92d 	bl	80047ee <FMPI2C_ITSlaveSeqCplt>
 8004594:	e01d      	b.n	80045d2 <FMPI2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 800459e:	e096      	b.n	80046ce <FMPI2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2210      	movs	r2, #16
 80045a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <FMPI2C_Slave_ISR_IT+0xe4>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c0:	f040 8085 	bne.w	80046ce <FMPI2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	4619      	mov	r1, r3
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 face 	bl	8004b6c <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 80045d0:	e07d      	b.n	80046ce <FMPI2C_Slave_ISR_IT+0x1ee>
 80045d2:	e07c      	b.n	80046ce <FMPI2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d030      	beq.n	8004642 <FMPI2C_Slave_ISR_IT+0x162>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02a      	beq.n	8004642 <FMPI2C_Slave_ISR_IT+0x162>
  {
    if (hfmpi2c->XferCount > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d018      	beq.n	8004628 <FMPI2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d14f      	bne.n	80046d2 <FMPI2C_Slave_ISR_IT+0x1f2>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004638:	d04b      	beq.n	80046d2 <FMPI2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f8d7 	bl	80047ee <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 8004640:	e047      	b.n	80046d2 <FMPI2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	08db      	lsrs	r3, r3, #3
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <FMPI2C_Slave_ISR_IT+0x184>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <FMPI2C_Slave_ISR_IT+0x184>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f842 	bl	80046e6 <FMPI2C_ITAddrCplt>
 8004662:	e037      	b.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d031      	beq.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	f003 0301 	and.w	r3, r3, #1
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02b      	beq.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <FMPI2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80046b6:	e00d      	b.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046be:	d002      	beq.n	80046c6 <FMPI2C_Slave_ISR_IT+0x1e6>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f891 	bl	80047ee <FMPI2C_ITSlaveSeqCplt>
 80046cc:	e002      	b.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
    if (hfmpi2c->XferCount == 0U)
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <FMPI2C_Slave_ISR_IT+0x1f4>
    if ((hfmpi2c->XferCount == 0U) && \
 80046d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046fc:	2b28      	cmp	r3, #40	; 0x28
 80046fe:	d16a      	bne.n	80047d6 <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	b29b      	uxth	r3, r3
 800471a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800471e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800473a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d138      	bne.n	80047b6 <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004744:	897b      	ldrh	r3, [r7, #10]
 8004746:	09db      	lsrs	r3, r3, #7
 8004748:	b29a      	uxth	r2, r3
 800474a:	89bb      	ldrh	r3, [r7, #12]
 800474c:	4053      	eors	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	f003 0306 	and.w	r3, r3, #6
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11c      	bne.n	8004792 <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004758:	897b      	ldrh	r3, [r7, #10]
 800475a:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	649a      	str	r2, [r3, #72]	; 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476a:	2b02      	cmp	r3, #2
 800476c:	d13b      	bne.n	80047e6 <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2208      	movs	r2, #8
 800477a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8004784:	89ba      	ldrh	r2, [r7, #12]
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe7c 	bl	8004488 <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 8004790:	e029      	b.n	80047e6 <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004792:	893b      	ldrh	r3, [r7, #8]
 8004794:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 8004796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fb1f 	bl	8004dde <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 80047a8:	89ba      	ldrh	r2, [r7, #12]
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fe6a 	bl	8004488 <HAL_FMPI2C_AddrCallback>
}
 80047b4:	e017      	b.n	80047e6 <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 80047b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fb0f 	bl	8004dde <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 80047c8:	89ba      	ldrh	r2, [r7, #12]
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fe5a 	bl	8004488 <HAL_FMPI2C_AddrCallback>
}
 80047d4:	e007      	b.n	80047e6 <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2208      	movs	r2, #8
 80047dc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0b9b      	lsrs	r3, r3, #14
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <FMPI2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e00d      	b.n	8004840 <FMPI2C_ITSlaveSeqCplt+0x52>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	0bdb      	lsrs	r3, r3, #15
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <FMPI2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b29      	cmp	r3, #41	; 0x29
 800484a:	d112      	bne.n	8004872 <FMPI2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2228      	movs	r2, #40	; 0x28
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2221      	movs	r2, #33	; 0x21
 8004858:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 800485a:	2101      	movs	r1, #1
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fabe 	bl	8004dde <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fdf8 	bl	8004460 <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004870:	e017      	b.n	80048a2 <FMPI2C_ITSlaveSeqCplt+0xb4>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b2a      	cmp	r3, #42	; 0x2a
 800487c:	d111      	bne.n	80048a2 <FMPI2C_ITSlaveSeqCplt+0xb4>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2228      	movs	r2, #40	; 0x28
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2222      	movs	r2, #34	; 0x22
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 800488c:	2102      	movs	r1, #2
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 faa5 	bl	8004dde <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fde9 	bl	8004474 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2220      	movs	r2, #32
 80048d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b21      	cmp	r3, #33	; 0x21
 80048d6:	d002      	beq.n	80048de <FMPI2C_ITSlaveCplt+0x32>
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b29      	cmp	r3, #41	; 0x29
 80048dc:	d108      	bne.n	80048f0 <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 80048de:	f248 0101 	movw	r1, #32769	; 0x8001
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa7b 	bl	8004dde <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2221      	movs	r2, #33	; 0x21
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
 80048ee:	e00d      	b.n	800490c <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b22      	cmp	r3, #34	; 0x22
 80048f4:	d002      	beq.n	80048fc <FMPI2C_ITSlaveCplt+0x50>
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b2a      	cmp	r3, #42	; 0x2a
 80048fa:	d107      	bne.n	800490c <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 80048fc:	f248 0102 	movw	r1, #32770	; 0x8002
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fa6c 	bl	8004dde <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2222      	movs	r2, #34	; 0x22
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b64      	ldr	r3, [pc, #400]	; (8004ab8 <FMPI2C_ITSlaveCplt+0x20c>)
 8004928:	400b      	ands	r3, r1
 800492a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa14 	bl	8004d5a <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	0b9b      	lsrs	r3, r3, #14
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <FMPI2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800494c:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d020      	beq.n	8004998 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004964:	e018      	b.n	8004998 <FMPI2C_ITSlaveCplt+0xec>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	0bdb      	lsrs	r3, r3, #15
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d012      	beq.n	8004998 <FMPI2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004980:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <FMPI2C_ITSlaveCplt+0xec>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b29a      	uxth	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <FMPI2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0304 	bic.w	r3, r3, #4
 80049aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <FMPI2C_ITSlaveCplt+0x13a>
    {
      hfmpi2c->XferSize--;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <FMPI2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f4:	f043 0204 	orr.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	635a      	str	r2, [r3, #52]	; 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d010      	beq.n	8004a34 <FMPI2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8a7 	bl	8004b6c <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b28      	cmp	r3, #40	; 0x28
 8004a28:	d141      	bne.n	8004aae <FMPI2C_ITSlaveCplt+0x202>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f847 	bl	8004ac0 <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8004a32:	e03c      	b.n	8004aae <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a3c:	d014      	beq.n	8004a68 <FMPI2C_ITSlaveCplt+0x1bc>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fed5 	bl	80047ee <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <FMPI2C_ITSlaveCplt+0x210>)
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fd1f 	bl	80044a4 <HAL_FMPI2C_ListenCpltCallback>
}
 8004a66:	e022      	b.n	8004aae <FMPI2C_ITSlaveCplt+0x202>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b22      	cmp	r3, #34	; 0x22
 8004a72:	d10e      	bne.n	8004a92 <FMPI2C_ITSlaveCplt+0x1e6>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fcf2 	bl	8004474 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8004a90:	e00d      	b.n	8004aae <FMPI2C_ITSlaveCplt+0x202>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fcd9 	bl	8004460 <HAL_FMPI2C_SlaveTxCpltCallback>
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	fe00e800 	.word	0xfe00e800
 8004abc:	ffff0000 	.word	0xffff0000

08004ac0 <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <FMPI2C_ITListenCplt+0xa8>)
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferISR = NULL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d022      	beq.n	8004b3e <FMPI2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hfmpi2c->XferSize > 0U))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <FMPI2C_ITListenCplt+0x7e>
    {
      hfmpi2c->XferSize--;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004b3e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f94b 	bl	8004dde <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff fca3 	bl	80044a4 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	ffff0000 	.word	0xffff0000

08004b6c <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a5d      	ldr	r2, [pc, #372]	; (8004d00 <FMPI2C_ITError+0x194>)
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfmpi2c->XferCount     = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b28      	cmp	r3, #40	; 0x28
 8004ba2:	d005      	beq.n	8004bb0 <FMPI2C_ITError+0x44>
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b29      	cmp	r3, #41	; 0x29
 8004ba8:	d002      	beq.n	8004bb0 <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b2a      	cmp	r3, #42	; 0x2a
 8004bae:	d10b      	bne.n	8004bc8 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004bb0:	2103      	movs	r1, #3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f913 	bl	8004dde <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2228      	movs	r2, #40	; 0x28
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a50      	ldr	r2, [pc, #320]	; (8004d04 <FMPI2C_ITError+0x198>)
 8004bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8004bc6:	e011      	b.n	8004bec <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8004bc8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f906 	bl	8004dde <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b60      	cmp	r3, #96	; 0x60
 8004bdc:	d003      	beq.n	8004be6 <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hfmpi2c->XferISR       = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d039      	beq.n	8004c6e <FMPI2C_ITError+0x102>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b11      	cmp	r3, #17
 8004bfe:	d002      	beq.n	8004c06 <FMPI2C_ITError+0x9a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b21      	cmp	r3, #33	; 0x21
 8004c04:	d133      	bne.n	8004c6e <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c14:	d107      	bne.n	8004c26 <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fa20 	bl	8004070 <HAL_DMA_GetState>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d017      	beq.n	8004c66 <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4a33      	ldr	r2, [pc, #204]	; (8004d08 <FMPI2C_ITError+0x19c>)
 8004c3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f864 	bl	8003d18 <HAL_DMA_Abort_IT>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04d      	beq.n	8004cf2 <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c64:	e045      	b.n	8004cf2 <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f850 	bl	8004d0c <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c6c:	e041      	b.n	8004cf2 <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d039      	beq.n	8004cea <FMPI2C_ITError+0x17e>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b12      	cmp	r3, #18
 8004c7a:	d002      	beq.n	8004c82 <FMPI2C_ITError+0x116>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b22      	cmp	r3, #34	; 0x22
 8004c80:	d133      	bne.n	8004cea <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d107      	bne.n	8004ca2 <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff f9e2 	bl	8004070 <HAL_DMA_GetState>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d017      	beq.n	8004ce2 <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <FMPI2C_ITError+0x19c>)
 8004cb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff f826 	bl	8003d18 <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce0:	e009      	b.n	8004cf6 <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f812 	bl	8004d0c <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce8:	e005      	b.n	8004cf6 <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f80e 	bl	8004d0c <FMPI2C_TreatErrorCallback>
  }
}
 8004cf0:	e002      	b.n	8004cf8 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf6:	bf00      	nop
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	ffff0000 	.word	0xffff0000
 8004d04:	080044e1 	.word	0x080044e1
 8004d08:	08004da3 	.word	0x08004da3

08004d0c <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b60      	cmp	r3, #96	; 0x60
 8004d1e:	d10e      	bne.n	8004d3e <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fbc8 	bl	80044cc <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 8004d3c:	e009      	b.n	8004d52 <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hfmpi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fbb3 	bl	80044b8 <HAL_FMPI2C_ErrorCallback>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d103      	bne.n	8004d78 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d007      	beq.n	8004d96 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	619a      	str	r2, [r3, #24]
  }
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	2200      	movs	r2, #0
 8004dce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff ff9b 	bl	8004d0c <FMPI2C_TreatErrorCallback>
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004dfe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e0c:	2b28      	cmp	r3, #40	; 0x28
 8004e0e:	d003      	beq.n	8004e18 <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e16:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00f      	beq.n	8004e42 <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004e28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e36:	2b28      	cmp	r3, #40	; 0x28
 8004e38:	d003      	beq.n	8004e42 <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 8004e42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da03      	bge.n	8004e52 <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 8004e52:	887b      	ldrh	r3, [r7, #2]
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d103      	bne.n	8004e60 <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 8004e60:	887b      	ldrh	r3, [r7, #2]
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d103      	bne.n	8004e6e <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f043 0320 	orr.w	r3, r3, #32
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d103      	bne.n	8004e7c <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	43da      	mvns	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d138      	bne.n	8004f22 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e032      	b.n	8004f24 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	; 0x24
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
  }
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8004f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f46:	6453      	str	r3, [r2, #68]	; 0x44
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8004f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f58:	4905      	ldr	r1, [pc, #20]	; (8004f70 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40013800 	.word	0x40013800

08004f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	e159      	b.n	8005244 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f90:	2201      	movs	r2, #1
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	f040 8148 	bne.w	800523e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d005      	beq.n	8004fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d130      	bne.n	8005028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 0201 	and.w	r2, r3, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b03      	cmp	r3, #3
 8005032:	d017      	beq.n	8005064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	2203      	movs	r2, #3
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d123      	bne.n	80050b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	08da      	lsrs	r2, r3, #3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3208      	adds	r2, #8
 8005078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	220f      	movs	r2, #15
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	08da      	lsrs	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3208      	adds	r2, #8
 80050b2:	69b9      	ldr	r1, [r7, #24]
 80050b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	2203      	movs	r2, #3
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0203 	and.w	r2, r3, #3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a2 	beq.w	800523e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	4b57      	ldr	r3, [pc, #348]	; (800525c <HAL_GPIO_Init+0x2e8>)
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	4a56      	ldr	r2, [pc, #344]	; (800525c <HAL_GPIO_Init+0x2e8>)
 8005104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005108:	6453      	str	r3, [r2, #68]	; 0x44
 800510a:	4b54      	ldr	r3, [pc, #336]	; (800525c <HAL_GPIO_Init+0x2e8>)
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005116:	4a52      	ldr	r2, [pc, #328]	; (8005260 <HAL_GPIO_Init+0x2ec>)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	3302      	adds	r3, #2
 800511e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	220f      	movs	r2, #15
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a49      	ldr	r2, [pc, #292]	; (8005264 <HAL_GPIO_Init+0x2f0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d019      	beq.n	8005176 <HAL_GPIO_Init+0x202>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a48      	ldr	r2, [pc, #288]	; (8005268 <HAL_GPIO_Init+0x2f4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_GPIO_Init+0x1fe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a47      	ldr	r2, [pc, #284]	; (800526c <HAL_GPIO_Init+0x2f8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_GPIO_Init+0x1fa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a46      	ldr	r2, [pc, #280]	; (8005270 <HAL_GPIO_Init+0x2fc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <HAL_GPIO_Init+0x1f6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a45      	ldr	r2, [pc, #276]	; (8005274 <HAL_GPIO_Init+0x300>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_GPIO_Init+0x1f2>
 8005162:	2304      	movs	r3, #4
 8005164:	e008      	b.n	8005178 <HAL_GPIO_Init+0x204>
 8005166:	2307      	movs	r3, #7
 8005168:	e006      	b.n	8005178 <HAL_GPIO_Init+0x204>
 800516a:	2303      	movs	r3, #3
 800516c:	e004      	b.n	8005178 <HAL_GPIO_Init+0x204>
 800516e:	2302      	movs	r3, #2
 8005170:	e002      	b.n	8005178 <HAL_GPIO_Init+0x204>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_GPIO_Init+0x204>
 8005176:	2300      	movs	r3, #0
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	f002 0203 	and.w	r2, r2, #3
 800517e:	0092      	lsls	r2, r2, #2
 8005180:	4093      	lsls	r3, r2
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005188:	4935      	ldr	r1, [pc, #212]	; (8005260 <HAL_GPIO_Init+0x2ec>)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	089b      	lsrs	r3, r3, #2
 800518e:	3302      	adds	r3, #2
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005196:	4b38      	ldr	r3, [pc, #224]	; (8005278 <HAL_GPIO_Init+0x304>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ba:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <HAL_GPIO_Init+0x304>)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051c0:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <HAL_GPIO_Init+0x304>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e4:	4a24      	ldr	r2, [pc, #144]	; (8005278 <HAL_GPIO_Init+0x304>)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <HAL_GPIO_Init+0x304>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800520e:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <HAL_GPIO_Init+0x304>)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005214:	4b18      	ldr	r3, [pc, #96]	; (8005278 <HAL_GPIO_Init+0x304>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005238:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <HAL_GPIO_Init+0x304>)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3301      	adds	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	f67f aea2 	bls.w	8004f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	3724      	adds	r7, #36	; 0x24
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	40013800 	.word	0x40013800
 8005264:	40020000 	.word	0x40020000
 8005268:	40020400 	.word	0x40020400
 800526c:	40020800 	.word	0x40020800
 8005270:	40020c00 	.word	0x40020c00
 8005274:	40021000 	.word	0x40021000
 8005278:	40013c00 	.word	0x40013c00

0800527c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
 8005288:	4613      	mov	r3, r2
 800528a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800528c:	787b      	ldrb	r3, [r7, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005298:	e003      	b.n	80052a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800529a:	887b      	ldrh	r3, [r7, #2]
 800529c:	041a      	lsls	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052c0:	887a      	ldrh	r2, [r7, #2]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4013      	ands	r3, r2
 80052c6:	041a      	lsls	r2, r3, #16
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	43d9      	mvns	r1, r3
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	400b      	ands	r3, r1
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	619a      	str	r2, [r3, #24]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052fa:	4a05      	ldr	r2, [pc, #20]	; (8005310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fb fd9d 	bl	8000e42 <HAL_GPIO_EXTI_Callback>
  }
}
 8005308:	bf00      	nop
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40013c00 	.word	0x40013c00

08005314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e12b      	b.n	800557e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fece 	bl	80020dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005378:	f000 ffc8 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 800537c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4a81      	ldr	r2, [pc, #516]	; (8005588 <HAL_I2C_Init+0x274>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d807      	bhi.n	8005398 <HAL_I2C_Init+0x84>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a80      	ldr	r2, [pc, #512]	; (800558c <HAL_I2C_Init+0x278>)
 800538c:	4293      	cmp	r3, r2
 800538e:	bf94      	ite	ls
 8005390:	2301      	movls	r3, #1
 8005392:	2300      	movhi	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e006      	b.n	80053a6 <HAL_I2C_Init+0x92>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a7d      	ldr	r2, [pc, #500]	; (8005590 <HAL_I2C_Init+0x27c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	bf94      	ite	ls
 80053a0:	2301      	movls	r3, #1
 80053a2:	2300      	movhi	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0e7      	b.n	800557e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a78      	ldr	r2, [pc, #480]	; (8005594 <HAL_I2C_Init+0x280>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0c9b      	lsrs	r3, r3, #18
 80053b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_I2C_Init+0x274>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d802      	bhi.n	80053e8 <HAL_I2C_Init+0xd4>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3301      	adds	r3, #1
 80053e6:	e009      	b.n	80053fc <HAL_I2C_Init+0xe8>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	4a69      	ldr	r2, [pc, #420]	; (8005598 <HAL_I2C_Init+0x284>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	099b      	lsrs	r3, r3, #6
 80053fa:	3301      	adds	r3, #1
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	430b      	orrs	r3, r1
 8005402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800540e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	495c      	ldr	r1, [pc, #368]	; (8005588 <HAL_I2C_Init+0x274>)
 8005418:	428b      	cmp	r3, r1
 800541a:	d819      	bhi.n	8005450 <HAL_I2C_Init+0x13c>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1e59      	subs	r1, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fbb1 f3f3 	udiv	r3, r1, r3
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005430:	400b      	ands	r3, r1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_I2C_Init+0x138>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1e59      	subs	r1, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fbb1 f3f3 	udiv	r3, r1, r3
 8005444:	3301      	adds	r3, #1
 8005446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544a:	e051      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 800544c:	2304      	movs	r3, #4
 800544e:	e04f      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d111      	bne.n	800547c <HAL_I2C_Init+0x168>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1e58      	subs	r0, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	440b      	add	r3, r1
 8005466:	fbb0 f3f3 	udiv	r3, r0, r3
 800546a:	3301      	adds	r3, #1
 800546c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e012      	b.n	80054a2 <HAL_I2C_Init+0x18e>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1e58      	subs	r0, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	0099      	lsls	r1, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005492:	3301      	adds	r3, #1
 8005494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Init+0x196>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e022      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10e      	bne.n	80054d0 <HAL_I2C_Init+0x1bc>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1e58      	subs	r0, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	440b      	add	r3, r1
 80054c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80054c4:	3301      	adds	r3, #1
 80054c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	e00f      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1e58      	subs	r0, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6859      	ldr	r1, [r3, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	0099      	lsls	r1, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	6809      	ldr	r1, [r1, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800551e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6911      	ldr	r1, [r2, #16]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68d2      	ldr	r2, [r2, #12]
 800552a:	4311      	orrs	r1, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	430b      	orrs	r3, r1
 8005532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	000186a0 	.word	0x000186a0
 800558c:	001e847f 	.word	0x001e847f
 8005590:	003d08ff 	.word	0x003d08ff
 8005594:	431bde83 	.word	0x431bde83
 8005598:	10624dd3 	.word	0x10624dd3

0800559c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e154      	b.n	8005858 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a98      	ldr	r2, [pc, #608]	; (8005828 <HAL_I2S_Init+0x28c>)
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fc fdcf 	bl	800216c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055e4:	f023 030f 	bic.w	r3, r3, #15
 80055e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2202      	movs	r2, #2
 80055f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d06f      	beq.n	80056da <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005602:	2310      	movs	r3, #16
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	e001      	b.n	800560c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005608:	2320      	movs	r3, #32
 800560a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b20      	cmp	r3, #32
 8005612:	d802      	bhi.n	800561a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a83      	ldr	r2, [pc, #524]	; (800582c <HAL_I2S_Init+0x290>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_I2S_Init+0x92>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a81      	ldr	r2, [pc, #516]	; (8005830 <HAL_I2S_Init+0x294>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d104      	bne.n	8005638 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800562e:	2001      	movs	r0, #1
 8005630:	f001 f862 	bl	80066f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	e003      	b.n	8005640 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005638:	2002      	movs	r0, #2
 800563a:	f001 f85d 	bl	80066f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800563e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005648:	d125      	bne.n	8005696 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	fbb2 f2f3 	udiv	r2, r2, r3
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	3305      	adds	r3, #5
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e01f      	b.n	80056b4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	fbb2 f2f3 	udiv	r2, r2, r3
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	3305      	adds	r3, #5
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	e00e      	b.n	80056b4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fbb2 f2f3 	udiv	r2, r2, r3
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	3305      	adds	r3, #5
 80056b2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4a5f      	ldr	r2, [pc, #380]	; (8005834 <HAL_I2S_Init+0x298>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	08db      	lsrs	r3, r3, #3
 80056be:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80056da:	2302      	movs	r3, #2
 80056dc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d902      	bls.n	80056ee <HAL_I2S_Init+0x152>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d907      	bls.n	80056fe <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f043 0210 	orr.w	r2, r3, #16
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0ac      	b.n	8005858 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	ea42 0103 	orr.w	r1, r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	430a      	orrs	r2, r1
 8005710:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800571c:	f023 030f 	bic.w	r3, r3, #15
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6851      	ldr	r1, [r2, #4]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
 8005728:	4311      	orrs	r1, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68d2      	ldr	r2, [r2, #12]
 800572e:	4311      	orrs	r1, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6992      	ldr	r2, [r2, #24]
 8005734:	430a      	orrs	r2, r1
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005740:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b30      	cmp	r3, #48	; 0x30
 8005748:	d003      	beq.n	8005752 <HAL_I2S_Init+0x1b6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2bb0      	cmp	r3, #176	; 0xb0
 8005750:	d107      	bne.n	8005762 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005760:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d16e      	bne.n	8005848 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a32      	ldr	r2, [pc, #200]	; (8005838 <HAL_I2S_Init+0x29c>)
 800576e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_I2S_Init+0x290>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_I2S_Init+0x1e2>
 800577a:	4b30      	ldr	r3, [pc, #192]	; (800583c <HAL_I2S_Init+0x2a0>)
 800577c:	e001      	b.n	8005782 <HAL_I2S_Init+0x1e6>
 800577e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	4928      	ldr	r1, [pc, #160]	; (800582c <HAL_I2S_Init+0x290>)
 800578a:	428a      	cmp	r2, r1
 800578c:	d101      	bne.n	8005792 <HAL_I2S_Init+0x1f6>
 800578e:	4a2b      	ldr	r2, [pc, #172]	; (800583c <HAL_I2S_Init+0x2a0>)
 8005790:	e001      	b.n	8005796 <HAL_I2S_Init+0x1fa>
 8005792:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005796:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800579a:	f023 030f 	bic.w	r3, r3, #15
 800579e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a21      	ldr	r2, [pc, #132]	; (800582c <HAL_I2S_Init+0x290>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_I2S_Init+0x212>
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <HAL_I2S_Init+0x2a0>)
 80057ac:	e001      	b.n	80057b2 <HAL_I2S_Init+0x216>
 80057ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b2:	2202      	movs	r2, #2
 80057b4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_I2S_Init+0x290>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_I2S_Init+0x228>
 80057c0:	4b1e      	ldr	r3, [pc, #120]	; (800583c <HAL_I2S_Init+0x2a0>)
 80057c2:	e001      	b.n	80057c8 <HAL_I2S_Init+0x22c>
 80057c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d4:	d003      	beq.n	80057de <HAL_I2S_Init+0x242>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80057de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e001      	b.n	80057ea <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005808:	4313      	orrs	r3, r2
 800580a:	b29a      	uxth	r2, r3
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	4313      	orrs	r3, r2
 8005810:	b29b      	uxth	r3, r3
 8005812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005816:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a03      	ldr	r2, [pc, #12]	; (800582c <HAL_I2S_Init+0x290>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10e      	bne.n	8005840 <HAL_I2S_Init+0x2a4>
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_I2S_Init+0x2a0>)
 8005824:	e00e      	b.n	8005844 <HAL_I2S_Init+0x2a8>
 8005826:	bf00      	nop
 8005828:	08005957 	.word	0x08005957
 800582c:	40003800 	.word	0x40003800
 8005830:	40003c00 	.word	0x40003c00
 8005834:	cccccccd 	.word	0xcccccccd
 8005838:	08005a6d 	.word	0x08005a6d
 800583c:	40003400 	.word	0x40003400
 8005840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005844:	897a      	ldrh	r2, [r7, #10]
 8005846:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	881a      	ldrh	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	1c9a      	adds	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10e      	bne.n	80058f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ffb8 	bl	8005860 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	b292      	uxth	r2, r2
 800590c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	1c9a      	adds	r2, r3, #2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10e      	bne.n	800594e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800593e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff93 	bl	8005874 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b04      	cmp	r3, #4
 8005970:	d13a      	bne.n	80059e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d109      	bne.n	8005990 <I2S_IRQHandler+0x3a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d102      	bne.n	8005990 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ffb4 	bl	80058f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d126      	bne.n	80059e8 <I2S_IRQHandler+0x92>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d11f      	bne.n	80059e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff ff50 	bl	8005888 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d136      	bne.n	8005a62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d109      	bne.n	8005a12 <I2S_IRQHandler+0xbc>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d102      	bne.n	8005a12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff45 	bl	800589c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d122      	bne.n	8005a62 <I2S_IRQHandler+0x10c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d11b      	bne.n	8005a62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	f043 0204 	orr.w	r2, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ff13 	bl	8005888 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a92      	ldr	r2, [pc, #584]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d101      	bne.n	8005a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a86:	4b92      	ldr	r3, [pc, #584]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a88:	e001      	b.n	8005a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a8b      	ldr	r2, [pc, #556]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005aa4:	4b8a      	ldr	r3, [pc, #552]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aa6:	e001      	b.n	8005aac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab8:	d004      	beq.n	8005ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 8099 	bne.w	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d107      	bne.n	8005ade <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f925 	bl	8005d28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9c8 	bl	8005e88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d13a      	bne.n	8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d035      	beq.n	8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a6e      	ldr	r2, [pc, #440]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d101      	bne.n	8005b1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005b16:	4b6e      	ldr	r3, [pc, #440]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b18:	e001      	b.n	8005b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4969      	ldr	r1, [pc, #420]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b26:	428b      	cmp	r3, r1
 8005b28:	d101      	bne.n	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005b2a:	4b69      	ldr	r3, [pc, #420]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b2c:	e001      	b.n	8005b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	f043 0202 	orr.w	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fe88 	bl	8005888 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	f040 80c3 	bne.w	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80bd 	beq.w	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a49      	ldr	r2, [pc, #292]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005baa:	4b49      	ldr	r3, [pc, #292]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bac:	e001      	b.n	8005bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4944      	ldr	r1, [pc, #272]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bba:	428b      	cmp	r3, r1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005bbe:	4b44      	ldr	r3, [pc, #272]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bc0:	e001      	b.n	8005bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]
 8005bd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	f043 0204 	orr.w	r2, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fe4a 	bl	8005888 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bf4:	e089      	b.n	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d107      	bne.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8be 	bl	8005d8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d107      	bne.n	8005c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f8fd 	bl	8005e24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d12f      	bne.n	8005c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d02a      	beq.n	8005c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d101      	bne.n	8005c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c5a:	e001      	b.n	8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4919      	ldr	r1, [pc, #100]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	d101      	bne.n	8005c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005c6c:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c6e:	e001      	b.n	8005c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fdfa 	bl	8005888 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d136      	bne.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d031      	beq.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a07      	ldr	r2, [pc, #28]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005cb2:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cb4:	e001      	b.n	8005cba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4902      	ldr	r1, [pc, #8]	; (8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cc2:	428b      	cmp	r3, r1
 8005cc4:	d106      	bne.n	8005cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005cc6:	4b02      	ldr	r3, [pc, #8]	; (8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cc8:	e006      	b.n	8005cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005cca:	bf00      	nop
 8005ccc:	40003800 	.word	0x40003800
 8005cd0:	40003400 	.word	0x40003400
 8005cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cdc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	f043 0204 	orr.w	r2, r3, #4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fdc0 	bl	8005888 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d08:	e000      	b.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d0a:	bf00      	nop
}
 8005d0c:	bf00      	nop
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c99      	adds	r1, r3, #2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6251      	str	r1, [r2, #36]	; 0x24
 8005d3a:	881a      	ldrh	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d113      	bne.n	8005d82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ffc9 	bl	8005d14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	1c99      	adds	r1, r3, #2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6251      	str	r1, [r2, #36]	; 0x24
 8005d9e:	8819      	ldrh	r1, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <I2SEx_TxISR_I2SExt+0x90>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d101      	bne.n	8005dae <I2SEx_TxISR_I2SExt+0x22>
 8005daa:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <I2SEx_TxISR_I2SExt+0x94>)
 8005dac:	e001      	b.n	8005db2 <I2SEx_TxISR_I2SExt+0x26>
 8005dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005db2:	460a      	mov	r2, r1
 8005db4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d121      	bne.n	8005e12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <I2SEx_TxISR_I2SExt+0x90>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d101      	bne.n	8005ddc <I2SEx_TxISR_I2SExt+0x50>
 8005dd8:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <I2SEx_TxISR_I2SExt+0x94>)
 8005dda:	e001      	b.n	8005de0 <I2SEx_TxISR_I2SExt+0x54>
 8005ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	490d      	ldr	r1, [pc, #52]	; (8005e1c <I2SEx_TxISR_I2SExt+0x90>)
 8005de8:	428b      	cmp	r3, r1
 8005dea:	d101      	bne.n	8005df0 <I2SEx_TxISR_I2SExt+0x64>
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <I2SEx_TxISR_I2SExt+0x94>)
 8005dee:	e001      	b.n	8005df4 <I2SEx_TxISR_I2SExt+0x68>
 8005df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005df8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff81 	bl	8005d14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40003800 	.word	0x40003800
 8005e20:	40003400 	.word	0x40003400

08005e24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68d8      	ldr	r0, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	1c99      	adds	r1, r3, #2
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e3c:	b282      	uxth	r2, r0
 8005e3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d113      	bne.n	8005e80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff ff4a 	bl	8005d14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <I2SEx_RxISR_I2SExt+0x90>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <I2SEx_RxISR_I2SExt+0x16>
 8005e9a:	4b20      	ldr	r3, [pc, #128]	; (8005f1c <I2SEx_RxISR_I2SExt+0x94>)
 8005e9c:	e001      	b.n	8005ea2 <I2SEx_RxISR_I2SExt+0x1a>
 8005e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea2:	68d8      	ldr	r0, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	1c99      	adds	r1, r3, #2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005eae:	b282      	uxth	r2, r0
 8005eb0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d121      	bne.n	8005f0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <I2SEx_RxISR_I2SExt+0x90>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <I2SEx_RxISR_I2SExt+0x50>
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <I2SEx_RxISR_I2SExt+0x94>)
 8005ed6:	e001      	b.n	8005edc <I2SEx_RxISR_I2SExt+0x54>
 8005ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	490d      	ldr	r1, [pc, #52]	; (8005f18 <I2SEx_RxISR_I2SExt+0x90>)
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	d101      	bne.n	8005eec <I2SEx_RxISR_I2SExt+0x64>
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <I2SEx_RxISR_I2SExt+0x94>)
 8005eea:	e001      	b.n	8005ef0 <I2SEx_RxISR_I2SExt+0x68>
 8005eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff03 	bl	8005d14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40003800 	.word	0x40003800
 8005f1c:	40003400 	.word	0x40003400

08005f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0cc      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f34:	4b68      	ldr	r3, [pc, #416]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d90c      	bls.n	8005f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f42:	4b65      	ldr	r3, [pc, #404]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4a:	4b63      	ldr	r3, [pc, #396]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0b8      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d020      	beq.n	8005faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f74:	4b59      	ldr	r3, [pc, #356]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a58      	ldr	r2, [pc, #352]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f8c:	4b53      	ldr	r3, [pc, #332]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a52      	ldr	r2, [pc, #328]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f98:	4b50      	ldr	r3, [pc, #320]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	494d      	ldr	r1, [pc, #308]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d044      	beq.n	8006040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d107      	bne.n	8005fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	4b47      	ldr	r3, [pc, #284]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d119      	bne.n	8005ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e07f      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d003      	beq.n	8005fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d107      	bne.n	8005fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fde:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e06f      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fee:	4b3b      	ldr	r3, [pc, #236]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e067      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f023 0203 	bic.w	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4934      	ldr	r1, [pc, #208]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 800600c:	4313      	orrs	r3, r2
 800600e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006010:	f7fc fe46 	bl	8002ca0 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	e00a      	b.n	800602e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006018:	f7fc fe42 	bl	8002ca0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e04f      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602e:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 020c 	and.w	r2, r3, #12
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	429a      	cmp	r2, r3
 800603e:	d1eb      	bne.n	8006018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006040:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d20c      	bcs.n	8006068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b22      	ldr	r3, [pc, #136]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e032      	b.n	80060ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4916      	ldr	r1, [pc, #88]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	490e      	ldr	r1, [pc, #56]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060a6:	f000 f821 	bl	80060ec <HAL_RCC_GetSysClockFreq>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	091b      	lsrs	r3, r3, #4
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	490a      	ldr	r1, [pc, #40]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 80060b8:	5ccb      	ldrb	r3, [r1, r3]
 80060ba:	fa22 f303 	lsr.w	r3, r2, r3
 80060be:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 80060c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060c2:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <HAL_RCC_ClockConfig+0x1c8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fc fda6 	bl	8002c18 <HAL_InitTick>

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40023c00 	.word	0x40023c00
 80060dc:	40023800 	.word	0x40023800
 80060e0:	0800ace4 	.word	0x0800ace4
 80060e4:	20000000 	.word	0x20000000
 80060e8:	20000004 	.word	0x20000004

080060ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f0:	b094      	sub	sp, #80	; 0x50
 80060f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	647b      	str	r3, [r7, #68]	; 0x44
 80060f8:	2300      	movs	r3, #0
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	2300      	movs	r3, #0
 80060fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006104:	4b79      	ldr	r3, [pc, #484]	; (80062ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b08      	cmp	r3, #8
 800610e:	d00d      	beq.n	800612c <HAL_RCC_GetSysClockFreq+0x40>
 8006110:	2b08      	cmp	r3, #8
 8006112:	f200 80e1 	bhi.w	80062d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_RCC_GetSysClockFreq+0x34>
 800611a:	2b04      	cmp	r3, #4
 800611c:	d003      	beq.n	8006126 <HAL_RCC_GetSysClockFreq+0x3a>
 800611e:	e0db      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006120:	4b73      	ldr	r3, [pc, #460]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006122:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006124:	e0db      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006126:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800612a:	e0d8      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800612c:	4b6f      	ldr	r3, [pc, #444]	; (80062ec <HAL_RCC_GetSysClockFreq+0x200>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006136:	4b6d      	ldr	r3, [pc, #436]	; (80062ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d063      	beq.n	800620a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006142:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	2200      	movs	r2, #0
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
 800614c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	633b      	str	r3, [r7, #48]	; 0x30
 8006156:	2300      	movs	r3, #0
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
 800615a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800615e:	4622      	mov	r2, r4
 8006160:	462b      	mov	r3, r5
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	0159      	lsls	r1, r3, #5
 800616c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006170:	0150      	lsls	r0, r2, #5
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4621      	mov	r1, r4
 8006178:	1a51      	subs	r1, r2, r1
 800617a:	6139      	str	r1, [r7, #16]
 800617c:	4629      	mov	r1, r5
 800617e:	eb63 0301 	sbc.w	r3, r3, r1
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006190:	4659      	mov	r1, fp
 8006192:	018b      	lsls	r3, r1, #6
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800619a:	4651      	mov	r1, sl
 800619c:	018a      	lsls	r2, r1, #6
 800619e:	4651      	mov	r1, sl
 80061a0:	ebb2 0801 	subs.w	r8, r2, r1
 80061a4:	4659      	mov	r1, fp
 80061a6:	eb63 0901 	sbc.w	r9, r3, r1
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061be:	4690      	mov	r8, r2
 80061c0:	4699      	mov	r9, r3
 80061c2:	4623      	mov	r3, r4
 80061c4:	eb18 0303 	adds.w	r3, r8, r3
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	462b      	mov	r3, r5
 80061cc:	eb49 0303 	adc.w	r3, r9, r3
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061de:	4629      	mov	r1, r5
 80061e0:	028b      	lsls	r3, r1, #10
 80061e2:	4621      	mov	r1, r4
 80061e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061e8:	4621      	mov	r1, r4
 80061ea:	028a      	lsls	r2, r1, #10
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	2200      	movs	r2, #0
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061fc:	f7fa f802 	bl	8000204 <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4613      	mov	r3, r2
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	e058      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620a:	4b38      	ldr	r3, [pc, #224]	; (80062ec <HAL_RCC_GetSysClockFreq+0x200>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	099b      	lsrs	r3, r3, #6
 8006210:	2200      	movs	r2, #0
 8006212:	4618      	mov	r0, r3
 8006214:	4611      	mov	r1, r2
 8006216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	2300      	movs	r3, #0
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	f04f 0000 	mov.w	r0, #0
 800622c:	f04f 0100 	mov.w	r1, #0
 8006230:	0159      	lsls	r1, r3, #5
 8006232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006236:	0150      	lsls	r0, r2, #5
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4641      	mov	r1, r8
 800623e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006242:	4649      	mov	r1, r9
 8006244:	eb63 0b01 	sbc.w	fp, r3, r1
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800625c:	ebb2 040a 	subs.w	r4, r2, sl
 8006260:	eb63 050b 	sbc.w	r5, r3, fp
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	00eb      	lsls	r3, r5, #3
 800626e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006272:	00e2      	lsls	r2, r4, #3
 8006274:	4614      	mov	r4, r2
 8006276:	461d      	mov	r5, r3
 8006278:	4643      	mov	r3, r8
 800627a:	18e3      	adds	r3, r4, r3
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	464b      	mov	r3, r9
 8006280:	eb45 0303 	adc.w	r3, r5, r3
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006292:	4629      	mov	r1, r5
 8006294:	028b      	lsls	r3, r1, #10
 8006296:	4621      	mov	r1, r4
 8006298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800629c:	4621      	mov	r1, r4
 800629e:	028a      	lsls	r2, r1, #10
 80062a0:	4610      	mov	r0, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a6:	2200      	movs	r2, #0
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	61fa      	str	r2, [r7, #28]
 80062ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062b0:	f7f9 ffa8 	bl	8000204 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4613      	mov	r3, r2
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_RCC_GetSysClockFreq+0x200>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	3301      	adds	r3, #1
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d6:	e002      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80062da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3750      	adds	r7, #80	; 0x50
 80062e4:	46bd      	mov	sp, r7
 80062e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
 80062f0:	00f42400 	.word	0x00f42400

080062f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <HAL_RCC_GetHCLKFreq+0x14>)
 80062fa:	681b      	ldr	r3, [r3, #0]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000000 	.word	0x20000000

0800630c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006310:	f7ff fff0 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8006314:	4602      	mov	r2, r0
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0a9b      	lsrs	r3, r3, #10
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	4903      	ldr	r1, [pc, #12]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006322:	5ccb      	ldrb	r3, [r1, r3]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40023800 	.word	0x40023800
 8006330:	0800acf4 	.word	0x0800acf4

08006334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006338:	f7ff ffdc 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0b5b      	lsrs	r3, r3, #13
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4903      	ldr	r1, [pc, #12]	; (8006358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	0800acf4 	.word	0x0800acf4

0800635c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d010      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800637c:	4b87      	ldr	r3, [pc, #540]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800637e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006382:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4984      	ldr	r1, [pc, #528]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800639a:	2301      	movs	r3, #1
 800639c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80063aa:	4b7c      	ldr	r3, [pc, #496]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	4978      	ldr	r1, [pc, #480]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8083 	beq.w	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	4b6f      	ldr	r3, [pc, #444]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	4a6e      	ldr	r2, [pc, #440]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ea:	4b6c      	ldr	r3, [pc, #432]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063f6:	4b6a      	ldr	r3, [pc, #424]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a69      	ldr	r2, [pc, #420]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80063fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006400:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006402:	f7fc fc4d 	bl	8002ca0 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800640a:	f7fc fc49 	bl	8002ca0 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e162      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800641c:	4b60      	ldr	r3, [pc, #384]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006428:	4b5c      	ldr	r3, [pc, #368]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800642a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006430:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d02f      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	429a      	cmp	r2, r3
 8006444:	d028      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006446:	4b55      	ldr	r3, [pc, #340]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006450:	4b54      	ldr	r3, [pc, #336]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006456:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800645c:	4a4f      	ldr	r2, [pc, #316]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006462:	4b4e      	ldr	r3, [pc, #312]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d114      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800646e:	f7fc fc17 	bl	8002ca0 <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006474:	e00a      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006476:	f7fc fc13 	bl	8002ca0 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d901      	bls.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e12a      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648c:	4b43      	ldr	r3, [pc, #268]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0ee      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a4:	d10d      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80064a6:	4b3d      	ldr	r3, [pc, #244]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ba:	4938      	ldr	r1, [pc, #224]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	608b      	str	r3, [r1, #8]
 80064c0:	e005      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x172>
 80064c2:	4b36      	ldr	r3, [pc, #216]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4a35      	ldr	r2, [pc, #212]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064cc:	6093      	str	r3, [r2, #8]
 80064ce:	4b33      	ldr	r3, [pc, #204]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064da:	4930      	ldr	r1, [pc, #192]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80064f2:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064f4:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006502:	4b26      	ldr	r3, [pc, #152]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	4922      	ldr	r1, [pc, #136]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d011      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006524:	4b1d      	ldr	r3, [pc, #116]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800652a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	491a      	ldr	r1, [pc, #104]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006542:	d101      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006554:	4b11      	ldr	r3, [pc, #68]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	490e      	ldr	r1, [pc, #56]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d004      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	f040 8091 	bne.w	800669c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006580:	f7fc fb8e 	bl	8002ca0 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006586:	e013      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006588:	f7fc fb8a 	bl	8002ca0 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d90c      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e0a3      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800
 80065a0:	40007000 	.word	0x40007000
 80065a4:	42470e40 	.word	0x42470e40
 80065a8:	424711e0 	.word	0x424711e0
 80065ac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065b0:	4b4e      	ldr	r3, [pc, #312]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80065bc:	4a4c      	ldr	r2, [pc, #304]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d023      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d019      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006600:	d00e      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800660a:	2b00      	cmp	r3, #0
 800660c:	d019      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d115      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800661e:	d110      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	019b      	lsls	r3, r3, #6
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	071b      	lsls	r3, r3, #28
 800663a:	492c      	ldr	r1, [pc, #176]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b00      	cmp	r3, #0
 800664c:	d010      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	019b      	lsls	r3, r3, #6
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	071b      	lsls	r3, r3, #28
 8006668:	4920      	ldr	r1, [pc, #128]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006670:	4b20      	ldr	r3, [pc, #128]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006676:	f7fc fb13 	bl	8002ca0 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800667e:	f7fc fb0f 	bl	8002ca0 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e028      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006690:	4b16      	ldr	r3, [pc, #88]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80066aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	490d      	ldr	r1, [pc, #52]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80066cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	4904      	ldr	r1, [pc, #16]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800
 80066f0:	424710d8 	.word	0x424710d8
 80066f4:	42470068 	.word	0x42470068

080066f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d004      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b02      	cmp	r3, #2
 800671a:	f000 80a1 	beq.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800671e:	e13f      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006720:	4ba3      	ldr	r3, [pc, #652]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006726:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006732:	f000 8084 	beq.w	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800673c:	f200 808c 	bhi.w	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006746:	d04f      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800674e:	f200 8083 	bhi.w	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800675e:	d17b      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006760:	4b94      	ldr	r3, [pc, #592]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006762:	617b      	str	r3, [r7, #20]
          break;
 8006764:	e07b      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8006766:	4b92      	ldr	r3, [pc, #584]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006774:	d109      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006776:	4b8e      	ldr	r3, [pc, #568]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800677c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006780:	4a8c      	ldr	r2, [pc, #560]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	e019      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800678a:	4b89      	ldr	r3, [pc, #548]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006796:	d109      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006798:	4b85      	ldr	r3, [pc, #532]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800679a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067a2:	4a85      	ldr	r2, [pc, #532]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	e008      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80067ac:	4b80      	ldr	r3, [pc, #512]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b6:	4a80      	ldr	r2, [pc, #512]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80067b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067bc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80067be:	4b7c      	ldr	r3, [pc, #496]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c4:	099b      	lsrs	r3, r3, #6
 80067c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	fb02 f303 	mul.w	r3, r2, r3
 80067d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80067d2:	4b77      	ldr	r3, [pc, #476]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d8:	0f1b      	lsrs	r3, r3, #28
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]
          break;
 80067e6:	e03a      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067e8:	4b71      	ldr	r3, [pc, #452]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f4:	d108      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067f6:	4b6e      	ldr	r3, [pc, #440]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fe:	4a6e      	ldr	r2, [pc, #440]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	e007      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006808:	4b69      	ldr	r3, [pc, #420]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006810:	4a69      	ldr	r2, [pc, #420]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006818:	4b65      	ldr	r3, [pc, #404]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800682a:	4b61      	ldr	r3, [pc, #388]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	fbb2 f3f3 	udiv	r3, r2, r3
 800683a:	617b      	str	r3, [r7, #20]
          break;
 800683c:	e00f      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800683e:	4b5c      	ldr	r3, [pc, #368]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800684a:	d102      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800684c:	4b5a      	ldr	r3, [pc, #360]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800684e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006850:	e005      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8006852:	4b59      	ldr	r3, [pc, #356]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006854:	617b      	str	r3, [r7, #20]
          break;
 8006856:	e002      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
          break;
 800685c:	bf00      	nop
        }
      }
      break;
 800685e:	e09f      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8006860:	4b53      	ldr	r3, [pc, #332]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006866:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006872:	f000 8084 	beq.w	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800687c:	f200 808c 	bhi.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006886:	d04f      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800688e:	f200 8083 	bhi.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d006      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800689e:	d17b      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80068a0:	4b44      	ldr	r3, [pc, #272]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80068a2:	617b      	str	r3, [r7, #20]
          break;
 80068a4:	e07b      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80068a6:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b4:	d109      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80068b6:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c0:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80068c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	e019      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068ca:	4b39      	ldr	r3, [pc, #228]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d6:	d109      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80068d8:	4b35      	ldr	r3, [pc, #212]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e2:	4a35      	ldr	r2, [pc, #212]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e008      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80068ec:	4b30      	ldr	r3, [pc, #192]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80068ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f6:	4a30      	ldr	r2, [pc, #192]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068fe:	4b2c      	ldr	r3, [pc, #176]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006912:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006918:	0f1b      	lsrs	r3, r3, #28
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	617b      	str	r3, [r7, #20]
          break;
 8006926:	e03a      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006928:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006934:	d108      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006936:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693e:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	e007      	b.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006948:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006950:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006958:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	099b      	lsrs	r3, r3, #6
 800695e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	0f1b      	lsrs	r3, r3, #28
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	fbb2 f3f3 	udiv	r3, r2, r3
 800697a:	617b      	str	r3, [r7, #20]
          break;
 800697c:	e00f      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800697e:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800698e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006990:	e005      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006994:	617b      	str	r3, [r7, #20]
          break;
 8006996:	e002      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
          break;
 800699c:	bf00      	nop
        }
      }
      break;
 800699e:	bf00      	nop
    }
  }
  return frequency;
 80069a0:	697b      	ldr	r3, [r7, #20]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	00bb8000 	.word	0x00bb8000
 80069b8:	00f42400 	.word	0x00f42400

080069bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e273      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d075      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069da:	4b88      	ldr	r3, [pc, #544]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 030c 	and.w	r3, r3, #12
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d00c      	beq.n	8006a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069e6:	4b85      	ldr	r3, [pc, #532]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d112      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069f2:	4b82      	ldr	r3, [pc, #520]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fe:	d10b      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a00:	4b7e      	ldr	r3, [pc, #504]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05b      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x108>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d157      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e24e      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a20:	d106      	bne.n	8006a30 <HAL_RCC_OscConfig+0x74>
 8006a22:	4b76      	ldr	r3, [pc, #472]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a75      	ldr	r2, [pc, #468]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e01d      	b.n	8006a6c <HAL_RCC_OscConfig+0xb0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a38:	d10c      	bne.n	8006a54 <HAL_RCC_OscConfig+0x98>
 8006a3a:	4b70      	ldr	r3, [pc, #448]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a6f      	ldr	r2, [pc, #444]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b6d      	ldr	r3, [pc, #436]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a6c      	ldr	r2, [pc, #432]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	e00b      	b.n	8006a6c <HAL_RCC_OscConfig+0xb0>
 8006a54:	4b69      	ldr	r3, [pc, #420]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a68      	ldr	r2, [pc, #416]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	4b66      	ldr	r3, [pc, #408]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a65      	ldr	r2, [pc, #404]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d013      	beq.n	8006a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fc f914 	bl	8002ca0 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a7c:	f7fc f910 	bl	8002ca0 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	; 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e213      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8e:	4b5b      	ldr	r3, [pc, #364]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0xc0>
 8006a9a:	e014      	b.n	8006ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fc f900 	bl	8002ca0 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aa4:	f7fc f8fc 	bl	8002ca0 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b64      	cmp	r3, #100	; 0x64
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e1ff      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ab6:	4b51      	ldr	r3, [pc, #324]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <HAL_RCC_OscConfig+0xe8>
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d063      	beq.n	8006b9a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ad2:	4b4a      	ldr	r3, [pc, #296]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ade:	4b47      	ldr	r3, [pc, #284]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d11c      	bne.n	8006b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aea:	4b44      	ldr	r3, [pc, #272]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d116      	bne.n	8006b24 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006af6:	4b41      	ldr	r3, [pc, #260]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_RCC_OscConfig+0x152>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d001      	beq.n	8006b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e1d3      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0e:	4b3b      	ldr	r3, [pc, #236]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4937      	ldr	r1, [pc, #220]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b22:	e03a      	b.n	8006b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d020      	beq.n	8006b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b2c:	4b34      	ldr	r3, [pc, #208]	; (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fc f8b5 	bl	8002ca0 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b3a:	f7fc f8b1 	bl	8002ca0 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e1b4      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4c:	4b2b      	ldr	r3, [pc, #172]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b58:	4b28      	ldr	r3, [pc, #160]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4925      	ldr	r1, [pc, #148]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	600b      	str	r3, [r1, #0]
 8006b6c:	e015      	b.n	8006b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b6e:	4b24      	ldr	r3, [pc, #144]	; (8006c00 <HAL_RCC_OscConfig+0x244>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fc f894 	bl	8002ca0 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b7c:	f7fc f890 	bl	8002ca0 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e193      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8e:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d036      	beq.n	8006c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d016      	beq.n	8006bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bae:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <HAL_RCC_OscConfig+0x248>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb4:	f7fc f874 	bl	8002ca0 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fc f870 	bl	8002ca0 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e173      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bce:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <HAL_RCC_OscConfig+0x240>)
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x200>
 8006bda:	e01b      	b.n	8006c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bdc:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <HAL_RCC_OscConfig+0x248>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be2:	f7fc f85d 	bl	8002ca0 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006be8:	e00e      	b.n	8006c08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bea:	f7fc f859 	bl	8002ca0 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d907      	bls.n	8006c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e15c      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	42470000 	.word	0x42470000
 8006c04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c08:	4b8a      	ldr	r3, [pc, #552]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1ea      	bne.n	8006bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8097 	beq.w	8006d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c26:	4b83      	ldr	r3, [pc, #524]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10f      	bne.n	8006c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	4b7f      	ldr	r3, [pc, #508]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	4a7e      	ldr	r2, [pc, #504]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c40:	6413      	str	r3, [r2, #64]	; 0x40
 8006c42:	4b7c      	ldr	r3, [pc, #496]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c52:	4b79      	ldr	r3, [pc, #484]	; (8006e38 <HAL_RCC_OscConfig+0x47c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d118      	bne.n	8006c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <HAL_RCC_OscConfig+0x47c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a75      	ldr	r2, [pc, #468]	; (8006e38 <HAL_RCC_OscConfig+0x47c>)
 8006c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c6a:	f7fc f819 	bl	8002ca0 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c72:	f7fc f815 	bl	8002ca0 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e118      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c84:	4b6c      	ldr	r3, [pc, #432]	; (8006e38 <HAL_RCC_OscConfig+0x47c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0f0      	beq.n	8006c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d106      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x2ea>
 8006c98:	4b66      	ldr	r3, [pc, #408]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9c:	4a65      	ldr	r2, [pc, #404]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca4:	e01c      	b.n	8006ce0 <HAL_RCC_OscConfig+0x324>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d10c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x30c>
 8006cae:	4b61      	ldr	r3, [pc, #388]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a60      	ldr	r2, [pc, #384]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cb4:	f043 0304 	orr.w	r3, r3, #4
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	4b5e      	ldr	r3, [pc, #376]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	4a5d      	ldr	r2, [pc, #372]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cc0:	f043 0301 	orr.w	r3, r3, #1
 8006cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc6:	e00b      	b.n	8006ce0 <HAL_RCC_OscConfig+0x324>
 8006cc8:	4b5a      	ldr	r3, [pc, #360]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	4a59      	ldr	r2, [pc, #356]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd4:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	4a56      	ldr	r2, [pc, #344]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006cda:	f023 0304 	bic.w	r3, r3, #4
 8006cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d015      	beq.n	8006d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce8:	f7fb ffda 	bl	8002ca0 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cee:	e00a      	b.n	8006d06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cf0:	f7fb ffd6 	bl	8002ca0 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e0d7      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d06:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0ee      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x334>
 8006d12:	e014      	b.n	8006d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7fb ffc4 	bl	8002ca0 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d1a:	e00a      	b.n	8006d32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d1c:	f7fb ffc0 	bl	8002ca0 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e0c1      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d32:	4b40      	ldr	r3, [pc, #256]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1ee      	bne.n	8006d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d105      	bne.n	8006d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d44:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	4a3a      	ldr	r2, [pc, #232]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80ad 	beq.w	8006eb4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d5a:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d060      	beq.n	8006e28 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d145      	bne.n	8006dfa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d6e:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <HAL_RCC_OscConfig+0x480>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fb ff94 	bl	8002ca0 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fb ff90 	bl	8002ca0 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e093      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8e:	4b29      	ldr	r3, [pc, #164]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69da      	ldr	r2, [r3, #28]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	019b      	lsls	r3, r3, #6
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	3b01      	subs	r3, #1
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	071b      	lsls	r3, r3, #28
 8006dc6:	491b      	ldr	r1, [pc, #108]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <HAL_RCC_OscConfig+0x480>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fb ff65 	bl	8002ca0 <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dda:	f7fb ff61 	bl	8002ca0 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e064      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dec:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0f0      	beq.n	8006dda <HAL_RCC_OscConfig+0x41e>
 8006df8:	e05c      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <HAL_RCC_OscConfig+0x480>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fb ff4e 	bl	8002ca0 <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e08:	f7fb ff4a 	bl	8002ca0 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e04d      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <HAL_RCC_OscConfig+0x478>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f0      	bne.n	8006e08 <HAL_RCC_OscConfig+0x44c>
 8006e26:	e045      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e040      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40007000 	.word	0x40007000
 8006e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e40:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <HAL_RCC_OscConfig+0x504>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d030      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d129      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d122      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e70:	4013      	ands	r3, r2
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d119      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d10f      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40023800 	.word	0x40023800

08006ec4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e066      	b.n	8006fa8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	7f5b      	ldrb	r3, [r3, #29]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fb fa1c 	bl	8002328 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	22ca      	movs	r2, #202	; 0xca
 8006efc:	625a      	str	r2, [r3, #36]	; 0x24
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2253      	movs	r2, #83	; 0x53
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb2a 	bl	8007560 <RTC_EnterInitMode>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d12c      	bne.n	8006f70 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f28:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68d2      	ldr	r2, [r2, #12]
 8006f50:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6919      	ldr	r1, [r3, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	041a      	lsls	r2, r3, #16
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fb31 	bl	80075ce <RTC_ExitInitMode>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d113      	bne.n	8006f9e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	22ff      	movs	r2, #255	; 0xff
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	7f1b      	ldrb	r3, [r3, #28]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_RTC_SetTime+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e087      	b.n	80070dc <HAL_RTC_SetTime+0x12c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d126      	bne.n	800702c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb0e 	bl	8007618 <RTC_ByteToBcd2>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fb07 	bl	8007618 <RTC_ByteToBcd2>
 800700a:	4603      	mov	r3, r0
 800700c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800700e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	789b      	ldrb	r3, [r3, #2]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 faff 	bl	8007618 <RTC_ByteToBcd2>
 800701a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800701c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	78db      	ldrb	r3, [r3, #3]
 8007024:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e018      	b.n	800705e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2200      	movs	r2, #0
 800703e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800704c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007052:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	78db      	ldrb	r3, [r3, #3]
 8007058:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	22ca      	movs	r2, #202	; 0xca
 8007064:	625a      	str	r2, [r3, #36]	; 0x24
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2253      	movs	r2, #83	; 0x53
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fa76 	bl	8007560 <RTC_EnterInitMode>
 8007074:	4603      	mov	r3, r0
 8007076:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d120      	bne.n	80070c0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007088:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800708c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800709c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6899      	ldr	r1, [r3, #8]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fa89 	bl	80075ce <RTC_ExitInitMode>
 80070bc:	4603      	mov	r3, r0
 80070be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80070c0:	7cfb      	ldrb	r3, [r7, #19]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	22ff      	movs	r2, #255	; 0xff
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	771a      	strb	r2, [r3, #28]

  return status;
 80070da:	7cfb      	ldrb	r3, [r7, #19]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd90      	pop	{r4, r7, pc}

080070e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	7f1b      	ldrb	r3, [r3, #28]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_RTC_SetDate+0x1c>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e071      	b.n	80071e4 <HAL_RTC_SetDate+0x100>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2202      	movs	r2, #2
 800710a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <HAL_RTC_SetDate+0x4c>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	b2db      	uxtb	r3, r3
 8007128:	330a      	adds	r3, #10
 800712a:	b2da      	uxtb	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d11c      	bne.n	8007170 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fa6c 	bl	8007618 <RTC_ByteToBcd2>
 8007140:	4603      	mov	r3, r0
 8007142:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fa65 	bl	8007618 <RTC_ByteToBcd2>
 800714e:	4603      	mov	r3, r0
 8007150:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007152:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	789b      	ldrb	r3, [r3, #2]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fa5d 	bl	8007618 <RTC_ByteToBcd2>
 800715e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007160:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e00e      	b.n	800718e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	78db      	ldrb	r3, [r3, #3]
 8007174:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800717c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007182:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	22ca      	movs	r2, #202	; 0xca
 8007194:	625a      	str	r2, [r3, #36]	; 0x24
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2253      	movs	r2, #83	; 0x53
 800719c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f9de 	bl	8007560 <RTC_EnterInitMode>
 80071a4:	4603      	mov	r3, r0
 80071a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80071a8:	7cfb      	ldrb	r3, [r7, #19]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10c      	bne.n	80071c8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fa05 	bl	80075ce <RTC_ExitInitMode>
 80071c4:	4603      	mov	r3, r0
 80071c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]

  return status;
 80071e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd90      	pop	{r4, r7, pc}

080071ec <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b089      	sub	sp, #36	; 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80071f8:	4b9a      	ldr	r3, [pc, #616]	; (8007464 <HAL_RTC_SetAlarm_IT+0x278>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a9a      	ldr	r2, [pc, #616]	; (8007468 <HAL_RTC_SetAlarm_IT+0x27c>)
 80071fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007202:	0adb      	lsrs	r3, r3, #11
 8007204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	7f1b      	ldrb	r3, [r3, #28]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_RTC_SetAlarm_IT+0x36>
 800721e:	2302      	movs	r3, #2
 8007220:	e11c      	b.n	800745c <HAL_RTC_SetAlarm_IT+0x270>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2202      	movs	r2, #2
 800722c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d137      	bne.n	80072a4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2200      	movs	r2, #0
 8007246:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f9e3 	bl	8007618 <RTC_ByteToBcd2>
 8007252:	4603      	mov	r3, r0
 8007254:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f9dc 	bl	8007618 <RTC_ByteToBcd2>
 8007260:	4603      	mov	r3, r0
 8007262:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007264:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	789b      	ldrb	r3, [r3, #2]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f9d4 	bl	8007618 <RTC_ByteToBcd2>
 8007270:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007272:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	78db      	ldrb	r3, [r3, #3]
 800727a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800727c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 f9c6 	bl	8007618 <RTC_ByteToBcd2>
 800728c:	4603      	mov	r3, r0
 800728e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007290:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007298:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800729e:	4313      	orrs	r3, r2
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	e023      	b.n	80072ec <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80072c4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80072ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	78db      	ldrb	r3, [r3, #3]
 80072d0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80072d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80072dc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80072e2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80072e8:	4313      	orrs	r3, r2
 80072ea:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	22ca      	movs	r2, #202	; 0xca
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2253      	movs	r2, #83	; 0x53
 8007306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007310:	d141      	bne.n	8007396 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007320:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007332:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	617a      	str	r2, [r7, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	22ff      	movs	r2, #255	; 0xff
 8007344:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2203      	movs	r2, #3
 800734a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e082      	b.n	800745c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0e7      	beq.n	8007334 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007382:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007392:	609a      	str	r2, [r3, #8]
 8007394:	e04b      	b.n	800742e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073a4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80073b6:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RTC_SetAlarm_IT+0x278>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <HAL_RTC_SetAlarm_IT+0x27c>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	0adb      	lsrs	r3, r3, #11
 80073c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2203      	movs	r2, #3
 80073e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e035      	b.n	800745c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0e7      	beq.n	80073ce <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800742c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <HAL_RTC_SetAlarm_IT+0x280>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a0e      	ldr	r2, [pc, #56]	; (800746c <HAL_RTC_SetAlarm_IT+0x280>)
 8007434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007438:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <HAL_RTC_SetAlarm_IT+0x280>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	4a0b      	ldr	r2, [pc, #44]	; (800746c <HAL_RTC_SetAlarm_IT+0x280>)
 8007440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007444:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	22ff      	movs	r2, #255	; 0xff
 800744c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3724      	adds	r7, #36	; 0x24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd90      	pop	{r4, r7, pc}
 8007464:	20000000 	.word	0x20000000
 8007468:	10624dd3 	.word	0x10624dd3
 800746c:	40013c00 	.word	0x40013c00

08007470 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d012      	beq.n	80074ac <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f831 	bl	80074fc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80074aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d012      	beq.n	80074e0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f8c2 	bl	8007652 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f462 7220 	orn	r2, r2, #640	; 0x280
 80074de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80074e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074e6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	775a      	strb	r2, [r3, #29]
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40013c00 	.word	0x40013c00

080074fc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800752a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800752c:	f7fb fbb8 	bl	8002ca0 <HAL_GetTick>
 8007530:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007532:	e009      	b.n	8007548 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007534:	f7fb fbb4 	bl	8002ca0 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007542:	d901      	bls.n	8007548 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e007      	b.n	8007558 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0ee      	beq.n	8007534 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d122      	bne.n	80075c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800758c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800758e:	f7fb fb87 	bl	8002ca0 <HAL_GetTick>
 8007592:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007594:	e00c      	b.n	80075b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007596:	f7fb fb83 	bl	8002ca0 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a4:	d904      	bls.n	80075b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2204      	movs	r2, #4
 80075aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <RTC_EnterInitMode+0x64>
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d1e8      	bne.n	8007596 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff89 	bl	8007510 <HAL_RTC_WaitForSynchro>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007626:	e005      	b.n	8007634 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	3301      	adds	r3, #1
 800762c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	3b0a      	subs	r3, #10
 8007632:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b09      	cmp	r3, #9
 8007638:	d8f6      	bhi.n	8007628 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	b2da      	uxtb	r2, r3
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	4313      	orrs	r3, r2
 8007644:	b2db      	uxtb	r3, r3
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e022      	b.n	80076be <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fa fe7e 	bl	800238c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2203      	movs	r2, #3
 8007694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f815 	bl	80076c8 <HAL_SD_InitCard>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e00a      	b.n	80076be <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076c8:	b5b0      	push	{r4, r5, r7, lr}
 80076ca:	b08e      	sub	sp, #56	; 0x38
 80076cc:	af04      	add	r7, sp, #16
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80076e4:	2376      	movs	r3, #118	; 0x76
 80076e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681d      	ldr	r5, [r3, #0]
 80076ec:	466c      	mov	r4, sp
 80076ee:	f107 0314 	add.w	r3, r7, #20
 80076f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007700:	4628      	mov	r0, r5
 8007702:	f002 fc97 	bl	800a034 <SDIO_Init>
 8007706:	4603      	mov	r3, r0
 8007708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800770c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e04f      	b.n	80077b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007718:	4b29      	ldr	r3, [pc, #164]	; (80077c0 <HAL_SD_InitCard+0xf8>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f002 fccf 	bl	800a0c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <HAL_SD_InitCard+0xf8>)
 800772a:	2201      	movs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800772e:	2002      	movs	r0, #2
 8007730:	f7fb fac2 	bl	8002cb8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fce5 	bl	8008104 <SD_PowerON>
 800773a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e02e      	b.n	80077b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc04 	bl	8007f68 <SD_InitCard>
 8007760:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e01b      	b.n	80077b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007788:	4618      	mov	r0, r3
 800778a:	f002 fd02 	bl	800a192 <SDMMC_CmdBlockLength>
 800778e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00f      	beq.n	80077b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <HAL_SD_InitCard+0xfc>)
 800779c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3728      	adds	r7, #40	; 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bdb0      	pop	{r4, r5, r7, pc}
 80077c0:	422580a0 	.word	0x422580a0
 80077c4:	004005ff 	.word	0x004005ff

080077c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_SD_IRQHandler+0x2e>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fd3e 	bl	8008270 <SD_Read_IT>
 80077f4:	e155      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 808f 	beq.w	8007924 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800781e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007822:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d039      	beq.n	80078b2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <HAL_SD_IRQHandler+0x8a>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d011      	beq.n	8007876 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f002 fcbe 	bl	800a1d8 <SDMMC_CmdStopTransfer>
 800785c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f933 	bl	8007adc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f240 523a 	movw	r2, #1338	; 0x53a
 800787e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <HAL_SD_IRQHandler+0xda>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f910 	bl	8007ac8 <HAL_SD_RxCpltCallback>
 80078a8:	e0fb      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f902 	bl	8007ab4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80078b0:	e0f7      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80f2 	beq.w	8007aa2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d011      	beq.n	80078ec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f002 fc83 	bl	800a1d8 <SDMMC_CmdStopTransfer>
 80078d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f8f8 	bl	8007adc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 80d5 	bne.w	8007aa2 <HAL_SD_IRQHandler+0x2da>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 80cf 	bne.w	8007aa2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0208 	bic.w	r2, r2, #8
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8c9 	bl	8007ab4 <HAL_SD_TxCpltCallback>
}
 8007922:	e0be      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_SD_IRQHandler+0x17c>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fce8 	bl	8008312 <SD_Write_IT>
 8007942:	e0ae      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 80a7 	beq.w	8007aa2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	f043 0202 	orr.w	r2, r3, #2
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	f043 0208 	orr.w	r2, r3, #8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	f043 0220 	orr.w	r2, r3, #32
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	f043 0210 	orr.w	r2, r3, #16
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80079d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f002 fbfc 	bl	800a1d8 <SDMMC_CmdStopTransfer>
 80079e0:	4602      	mov	r2, r0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f869 	bl	8007adc <HAL_SD_ErrorCallback>
}
 8007a0a:	e04a      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d045      	beq.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <HAL_SD_IRQHandler+0x262>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d011      	beq.n	8007a4e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <HAL_SD_IRQHandler+0x2e4>)
 8007a30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fc f96e 	bl	8003d18 <HAL_DMA_Abort_IT>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02f      	beq.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fa20 	bl	8007e8c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007a4c:	e029      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <HAL_SD_IRQHandler+0x29a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d011      	beq.n	8007a86 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <HAL_SD_IRQHandler+0x2e8>)
 8007a68:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fc f952 	bl	8003d18 <HAL_DMA_Abort_IT>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d013      	beq.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fa3b 	bl	8007efa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007a84:	e00d      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f828 	bl	8007af0 <HAL_SD_AbortCallback>
}
 8007aa0:	e7ff      	b.n	8007aa2 <HAL_SD_IRQHandler+0x2da>
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	08007e8d 	.word	0x08007e8d
 8007ab0:	08007efb 	.word	0x08007efb

08007ab4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b12:	0f9b      	lsrs	r3, r3, #30
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1e:	0e9b      	lsrs	r3, r3, #26
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b30:	0e1b      	lsrs	r3, r3, #24
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4e:	0a1b      	lsrs	r3, r3, #8
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b82:	0bdb      	lsrs	r3, r3, #15
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b94:	0b9b      	lsrs	r3, r3, #14
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba6:	0b5b      	lsrs	r3, r3, #13
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb8:	0b1b      	lsrs	r3, r3, #12
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d163      	bne.n	8007c9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd8:	009a      	lsls	r2, r3, #2
 8007bda:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007bde:	4013      	ands	r3, r2
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007be4:	0f92      	lsrs	r2, r2, #30
 8007be6:	431a      	orrs	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf0:	0edb      	lsrs	r3, r3, #27
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c02:	0e1b      	lsrs	r3, r3, #24
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c14:	0d5b      	lsrs	r3, r3, #21
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c26:	0c9b      	lsrs	r3, r3, #18
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c38:	0bdb      	lsrs	r3, r3, #15
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	7e1b      	ldrb	r3, [r3, #24]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c66:	fb03 f202 	mul.w	r2, r3, r2
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	7a1b      	ldrb	r3, [r3, #8]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	2201      	movs	r2, #1
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007c88:	0a52      	lsrs	r2, r2, #9
 8007c8a:	fb03 f202 	mul.w	r2, r3, r2
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60
 8007c9a:	e031      	b.n	8007d00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d11d      	bne.n	8007ce0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	029a      	lsls	r2, r3, #10
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	661a      	str	r2, [r3, #96]	; 0x60
 8007cde:	e00f      	b.n	8007d00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a58      	ldr	r2, [pc, #352]	; (8007e48 <HAL_SD_GetCardCSD+0x344>)
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e09d      	b.n	8007e3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d04:	0b9b      	lsrs	r3, r3, #14
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d16:	09db      	lsrs	r3, r3, #7
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	0fdb      	lsrs	r3, r3, #31
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	0f5b      	lsrs	r3, r3, #29
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	0e9b      	lsrs	r3, r3, #26
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	0d9b      	lsrs	r3, r3, #22
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	0d5b      	lsrs	r3, r3, #21
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	0c1b      	lsrs	r3, r3, #16
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	0bdb      	lsrs	r3, r3, #15
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	0b9b      	lsrs	r3, r3, #14
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd2:	0b5b      	lsrs	r3, r3, #13
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de6:	0b1b      	lsrs	r3, r3, #12
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfa:	0a9b      	lsrs	r3, r3, #10
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	004005ff 	.word	0x004005ff

08007e4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007e58:	f107 030c 	add.w	r3, r7, #12
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9de 	bl	8008220 <SD_SendStatus>
 8007e64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	0a5b      	lsrs	r3, r3, #9
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007e82:	693b      	ldr	r3, [r7, #16]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff ffd1 	bl	8007e4c <HAL_SD_GetCardState>
 8007eaa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b06      	cmp	r3, #6
 8007ebe:	d002      	beq.n	8007ec6 <SD_DMATxAbort+0x3a>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d10a      	bne.n	8007edc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 f984 	bl	800a1d8 <SDMMC_CmdStopTransfer>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff fe03 	bl	8007af0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007eea:	e002      	b.n	8007ef2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7ff fdf5 	bl	8007adc <HAL_SD_ErrorCallback>
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff9a 	bl	8007e4c <HAL_SD_GetCardState>
 8007f18:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d002      	beq.n	8007f34 <SD_DMARxAbort+0x3a>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	d10a      	bne.n	8007f4a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 f94d 	bl	800a1d8 <SDMMC_CmdStopTransfer>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff fdcc 	bl	8007af0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007f58:	e002      	b.n	8007f60 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff fdbe 	bl	8007adc <HAL_SD_ErrorCallback>
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f68:	b5b0      	push	{r4, r5, r7, lr}
 8007f6a:	b094      	sub	sp, #80	; 0x50
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f70:	2301      	movs	r3, #1
 8007f72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f002 f8b2 	bl	800a0e2 <SDIO_GetPowerState>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f88:	e0b8      	b.n	80080fc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d02f      	beq.n	8007ff2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f9e5 	bl	800a366 <SDMMC_CmdSendCID>
 8007f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <SD_InitCard+0x40>
    {
      return errorstate;
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	e0a9      	b.n	80080fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f002 f8dc 	bl	800a16c <SDIO_GetResponse>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2104      	movs	r1, #4
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f002 f8d3 	bl	800a16c <SDIO_GetResponse>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2108      	movs	r1, #8
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f002 f8ca 	bl	800a16c <SDIO_GetResponse>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	210c      	movs	r1, #12
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 f8c1 	bl	800a16c <SDIO_GetResponse>
 8007fea:	4602      	mov	r2, r0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d00d      	beq.n	8008016 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f107 020e 	add.w	r2, r7, #14
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f002 f9eb 	bl	800a3e0 <SDMMC_CmdSetRelAdd>
 800800a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800800c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <SD_InitCard+0xae>
    {
      return errorstate;
 8008012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008014:	e072      	b.n	80080fc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	2b03      	cmp	r3, #3
 800801c:	d036      	beq.n	800808c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800801e:	89fb      	ldrh	r3, [r7, #14]
 8008020:	461a      	mov	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f002 f9b5 	bl	800a3a2 <SDMMC_CmdSendCSD>
 8008038:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800803a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008042:	e05b      	b.n	80080fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f002 f88e 	bl	800a16c <SDIO_GetResponse>
 8008050:	4602      	mov	r2, r0
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2104      	movs	r1, #4
 800805c:	4618      	mov	r0, r3
 800805e:	f002 f885 	bl	800a16c <SDIO_GetResponse>
 8008062:	4602      	mov	r2, r0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2108      	movs	r1, #8
 800806e:	4618      	mov	r0, r3
 8008070:	f002 f87c 	bl	800a16c <SDIO_GetResponse>
 8008074:	4602      	mov	r2, r0
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	210c      	movs	r1, #12
 8008080:	4618      	mov	r0, r3
 8008082:	f002 f873 	bl	800a16c <SDIO_GetResponse>
 8008086:	4602      	mov	r2, r0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2104      	movs	r1, #4
 8008092:	4618      	mov	r0, r3
 8008094:	f002 f86a 	bl	800a16c <SDIO_GetResponse>
 8008098:	4603      	mov	r3, r0
 800809a:	0d1a      	lsrs	r2, r3, #20
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80080a0:	f107 0310 	add.w	r3, r7, #16
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fd2c 	bl	8007b04 <HAL_SD_GetCardCSD>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080b6:	e021      	b.n	80080fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6819      	ldr	r1, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c0:	041b      	lsls	r3, r3, #16
 80080c2:	2200      	movs	r2, #0
 80080c4:	461c      	mov	r4, r3
 80080c6:	4615      	mov	r5, r2
 80080c8:	4622      	mov	r2, r4
 80080ca:	462b      	mov	r3, r5
 80080cc:	4608      	mov	r0, r1
 80080ce:	f002 f8a5 	bl	800a21c <SDMMC_CmdSelDesel>
 80080d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <SD_InitCard+0x176>
  {
    return errorstate;
 80080da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080dc:	e00e      	b.n	80080fc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681d      	ldr	r5, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	466c      	mov	r4, sp
 80080e6:	f103 0210 	add.w	r2, r3, #16
 80080ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80080ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080f0:	3304      	adds	r3, #4
 80080f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080f4:	4628      	mov	r0, r5
 80080f6:	f001 ff9d 	bl	800a034 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3740      	adds	r7, #64	; 0x40
 8008100:	46bd      	mov	sp, r7
 8008102:	bdb0      	pop	{r4, r5, r7, pc}

08008104 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f002 f8a0 	bl	800a262 <SDMMC_CmdGoIdleState>
 8008122:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <SD_PowerON+0x2a>
  {
    return errorstate;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	e072      	b.n	8008214 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f002 f8b3 	bl	800a29e <SDMMC_CmdOperCond>
 8008138:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00d      	beq.n	800815c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f002 f889 	bl	800a262 <SDMMC_CmdGoIdleState>
 8008150:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	e05b      	b.n	8008214 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008166:	2b01      	cmp	r3, #1
 8008168:	d137      	bne.n	80081da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2100      	movs	r1, #0
 8008170:	4618      	mov	r0, r3
 8008172:	f002 f8b3 	bl	800a2dc <SDMMC_CmdAppCommand>
 8008176:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d02d      	beq.n	80081da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800817e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008182:	e047      	b.n	8008214 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f002 f8a6 	bl	800a2dc <SDMMC_CmdAppCommand>
 8008190:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <SD_PowerON+0x98>
    {
      return errorstate;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	e03b      	b.n	8008214 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	491e      	ldr	r1, [pc, #120]	; (800821c <SD_PowerON+0x118>)
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 f8bc 	bl	800a320 <SDMMC_CmdAppOperCommand>
 80081a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081b4:	e02e      	b.n	8008214 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 ffd5 	bl	800a16c <SDIO_GetResponse>
 80081c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	0fdb      	lsrs	r3, r3, #31
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <SD_PowerON+0xcc>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <SD_PowerON+0xce>
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]

    count++;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d802      	bhi.n	80081ea <SD_PowerON+0xe6>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0cc      	beq.n	8008184 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d902      	bls.n	80081fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80081f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081f8:	e00c      	b.n	8008214 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	645a      	str	r2, [r3, #68]	; 0x44
 800820a:	e002      	b.n	8008212 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	c1100000 	.word	0xc1100000

08008220 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008234:	e018      	b.n	8008268 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f002 f8ed 	bl	800a422 <SDMMC_CmdSendStatus>
 8008248:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	e009      	b.n	8008268 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f001 ff86 	bl	800a16c <SDIO_GetResponse>
 8008260:	4602      	mov	r2, r0
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d03f      	beq.n	800830a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	e033      	b.n	80082f8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fef8 	bl	800a08a <SDIO_ReadFIFO>
 800829a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	3b01      	subs	r3, #1
 80082da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	0e1b      	lsrs	r3, r3, #24
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3301      	adds	r3, #1
 80082ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	3301      	adds	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b07      	cmp	r3, #7
 80082fc:	d9c8      	bls.n	8008290 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800830a:	bf00      	nop
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b086      	sub	sp, #24
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d043      	beq.n	80083b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e037      	b.n	80083a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3301      	adds	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3b01      	subs	r3, #1
 8008342:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	021a      	lsls	r2, r3, #8
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4313      	orrs	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3b01      	subs	r3, #1
 800835a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	041a      	lsls	r2, r3, #16
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	4313      	orrs	r3, r2
 8008366:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3b01      	subs	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	061a      	lsls	r2, r3, #24
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4313      	orrs	r3, r2
 800837e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3b01      	subs	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f107 0208 	add.w	r2, r7, #8
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fe84 	bl	800a0a4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	3301      	adds	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b07      	cmp	r3, #7
 80083a6:	d9c4      	bls.n	8008332 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e07b      	b.n	80084c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d108      	bne.n	80083e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083de:	d009      	beq.n	80083f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	61da      	str	r2, [r3, #28]
 80083e6:	e005      	b.n	80083f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7fa f864 	bl	80024dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800842a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008478:	ea42 0103 	orr.w	r1, r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	0c1b      	lsrs	r3, r3, #16
 8008492:	f003 0104 	and.w	r1, r3, #4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	f003 0210 	and.w	r2, r3, #16
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b088      	sub	sp, #32
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_SPI_Transmit+0x22>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e126      	b.n	800873e <HAL_SPI_Transmit+0x270>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084f8:	f7fa fbd2 	bl	8002ca0 <HAL_GetTick>
 80084fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b01      	cmp	r3, #1
 800850c:	d002      	beq.n	8008514 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800850e:	2302      	movs	r3, #2
 8008510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008512:	e10b      	b.n	800872c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <HAL_SPI_Transmit+0x52>
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008524:	e102      	b.n	800872c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2203      	movs	r2, #3
 800852a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856c:	d10f      	bne.n	800858e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800857c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800858c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008598:	2b40      	cmp	r3, #64	; 0x40
 800859a:	d007      	beq.n	80085ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b4:	d14b      	bne.n	800864e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <HAL_SPI_Transmit+0xf6>
 80085be:	8afb      	ldrh	r3, [r7, #22]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d13e      	bne.n	8008642 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	881a      	ldrh	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	1c9a      	adds	r2, r3, #2
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085de:	b29b      	uxth	r3, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085e8:	e02b      	b.n	8008642 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d112      	bne.n	800861e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	1c9a      	adds	r2, r3, #2
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	86da      	strh	r2, [r3, #54]	; 0x36
 800861c:	e011      	b.n	8008642 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800861e:	f7fa fb3f 	bl	8002ca0 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d803      	bhi.n	8008636 <HAL_SPI_Transmit+0x168>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d102      	bne.n	800863c <HAL_SPI_Transmit+0x16e>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008640:	e074      	b.n	800872c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1ce      	bne.n	80085ea <HAL_SPI_Transmit+0x11c>
 800864c:	e04c      	b.n	80086e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_SPI_Transmit+0x18e>
 8008656:	8afb      	ldrh	r3, [r7, #22]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d140      	bne.n	80086de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	7812      	ldrb	r2, [r2, #0]
 8008668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008682:	e02c      	b.n	80086de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b02      	cmp	r3, #2
 8008690:	d113      	bne.n	80086ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	330c      	adds	r3, #12
 800869c:	7812      	ldrb	r2, [r2, #0]
 800869e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80086b8:	e011      	b.n	80086de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ba:	f7fa faf1 	bl	8002ca0 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d803      	bhi.n	80086d2 <HAL_SPI_Transmit+0x204>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d102      	bne.n	80086d8 <HAL_SPI_Transmit+0x20a>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086dc:	e026      	b.n	800872c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1cd      	bne.n	8008684 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f8b3 	bl	8008858 <SPI_EndRxTxTransaction>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	613b      	str	r3, [r7, #16]
 800871a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	77fb      	strb	r3, [r7, #31]
 8008728:	e000      	b.n	800872c <HAL_SPI_Transmit+0x25e>
  }

error:
 800872a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800873c:	7ffb      	ldrb	r3, [r7, #31]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	4613      	mov	r3, r2
 8008756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008758:	f7fa faa2 	bl	8002ca0 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	1a9b      	subs	r3, r3, r2
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	4413      	add	r3, r2
 8008766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008768:	f7fa fa9a 	bl	8002ca0 <HAL_GetTick>
 800876c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800876e:	4b39      	ldr	r3, [pc, #228]	; (8008854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	015b      	lsls	r3, r3, #5
 8008774:	0d1b      	lsrs	r3, r3, #20
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	fb02 f303 	mul.w	r3, r2, r3
 800877c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800877e:	e054      	b.n	800882a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008786:	d050      	beq.n	800882a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008788:	f7fa fa8a 	bl	8002ca0 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	429a      	cmp	r2, r3
 8008796:	d902      	bls.n	800879e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d13d      	bne.n	800881a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087b6:	d111      	bne.n	80087dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087c0:	d004      	beq.n	80087cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ca:	d107      	bne.n	80087dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e4:	d10f      	bne.n	8008806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e017      	b.n	800884a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	3b01      	subs	r3, #1
 8008828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4013      	ands	r3, r2
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	bf0c      	ite	eq
 800883a:	2301      	moveq	r3, #1
 800883c:	2300      	movne	r3, #0
 800883e:	b2db      	uxtb	r3, r3
 8008840:	461a      	mov	r2, r3
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	429a      	cmp	r2, r3
 8008846:	d19b      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000000 	.word	0x20000000

08008858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <SPI_EndRxTxTransaction+0x7c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1b      	ldr	r2, [pc, #108]	; (80088d8 <SPI_EndRxTxTransaction+0x80>)
 800886a:	fba2 2303 	umull	r2, r3, r2, r3
 800886e:	0d5b      	lsrs	r3, r3, #21
 8008870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008874:	fb02 f303 	mul.w	r3, r2, r3
 8008878:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008882:	d112      	bne.n	80088aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	2180      	movs	r1, #128	; 0x80
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7ff ff5a 	bl	8008748 <SPI_WaitFlagStateUntilTimeout>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d016      	beq.n	80088c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	f043 0220 	orr.w	r2, r3, #32
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e00f      	b.n	80088ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d0f2      	beq.n	80088aa <SPI_EndRxTxTransaction+0x52>
 80088c4:	e000      	b.n	80088c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80088c6:	bf00      	nop
  }

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000000 	.word	0x20000000
 80088d8:	165e9f81 	.word	0x165e9f81

080088dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e041      	b.n	8008972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7f9 fe32 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3304      	adds	r3, #4
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f000 fcd6 	bl	80092cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d001      	beq.n	8008994 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e046      	b.n	8008a22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <HAL_TIM_Base_Start+0xb4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d022      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ae:	d01d      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1f      	ldr	r2, [pc, #124]	; (8008a34 <HAL_TIM_Base_Start+0xb8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d018      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <HAL_TIM_Base_Start+0xbc>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d013      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <HAL_TIM_Base_Start+0xc0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00e      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <HAL_TIM_Base_Start+0xc4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d009      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a19      	ldr	r2, [pc, #100]	; (8008a44 <HAL_TIM_Base_Start+0xc8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d004      	beq.n	80089ec <HAL_TIM_Base_Start+0x70>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <HAL_TIM_Base_Start+0xcc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d111      	bne.n	8008a10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b06      	cmp	r3, #6
 80089fc:	d010      	beq.n	8008a20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f042 0201 	orr.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0e:	e007      	b.n	8008a20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40010000 	.word	0x40010000
 8008a34:	40000400 	.word	0x40000400
 8008a38:	40000800 	.word	0x40000800
 8008a3c:	40000c00 	.word	0x40000c00
 8008a40:	40010400 	.word	0x40010400
 8008a44:	40014000 	.word	0x40014000
 8008a48:	40001800 	.word	0x40001800

08008a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e041      	b.n	8008ae2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f839 	bl	8008aea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f000 fc1e 	bl	80092cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_TIM_PWM_Start+0x24>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	bf14      	ite	ne
 8008b1c:	2301      	movne	r3, #1
 8008b1e:	2300      	moveq	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	e022      	b.n	8008b6a <HAL_TIM_PWM_Start+0x6a>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d109      	bne.n	8008b3e <HAL_TIM_PWM_Start+0x3e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	bf14      	ite	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	2300      	moveq	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	e015      	b.n	8008b6a <HAL_TIM_PWM_Start+0x6a>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d109      	bne.n	8008b58 <HAL_TIM_PWM_Start+0x58>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	bf14      	ite	ne
 8008b50:	2301      	movne	r3, #1
 8008b52:	2300      	moveq	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	e008      	b.n	8008b6a <HAL_TIM_PWM_Start+0x6a>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	bf14      	ite	ne
 8008b64:	2301      	movne	r3, #1
 8008b66:	2300      	moveq	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e07c      	b.n	8008c6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <HAL_TIM_PWM_Start+0x82>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b80:	e013      	b.n	8008baa <HAL_TIM_PWM_Start+0xaa>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d104      	bne.n	8008b92 <HAL_TIM_PWM_Start+0x92>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b90:	e00b      	b.n	8008baa <HAL_TIM_PWM_Start+0xaa>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	d104      	bne.n	8008ba2 <HAL_TIM_PWM_Start+0xa2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ba0:	e003      	b.n	8008baa <HAL_TIM_PWM_Start+0xaa>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fe74 	bl	80098a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a2d      	ldr	r2, [pc, #180]	; (8008c74 <HAL_TIM_PWM_Start+0x174>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d004      	beq.n	8008bcc <HAL_TIM_PWM_Start+0xcc>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a2c      	ldr	r2, [pc, #176]	; (8008c78 <HAL_TIM_PWM_Start+0x178>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d101      	bne.n	8008bd0 <HAL_TIM_PWM_Start+0xd0>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <HAL_TIM_PWM_Start+0xd2>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d007      	beq.n	8008be6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a22      	ldr	r2, [pc, #136]	; (8008c74 <HAL_TIM_PWM_Start+0x174>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d022      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf8:	d01d      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1f      	ldr	r2, [pc, #124]	; (8008c7c <HAL_TIM_PWM_Start+0x17c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d018      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <HAL_TIM_PWM_Start+0x180>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d013      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <HAL_TIM_PWM_Start+0x184>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00e      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <HAL_TIM_PWM_Start+0x178>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d009      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <HAL_TIM_PWM_Start+0x188>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d004      	beq.n	8008c36 <HAL_TIM_PWM_Start+0x136>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a16      	ldr	r2, [pc, #88]	; (8008c8c <HAL_TIM_PWM_Start+0x18c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d111      	bne.n	8008c5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b06      	cmp	r3, #6
 8008c46:	d010      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c58:	e007      	b.n	8008c6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f042 0201 	orr.w	r2, r2, #1
 8008c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	40010000 	.word	0x40010000
 8008c78:	40010400 	.word	0x40010400
 8008c7c:	40000400 	.word	0x40000400
 8008c80:	40000800 	.word	0x40000800
 8008c84:	40000c00 	.word	0x40000c00
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40001800 	.word	0x40001800

08008c90 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e041      	b.n	8008d28 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f839 	bl	8008d30 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f000 fafb 	bl	80092cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0208 	bic.w	r2, r2, #8
 8008ce4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6819      	ldr	r1, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d122      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d11b      	bne.n	8008da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0202 	mvn.w	r2, #2
 8008d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa81 	bl	800928e <HAL_TIM_IC_CaptureCallback>
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa73 	bl	800927a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa84 	bl	80092a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d122      	bne.n	8008df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d11b      	bne.n	8008df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0204 	mvn.w	r2, #4
 8008dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa57 	bl	800928e <HAL_TIM_IC_CaptureCallback>
 8008de0:	e005      	b.n	8008dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa49 	bl	800927a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fa5a 	bl	80092a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d122      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f003 0308 	and.w	r3, r3, #8
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d11b      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f06f 0208 	mvn.w	r2, #8
 8008e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fa2d 	bl	800928e <HAL_TIM_IC_CaptureCallback>
 8008e34:	e005      	b.n	8008e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa1f 	bl	800927a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fa30 	bl	80092a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d122      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	d11b      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f06f 0210 	mvn.w	r2, #16
 8008e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2208      	movs	r2, #8
 8008e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa03 	bl	800928e <HAL_TIM_IC_CaptureCallback>
 8008e88:	e005      	b.n	8008e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9f5 	bl	800927a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa06 	bl	80092a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d10e      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d107      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f06f 0201 	mvn.w	r2, #1
 8008ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9cf 	bl	8009266 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed2:	2b80      	cmp	r3, #128	; 0x80
 8008ed4:	d10e      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee0:	2b80      	cmp	r3, #128	; 0x80
 8008ee2:	d107      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fdd4 	bl	8009a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d10e      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d107      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f9cb 	bl	80092b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d10e      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d107      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f06f 0220 	mvn.w	r2, #32
 8008f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd9e 	bl	8009a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e0ae      	b.n	80090d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b0c      	cmp	r3, #12
 8008f7e:	f200 809f 	bhi.w	80090c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	080090c1 	.word	0x080090c1
 8008f90:	080090c1 	.word	0x080090c1
 8008f94:	080090c1 	.word	0x080090c1
 8008f98:	08008ffd 	.word	0x08008ffd
 8008f9c:	080090c1 	.word	0x080090c1
 8008fa0:	080090c1 	.word	0x080090c1
 8008fa4:	080090c1 	.word	0x080090c1
 8008fa8:	0800903f 	.word	0x0800903f
 8008fac:	080090c1 	.word	0x080090c1
 8008fb0:	080090c1 	.word	0x080090c1
 8008fb4:	080090c1 	.word	0x080090c1
 8008fb8:	0800907f 	.word	0x0800907f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fa22 	bl	800940c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0208 	orr.w	r2, r2, #8
 8008fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	699a      	ldr	r2, [r3, #24]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0204 	bic.w	r2, r2, #4
 8008fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6999      	ldr	r1, [r3, #24]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	619a      	str	r2, [r3, #24]
      break;
 8008ffa:	e064      	b.n	80090c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fa72 	bl	80094ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6999      	ldr	r1, [r3, #24]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	021a      	lsls	r2, r3, #8
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	619a      	str	r2, [r3, #24]
      break;
 800903c:	e043      	b.n	80090c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fac7 	bl	80095d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0208 	orr.w	r2, r2, #8
 8009058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0204 	bic.w	r2, r2, #4
 8009068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69d9      	ldr	r1, [r3, #28]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	691a      	ldr	r2, [r3, #16]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	61da      	str	r2, [r3, #28]
      break;
 800907c:	e023      	b.n	80090c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fb1b 	bl	80096c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69da      	ldr	r2, [r3, #28]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69d9      	ldr	r1, [r3, #28]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	021a      	lsls	r2, r3, #8
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	61da      	str	r2, [r3, #28]
      break;
 80090be:	e002      	b.n	80090c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75fb      	strb	r3, [r7, #23]
      break;
 80090c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_TIM_ConfigClockSource+0x1c>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e0b4      	b.n	800925e <HAL_TIM_ConfigClockSource+0x186>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800911a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800912c:	d03e      	beq.n	80091ac <HAL_TIM_ConfigClockSource+0xd4>
 800912e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009132:	f200 8087 	bhi.w	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 8009136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800913a:	f000 8086 	beq.w	800924a <HAL_TIM_ConfigClockSource+0x172>
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d87f      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 8009144:	2b70      	cmp	r3, #112	; 0x70
 8009146:	d01a      	beq.n	800917e <HAL_TIM_ConfigClockSource+0xa6>
 8009148:	2b70      	cmp	r3, #112	; 0x70
 800914a:	d87b      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 800914c:	2b60      	cmp	r3, #96	; 0x60
 800914e:	d050      	beq.n	80091f2 <HAL_TIM_ConfigClockSource+0x11a>
 8009150:	2b60      	cmp	r3, #96	; 0x60
 8009152:	d877      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 8009154:	2b50      	cmp	r3, #80	; 0x50
 8009156:	d03c      	beq.n	80091d2 <HAL_TIM_ConfigClockSource+0xfa>
 8009158:	2b50      	cmp	r3, #80	; 0x50
 800915a:	d873      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	d058      	beq.n	8009212 <HAL_TIM_ConfigClockSource+0x13a>
 8009160:	2b40      	cmp	r3, #64	; 0x40
 8009162:	d86f      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 8009164:	2b30      	cmp	r3, #48	; 0x30
 8009166:	d064      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x15a>
 8009168:	2b30      	cmp	r3, #48	; 0x30
 800916a:	d86b      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 800916c:	2b20      	cmp	r3, #32
 800916e:	d060      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x15a>
 8009170:	2b20      	cmp	r3, #32
 8009172:	d867      	bhi.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d05c      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x15a>
 8009178:	2b10      	cmp	r3, #16
 800917a:	d05a      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x15a>
 800917c:	e062      	b.n	8009244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	6899      	ldr	r1, [r3, #8]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f000 fb67 	bl	8009860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	609a      	str	r2, [r3, #8]
      break;
 80091aa:	e04f      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	6899      	ldr	r1, [r3, #8]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f000 fb50 	bl	8009860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091ce:	609a      	str	r2, [r3, #8]
      break;
 80091d0:	e03c      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6859      	ldr	r1, [r3, #4]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	461a      	mov	r2, r3
 80091e0:	f000 fac4 	bl	800976c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2150      	movs	r1, #80	; 0x50
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fb1d 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 80091f0:	e02c      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6859      	ldr	r1, [r3, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	461a      	mov	r2, r3
 8009200:	f000 fae3 	bl	80097ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2160      	movs	r1, #96	; 0x60
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fb0d 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 8009210:	e01c      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	6859      	ldr	r1, [r3, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	461a      	mov	r2, r3
 8009220:	f000 faa4 	bl	800976c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2140      	movs	r1, #64	; 0x40
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fafd 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 8009230:	e00c      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f000 faf4 	bl	800982a <TIM_ITRx_SetConfig>
      break;
 8009242:	e003      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
      break;
 8009248:	e000      	b.n	800924c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800924a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092aa:	bf00      	nop
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a40      	ldr	r2, [pc, #256]	; (80093e0 <TIM_Base_SetConfig+0x114>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d013      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ea:	d00f      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a3d      	ldr	r2, [pc, #244]	; (80093e4 <TIM_Base_SetConfig+0x118>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00b      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a3c      	ldr	r2, [pc, #240]	; (80093e8 <TIM_Base_SetConfig+0x11c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d007      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a3b      	ldr	r2, [pc, #236]	; (80093ec <TIM_Base_SetConfig+0x120>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d003      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a3a      	ldr	r2, [pc, #232]	; (80093f0 <TIM_Base_SetConfig+0x124>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d108      	bne.n	800931e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a2f      	ldr	r2, [pc, #188]	; (80093e0 <TIM_Base_SetConfig+0x114>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d02b      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932c:	d027      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2c      	ldr	r2, [pc, #176]	; (80093e4 <TIM_Base_SetConfig+0x118>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d023      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a2b      	ldr	r2, [pc, #172]	; (80093e8 <TIM_Base_SetConfig+0x11c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d01f      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2a      	ldr	r2, [pc, #168]	; (80093ec <TIM_Base_SetConfig+0x120>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d01b      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a29      	ldr	r2, [pc, #164]	; (80093f0 <TIM_Base_SetConfig+0x124>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d017      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a28      	ldr	r2, [pc, #160]	; (80093f4 <TIM_Base_SetConfig+0x128>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d013      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a27      	ldr	r2, [pc, #156]	; (80093f8 <TIM_Base_SetConfig+0x12c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d00f      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a26      	ldr	r2, [pc, #152]	; (80093fc <TIM_Base_SetConfig+0x130>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00b      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a25      	ldr	r2, [pc, #148]	; (8009400 <TIM_Base_SetConfig+0x134>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d007      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a24      	ldr	r2, [pc, #144]	; (8009404 <TIM_Base_SetConfig+0x138>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d003      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a23      	ldr	r2, [pc, #140]	; (8009408 <TIM_Base_SetConfig+0x13c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d108      	bne.n	8009390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4313      	orrs	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <TIM_Base_SetConfig+0x114>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d003      	beq.n	80093c4 <TIM_Base_SetConfig+0xf8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a0c      	ldr	r2, [pc, #48]	; (80093f0 <TIM_Base_SetConfig+0x124>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d103      	bne.n	80093cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	691a      	ldr	r2, [r3, #16]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	615a      	str	r2, [r3, #20]
}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	40010000 	.word	0x40010000
 80093e4:	40000400 	.word	0x40000400
 80093e8:	40000800 	.word	0x40000800
 80093ec:	40000c00 	.word	0x40000c00
 80093f0:	40010400 	.word	0x40010400
 80093f4:	40014000 	.word	0x40014000
 80093f8:	40014400 	.word	0x40014400
 80093fc:	40014800 	.word	0x40014800
 8009400:	40001800 	.word	0x40001800
 8009404:	40001c00 	.word	0x40001c00
 8009408:	40002000 	.word	0x40002000

0800940c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f023 0201 	bic.w	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f023 0302 	bic.w	r3, r3, #2
 8009454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a20      	ldr	r2, [pc, #128]	; (80094e4 <TIM_OC1_SetConfig+0xd8>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d003      	beq.n	8009470 <TIM_OC1_SetConfig+0x64>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1f      	ldr	r2, [pc, #124]	; (80094e8 <TIM_OC1_SetConfig+0xdc>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d10c      	bne.n	800948a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f023 0308 	bic.w	r3, r3, #8
 8009476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f023 0304 	bic.w	r3, r3, #4
 8009488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a15      	ldr	r2, [pc, #84]	; (80094e4 <TIM_OC1_SetConfig+0xd8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_OC1_SetConfig+0x8e>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a14      	ldr	r2, [pc, #80]	; (80094e8 <TIM_OC1_SetConfig+0xdc>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d111      	bne.n	80094be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	621a      	str	r2, [r3, #32]
}
 80094d8:	bf00      	nop
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	40010000 	.word	0x40010000
 80094e8:	40010400 	.word	0x40010400

080094ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f023 0210 	bic.w	r2, r3, #16
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800951a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	021b      	lsls	r3, r3, #8
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f023 0320 	bic.w	r3, r3, #32
 8009536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4313      	orrs	r3, r2
 8009542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a22      	ldr	r2, [pc, #136]	; (80095d0 <TIM_OC2_SetConfig+0xe4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_OC2_SetConfig+0x68>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a21      	ldr	r2, [pc, #132]	; (80095d4 <TIM_OC2_SetConfig+0xe8>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10d      	bne.n	8009570 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800955a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <TIM_OC2_SetConfig+0xe4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_OC2_SetConfig+0x94>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <TIM_OC2_SetConfig+0xe8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d113      	bne.n	80095a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800958e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	4313      	orrs	r3, r2
 800959a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40010000 	.word	0x40010000
 80095d4:	40010400 	.word	0x40010400

080095d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0303 	bic.w	r3, r3, #3
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <TIM_OC3_SetConfig+0xe0>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC3_SetConfig+0x66>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a20      	ldr	r2, [pc, #128]	; (80096bc <TIM_OC3_SetConfig+0xe4>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d10d      	bne.n	800965a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <TIM_OC3_SetConfig+0xe0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d003      	beq.n	800966a <TIM_OC3_SetConfig+0x92>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a15      	ldr	r2, [pc, #84]	; (80096bc <TIM_OC3_SetConfig+0xe4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d113      	bne.n	8009692 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	011b      	lsls	r3, r3, #4
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	4313      	orrs	r3, r2
 8009684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	011b      	lsls	r3, r3, #4
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	4313      	orrs	r3, r2
 8009690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	621a      	str	r2, [r3, #32]
}
 80096ac:	bf00      	nop
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40010400 	.word	0x40010400

080096c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800970a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	031b      	lsls	r3, r3, #12
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a12      	ldr	r2, [pc, #72]	; (8009764 <TIM_OC4_SetConfig+0xa4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_OC4_SetConfig+0x68>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a11      	ldr	r2, [pc, #68]	; (8009768 <TIM_OC4_SetConfig+0xa8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d109      	bne.n	800973c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800972e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	019b      	lsls	r3, r3, #6
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	621a      	str	r2, [r3, #32]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40010000 	.word	0x40010000
 8009768:	40010400 	.word	0x40010400

0800976c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f023 030a 	bic.w	r3, r3, #10
 80097a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b087      	sub	sp, #28
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f023 0210 	bic.w	r2, r3, #16
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	031b      	lsls	r3, r3, #12
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	4313      	orrs	r3, r2
 8009810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	621a      	str	r2, [r3, #32]
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800982a:	b480      	push	{r7}
 800982c:	b085      	sub	sp, #20
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4313      	orrs	r3, r2
 8009848:	f043 0307 	orr.w	r3, r3, #7
 800984c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	609a      	str	r2, [r3, #8]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800987a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	021a      	lsls	r2, r3, #8
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	431a      	orrs	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4313      	orrs	r3, r2
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	609a      	str	r2, [r3, #8]
}
 8009894:	bf00      	nop
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f003 031f 	and.w	r3, r3, #31
 80098b2:	2201      	movs	r2, #1
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6a1a      	ldr	r2, [r3, #32]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	43db      	mvns	r3, r3
 80098c2:	401a      	ands	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a1a      	ldr	r2, [r3, #32]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f003 031f 	and.w	r3, r3, #31
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	fa01 f303 	lsl.w	r3, r1, r3
 80098d8:	431a      	orrs	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	621a      	str	r2, [r3, #32]
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d101      	bne.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009900:	2302      	movs	r3, #2
 8009902:	e05a      	b.n	80099ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a21      	ldr	r2, [pc, #132]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d022      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009950:	d01d      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a1d      	ldr	r2, [pc, #116]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d018      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d013      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00e      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d009      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a17      	ldr	r2, [pc, #92]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a15      	ldr	r2, [pc, #84]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d10c      	bne.n	80099a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4313      	orrs	r3, r2
 800999e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	40010000 	.word	0x40010000
 80099cc:	40000400 	.word	0x40000400
 80099d0:	40000800 	.word	0x40000800
 80099d4:	40000c00 	.word	0x40000c00
 80099d8:	40010400 	.word	0x40010400
 80099dc:	40014000 	.word	0x40014000
 80099e0:	40001800 	.word	0x40001800

080099e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e03d      	b.n	8009a7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e03f      	b.n	8009b42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7f8 fe4e 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2224      	movs	r2, #36	; 0x24
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f829 	bl	8009b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	695a      	ldr	r2, [r3, #20]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2220      	movs	r2, #32
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b50:	b0c0      	sub	sp, #256	; 0x100
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b68:	68d9      	ldr	r1, [r3, #12]
 8009b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	ea40 0301 	orr.w	r3, r0, r1
 8009b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b7a:	689a      	ldr	r2, [r3, #8]
 8009b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ba4:	f021 010c 	bic.w	r1, r1, #12
 8009ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bb2:	430b      	orrs	r3, r1
 8009bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc6:	6999      	ldr	r1, [r3, #24]
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	ea40 0301 	orr.w	r3, r0, r1
 8009bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b8f      	ldr	r3, [pc, #572]	; (8009e18 <UART_SetConfig+0x2cc>)
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d005      	beq.n	8009bec <UART_SetConfig+0xa0>
 8009be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4b8d      	ldr	r3, [pc, #564]	; (8009e1c <UART_SetConfig+0x2d0>)
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d104      	bne.n	8009bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bec:	f7fc fba2 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8009bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009bf4:	e003      	b.n	8009bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bf6:	f7fc fb89 	bl	800630c <HAL_RCC_GetPCLK1Freq>
 8009bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c08:	f040 810c 	bne.w	8009e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	1891      	adds	r1, r2, r2
 8009c24:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c26:	415b      	adcs	r3, r3
 8009c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c2e:	4621      	mov	r1, r4
 8009c30:	eb12 0801 	adds.w	r8, r2, r1
 8009c34:	4629      	mov	r1, r5
 8009c36:	eb43 0901 	adc.w	r9, r3, r1
 8009c3a:	f04f 0200 	mov.w	r2, #0
 8009c3e:	f04f 0300 	mov.w	r3, #0
 8009c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c4e:	4690      	mov	r8, r2
 8009c50:	4699      	mov	r9, r3
 8009c52:	4623      	mov	r3, r4
 8009c54:	eb18 0303 	adds.w	r3, r8, r3
 8009c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	eb49 0303 	adc.w	r3, r9, r3
 8009c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	18db      	adds	r3, r3, r3
 8009c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009c80:	4613      	mov	r3, r2
 8009c82:	eb42 0303 	adc.w	r3, r2, r3
 8009c86:	657b      	str	r3, [r7, #84]	; 0x54
 8009c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c90:	f7f6 fab8 	bl	8000204 <__aeabi_uldivmod>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4b61      	ldr	r3, [pc, #388]	; (8009e20 <UART_SetConfig+0x2d4>)
 8009c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c9e:	095b      	lsrs	r3, r3, #5
 8009ca0:	011c      	lsls	r4, r3, #4
 8009ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	1891      	adds	r1, r2, r2
 8009cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8009cbc:	415b      	adcs	r3, r3
 8009cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009cc4:	4641      	mov	r1, r8
 8009cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8009cca:	4649      	mov	r1, r9
 8009ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8009cd0:	f04f 0200 	mov.w	r2, #0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ce4:	4692      	mov	sl, r2
 8009ce6:	469b      	mov	fp, r3
 8009ce8:	4643      	mov	r3, r8
 8009cea:	eb1a 0303 	adds.w	r3, sl, r3
 8009cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8009cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d10:	460b      	mov	r3, r1
 8009d12:	18db      	adds	r3, r3, r3
 8009d14:	643b      	str	r3, [r7, #64]	; 0x40
 8009d16:	4613      	mov	r3, r2
 8009d18:	eb42 0303 	adc.w	r3, r2, r3
 8009d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009d26:	f7f6 fa6d 	bl	8000204 <__aeabi_uldivmod>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4b3b      	ldr	r3, [pc, #236]	; (8009e20 <UART_SetConfig+0x2d4>)
 8009d32:	fba3 2301 	umull	r2, r3, r3, r1
 8009d36:	095b      	lsrs	r3, r3, #5
 8009d38:	2264      	movs	r2, #100	; 0x64
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
 8009d3e:	1acb      	subs	r3, r1, r3
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d46:	4b36      	ldr	r3, [pc, #216]	; (8009e20 <UART_SetConfig+0x2d4>)
 8009d48:	fba3 2302 	umull	r2, r3, r3, r2
 8009d4c:	095b      	lsrs	r3, r3, #5
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d54:	441c      	add	r4, r3
 8009d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	1891      	adds	r1, r2, r2
 8009d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d70:	415b      	adcs	r3, r3
 8009d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d78:	4641      	mov	r1, r8
 8009d7a:	1851      	adds	r1, r2, r1
 8009d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8009d7e:	4649      	mov	r1, r9
 8009d80:	414b      	adcs	r3, r1
 8009d82:	637b      	str	r3, [r7, #52]	; 0x34
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009d90:	4659      	mov	r1, fp
 8009d92:	00cb      	lsls	r3, r1, #3
 8009d94:	4651      	mov	r1, sl
 8009d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d9a:	4651      	mov	r1, sl
 8009d9c:	00ca      	lsls	r2, r1, #3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	4619      	mov	r1, r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	4642      	mov	r2, r8
 8009da6:	189b      	adds	r3, r3, r2
 8009da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dac:	464b      	mov	r3, r9
 8009dae:	460a      	mov	r2, r1
 8009db0:	eb42 0303 	adc.w	r3, r2, r3
 8009db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009dcc:	460b      	mov	r3, r1
 8009dce:	18db      	adds	r3, r3, r3
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	eb42 0303 	adc.w	r3, r2, r3
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009de2:	f7f6 fa0f 	bl	8000204 <__aeabi_uldivmod>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <UART_SetConfig+0x2d4>)
 8009dec:	fba3 1302 	umull	r1, r3, r3, r2
 8009df0:	095b      	lsrs	r3, r3, #5
 8009df2:	2164      	movs	r1, #100	; 0x64
 8009df4:	fb01 f303 	mul.w	r3, r1, r3
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	3332      	adds	r3, #50	; 0x32
 8009dfe:	4a08      	ldr	r2, [pc, #32]	; (8009e20 <UART_SetConfig+0x2d4>)
 8009e00:	fba2 2303 	umull	r2, r3, r2, r3
 8009e04:	095b      	lsrs	r3, r3, #5
 8009e06:	f003 0207 	and.w	r2, r3, #7
 8009e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4422      	add	r2, r4
 8009e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e14:	e105      	b.n	800a022 <UART_SetConfig+0x4d6>
 8009e16:	bf00      	nop
 8009e18:	40011000 	.word	0x40011000
 8009e1c:	40011400 	.word	0x40011400
 8009e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009e36:	4642      	mov	r2, r8
 8009e38:	464b      	mov	r3, r9
 8009e3a:	1891      	adds	r1, r2, r2
 8009e3c:	6239      	str	r1, [r7, #32]
 8009e3e:	415b      	adcs	r3, r3
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
 8009e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e46:	4641      	mov	r1, r8
 8009e48:	1854      	adds	r4, r2, r1
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	eb43 0501 	adc.w	r5, r3, r1
 8009e50:	f04f 0200 	mov.w	r2, #0
 8009e54:	f04f 0300 	mov.w	r3, #0
 8009e58:	00eb      	lsls	r3, r5, #3
 8009e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e5e:	00e2      	lsls	r2, r4, #3
 8009e60:	4614      	mov	r4, r2
 8009e62:	461d      	mov	r5, r3
 8009e64:	4643      	mov	r3, r8
 8009e66:	18e3      	adds	r3, r4, r3
 8009e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	eb45 0303 	adc.w	r3, r5, r3
 8009e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	f04f 0300 	mov.w	r3, #0
 8009e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e92:	4629      	mov	r1, r5
 8009e94:	008b      	lsls	r3, r1, #2
 8009e96:	4621      	mov	r1, r4
 8009e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	008a      	lsls	r2, r1, #2
 8009ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ea4:	f7f6 f9ae 	bl	8000204 <__aeabi_uldivmod>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4b60      	ldr	r3, [pc, #384]	; (800a030 <UART_SetConfig+0x4e4>)
 8009eae:	fba3 2302 	umull	r2, r3, r3, r2
 8009eb2:	095b      	lsrs	r3, r3, #5
 8009eb4:	011c      	lsls	r4, r3, #4
 8009eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ec8:	4642      	mov	r2, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	1891      	adds	r1, r2, r2
 8009ece:	61b9      	str	r1, [r7, #24]
 8009ed0:	415b      	adcs	r3, r3
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ed8:	4641      	mov	r1, r8
 8009eda:	1851      	adds	r1, r2, r1
 8009edc:	6139      	str	r1, [r7, #16]
 8009ede:	4649      	mov	r1, r9
 8009ee0:	414b      	adcs	r3, r1
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	f04f 0300 	mov.w	r3, #0
 8009eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	00cb      	lsls	r3, r1, #3
 8009ef4:	4651      	mov	r1, sl
 8009ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009efa:	4651      	mov	r1, sl
 8009efc:	00ca      	lsls	r2, r1, #3
 8009efe:	4610      	mov	r0, r2
 8009f00:	4619      	mov	r1, r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	4642      	mov	r2, r8
 8009f06:	189b      	adds	r3, r3, r2
 8009f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f0c:	464b      	mov	r3, r9
 8009f0e:	460a      	mov	r2, r1
 8009f10:	eb42 0303 	adc.w	r3, r2, r3
 8009f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	f04f 0300 	mov.w	r3, #0
 8009f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009f30:	4649      	mov	r1, r9
 8009f32:	008b      	lsls	r3, r1, #2
 8009f34:	4641      	mov	r1, r8
 8009f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f3a:	4641      	mov	r1, r8
 8009f3c:	008a      	lsls	r2, r1, #2
 8009f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f42:	f7f6 f95f 	bl	8000204 <__aeabi_uldivmod>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4b39      	ldr	r3, [pc, #228]	; (800a030 <UART_SetConfig+0x4e4>)
 8009f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f50:	095b      	lsrs	r3, r3, #5
 8009f52:	2164      	movs	r1, #100	; 0x64
 8009f54:	fb01 f303 	mul.w	r3, r1, r3
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	3332      	adds	r3, #50	; 0x32
 8009f5e:	4a34      	ldr	r2, [pc, #208]	; (800a030 <UART_SetConfig+0x4e4>)
 8009f60:	fba2 2303 	umull	r2, r3, r2, r3
 8009f64:	095b      	lsrs	r3, r3, #5
 8009f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f6a:	441c      	add	r4, r3
 8009f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f70:	2200      	movs	r2, #0
 8009f72:	673b      	str	r3, [r7, #112]	; 0x70
 8009f74:	677a      	str	r2, [r7, #116]	; 0x74
 8009f76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	1891      	adds	r1, r2, r2
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	415b      	adcs	r3, r3
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	1851      	adds	r1, r2, r1
 8009f8e:	6039      	str	r1, [r7, #0]
 8009f90:	4649      	mov	r1, r9
 8009f92:	414b      	adcs	r3, r1
 8009f94:	607b      	str	r3, [r7, #4]
 8009f96:	f04f 0200 	mov.w	r2, #0
 8009f9a:	f04f 0300 	mov.w	r3, #0
 8009f9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	00cb      	lsls	r3, r1, #3
 8009fa6:	4651      	mov	r1, sl
 8009fa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fac:	4651      	mov	r1, sl
 8009fae:	00ca      	lsls	r2, r1, #3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	189b      	adds	r3, r3, r2
 8009fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	eb42 0303 	adc.w	r3, r2, r3
 8009fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd0:	667a      	str	r2, [r7, #100]	; 0x64
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009fde:	4649      	mov	r1, r9
 8009fe0:	008b      	lsls	r3, r1, #2
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fe8:	4641      	mov	r1, r8
 8009fea:	008a      	lsls	r2, r1, #2
 8009fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ff0:	f7f6 f908 	bl	8000204 <__aeabi_uldivmod>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <UART_SetConfig+0x4e4>)
 8009ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	2164      	movs	r1, #100	; 0x64
 800a002:	fb01 f303 	mul.w	r3, r1, r3
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	011b      	lsls	r3, r3, #4
 800a00a:	3332      	adds	r3, #50	; 0x32
 800a00c:	4a08      	ldr	r2, [pc, #32]	; (800a030 <UART_SetConfig+0x4e4>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	095b      	lsrs	r3, r3, #5
 800a014:	f003 020f 	and.w	r2, r3, #15
 800a018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4422      	add	r2, r4
 800a020:	609a      	str	r2, [r3, #8]
}
 800a022:	bf00      	nop
 800a024:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a028:	46bd      	mov	sp, r7
 800a02a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a02e:	bf00      	nop
 800a030:	51eb851f 	.word	0x51eb851f

0800a034 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a034:	b084      	sub	sp, #16
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	f107 001c 	add.w	r0, r7, #28
 800a042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a04a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a04c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a04e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a052:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a056:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a05a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a05e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a06e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	b004      	add	sp, #16
 800a088:	4770      	bx	lr

0800a08a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a0c6:	b480      	push	{r7}
 800a0c8:	b083      	sub	sp, #12
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0303 	and.w	r3, r3, #3
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a11c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a122:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a128:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a138:	f023 030f 	bic.w	r3, r3, #15
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	431a      	orrs	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	b2db      	uxtb	r3, r3
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3314      	adds	r3, #20
 800a17a:	461a      	mov	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	4413      	add	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
}  
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b088      	sub	sp, #32
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1a4:	2340      	movs	r3, #64	; 0x40
 800a1a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1b2:	f107 0308 	add.w	r3, r7, #8
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff ffa0 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a1be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1c2:	2110      	movs	r1, #16
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f94f 	bl	800a468 <SDMMC_GetCmdResp1>
 800a1ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1cc:	69fb      	ldr	r3, [r7, #28]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1e4:	230c      	movs	r3, #12
 800a1e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1e8:	2340      	movs	r3, #64	; 0x40
 800a1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff ff7e 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a202:	4a05      	ldr	r2, [pc, #20]	; (800a218 <SDMMC_CmdStopTransfer+0x40>)
 800a204:	210c      	movs	r1, #12
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f92e 	bl	800a468 <SDMMC_GetCmdResp1>
 800a20c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a20e:	69fb      	ldr	r3, [r7, #28]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	05f5e100 	.word	0x05f5e100

0800a21c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08a      	sub	sp, #40	; 0x28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a22c:	2307      	movs	r3, #7
 800a22e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a23c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a23e:	f107 0310 	add.w	r3, r7, #16
 800a242:	4619      	mov	r1, r3
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff ff5a 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a24e:	2107      	movs	r1, #7
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f909 	bl	800a468 <SDMMC_GetCmdResp1>
 800a256:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3728      	adds	r7, #40	; 0x28
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b088      	sub	sp, #32
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a27e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a280:	f107 0308 	add.w	r3, r7, #8
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7ff ff39 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fb23 	bl	800a8d8 <SDMMC_GetCmdError>
 800a292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a294:	69fb      	ldr	r3, [r7, #28]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3720      	adds	r7, #32
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b088      	sub	sp, #32
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a2a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a2aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff1a 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fab6 	bl	800a83c <SDMMC_GetCmdResp7>
 800a2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a2ea:	2337      	movs	r3, #55	; 0x37
 800a2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2ee:	2340      	movs	r3, #64	; 0x40
 800a2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2fc:	f107 0308 	add.w	r3, r7, #8
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff fefb 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a308:	f241 3288 	movw	r2, #5000	; 0x1388
 800a30c:	2137      	movs	r1, #55	; 0x37
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f8aa 	bl	800a468 <SDMMC_GetCmdResp1>
 800a314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a316:	69fb      	ldr	r3, [r7, #28]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3720      	adds	r7, #32
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a336:	2329      	movs	r3, #41	; 0x29
 800a338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a346:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a348:	f107 0308 	add.w	r3, r7, #8
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fed5 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f9bd 	bl	800a6d4 <SDMMC_GetCmdResp3>
 800a35a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a35c:	69fb      	ldr	r3, [r7, #28]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3720      	adds	r7, #32
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b088      	sub	sp, #32
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a372:	2302      	movs	r3, #2
 800a374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a376:	23c0      	movs	r3, #192	; 0xc0
 800a378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a37a:	2300      	movs	r3, #0
 800a37c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a37e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a382:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a384:	f107 0308 	add.w	r3, r7, #8
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff feb7 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f957 	bl	800a644 <SDMMC_GetCmdResp2>
 800a396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a398:	69fb      	ldr	r3, [r7, #28]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3720      	adds	r7, #32
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b088      	sub	sp, #32
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a3b0:	2309      	movs	r3, #9
 800a3b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a3b4:	23c0      	movs	r3, #192	; 0xc0
 800a3b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3c2:	f107 0308 	add.w	r3, r7, #8
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff fe98 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f938 	bl	800a644 <SDMMC_GetCmdResp2>
 800a3d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3720      	adds	r7, #32
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b088      	sub	sp, #32
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a400:	f107 0308 	add.w	r3, r7, #8
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fe79 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	2103      	movs	r1, #3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f99d 	bl	800a750 <SDMMC_GetCmdResp6>
 800a416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a418:	69fb      	ldr	r3, [r7, #28]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b088      	sub	sp, #32
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a430:	230d      	movs	r3, #13
 800a432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a434:	2340      	movs	r3, #64	; 0x40
 800a436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a440:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff fe58 	bl	800a0fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a44e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a452:	210d      	movs	r1, #13
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f807 	bl	800a468 <SDMMC_GetCmdResp1>
 800a45a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a45c:	69fb      	ldr	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	460b      	mov	r3, r1
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a476:	4b70      	ldr	r3, [pc, #448]	; (800a638 <SDMMC_GetCmdResp1+0x1d0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a70      	ldr	r2, [pc, #448]	; (800a63c <SDMMC_GetCmdResp1+0x1d4>)
 800a47c:	fba2 2303 	umull	r2, r3, r2, r3
 800a480:	0a5a      	lsrs	r2, r3, #9
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	fb02 f303 	mul.w	r3, r2, r3
 800a488:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	1e5a      	subs	r2, r3, #1
 800a48e:	61fa      	str	r2, [r7, #28]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a498:	e0c9      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0ef      	beq.n	800a48a <SDMMC_GetCmdResp1+0x22>
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1ea      	bne.n	800a48a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4c6:	2304      	movs	r3, #4
 800a4c8:	e0b1      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d004      	beq.n	800a4e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e0a6      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	22c5      	movs	r2, #197	; 0xc5
 800a4e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7ff fe33 	bl	800a152 <SDIO_GetCommandResponse>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	7afb      	ldrb	r3, [r7, #11]
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d001      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e099      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff fe35 	bl	800a16c <SDIO_GetResponse>
 800a502:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	4b4e      	ldr	r3, [pc, #312]	; (800a640 <SDMMC_GetCmdResp1+0x1d8>)
 800a508:	4013      	ands	r3, r2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a50e:	2300      	movs	r3, #0
 800a510:	e08d      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b00      	cmp	r3, #0
 800a516:	da02      	bge.n	800a51e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a51c:	e087      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a528:	2340      	movs	r3, #64	; 0x40
 800a52a:	e080      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a536:	2380      	movs	r3, #128	; 0x80
 800a538:	e079      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a544:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a548:	e071      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a554:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a558:	e069      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a568:	e061      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a574:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a578:	e059      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a588:	e051      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a598:	e049      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a5a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5a8:	e041      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a5b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b8:	e039      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a5c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5c8:	e031      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a5d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a5d8:	e029      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a5e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a5e8:	e021      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a5f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a5f8:	e019      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a608:	e011      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a618:	e009      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f003 0308 	and.w	r3, r3, #8
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a624:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a628:	e001      	b.n	800a62e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a62a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3720      	adds	r7, #32
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20000000 	.word	0x20000000
 800a63c:	10624dd3 	.word	0x10624dd3
 800a640:	fdffe008 	.word	0xfdffe008

0800a644 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a64c:	4b1f      	ldr	r3, [pc, #124]	; (800a6cc <SDMMC_GetCmdResp2+0x88>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <SDMMC_GetCmdResp2+0x8c>)
 800a652:	fba2 2303 	umull	r2, r3, r2, r3
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	f241 3288 	movw	r2, #5000	; 0x1388
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1e5a      	subs	r2, r3, #1
 800a666:	60fa      	str	r2, [r7, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a66c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a670:	e026      	b.n	800a6c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a676:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0ef      	beq.n	800a662 <SDMMC_GetCmdResp2+0x1e>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1ea      	bne.n	800a662 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2204      	movs	r2, #4
 800a69c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a69e:	2304      	movs	r3, #4
 800a6a0:	e00e      	b.n	800a6c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e003      	b.n	800a6c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	22c5      	movs	r2, #197	; 0xc5
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20000000 	.word	0x20000000
 800a6d0:	10624dd3 	.word	0x10624dd3

0800a6d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6dc:	4b1a      	ldr	r3, [pc, #104]	; (800a748 <SDMMC_GetCmdResp3+0x74>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a1a      	ldr	r2, [pc, #104]	; (800a74c <SDMMC_GetCmdResp3+0x78>)
 800a6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e6:	0a5b      	lsrs	r3, r3, #9
 800a6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ec:	fb02 f303 	mul.w	r3, r2, r3
 800a6f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	60fa      	str	r2, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a700:	e01b      	b.n	800a73a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a706:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0ef      	beq.n	800a6f2 <SDMMC_GetCmdResp3+0x1e>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1ea      	bne.n	800a6f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d004      	beq.n	800a732 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2204      	movs	r2, #4
 800a72c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a72e:	2304      	movs	r3, #4
 800a730:	e003      	b.n	800a73a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	22c5      	movs	r2, #197	; 0xc5
 800a736:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	20000000 	.word	0x20000000
 800a74c:	10624dd3 	.word	0x10624dd3

0800a750 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	460b      	mov	r3, r1
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a75e:	4b35      	ldr	r3, [pc, #212]	; (800a834 <SDMMC_GetCmdResp6+0xe4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a35      	ldr	r2, [pc, #212]	; (800a838 <SDMMC_GetCmdResp6+0xe8>)
 800a764:	fba2 2303 	umull	r2, r3, r2, r3
 800a768:	0a5b      	lsrs	r3, r3, #9
 800a76a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a76e:	fb02 f303 	mul.w	r3, r2, r3
 800a772:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	1e5a      	subs	r2, r3, #1
 800a778:	61fa      	str	r2, [r7, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a77e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a782:	e052      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a788:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0ef      	beq.n	800a774 <SDMMC_GetCmdResp6+0x24>
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1ea      	bne.n	800a774 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7b0:	2304      	movs	r3, #4
 800a7b2:	e03a      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e02f      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f7ff fcc1 	bl	800a152 <SDIO_GetCommandResponse>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d001      	beq.n	800a7de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e025      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	22c5      	movs	r2, #197	; 0xc5
 800a7e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff fcc0 	bl	800a16c <SDIO_GetResponse>
 800a7ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d106      	bne.n	800a806 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	0c1b      	lsrs	r3, r3, #16
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a802:	2300      	movs	r3, #0
 800a804:	e011      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a814:	e009      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a824:	e001      	b.n	800a82a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3720      	adds	r7, #32
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000000 	.word	0x20000000
 800a838:	10624dd3 	.word	0x10624dd3

0800a83c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a844:	4b22      	ldr	r3, [pc, #136]	; (800a8d0 <SDMMC_GetCmdResp7+0x94>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a22      	ldr	r2, [pc, #136]	; (800a8d4 <SDMMC_GetCmdResp7+0x98>)
 800a84a:	fba2 2303 	umull	r2, r3, r2, r3
 800a84e:	0a5b      	lsrs	r3, r3, #9
 800a850:	f241 3288 	movw	r2, #5000	; 0x1388
 800a854:	fb02 f303 	mul.w	r3, r2, r3
 800a858:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	1e5a      	subs	r2, r3, #1
 800a85e:	60fa      	str	r2, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d102      	bne.n	800a86a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a868:	e02c      	b.n	800a8c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0ef      	beq.n	800a85a <SDMMC_GetCmdResp7+0x1e>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1ea      	bne.n	800a85a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d004      	beq.n	800a89a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2204      	movs	r2, #4
 800a894:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a896:	2304      	movs	r3, #4
 800a898:	e014      	b.n	800a8c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e009      	b.n	800a8c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2240      	movs	r2, #64	; 0x40
 800a8c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a8c2:	2300      	movs	r3, #0
  
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20000000 	.word	0x20000000
 800a8d4:	10624dd3 	.word	0x10624dd3

0800a8d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <SDMMC_GetCmdError+0x50>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a11      	ldr	r2, [pc, #68]	; (800a92c <SDMMC_GetCmdError+0x54>)
 800a8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ea:	0a5b      	lsrs	r3, r3, #9
 800a8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f0:	fb02 f303 	mul.w	r3, r2, r3
 800a8f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	1e5a      	subs	r2, r3, #1
 800a8fa:	60fa      	str	r2, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a904:	e009      	b.n	800a91a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f1      	beq.n	800a8f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	22c5      	movs	r2, #197	; 0xc5
 800a916:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20000000 	.word	0x20000000
 800a92c:	10624dd3 	.word	0x10624dd3

0800a930 <_ZdlPvj>:
 800a930:	f000 b804 	b.w	800a93c <_ZdlPv>

0800a934 <_ZdaPv>:
 800a934:	f000 b802 	b.w	800a93c <_ZdlPv>

0800a938 <_Znaj>:
 800a938:	f000 b802 	b.w	800a940 <_Znwj>

0800a93c <_ZdlPv>:
 800a93c:	f000 b854 	b.w	800a9e8 <free>

0800a940 <_Znwj>:
 800a940:	2801      	cmp	r0, #1
 800a942:	bf38      	it	cc
 800a944:	2001      	movcc	r0, #1
 800a946:	b510      	push	{r4, lr}
 800a948:	4604      	mov	r4, r0
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 f844 	bl	800a9d8 <malloc>
 800a950:	b930      	cbnz	r0, 800a960 <_Znwj+0x20>
 800a952:	f000 f807 	bl	800a964 <_ZSt15get_new_handlerv>
 800a956:	b908      	cbnz	r0, 800a95c <_Znwj+0x1c>
 800a958:	f000 f80c 	bl	800a974 <abort>
 800a95c:	4780      	blx	r0
 800a95e:	e7f4      	b.n	800a94a <_Znwj+0xa>
 800a960:	bd10      	pop	{r4, pc}
	...

0800a964 <_ZSt15get_new_handlerv>:
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <_ZSt15get_new_handlerv+0xc>)
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	f3bf 8f5b 	dmb	ish
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	200006e8 	.word	0x200006e8

0800a974 <abort>:
 800a974:	b508      	push	{r3, lr}
 800a976:	2006      	movs	r0, #6
 800a978:	f000 f95e 	bl	800ac38 <raise>
 800a97c:	2001      	movs	r0, #1
 800a97e:	f7f8 f8ad 	bl	8002adc <_exit>
	...

0800a984 <__errno>:
 800a984:	4b01      	ldr	r3, [pc, #4]	; (800a98c <__errno+0x8>)
 800a986:	6818      	ldr	r0, [r3, #0]
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	2000000c 	.word	0x2000000c

0800a990 <__libc_init_array>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	4d0d      	ldr	r5, [pc, #52]	; (800a9c8 <__libc_init_array+0x38>)
 800a994:	4c0d      	ldr	r4, [pc, #52]	; (800a9cc <__libc_init_array+0x3c>)
 800a996:	1b64      	subs	r4, r4, r5
 800a998:	10a4      	asrs	r4, r4, #2
 800a99a:	2600      	movs	r6, #0
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	d109      	bne.n	800a9b4 <__libc_init_array+0x24>
 800a9a0:	4d0b      	ldr	r5, [pc, #44]	; (800a9d0 <__libc_init_array+0x40>)
 800a9a2:	4c0c      	ldr	r4, [pc, #48]	; (800a9d4 <__libc_init_array+0x44>)
 800a9a4:	f000 f972 	bl	800ac8c <_init>
 800a9a8:	1b64      	subs	r4, r4, r5
 800a9aa:	10a4      	asrs	r4, r4, #2
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	42a6      	cmp	r6, r4
 800a9b0:	d105      	bne.n	800a9be <__libc_init_array+0x2e>
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
 800a9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b8:	4798      	blx	r3
 800a9ba:	3601      	adds	r6, #1
 800a9bc:	e7ee      	b.n	800a99c <__libc_init_array+0xc>
 800a9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c2:	4798      	blx	r3
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	e7f2      	b.n	800a9ae <__libc_init_array+0x1e>
 800a9c8:	0800ad0c 	.word	0x0800ad0c
 800a9cc:	0800ad0c 	.word	0x0800ad0c
 800a9d0:	0800ad0c 	.word	0x0800ad0c
 800a9d4:	0800ad14 	.word	0x0800ad14

0800a9d8 <malloc>:
 800a9d8:	4b02      	ldr	r3, [pc, #8]	; (800a9e4 <malloc+0xc>)
 800a9da:	4601      	mov	r1, r0
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	f000 b87f 	b.w	800aae0 <_malloc_r>
 800a9e2:	bf00      	nop
 800a9e4:	2000000c 	.word	0x2000000c

0800a9e8 <free>:
 800a9e8:	4b02      	ldr	r3, [pc, #8]	; (800a9f4 <free+0xc>)
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f000 b80b 	b.w	800aa08 <_free_r>
 800a9f2:	bf00      	nop
 800a9f4:	2000000c 	.word	0x2000000c

0800a9f8 <memset>:
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d100      	bne.n	800aa02 <memset+0xa>
 800aa00:	4770      	bx	lr
 800aa02:	f803 1b01 	strb.w	r1, [r3], #1
 800aa06:	e7f9      	b.n	800a9fc <memset+0x4>

0800aa08 <_free_r>:
 800aa08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	d044      	beq.n	800aa98 <_free_r+0x90>
 800aa0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa12:	9001      	str	r0, [sp, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f1a1 0404 	sub.w	r4, r1, #4
 800aa1a:	bfb8      	it	lt
 800aa1c:	18e4      	addlt	r4, r4, r3
 800aa1e:	f000 f927 	bl	800ac70 <__malloc_lock>
 800aa22:	4a1e      	ldr	r2, [pc, #120]	; (800aa9c <_free_r+0x94>)
 800aa24:	9801      	ldr	r0, [sp, #4]
 800aa26:	6813      	ldr	r3, [r2, #0]
 800aa28:	b933      	cbnz	r3, 800aa38 <_free_r+0x30>
 800aa2a:	6063      	str	r3, [r4, #4]
 800aa2c:	6014      	str	r4, [r2, #0]
 800aa2e:	b003      	add	sp, #12
 800aa30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa34:	f000 b922 	b.w	800ac7c <__malloc_unlock>
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	d908      	bls.n	800aa4e <_free_r+0x46>
 800aa3c:	6825      	ldr	r5, [r4, #0]
 800aa3e:	1961      	adds	r1, r4, r5
 800aa40:	428b      	cmp	r3, r1
 800aa42:	bf01      	itttt	eq
 800aa44:	6819      	ldreq	r1, [r3, #0]
 800aa46:	685b      	ldreq	r3, [r3, #4]
 800aa48:	1949      	addeq	r1, r1, r5
 800aa4a:	6021      	streq	r1, [r4, #0]
 800aa4c:	e7ed      	b.n	800aa2a <_free_r+0x22>
 800aa4e:	461a      	mov	r2, r3
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	b10b      	cbz	r3, 800aa58 <_free_r+0x50>
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	d9fa      	bls.n	800aa4e <_free_r+0x46>
 800aa58:	6811      	ldr	r1, [r2, #0]
 800aa5a:	1855      	adds	r5, r2, r1
 800aa5c:	42a5      	cmp	r5, r4
 800aa5e:	d10b      	bne.n	800aa78 <_free_r+0x70>
 800aa60:	6824      	ldr	r4, [r4, #0]
 800aa62:	4421      	add	r1, r4
 800aa64:	1854      	adds	r4, r2, r1
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	6011      	str	r1, [r2, #0]
 800aa6a:	d1e0      	bne.n	800aa2e <_free_r+0x26>
 800aa6c:	681c      	ldr	r4, [r3, #0]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	6053      	str	r3, [r2, #4]
 800aa72:	4421      	add	r1, r4
 800aa74:	6011      	str	r1, [r2, #0]
 800aa76:	e7da      	b.n	800aa2e <_free_r+0x26>
 800aa78:	d902      	bls.n	800aa80 <_free_r+0x78>
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	e7d6      	b.n	800aa2e <_free_r+0x26>
 800aa80:	6825      	ldr	r5, [r4, #0]
 800aa82:	1961      	adds	r1, r4, r5
 800aa84:	428b      	cmp	r3, r1
 800aa86:	bf04      	itt	eq
 800aa88:	6819      	ldreq	r1, [r3, #0]
 800aa8a:	685b      	ldreq	r3, [r3, #4]
 800aa8c:	6063      	str	r3, [r4, #4]
 800aa8e:	bf04      	itt	eq
 800aa90:	1949      	addeq	r1, r1, r5
 800aa92:	6021      	streq	r1, [r4, #0]
 800aa94:	6054      	str	r4, [r2, #4]
 800aa96:	e7ca      	b.n	800aa2e <_free_r+0x26>
 800aa98:	b003      	add	sp, #12
 800aa9a:	bd30      	pop	{r4, r5, pc}
 800aa9c:	200006ec 	.word	0x200006ec

0800aaa0 <sbrk_aligned>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	4e0e      	ldr	r6, [pc, #56]	; (800aadc <sbrk_aligned+0x3c>)
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	6831      	ldr	r1, [r6, #0]
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	b911      	cbnz	r1, 800aab2 <sbrk_aligned+0x12>
 800aaac:	f000 f88c 	bl	800abc8 <_sbrk_r>
 800aab0:	6030      	str	r0, [r6, #0]
 800aab2:	4621      	mov	r1, r4
 800aab4:	4628      	mov	r0, r5
 800aab6:	f000 f887 	bl	800abc8 <_sbrk_r>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	d00a      	beq.n	800aad4 <sbrk_aligned+0x34>
 800aabe:	1cc4      	adds	r4, r0, #3
 800aac0:	f024 0403 	bic.w	r4, r4, #3
 800aac4:	42a0      	cmp	r0, r4
 800aac6:	d007      	beq.n	800aad8 <sbrk_aligned+0x38>
 800aac8:	1a21      	subs	r1, r4, r0
 800aaca:	4628      	mov	r0, r5
 800aacc:	f000 f87c 	bl	800abc8 <_sbrk_r>
 800aad0:	3001      	adds	r0, #1
 800aad2:	d101      	bne.n	800aad8 <sbrk_aligned+0x38>
 800aad4:	f04f 34ff 	mov.w	r4, #4294967295
 800aad8:	4620      	mov	r0, r4
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	200006f0 	.word	0x200006f0

0800aae0 <_malloc_r>:
 800aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	1ccd      	adds	r5, r1, #3
 800aae6:	f025 0503 	bic.w	r5, r5, #3
 800aaea:	3508      	adds	r5, #8
 800aaec:	2d0c      	cmp	r5, #12
 800aaee:	bf38      	it	cc
 800aaf0:	250c      	movcc	r5, #12
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	4607      	mov	r7, r0
 800aaf6:	db01      	blt.n	800aafc <_malloc_r+0x1c>
 800aaf8:	42a9      	cmp	r1, r5
 800aafa:	d905      	bls.n	800ab08 <_malloc_r+0x28>
 800aafc:	230c      	movs	r3, #12
 800aafe:	603b      	str	r3, [r7, #0]
 800ab00:	2600      	movs	r6, #0
 800ab02:	4630      	mov	r0, r6
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab08:	4e2e      	ldr	r6, [pc, #184]	; (800abc4 <_malloc_r+0xe4>)
 800ab0a:	f000 f8b1 	bl	800ac70 <__malloc_lock>
 800ab0e:	6833      	ldr	r3, [r6, #0]
 800ab10:	461c      	mov	r4, r3
 800ab12:	bb34      	cbnz	r4, 800ab62 <_malloc_r+0x82>
 800ab14:	4629      	mov	r1, r5
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7ff ffc2 	bl	800aaa0 <sbrk_aligned>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	4604      	mov	r4, r0
 800ab20:	d14d      	bne.n	800abbe <_malloc_r+0xde>
 800ab22:	6834      	ldr	r4, [r6, #0]
 800ab24:	4626      	mov	r6, r4
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	d140      	bne.n	800abac <_malloc_r+0xcc>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4638      	mov	r0, r7
 800ab30:	eb04 0803 	add.w	r8, r4, r3
 800ab34:	f000 f848 	bl	800abc8 <_sbrk_r>
 800ab38:	4580      	cmp	r8, r0
 800ab3a:	d13a      	bne.n	800abb2 <_malloc_r+0xd2>
 800ab3c:	6821      	ldr	r1, [r4, #0]
 800ab3e:	3503      	adds	r5, #3
 800ab40:	1a6d      	subs	r5, r5, r1
 800ab42:	f025 0503 	bic.w	r5, r5, #3
 800ab46:	3508      	adds	r5, #8
 800ab48:	2d0c      	cmp	r5, #12
 800ab4a:	bf38      	it	cc
 800ab4c:	250c      	movcc	r5, #12
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ffa5 	bl	800aaa0 <sbrk_aligned>
 800ab56:	3001      	adds	r0, #1
 800ab58:	d02b      	beq.n	800abb2 <_malloc_r+0xd2>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	442b      	add	r3, r5
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	e00e      	b.n	800ab80 <_malloc_r+0xa0>
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	1b52      	subs	r2, r2, r5
 800ab66:	d41e      	bmi.n	800aba6 <_malloc_r+0xc6>
 800ab68:	2a0b      	cmp	r2, #11
 800ab6a:	d916      	bls.n	800ab9a <_malloc_r+0xba>
 800ab6c:	1961      	adds	r1, r4, r5
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	6025      	str	r5, [r4, #0]
 800ab72:	bf18      	it	ne
 800ab74:	6059      	strne	r1, [r3, #4]
 800ab76:	6863      	ldr	r3, [r4, #4]
 800ab78:	bf08      	it	eq
 800ab7a:	6031      	streq	r1, [r6, #0]
 800ab7c:	5162      	str	r2, [r4, r5]
 800ab7e:	604b      	str	r3, [r1, #4]
 800ab80:	4638      	mov	r0, r7
 800ab82:	f104 060b 	add.w	r6, r4, #11
 800ab86:	f000 f879 	bl	800ac7c <__malloc_unlock>
 800ab8a:	f026 0607 	bic.w	r6, r6, #7
 800ab8e:	1d23      	adds	r3, r4, #4
 800ab90:	1af2      	subs	r2, r6, r3
 800ab92:	d0b6      	beq.n	800ab02 <_malloc_r+0x22>
 800ab94:	1b9b      	subs	r3, r3, r6
 800ab96:	50a3      	str	r3, [r4, r2]
 800ab98:	e7b3      	b.n	800ab02 <_malloc_r+0x22>
 800ab9a:	6862      	ldr	r2, [r4, #4]
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	bf0c      	ite	eq
 800aba0:	6032      	streq	r2, [r6, #0]
 800aba2:	605a      	strne	r2, [r3, #4]
 800aba4:	e7ec      	b.n	800ab80 <_malloc_r+0xa0>
 800aba6:	4623      	mov	r3, r4
 800aba8:	6864      	ldr	r4, [r4, #4]
 800abaa:	e7b2      	b.n	800ab12 <_malloc_r+0x32>
 800abac:	4634      	mov	r4, r6
 800abae:	6876      	ldr	r6, [r6, #4]
 800abb0:	e7b9      	b.n	800ab26 <_malloc_r+0x46>
 800abb2:	230c      	movs	r3, #12
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	4638      	mov	r0, r7
 800abb8:	f000 f860 	bl	800ac7c <__malloc_unlock>
 800abbc:	e7a1      	b.n	800ab02 <_malloc_r+0x22>
 800abbe:	6025      	str	r5, [r4, #0]
 800abc0:	e7de      	b.n	800ab80 <_malloc_r+0xa0>
 800abc2:	bf00      	nop
 800abc4:	200006ec 	.word	0x200006ec

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f7 ff8c 	bl	8002af0 <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	200006f4 	.word	0x200006f4

0800abe8 <_raise_r>:
 800abe8:	291f      	cmp	r1, #31
 800abea:	b538      	push	{r3, r4, r5, lr}
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	d904      	bls.n	800abfc <_raise_r+0x14>
 800abf2:	2316      	movs	r3, #22
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abfe:	b112      	cbz	r2, 800ac06 <_raise_r+0x1e>
 800ac00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac04:	b94b      	cbnz	r3, 800ac1a <_raise_r+0x32>
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 f830 	bl	800ac6c <_getpid_r>
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4601      	mov	r1, r0
 800ac10:	4620      	mov	r0, r4
 800ac12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac16:	f000 b817 	b.w	800ac48 <_kill_r>
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d00a      	beq.n	800ac34 <_raise_r+0x4c>
 800ac1e:	1c59      	adds	r1, r3, #1
 800ac20:	d103      	bne.n	800ac2a <_raise_r+0x42>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	2001      	movs	r0, #1
 800ac28:	e7e7      	b.n	800abfa <_raise_r+0x12>
 800ac2a:	2400      	movs	r4, #0
 800ac2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac30:	4628      	mov	r0, r5
 800ac32:	4798      	blx	r3
 800ac34:	2000      	movs	r0, #0
 800ac36:	e7e0      	b.n	800abfa <_raise_r+0x12>

0800ac38 <raise>:
 800ac38:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <raise+0xc>)
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f7ff bfd3 	b.w	800abe8 <_raise_r>
 800ac42:	bf00      	nop
 800ac44:	2000000c 	.word	0x2000000c

0800ac48 <_kill_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_kill_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f7 ff31 	bl	8002abc <_kill>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_kill_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_kill_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	200006f4 	.word	0x200006f4

0800ac6c <_getpid_r>:
 800ac6c:	f7f7 bf1e 	b.w	8002aac <_getpid>

0800ac70 <__malloc_lock>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__malloc_lock+0x8>)
 800ac72:	f000 b809 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ac76:	bf00      	nop
 800ac78:	200006f8 	.word	0x200006f8

0800ac7c <__malloc_unlock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_unlock+0x8>)
 800ac7e:	f000 b804 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ac82:	bf00      	nop
 800ac84:	200006f8 	.word	0x200006f8

0800ac88 <__retarget_lock_acquire_recursive>:
 800ac88:	4770      	bx	lr

0800ac8a <__retarget_lock_release_recursive>:
 800ac8a:	4770      	bx	lr

0800ac8c <_init>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	bf00      	nop
 800ac90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac92:	bc08      	pop	{r3}
 800ac94:	469e      	mov	lr, r3
 800ac96:	4770      	bx	lr

0800ac98 <_fini>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr
